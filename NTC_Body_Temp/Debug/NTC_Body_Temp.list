
NTC_Body_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009c18  08009c18  00019c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a098  0800a098  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a098  0800a098  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a098  0800a098  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001dc  0800a27c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800a27c  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d815  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002577  00000000  00000000  0002da19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00030b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b70e  00000000  00000000  000315d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d30b  00000000  00000000  0004cce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000953ea  00000000  00000000  00059ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef3db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  000ef458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009c00 	.word	0x08009c00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009c00 	.word	0x08009c00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff0f 	bl	800124c <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe67 	bl	800110c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff01 	bl	800124c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fef7 	bl	800124c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe89 	bl	8001184 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe7f 	bl	8001184 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f7ff ffef 	bl	8000480 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f001 fd0d 	bl	8001ec8 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 f9a2 	bl	8001800 <__aeabi_dsub>
 80004bc:	f001 fd04 	bl	8001ec8 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_dadd>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	464f      	mov	r7, r9
 80004d4:	4646      	mov	r6, r8
 80004d6:	46d6      	mov	lr, sl
 80004d8:	000c      	movs	r4, r1
 80004da:	0309      	lsls	r1, r1, #12
 80004dc:	b5c0      	push	{r6, r7, lr}
 80004de:	0a49      	lsrs	r1, r1, #9
 80004e0:	0f47      	lsrs	r7, r0, #29
 80004e2:	005e      	lsls	r6, r3, #1
 80004e4:	4339      	orrs	r1, r7
 80004e6:	031f      	lsls	r7, r3, #12
 80004e8:	0fdb      	lsrs	r3, r3, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0065      	lsls	r5, r4, #1
 80004ee:	0a7b      	lsrs	r3, r7, #9
 80004f0:	0f57      	lsrs	r7, r2, #29
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0d6d      	lsrs	r5, r5, #21
 80004f6:	0fe4      	lsrs	r4, r4, #31
 80004f8:	0d76      	lsrs	r6, r6, #21
 80004fa:	46a1      	mov	r9, r4
 80004fc:	00c0      	lsls	r0, r0, #3
 80004fe:	46b8      	mov	r8, r7
 8000500:	00d2      	lsls	r2, r2, #3
 8000502:	1bab      	subs	r3, r5, r6
 8000504:	4564      	cmp	r4, ip
 8000506:	d07b      	beq.n	8000600 <__aeabi_dadd+0x130>
 8000508:	2b00      	cmp	r3, #0
 800050a:	dd5f      	ble.n	80005cc <__aeabi_dadd+0xfc>
 800050c:	2e00      	cmp	r6, #0
 800050e:	d000      	beq.n	8000512 <__aeabi_dadd+0x42>
 8000510:	e0a4      	b.n	800065c <__aeabi_dadd+0x18c>
 8000512:	003e      	movs	r6, r7
 8000514:	4316      	orrs	r6, r2
 8000516:	d100      	bne.n	800051a <__aeabi_dadd+0x4a>
 8000518:	e112      	b.n	8000740 <__aeabi_dadd+0x270>
 800051a:	1e5e      	subs	r6, r3, #1
 800051c:	2e00      	cmp	r6, #0
 800051e:	d000      	beq.n	8000522 <__aeabi_dadd+0x52>
 8000520:	e19e      	b.n	8000860 <__aeabi_dadd+0x390>
 8000522:	1a87      	subs	r7, r0, r2
 8000524:	4643      	mov	r3, r8
 8000526:	42b8      	cmp	r0, r7
 8000528:	4180      	sbcs	r0, r0
 800052a:	2501      	movs	r5, #1
 800052c:	1ac9      	subs	r1, r1, r3
 800052e:	4240      	negs	r0, r0
 8000530:	1a09      	subs	r1, r1, r0
 8000532:	020b      	lsls	r3, r1, #8
 8000534:	d400      	bmi.n	8000538 <__aeabi_dadd+0x68>
 8000536:	e131      	b.n	800079c <__aeabi_dadd+0x2cc>
 8000538:	0249      	lsls	r1, r1, #9
 800053a:	0a4e      	lsrs	r6, r1, #9
 800053c:	2e00      	cmp	r6, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x72>
 8000540:	e16e      	b.n	8000820 <__aeabi_dadd+0x350>
 8000542:	0030      	movs	r0, r6
 8000544:	f001 fde6 	bl	8002114 <__clzsi2>
 8000548:	0003      	movs	r3, r0
 800054a:	3b08      	subs	r3, #8
 800054c:	2b1f      	cmp	r3, #31
 800054e:	dd00      	ble.n	8000552 <__aeabi_dadd+0x82>
 8000550:	e161      	b.n	8000816 <__aeabi_dadd+0x346>
 8000552:	2220      	movs	r2, #32
 8000554:	0039      	movs	r1, r7
 8000556:	1ad2      	subs	r2, r2, r3
 8000558:	409e      	lsls	r6, r3
 800055a:	40d1      	lsrs	r1, r2
 800055c:	409f      	lsls	r7, r3
 800055e:	430e      	orrs	r6, r1
 8000560:	429d      	cmp	r5, r3
 8000562:	dd00      	ble.n	8000566 <__aeabi_dadd+0x96>
 8000564:	e151      	b.n	800080a <__aeabi_dadd+0x33a>
 8000566:	1b5d      	subs	r5, r3, r5
 8000568:	1c6b      	adds	r3, r5, #1
 800056a:	2b1f      	cmp	r3, #31
 800056c:	dd00      	ble.n	8000570 <__aeabi_dadd+0xa0>
 800056e:	e17c      	b.n	800086a <__aeabi_dadd+0x39a>
 8000570:	2120      	movs	r1, #32
 8000572:	1ac9      	subs	r1, r1, r3
 8000574:	003d      	movs	r5, r7
 8000576:	0030      	movs	r0, r6
 8000578:	408f      	lsls	r7, r1
 800057a:	4088      	lsls	r0, r1
 800057c:	40dd      	lsrs	r5, r3
 800057e:	1e79      	subs	r1, r7, #1
 8000580:	418f      	sbcs	r7, r1
 8000582:	0031      	movs	r1, r6
 8000584:	2207      	movs	r2, #7
 8000586:	4328      	orrs	r0, r5
 8000588:	40d9      	lsrs	r1, r3
 800058a:	2500      	movs	r5, #0
 800058c:	4307      	orrs	r7, r0
 800058e:	403a      	ands	r2, r7
 8000590:	2a00      	cmp	r2, #0
 8000592:	d009      	beq.n	80005a8 <__aeabi_dadd+0xd8>
 8000594:	230f      	movs	r3, #15
 8000596:	403b      	ands	r3, r7
 8000598:	2b04      	cmp	r3, #4
 800059a:	d005      	beq.n	80005a8 <__aeabi_dadd+0xd8>
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	42bb      	cmp	r3, r7
 80005a0:	41bf      	sbcs	r7, r7
 80005a2:	427f      	negs	r7, r7
 80005a4:	19c9      	adds	r1, r1, r7
 80005a6:	001f      	movs	r7, r3
 80005a8:	020b      	lsls	r3, r1, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0xde>
 80005ac:	e226      	b.n	80009fc <__aeabi_dadd+0x52c>
 80005ae:	1c6a      	adds	r2, r5, #1
 80005b0:	4bc6      	ldr	r3, [pc, #792]	; (80008cc <__aeabi_dadd+0x3fc>)
 80005b2:	0555      	lsls	r5, r2, #21
 80005b4:	0d6d      	lsrs	r5, r5, #21
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0xec>
 80005ba:	e106      	b.n	80007ca <__aeabi_dadd+0x2fa>
 80005bc:	4ac4      	ldr	r2, [pc, #784]	; (80008d0 <__aeabi_dadd+0x400>)
 80005be:	08ff      	lsrs	r7, r7, #3
 80005c0:	400a      	ands	r2, r1
 80005c2:	0753      	lsls	r3, r2, #29
 80005c4:	0252      	lsls	r2, r2, #9
 80005c6:	433b      	orrs	r3, r7
 80005c8:	0b12      	lsrs	r2, r2, #12
 80005ca:	e08e      	b.n	80006ea <__aeabi_dadd+0x21a>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d000      	beq.n	80005d2 <__aeabi_dadd+0x102>
 80005d0:	e0b8      	b.n	8000744 <__aeabi_dadd+0x274>
 80005d2:	1c6b      	adds	r3, r5, #1
 80005d4:	055b      	lsls	r3, r3, #21
 80005d6:	0d5b      	lsrs	r3, r3, #21
 80005d8:	2b01      	cmp	r3, #1
 80005da:	dc00      	bgt.n	80005de <__aeabi_dadd+0x10e>
 80005dc:	e130      	b.n	8000840 <__aeabi_dadd+0x370>
 80005de:	1a87      	subs	r7, r0, r2
 80005e0:	4643      	mov	r3, r8
 80005e2:	42b8      	cmp	r0, r7
 80005e4:	41b6      	sbcs	r6, r6
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	4276      	negs	r6, r6
 80005ea:	1b9e      	subs	r6, r3, r6
 80005ec:	0233      	lsls	r3, r6, #8
 80005ee:	d500      	bpl.n	80005f2 <__aeabi_dadd+0x122>
 80005f0:	e14c      	b.n	800088c <__aeabi_dadd+0x3bc>
 80005f2:	003b      	movs	r3, r7
 80005f4:	4333      	orrs	r3, r6
 80005f6:	d1a1      	bne.n	800053c <__aeabi_dadd+0x6c>
 80005f8:	2200      	movs	r2, #0
 80005fa:	2400      	movs	r4, #0
 80005fc:	2500      	movs	r5, #0
 80005fe:	e070      	b.n	80006e2 <__aeabi_dadd+0x212>
 8000600:	2b00      	cmp	r3, #0
 8000602:	dc00      	bgt.n	8000606 <__aeabi_dadd+0x136>
 8000604:	e0e5      	b.n	80007d2 <__aeabi_dadd+0x302>
 8000606:	2e00      	cmp	r6, #0
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x13c>
 800060a:	e083      	b.n	8000714 <__aeabi_dadd+0x244>
 800060c:	4eaf      	ldr	r6, [pc, #700]	; (80008cc <__aeabi_dadd+0x3fc>)
 800060e:	42b5      	cmp	r5, r6
 8000610:	d060      	beq.n	80006d4 <__aeabi_dadd+0x204>
 8000612:	2680      	movs	r6, #128	; 0x80
 8000614:	0436      	lsls	r6, r6, #16
 8000616:	4337      	orrs	r7, r6
 8000618:	46b8      	mov	r8, r7
 800061a:	2b38      	cmp	r3, #56	; 0x38
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x150>
 800061e:	e13e      	b.n	800089e <__aeabi_dadd+0x3ce>
 8000620:	4643      	mov	r3, r8
 8000622:	4313      	orrs	r3, r2
 8000624:	001f      	movs	r7, r3
 8000626:	1e7a      	subs	r2, r7, #1
 8000628:	4197      	sbcs	r7, r2
 800062a:	183f      	adds	r7, r7, r0
 800062c:	4287      	cmp	r7, r0
 800062e:	4180      	sbcs	r0, r0
 8000630:	4240      	negs	r0, r0
 8000632:	1809      	adds	r1, r1, r0
 8000634:	020b      	lsls	r3, r1, #8
 8000636:	d400      	bmi.n	800063a <__aeabi_dadd+0x16a>
 8000638:	e0b0      	b.n	800079c <__aeabi_dadd+0x2cc>
 800063a:	4ba4      	ldr	r3, [pc, #656]	; (80008cc <__aeabi_dadd+0x3fc>)
 800063c:	3501      	adds	r5, #1
 800063e:	429d      	cmp	r5, r3
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x174>
 8000642:	e0c3      	b.n	80007cc <__aeabi_dadd+0x2fc>
 8000644:	4aa2      	ldr	r2, [pc, #648]	; (80008d0 <__aeabi_dadd+0x400>)
 8000646:	087b      	lsrs	r3, r7, #1
 8000648:	400a      	ands	r2, r1
 800064a:	2101      	movs	r1, #1
 800064c:	400f      	ands	r7, r1
 800064e:	431f      	orrs	r7, r3
 8000650:	0851      	lsrs	r1, r2, #1
 8000652:	07d3      	lsls	r3, r2, #31
 8000654:	2207      	movs	r2, #7
 8000656:	431f      	orrs	r7, r3
 8000658:	403a      	ands	r2, r7
 800065a:	e799      	b.n	8000590 <__aeabi_dadd+0xc0>
 800065c:	4e9b      	ldr	r6, [pc, #620]	; (80008cc <__aeabi_dadd+0x3fc>)
 800065e:	42b5      	cmp	r5, r6
 8000660:	d038      	beq.n	80006d4 <__aeabi_dadd+0x204>
 8000662:	2680      	movs	r6, #128	; 0x80
 8000664:	0436      	lsls	r6, r6, #16
 8000666:	4337      	orrs	r7, r6
 8000668:	46b8      	mov	r8, r7
 800066a:	2b38      	cmp	r3, #56	; 0x38
 800066c:	dd00      	ble.n	8000670 <__aeabi_dadd+0x1a0>
 800066e:	e0dc      	b.n	800082a <__aeabi_dadd+0x35a>
 8000670:	2b1f      	cmp	r3, #31
 8000672:	dc00      	bgt.n	8000676 <__aeabi_dadd+0x1a6>
 8000674:	e130      	b.n	80008d8 <__aeabi_dadd+0x408>
 8000676:	001e      	movs	r6, r3
 8000678:	4647      	mov	r7, r8
 800067a:	3e20      	subs	r6, #32
 800067c:	40f7      	lsrs	r7, r6
 800067e:	46bc      	mov	ip, r7
 8000680:	2b20      	cmp	r3, #32
 8000682:	d004      	beq.n	800068e <__aeabi_dadd+0x1be>
 8000684:	2640      	movs	r6, #64	; 0x40
 8000686:	1af3      	subs	r3, r6, r3
 8000688:	4646      	mov	r6, r8
 800068a:	409e      	lsls	r6, r3
 800068c:	4332      	orrs	r2, r6
 800068e:	0017      	movs	r7, r2
 8000690:	4663      	mov	r3, ip
 8000692:	1e7a      	subs	r2, r7, #1
 8000694:	4197      	sbcs	r7, r2
 8000696:	431f      	orrs	r7, r3
 8000698:	e0cc      	b.n	8000834 <__aeabi_dadd+0x364>
 800069a:	2b00      	cmp	r3, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x1d0>
 800069e:	e204      	b.n	8000aaa <__aeabi_dadd+0x5da>
 80006a0:	4643      	mov	r3, r8
 80006a2:	4313      	orrs	r3, r2
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x1d8>
 80006a6:	e159      	b.n	800095c <__aeabi_dadd+0x48c>
 80006a8:	074b      	lsls	r3, r1, #29
 80006aa:	08c0      	lsrs	r0, r0, #3
 80006ac:	4318      	orrs	r0, r3
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	08c9      	lsrs	r1, r1, #3
 80006b2:	031b      	lsls	r3, r3, #12
 80006b4:	4219      	tst	r1, r3
 80006b6:	d008      	beq.n	80006ca <__aeabi_dadd+0x1fa>
 80006b8:	4645      	mov	r5, r8
 80006ba:	08ed      	lsrs	r5, r5, #3
 80006bc:	421d      	tst	r5, r3
 80006be:	d104      	bne.n	80006ca <__aeabi_dadd+0x1fa>
 80006c0:	4643      	mov	r3, r8
 80006c2:	08d0      	lsrs	r0, r2, #3
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	4308      	orrs	r0, r1
 80006c8:	0029      	movs	r1, r5
 80006ca:	0f42      	lsrs	r2, r0, #29
 80006cc:	00c9      	lsls	r1, r1, #3
 80006ce:	4d7f      	ldr	r5, [pc, #508]	; (80008cc <__aeabi_dadd+0x3fc>)
 80006d0:	4311      	orrs	r1, r2
 80006d2:	00c0      	lsls	r0, r0, #3
 80006d4:	074b      	lsls	r3, r1, #29
 80006d6:	08ca      	lsrs	r2, r1, #3
 80006d8:	497c      	ldr	r1, [pc, #496]	; (80008cc <__aeabi_dadd+0x3fc>)
 80006da:	08c0      	lsrs	r0, r0, #3
 80006dc:	4303      	orrs	r3, r0
 80006de:	428d      	cmp	r5, r1
 80006e0:	d068      	beq.n	80007b4 <__aeabi_dadd+0x2e4>
 80006e2:	0312      	lsls	r2, r2, #12
 80006e4:	056d      	lsls	r5, r5, #21
 80006e6:	0b12      	lsrs	r2, r2, #12
 80006e8:	0d6d      	lsrs	r5, r5, #21
 80006ea:	2100      	movs	r1, #0
 80006ec:	0312      	lsls	r2, r2, #12
 80006ee:	0018      	movs	r0, r3
 80006f0:	0b13      	lsrs	r3, r2, #12
 80006f2:	0d0a      	lsrs	r2, r1, #20
 80006f4:	0512      	lsls	r2, r2, #20
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4b76      	ldr	r3, [pc, #472]	; (80008d4 <__aeabi_dadd+0x404>)
 80006fa:	052d      	lsls	r5, r5, #20
 80006fc:	4013      	ands	r3, r2
 80006fe:	432b      	orrs	r3, r5
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	07e4      	lsls	r4, r4, #31
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	4323      	orrs	r3, r4
 8000708:	0019      	movs	r1, r3
 800070a:	bc1c      	pop	{r2, r3, r4}
 800070c:	4690      	mov	r8, r2
 800070e:	4699      	mov	r9, r3
 8000710:	46a2      	mov	sl, r4
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	003e      	movs	r6, r7
 8000716:	4316      	orrs	r6, r2
 8000718:	d012      	beq.n	8000740 <__aeabi_dadd+0x270>
 800071a:	1e5e      	subs	r6, r3, #1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x252>
 8000720:	e100      	b.n	8000924 <__aeabi_dadd+0x454>
 8000722:	1887      	adds	r7, r0, r2
 8000724:	4287      	cmp	r7, r0
 8000726:	4180      	sbcs	r0, r0
 8000728:	4441      	add	r1, r8
 800072a:	4240      	negs	r0, r0
 800072c:	1809      	adds	r1, r1, r0
 800072e:	2501      	movs	r5, #1
 8000730:	020b      	lsls	r3, r1, #8
 8000732:	d533      	bpl.n	800079c <__aeabi_dadd+0x2cc>
 8000734:	2502      	movs	r5, #2
 8000736:	e785      	b.n	8000644 <__aeabi_dadd+0x174>
 8000738:	4664      	mov	r4, ip
 800073a:	0033      	movs	r3, r6
 800073c:	4641      	mov	r1, r8
 800073e:	0010      	movs	r0, r2
 8000740:	001d      	movs	r5, r3
 8000742:	e7c7      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000744:	2d00      	cmp	r5, #0
 8000746:	d000      	beq.n	800074a <__aeabi_dadd+0x27a>
 8000748:	e0da      	b.n	8000900 <__aeabi_dadd+0x430>
 800074a:	000c      	movs	r4, r1
 800074c:	4304      	orrs	r4, r0
 800074e:	d0f3      	beq.n	8000738 <__aeabi_dadd+0x268>
 8000750:	1c5c      	adds	r4, r3, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x286>
 8000754:	e19f      	b.n	8000a96 <__aeabi_dadd+0x5c6>
 8000756:	4c5d      	ldr	r4, [pc, #372]	; (80008cc <__aeabi_dadd+0x3fc>)
 8000758:	42a6      	cmp	r6, r4
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x28e>
 800075c:	e12f      	b.n	80009be <__aeabi_dadd+0x4ee>
 800075e:	43db      	mvns	r3, r3
 8000760:	2b38      	cmp	r3, #56	; 0x38
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0x296>
 8000764:	e166      	b.n	8000a34 <__aeabi_dadd+0x564>
 8000766:	2b1f      	cmp	r3, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0x29c>
 800076a:	e183      	b.n	8000a74 <__aeabi_dadd+0x5a4>
 800076c:	2420      	movs	r4, #32
 800076e:	0005      	movs	r5, r0
 8000770:	1ae4      	subs	r4, r4, r3
 8000772:	000f      	movs	r7, r1
 8000774:	40dd      	lsrs	r5, r3
 8000776:	40d9      	lsrs	r1, r3
 8000778:	40a0      	lsls	r0, r4
 800077a:	4643      	mov	r3, r8
 800077c:	40a7      	lsls	r7, r4
 800077e:	1a5b      	subs	r3, r3, r1
 8000780:	1e44      	subs	r4, r0, #1
 8000782:	41a0      	sbcs	r0, r4
 8000784:	4698      	mov	r8, r3
 8000786:	432f      	orrs	r7, r5
 8000788:	4338      	orrs	r0, r7
 800078a:	1a17      	subs	r7, r2, r0
 800078c:	42ba      	cmp	r2, r7
 800078e:	4192      	sbcs	r2, r2
 8000790:	4643      	mov	r3, r8
 8000792:	4252      	negs	r2, r2
 8000794:	1a99      	subs	r1, r3, r2
 8000796:	4664      	mov	r4, ip
 8000798:	0035      	movs	r5, r6
 800079a:	e6ca      	b.n	8000532 <__aeabi_dadd+0x62>
 800079c:	2207      	movs	r2, #7
 800079e:	403a      	ands	r2, r7
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_dadd+0x2d6>
 80007a4:	e6f6      	b.n	8000594 <__aeabi_dadd+0xc4>
 80007a6:	074b      	lsls	r3, r1, #29
 80007a8:	08ca      	lsrs	r2, r1, #3
 80007aa:	4948      	ldr	r1, [pc, #288]	; (80008cc <__aeabi_dadd+0x3fc>)
 80007ac:	08ff      	lsrs	r7, r7, #3
 80007ae:	433b      	orrs	r3, r7
 80007b0:	428d      	cmp	r5, r1
 80007b2:	d196      	bne.n	80006e2 <__aeabi_dadd+0x212>
 80007b4:	0019      	movs	r1, r3
 80007b6:	4311      	orrs	r1, r2
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x2ec>
 80007ba:	e19e      	b.n	8000afa <__aeabi_dadd+0x62a>
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0309      	lsls	r1, r1, #12
 80007c0:	430a      	orrs	r2, r1
 80007c2:	0312      	lsls	r2, r2, #12
 80007c4:	0b12      	lsrs	r2, r2, #12
 80007c6:	4d41      	ldr	r5, [pc, #260]	; (80008cc <__aeabi_dadd+0x3fc>)
 80007c8:	e78f      	b.n	80006ea <__aeabi_dadd+0x21a>
 80007ca:	0015      	movs	r5, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	2300      	movs	r3, #0
 80007d0:	e78b      	b.n	80006ea <__aeabi_dadd+0x21a>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x308>
 80007d6:	e0c7      	b.n	8000968 <__aeabi_dadd+0x498>
 80007d8:	1c6b      	adds	r3, r5, #1
 80007da:	055f      	lsls	r7, r3, #21
 80007dc:	0d7f      	lsrs	r7, r7, #21
 80007de:	2f01      	cmp	r7, #1
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x314>
 80007e2:	e0f1      	b.n	80009c8 <__aeabi_dadd+0x4f8>
 80007e4:	4d39      	ldr	r5, [pc, #228]	; (80008cc <__aeabi_dadd+0x3fc>)
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x31c>
 80007ea:	e0b9      	b.n	8000960 <__aeabi_dadd+0x490>
 80007ec:	1885      	adds	r5, r0, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	4285      	cmp	r5, r0
 80007f2:	4189      	sbcs	r1, r1
 80007f4:	4442      	add	r2, r8
 80007f6:	4249      	negs	r1, r1
 80007f8:	1851      	adds	r1, r2, r1
 80007fa:	2207      	movs	r2, #7
 80007fc:	07cf      	lsls	r7, r1, #31
 80007fe:	086d      	lsrs	r5, r5, #1
 8000800:	432f      	orrs	r7, r5
 8000802:	0849      	lsrs	r1, r1, #1
 8000804:	403a      	ands	r2, r7
 8000806:	001d      	movs	r5, r3
 8000808:	e6c2      	b.n	8000590 <__aeabi_dadd+0xc0>
 800080a:	2207      	movs	r2, #7
 800080c:	4930      	ldr	r1, [pc, #192]	; (80008d0 <__aeabi_dadd+0x400>)
 800080e:	1aed      	subs	r5, r5, r3
 8000810:	4031      	ands	r1, r6
 8000812:	403a      	ands	r2, r7
 8000814:	e6bc      	b.n	8000590 <__aeabi_dadd+0xc0>
 8000816:	003e      	movs	r6, r7
 8000818:	3828      	subs	r0, #40	; 0x28
 800081a:	4086      	lsls	r6, r0
 800081c:	2700      	movs	r7, #0
 800081e:	e69f      	b.n	8000560 <__aeabi_dadd+0x90>
 8000820:	0038      	movs	r0, r7
 8000822:	f001 fc77 	bl	8002114 <__clzsi2>
 8000826:	3020      	adds	r0, #32
 8000828:	e68e      	b.n	8000548 <__aeabi_dadd+0x78>
 800082a:	4643      	mov	r3, r8
 800082c:	4313      	orrs	r3, r2
 800082e:	001f      	movs	r7, r3
 8000830:	1e7a      	subs	r2, r7, #1
 8000832:	4197      	sbcs	r7, r2
 8000834:	1bc7      	subs	r7, r0, r7
 8000836:	42b8      	cmp	r0, r7
 8000838:	4180      	sbcs	r0, r0
 800083a:	4240      	negs	r0, r0
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	e678      	b.n	8000532 <__aeabi_dadd+0x62>
 8000840:	000e      	movs	r6, r1
 8000842:	003b      	movs	r3, r7
 8000844:	4306      	orrs	r6, r0
 8000846:	4313      	orrs	r3, r2
 8000848:	2d00      	cmp	r5, #0
 800084a:	d161      	bne.n	8000910 <__aeabi_dadd+0x440>
 800084c:	2e00      	cmp	r6, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x382>
 8000850:	e0f4      	b.n	8000a3c <__aeabi_dadd+0x56c>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x388>
 8000856:	e11b      	b.n	8000a90 <__aeabi_dadd+0x5c0>
 8000858:	4664      	mov	r4, ip
 800085a:	0039      	movs	r1, r7
 800085c:	0010      	movs	r0, r2
 800085e:	e739      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000860:	4f1a      	ldr	r7, [pc, #104]	; (80008cc <__aeabi_dadd+0x3fc>)
 8000862:	42bb      	cmp	r3, r7
 8000864:	d07a      	beq.n	800095c <__aeabi_dadd+0x48c>
 8000866:	0033      	movs	r3, r6
 8000868:	e6ff      	b.n	800066a <__aeabi_dadd+0x19a>
 800086a:	0030      	movs	r0, r6
 800086c:	3d1f      	subs	r5, #31
 800086e:	40e8      	lsrs	r0, r5
 8000870:	2b20      	cmp	r3, #32
 8000872:	d003      	beq.n	800087c <__aeabi_dadd+0x3ac>
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	409e      	lsls	r6, r3
 800087a:	4337      	orrs	r7, r6
 800087c:	1e7b      	subs	r3, r7, #1
 800087e:	419f      	sbcs	r7, r3
 8000880:	2207      	movs	r2, #7
 8000882:	4307      	orrs	r7, r0
 8000884:	403a      	ands	r2, r7
 8000886:	2100      	movs	r1, #0
 8000888:	2500      	movs	r5, #0
 800088a:	e789      	b.n	80007a0 <__aeabi_dadd+0x2d0>
 800088c:	1a17      	subs	r7, r2, r0
 800088e:	4643      	mov	r3, r8
 8000890:	42ba      	cmp	r2, r7
 8000892:	41b6      	sbcs	r6, r6
 8000894:	1a59      	subs	r1, r3, r1
 8000896:	4276      	negs	r6, r6
 8000898:	1b8e      	subs	r6, r1, r6
 800089a:	4664      	mov	r4, ip
 800089c:	e64e      	b.n	800053c <__aeabi_dadd+0x6c>
 800089e:	2b1f      	cmp	r3, #31
 80008a0:	dd00      	ble.n	80008a4 <__aeabi_dadd+0x3d4>
 80008a2:	e0ad      	b.n	8000a00 <__aeabi_dadd+0x530>
 80008a4:	2620      	movs	r6, #32
 80008a6:	4647      	mov	r7, r8
 80008a8:	1af6      	subs	r6, r6, r3
 80008aa:	40b7      	lsls	r7, r6
 80008ac:	46b9      	mov	r9, r7
 80008ae:	0017      	movs	r7, r2
 80008b0:	46b2      	mov	sl, r6
 80008b2:	40df      	lsrs	r7, r3
 80008b4:	464e      	mov	r6, r9
 80008b6:	433e      	orrs	r6, r7
 80008b8:	0037      	movs	r7, r6
 80008ba:	4656      	mov	r6, sl
 80008bc:	40b2      	lsls	r2, r6
 80008be:	1e56      	subs	r6, r2, #1
 80008c0:	41b2      	sbcs	r2, r6
 80008c2:	4317      	orrs	r7, r2
 80008c4:	4642      	mov	r2, r8
 80008c6:	40da      	lsrs	r2, r3
 80008c8:	1889      	adds	r1, r1, r2
 80008ca:	e6ae      	b.n	800062a <__aeabi_dadd+0x15a>
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	ff7fffff 	.word	0xff7fffff
 80008d4:	800fffff 	.word	0x800fffff
 80008d8:	2620      	movs	r6, #32
 80008da:	4647      	mov	r7, r8
 80008dc:	1af6      	subs	r6, r6, r3
 80008de:	40b7      	lsls	r7, r6
 80008e0:	46b9      	mov	r9, r7
 80008e2:	0017      	movs	r7, r2
 80008e4:	46b2      	mov	sl, r6
 80008e6:	40df      	lsrs	r7, r3
 80008e8:	464e      	mov	r6, r9
 80008ea:	433e      	orrs	r6, r7
 80008ec:	0037      	movs	r7, r6
 80008ee:	4656      	mov	r6, sl
 80008f0:	40b2      	lsls	r2, r6
 80008f2:	1e56      	subs	r6, r2, #1
 80008f4:	41b2      	sbcs	r2, r6
 80008f6:	4317      	orrs	r7, r2
 80008f8:	4642      	mov	r2, r8
 80008fa:	40da      	lsrs	r2, r3
 80008fc:	1a89      	subs	r1, r1, r2
 80008fe:	e799      	b.n	8000834 <__aeabi_dadd+0x364>
 8000900:	4c7f      	ldr	r4, [pc, #508]	; (8000b00 <__aeabi_dadd+0x630>)
 8000902:	42a6      	cmp	r6, r4
 8000904:	d05b      	beq.n	80009be <__aeabi_dadd+0x4ee>
 8000906:	2480      	movs	r4, #128	; 0x80
 8000908:	0424      	lsls	r4, r4, #16
 800090a:	425b      	negs	r3, r3
 800090c:	4321      	orrs	r1, r4
 800090e:	e727      	b.n	8000760 <__aeabi_dadd+0x290>
 8000910:	2e00      	cmp	r6, #0
 8000912:	d10c      	bne.n	800092e <__aeabi_dadd+0x45e>
 8000914:	2b00      	cmp	r3, #0
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x44a>
 8000918:	e0cb      	b.n	8000ab2 <__aeabi_dadd+0x5e2>
 800091a:	4664      	mov	r4, ip
 800091c:	0039      	movs	r1, r7
 800091e:	0010      	movs	r0, r2
 8000920:	4d77      	ldr	r5, [pc, #476]	; (8000b00 <__aeabi_dadd+0x630>)
 8000922:	e6d7      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000924:	4f76      	ldr	r7, [pc, #472]	; (8000b00 <__aeabi_dadd+0x630>)
 8000926:	42bb      	cmp	r3, r7
 8000928:	d018      	beq.n	800095c <__aeabi_dadd+0x48c>
 800092a:	0033      	movs	r3, r6
 800092c:	e675      	b.n	800061a <__aeabi_dadd+0x14a>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d014      	beq.n	800095c <__aeabi_dadd+0x48c>
 8000932:	074b      	lsls	r3, r1, #29
 8000934:	08c0      	lsrs	r0, r0, #3
 8000936:	4318      	orrs	r0, r3
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	08c9      	lsrs	r1, r1, #3
 800093c:	031b      	lsls	r3, r3, #12
 800093e:	4219      	tst	r1, r3
 8000940:	d007      	beq.n	8000952 <__aeabi_dadd+0x482>
 8000942:	08fc      	lsrs	r4, r7, #3
 8000944:	421c      	tst	r4, r3
 8000946:	d104      	bne.n	8000952 <__aeabi_dadd+0x482>
 8000948:	0779      	lsls	r1, r7, #29
 800094a:	08d0      	lsrs	r0, r2, #3
 800094c:	4308      	orrs	r0, r1
 800094e:	46e1      	mov	r9, ip
 8000950:	0021      	movs	r1, r4
 8000952:	464c      	mov	r4, r9
 8000954:	0f42      	lsrs	r2, r0, #29
 8000956:	00c9      	lsls	r1, r1, #3
 8000958:	4311      	orrs	r1, r2
 800095a:	00c0      	lsls	r0, r0, #3
 800095c:	4d68      	ldr	r5, [pc, #416]	; (8000b00 <__aeabi_dadd+0x630>)
 800095e:	e6b9      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000960:	001d      	movs	r5, r3
 8000962:	2200      	movs	r2, #0
 8000964:	2300      	movs	r3, #0
 8000966:	e6c0      	b.n	80006ea <__aeabi_dadd+0x21a>
 8000968:	2d00      	cmp	r5, #0
 800096a:	d15b      	bne.n	8000a24 <__aeabi_dadd+0x554>
 800096c:	000d      	movs	r5, r1
 800096e:	4305      	orrs	r5, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x4a4>
 8000972:	e6e2      	b.n	800073a <__aeabi_dadd+0x26a>
 8000974:	1c5d      	adds	r5, r3, #1
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x4aa>
 8000978:	e0b0      	b.n	8000adc <__aeabi_dadd+0x60c>
 800097a:	4d61      	ldr	r5, [pc, #388]	; (8000b00 <__aeabi_dadd+0x630>)
 800097c:	42ae      	cmp	r6, r5
 800097e:	d01f      	beq.n	80009c0 <__aeabi_dadd+0x4f0>
 8000980:	43db      	mvns	r3, r3
 8000982:	2b38      	cmp	r3, #56	; 0x38
 8000984:	dc71      	bgt.n	8000a6a <__aeabi_dadd+0x59a>
 8000986:	2b1f      	cmp	r3, #31
 8000988:	dd00      	ble.n	800098c <__aeabi_dadd+0x4bc>
 800098a:	e096      	b.n	8000aba <__aeabi_dadd+0x5ea>
 800098c:	2520      	movs	r5, #32
 800098e:	000f      	movs	r7, r1
 8000990:	1aed      	subs	r5, r5, r3
 8000992:	40af      	lsls	r7, r5
 8000994:	46b9      	mov	r9, r7
 8000996:	0007      	movs	r7, r0
 8000998:	46aa      	mov	sl, r5
 800099a:	40df      	lsrs	r7, r3
 800099c:	464d      	mov	r5, r9
 800099e:	433d      	orrs	r5, r7
 80009a0:	002f      	movs	r7, r5
 80009a2:	4655      	mov	r5, sl
 80009a4:	40a8      	lsls	r0, r5
 80009a6:	40d9      	lsrs	r1, r3
 80009a8:	1e45      	subs	r5, r0, #1
 80009aa:	41a8      	sbcs	r0, r5
 80009ac:	4488      	add	r8, r1
 80009ae:	4307      	orrs	r7, r0
 80009b0:	18bf      	adds	r7, r7, r2
 80009b2:	4297      	cmp	r7, r2
 80009b4:	4192      	sbcs	r2, r2
 80009b6:	4251      	negs	r1, r2
 80009b8:	4441      	add	r1, r8
 80009ba:	0035      	movs	r5, r6
 80009bc:	e63a      	b.n	8000634 <__aeabi_dadd+0x164>
 80009be:	4664      	mov	r4, ip
 80009c0:	0035      	movs	r5, r6
 80009c2:	4641      	mov	r1, r8
 80009c4:	0010      	movs	r0, r2
 80009c6:	e685      	b.n	80006d4 <__aeabi_dadd+0x204>
 80009c8:	000b      	movs	r3, r1
 80009ca:	4303      	orrs	r3, r0
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x502>
 80009d0:	e663      	b.n	800069a <__aeabi_dadd+0x1ca>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f5      	beq.n	80009c2 <__aeabi_dadd+0x4f2>
 80009d6:	4643      	mov	r3, r8
 80009d8:	4313      	orrs	r3, r2
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x50e>
 80009dc:	e67a      	b.n	80006d4 <__aeabi_dadd+0x204>
 80009de:	1887      	adds	r7, r0, r2
 80009e0:	4287      	cmp	r7, r0
 80009e2:	4180      	sbcs	r0, r0
 80009e4:	2207      	movs	r2, #7
 80009e6:	4441      	add	r1, r8
 80009e8:	4240      	negs	r0, r0
 80009ea:	1809      	adds	r1, r1, r0
 80009ec:	403a      	ands	r2, r7
 80009ee:	020b      	lsls	r3, r1, #8
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_dadd+0x524>
 80009f2:	e6d5      	b.n	80007a0 <__aeabi_dadd+0x2d0>
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <__aeabi_dadd+0x634>)
 80009f6:	3501      	adds	r5, #1
 80009f8:	4019      	ands	r1, r3
 80009fa:	e5c9      	b.n	8000590 <__aeabi_dadd+0xc0>
 80009fc:	0038      	movs	r0, r7
 80009fe:	e669      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000a00:	001e      	movs	r6, r3
 8000a02:	4647      	mov	r7, r8
 8000a04:	3e20      	subs	r6, #32
 8000a06:	40f7      	lsrs	r7, r6
 8000a08:	46bc      	mov	ip, r7
 8000a0a:	2b20      	cmp	r3, #32
 8000a0c:	d004      	beq.n	8000a18 <__aeabi_dadd+0x548>
 8000a0e:	2640      	movs	r6, #64	; 0x40
 8000a10:	1af3      	subs	r3, r6, r3
 8000a12:	4646      	mov	r6, r8
 8000a14:	409e      	lsls	r6, r3
 8000a16:	4332      	orrs	r2, r6
 8000a18:	0017      	movs	r7, r2
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	1e7a      	subs	r2, r7, #1
 8000a1e:	4197      	sbcs	r7, r2
 8000a20:	431f      	orrs	r7, r3
 8000a22:	e602      	b.n	800062a <__aeabi_dadd+0x15a>
 8000a24:	4d36      	ldr	r5, [pc, #216]	; (8000b00 <__aeabi_dadd+0x630>)
 8000a26:	42ae      	cmp	r6, r5
 8000a28:	d0ca      	beq.n	80009c0 <__aeabi_dadd+0x4f0>
 8000a2a:	2580      	movs	r5, #128	; 0x80
 8000a2c:	042d      	lsls	r5, r5, #16
 8000a2e:	425b      	negs	r3, r3
 8000a30:	4329      	orrs	r1, r5
 8000a32:	e7a6      	b.n	8000982 <__aeabi_dadd+0x4b2>
 8000a34:	4308      	orrs	r0, r1
 8000a36:	1e41      	subs	r1, r0, #1
 8000a38:	4188      	sbcs	r0, r1
 8000a3a:	e6a6      	b.n	800078a <__aeabi_dadd+0x2ba>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x572>
 8000a40:	e648      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000a42:	1a87      	subs	r7, r0, r2
 8000a44:	4643      	mov	r3, r8
 8000a46:	42b8      	cmp	r0, r7
 8000a48:	41b6      	sbcs	r6, r6
 8000a4a:	1acb      	subs	r3, r1, r3
 8000a4c:	4276      	negs	r6, r6
 8000a4e:	1b9e      	subs	r6, r3, r6
 8000a50:	0233      	lsls	r3, r6, #8
 8000a52:	d54b      	bpl.n	8000aec <__aeabi_dadd+0x61c>
 8000a54:	1a17      	subs	r7, r2, r0
 8000a56:	4643      	mov	r3, r8
 8000a58:	42ba      	cmp	r2, r7
 8000a5a:	4192      	sbcs	r2, r2
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	4252      	negs	r2, r2
 8000a60:	1a89      	subs	r1, r1, r2
 8000a62:	2207      	movs	r2, #7
 8000a64:	4664      	mov	r4, ip
 8000a66:	403a      	ands	r2, r7
 8000a68:	e592      	b.n	8000590 <__aeabi_dadd+0xc0>
 8000a6a:	4301      	orrs	r1, r0
 8000a6c:	000f      	movs	r7, r1
 8000a6e:	1e79      	subs	r1, r7, #1
 8000a70:	418f      	sbcs	r7, r1
 8000a72:	e79d      	b.n	80009b0 <__aeabi_dadd+0x4e0>
 8000a74:	001c      	movs	r4, r3
 8000a76:	000f      	movs	r7, r1
 8000a78:	3c20      	subs	r4, #32
 8000a7a:	40e7      	lsrs	r7, r4
 8000a7c:	2b20      	cmp	r3, #32
 8000a7e:	d003      	beq.n	8000a88 <__aeabi_dadd+0x5b8>
 8000a80:	2440      	movs	r4, #64	; 0x40
 8000a82:	1ae3      	subs	r3, r4, r3
 8000a84:	4099      	lsls	r1, r3
 8000a86:	4308      	orrs	r0, r1
 8000a88:	1e41      	subs	r1, r0, #1
 8000a8a:	4188      	sbcs	r0, r1
 8000a8c:	4338      	orrs	r0, r7
 8000a8e:	e67c      	b.n	800078a <__aeabi_dadd+0x2ba>
 8000a90:	2200      	movs	r2, #0
 8000a92:	2400      	movs	r4, #0
 8000a94:	e625      	b.n	80006e2 <__aeabi_dadd+0x212>
 8000a96:	1a17      	subs	r7, r2, r0
 8000a98:	4643      	mov	r3, r8
 8000a9a:	42ba      	cmp	r2, r7
 8000a9c:	4192      	sbcs	r2, r2
 8000a9e:	1a59      	subs	r1, r3, r1
 8000aa0:	4252      	negs	r2, r2
 8000aa2:	1a89      	subs	r1, r1, r2
 8000aa4:	4664      	mov	r4, ip
 8000aa6:	0035      	movs	r5, r6
 8000aa8:	e543      	b.n	8000532 <__aeabi_dadd+0x62>
 8000aaa:	4641      	mov	r1, r8
 8000aac:	0010      	movs	r0, r2
 8000aae:	4d14      	ldr	r5, [pc, #80]	; (8000b00 <__aeabi_dadd+0x630>)
 8000ab0:	e610      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	0312      	lsls	r2, r2, #12
 8000ab8:	e680      	b.n	80007bc <__aeabi_dadd+0x2ec>
 8000aba:	001d      	movs	r5, r3
 8000abc:	000f      	movs	r7, r1
 8000abe:	3d20      	subs	r5, #32
 8000ac0:	40ef      	lsrs	r7, r5
 8000ac2:	46bc      	mov	ip, r7
 8000ac4:	2b20      	cmp	r3, #32
 8000ac6:	d003      	beq.n	8000ad0 <__aeabi_dadd+0x600>
 8000ac8:	2540      	movs	r5, #64	; 0x40
 8000aca:	1aeb      	subs	r3, r5, r3
 8000acc:	4099      	lsls	r1, r3
 8000ace:	4308      	orrs	r0, r1
 8000ad0:	0007      	movs	r7, r0
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	1e78      	subs	r0, r7, #1
 8000ad6:	4187      	sbcs	r7, r0
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e769      	b.n	80009b0 <__aeabi_dadd+0x4e0>
 8000adc:	1887      	adds	r7, r0, r2
 8000ade:	4297      	cmp	r7, r2
 8000ae0:	419b      	sbcs	r3, r3
 8000ae2:	4441      	add	r1, r8
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	18c9      	adds	r1, r1, r3
 8000ae8:	0035      	movs	r5, r6
 8000aea:	e5a3      	b.n	8000634 <__aeabi_dadd+0x164>
 8000aec:	003b      	movs	r3, r7
 8000aee:	4333      	orrs	r3, r6
 8000af0:	d0ce      	beq.n	8000a90 <__aeabi_dadd+0x5c0>
 8000af2:	2207      	movs	r2, #7
 8000af4:	0031      	movs	r1, r6
 8000af6:	403a      	ands	r2, r7
 8000af8:	e652      	b.n	80007a0 <__aeabi_dadd+0x2d0>
 8000afa:	2300      	movs	r3, #0
 8000afc:	001a      	movs	r2, r3
 8000afe:	e5f4      	b.n	80006ea <__aeabi_dadd+0x21a>
 8000b00:	000007ff 	.word	0x000007ff
 8000b04:	ff7fffff 	.word	0xff7fffff

08000b08 <__aeabi_ddiv>:
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	4657      	mov	r7, sl
 8000b0c:	46de      	mov	lr, fp
 8000b0e:	464e      	mov	r6, r9
 8000b10:	4645      	mov	r5, r8
 8000b12:	b5e0      	push	{r5, r6, r7, lr}
 8000b14:	4683      	mov	fp, r0
 8000b16:	0007      	movs	r7, r0
 8000b18:	030e      	lsls	r6, r1, #12
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	4692      	mov	sl, r2
 8000b20:	001c      	movs	r4, r3
 8000b22:	0b36      	lsrs	r6, r6, #12
 8000b24:	0d40      	lsrs	r0, r0, #21
 8000b26:	0fcd      	lsrs	r5, r1, #31
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_ddiv+0x26>
 8000b2c:	e09d      	b.n	8000c6a <__aeabi_ddiv+0x162>
 8000b2e:	4b95      	ldr	r3, [pc, #596]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000b30:	4298      	cmp	r0, r3
 8000b32:	d039      	beq.n	8000ba8 <__aeabi_ddiv+0xa0>
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	00f6      	lsls	r6, r6, #3
 8000b38:	041b      	lsls	r3, r3, #16
 8000b3a:	431e      	orrs	r6, r3
 8000b3c:	4a92      	ldr	r2, [pc, #584]	; (8000d88 <__aeabi_ddiv+0x280>)
 8000b3e:	0f7b      	lsrs	r3, r7, #29
 8000b40:	4333      	orrs	r3, r6
 8000b42:	4699      	mov	r9, r3
 8000b44:	4694      	mov	ip, r2
 8000b46:	0003      	movs	r3, r0
 8000b48:	4463      	add	r3, ip
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2600      	movs	r6, #0
 8000b50:	00ff      	lsls	r7, r7, #3
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	0323      	lsls	r3, r4, #12
 8000b56:	0b1b      	lsrs	r3, r3, #12
 8000b58:	4698      	mov	r8, r3
 8000b5a:	0063      	lsls	r3, r4, #1
 8000b5c:	0fe4      	lsrs	r4, r4, #31
 8000b5e:	4652      	mov	r2, sl
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	9401      	str	r4, [sp, #4]
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x60>
 8000b66:	e0b3      	b.n	8000cd0 <__aeabi_ddiv+0x1c8>
 8000b68:	4986      	ldr	r1, [pc, #536]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_ddiv+0x68>
 8000b6e:	e09e      	b.n	8000cae <__aeabi_ddiv+0x1a6>
 8000b70:	4642      	mov	r2, r8
 8000b72:	00d1      	lsls	r1, r2, #3
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0412      	lsls	r2, r2, #16
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	4651      	mov	r1, sl
 8000b7c:	0f49      	lsrs	r1, r1, #29
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	468b      	mov	fp, r1
 8000b82:	4981      	ldr	r1, [pc, #516]	; (8000d88 <__aeabi_ddiv+0x280>)
 8000b84:	4652      	mov	r2, sl
 8000b86:	468c      	mov	ip, r1
 8000b88:	9900      	ldr	r1, [sp, #0]
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1acb      	subs	r3, r1, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	002b      	movs	r3, r5
 8000b96:	4063      	eors	r3, r4
 8000b98:	469a      	mov	sl, r3
 8000b9a:	2e0f      	cmp	r6, #15
 8000b9c:	d900      	bls.n	8000ba0 <__aeabi_ddiv+0x98>
 8000b9e:	e105      	b.n	8000dac <__aeabi_ddiv+0x2a4>
 8000ba0:	4b7a      	ldr	r3, [pc, #488]	; (8000d8c <__aeabi_ddiv+0x284>)
 8000ba2:	00b6      	lsls	r6, r6, #2
 8000ba4:	599b      	ldr	r3, [r3, r6]
 8000ba6:	469f      	mov	pc, r3
 8000ba8:	465b      	mov	r3, fp
 8000baa:	4333      	orrs	r3, r6
 8000bac:	4699      	mov	r9, r3
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_ddiv+0xaa>
 8000bb0:	e0b8      	b.n	8000d24 <__aeabi_ddiv+0x21c>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2608      	movs	r6, #8
 8000bb6:	2700      	movs	r7, #0
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	e7ca      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000bbe:	46cb      	mov	fp, r9
 8000bc0:	003a      	movs	r2, r7
 8000bc2:	9902      	ldr	r1, [sp, #8]
 8000bc4:	9501      	str	r5, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
 8000bc8:	469a      	mov	sl, r3
 8000bca:	2902      	cmp	r1, #2
 8000bcc:	d027      	beq.n	8000c1e <__aeabi_ddiv+0x116>
 8000bce:	2903      	cmp	r1, #3
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0xcc>
 8000bd2:	e280      	b.n	80010d6 <__aeabi_ddiv+0x5ce>
 8000bd4:	2901      	cmp	r1, #1
 8000bd6:	d044      	beq.n	8000c62 <__aeabi_ddiv+0x15a>
 8000bd8:	496d      	ldr	r1, [pc, #436]	; (8000d90 <__aeabi_ddiv+0x288>)
 8000bda:	9b00      	ldr	r3, [sp, #0]
 8000bdc:	468c      	mov	ip, r1
 8000bde:	4463      	add	r3, ip
 8000be0:	001c      	movs	r4, r3
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	dd38      	ble.n	8000c58 <__aeabi_ddiv+0x150>
 8000be6:	0753      	lsls	r3, r2, #29
 8000be8:	d000      	beq.n	8000bec <__aeabi_ddiv+0xe4>
 8000bea:	e213      	b.n	8001014 <__aeabi_ddiv+0x50c>
 8000bec:	08d2      	lsrs	r2, r2, #3
 8000bee:	465b      	mov	r3, fp
 8000bf0:	01db      	lsls	r3, r3, #7
 8000bf2:	d509      	bpl.n	8000c08 <__aeabi_ddiv+0x100>
 8000bf4:	4659      	mov	r1, fp
 8000bf6:	4b67      	ldr	r3, [pc, #412]	; (8000d94 <__aeabi_ddiv+0x28c>)
 8000bf8:	4019      	ands	r1, r3
 8000bfa:	468b      	mov	fp, r1
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	00c9      	lsls	r1, r1, #3
 8000c00:	468c      	mov	ip, r1
 8000c02:	9b00      	ldr	r3, [sp, #0]
 8000c04:	4463      	add	r3, ip
 8000c06:	001c      	movs	r4, r3
 8000c08:	4b63      	ldr	r3, [pc, #396]	; (8000d98 <__aeabi_ddiv+0x290>)
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	dc07      	bgt.n	8000c1e <__aeabi_ddiv+0x116>
 8000c0e:	465b      	mov	r3, fp
 8000c10:	0564      	lsls	r4, r4, #21
 8000c12:	075f      	lsls	r7, r3, #29
 8000c14:	025b      	lsls	r3, r3, #9
 8000c16:	4317      	orrs	r7, r2
 8000c18:	0b1b      	lsrs	r3, r3, #12
 8000c1a:	0d62      	lsrs	r2, r4, #21
 8000c1c:	e002      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2700      	movs	r7, #0
 8000c22:	4a58      	ldr	r2, [pc, #352]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	031b      	lsls	r3, r3, #12
 8000c28:	0b1c      	lsrs	r4, r3, #12
 8000c2a:	0d0b      	lsrs	r3, r1, #20
 8000c2c:	051b      	lsls	r3, r3, #20
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	0514      	lsls	r4, r2, #20
 8000c32:	4a5a      	ldr	r2, [pc, #360]	; (8000d9c <__aeabi_ddiv+0x294>)
 8000c34:	0038      	movs	r0, r7
 8000c36:	4013      	ands	r3, r2
 8000c38:	431c      	orrs	r4, r3
 8000c3a:	4653      	mov	r3, sl
 8000c3c:	0064      	lsls	r4, r4, #1
 8000c3e:	07db      	lsls	r3, r3, #31
 8000c40:	0864      	lsrs	r4, r4, #1
 8000c42:	431c      	orrs	r4, r3
 8000c44:	0021      	movs	r1, r4
 8000c46:	b005      	add	sp, #20
 8000c48:	bc3c      	pop	{r2, r3, r4, r5}
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	4699      	mov	r9, r3
 8000c4e:	46a2      	mov	sl, r4
 8000c50:	46ab      	mov	fp, r5
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c54:	2201      	movs	r2, #1
 8000c56:	4252      	negs	r2, r2
 8000c58:	2301      	movs	r3, #1
 8000c5a:	1b1b      	subs	r3, r3, r4
 8000c5c:	2b38      	cmp	r3, #56	; 0x38
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_ddiv+0x15a>
 8000c60:	e1ad      	b.n	8000fbe <__aeabi_ddiv+0x4b6>
 8000c62:	2200      	movs	r2, #0
 8000c64:	2300      	movs	r3, #0
 8000c66:	2700      	movs	r7, #0
 8000c68:	e7dc      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000c6a:	465b      	mov	r3, fp
 8000c6c:	4333      	orrs	r3, r6
 8000c6e:	4699      	mov	r9, r3
 8000c70:	d05e      	beq.n	8000d30 <__aeabi_ddiv+0x228>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x170>
 8000c76:	e18a      	b.n	8000f8e <__aeabi_ddiv+0x486>
 8000c78:	0030      	movs	r0, r6
 8000c7a:	f001 fa4b 	bl	8002114 <__clzsi2>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	3b0b      	subs	r3, #11
 8000c82:	2b1c      	cmp	r3, #28
 8000c84:	dd00      	ble.n	8000c88 <__aeabi_ddiv+0x180>
 8000c86:	e17b      	b.n	8000f80 <__aeabi_ddiv+0x478>
 8000c88:	221d      	movs	r2, #29
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	465a      	mov	r2, fp
 8000c8e:	0001      	movs	r1, r0
 8000c90:	40da      	lsrs	r2, r3
 8000c92:	3908      	subs	r1, #8
 8000c94:	408e      	lsls	r6, r1
 8000c96:	0013      	movs	r3, r2
 8000c98:	465f      	mov	r7, fp
 8000c9a:	4333      	orrs	r3, r6
 8000c9c:	4699      	mov	r9, r3
 8000c9e:	408f      	lsls	r7, r1
 8000ca0:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <__aeabi_ddiv+0x298>)
 8000ca2:	2600      	movs	r6, #0
 8000ca4:	1a1b      	subs	r3, r3, r0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	e752      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000cae:	4641      	mov	r1, r8
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	493b      	ldr	r1, [pc, #236]	; (8000da4 <__aeabi_ddiv+0x29c>)
 8000cb6:	469b      	mov	fp, r3
 8000cb8:	468c      	mov	ip, r1
 8000cba:	9b00      	ldr	r3, [sp, #0]
 8000cbc:	4463      	add	r3, ip
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	465b      	mov	r3, fp
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d13b      	bne.n	8000d3e <__aeabi_ddiv+0x236>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	431e      	orrs	r6, r3
 8000ccc:	2102      	movs	r1, #2
 8000cce:	e761      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	469b      	mov	fp, r3
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_ddiv+0x240>
 8000cd8:	4643      	mov	r3, r8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_ddiv+0x1d8>
 8000cde:	e162      	b.n	8000fa6 <__aeabi_ddiv+0x49e>
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	f001 fa17 	bl	8002114 <__clzsi2>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	3b0b      	subs	r3, #11
 8000cea:	2b1c      	cmp	r3, #28
 8000cec:	dd00      	ble.n	8000cf0 <__aeabi_ddiv+0x1e8>
 8000cee:	e153      	b.n	8000f98 <__aeabi_ddiv+0x490>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	4641      	mov	r1, r8
 8000cf4:	3a08      	subs	r2, #8
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	4688      	mov	r8, r1
 8000cfa:	211d      	movs	r1, #29
 8000cfc:	1acb      	subs	r3, r1, r3
 8000cfe:	4651      	mov	r1, sl
 8000d00:	40d9      	lsrs	r1, r3
 8000d02:	000b      	movs	r3, r1
 8000d04:	4641      	mov	r1, r8
 8000d06:	430b      	orrs	r3, r1
 8000d08:	469b      	mov	fp, r3
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	001a      	movs	r2, r3
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	4925      	ldr	r1, [pc, #148]	; (8000da8 <__aeabi_ddiv+0x2a0>)
 8000d14:	469c      	mov	ip, r3
 8000d16:	4460      	add	r0, ip
 8000d18:	0003      	movs	r3, r0
 8000d1a:	468c      	mov	ip, r1
 8000d1c:	4463      	add	r3, ip
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e737      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000d24:	2303      	movs	r3, #3
 8000d26:	46b1      	mov	r9, r6
 8000d28:	9000      	str	r0, [sp, #0]
 8000d2a:	260c      	movs	r6, #12
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	e711      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	2604      	movs	r6, #4
 8000d38:	2700      	movs	r7, #0
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	e70a      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	46c3      	mov	fp, r8
 8000d42:	431e      	orrs	r6, r3
 8000d44:	2103      	movs	r1, #3
 8000d46:	e725      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000d48:	3301      	adds	r3, #1
 8000d4a:	431e      	orrs	r6, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	e720      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000d52:	2300      	movs	r3, #0
 8000d54:	469a      	mov	sl, r3
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	2700      	movs	r7, #0
 8000d5a:	031b      	lsls	r3, r3, #12
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000d5e:	e761      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	4649      	mov	r1, r9
 8000d64:	031b      	lsls	r3, r3, #12
 8000d66:	4219      	tst	r1, r3
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x264>
 8000d6a:	e0e2      	b.n	8000f32 <__aeabi_ddiv+0x42a>
 8000d6c:	4659      	mov	r1, fp
 8000d6e:	4219      	tst	r1, r3
 8000d70:	d000      	beq.n	8000d74 <__aeabi_ddiv+0x26c>
 8000d72:	e0de      	b.n	8000f32 <__aeabi_ddiv+0x42a>
 8000d74:	430b      	orrs	r3, r1
 8000d76:	031b      	lsls	r3, r3, #12
 8000d78:	0017      	movs	r7, r2
 8000d7a:	0b1b      	lsrs	r3, r3, #12
 8000d7c:	46a2      	mov	sl, r4
 8000d7e:	4a01      	ldr	r2, [pc, #4]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000d80:	e750      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	000007ff 	.word	0x000007ff
 8000d88:	fffffc01 	.word	0xfffffc01
 8000d8c:	08009cdc 	.word	0x08009cdc
 8000d90:	000003ff 	.word	0x000003ff
 8000d94:	feffffff 	.word	0xfeffffff
 8000d98:	000007fe 	.word	0x000007fe
 8000d9c:	800fffff 	.word	0x800fffff
 8000da0:	fffffc0d 	.word	0xfffffc0d
 8000da4:	fffff801 	.word	0xfffff801
 8000da8:	000003f3 	.word	0x000003f3
 8000dac:	45d9      	cmp	r9, fp
 8000dae:	d900      	bls.n	8000db2 <__aeabi_ddiv+0x2aa>
 8000db0:	e0cb      	b.n	8000f4a <__aeabi_ddiv+0x442>
 8000db2:	d100      	bne.n	8000db6 <__aeabi_ddiv+0x2ae>
 8000db4:	e0c6      	b.n	8000f44 <__aeabi_ddiv+0x43c>
 8000db6:	003c      	movs	r4, r7
 8000db8:	4648      	mov	r0, r9
 8000dba:	2700      	movs	r7, #0
 8000dbc:	9b00      	ldr	r3, [sp, #0]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	0e16      	lsrs	r6, r2, #24
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	0213      	lsls	r3, r2, #8
 8000dcc:	4698      	mov	r8, r3
 8000dce:	0433      	lsls	r3, r6, #16
 8000dd0:	0c1b      	lsrs	r3, r3, #16
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	0c31      	lsrs	r1, r6, #16
 8000dd6:	9101      	str	r1, [sp, #4]
 8000dd8:	f7ff fa2e 	bl	8000238 <__aeabi_uidivmod>
 8000ddc:	464a      	mov	r2, r9
 8000dde:	4342      	muls	r2, r0
 8000de0:	040b      	lsls	r3, r1, #16
 8000de2:	0c21      	lsrs	r1, r4, #16
 8000de4:	0005      	movs	r5, r0
 8000de6:	4319      	orrs	r1, r3
 8000de8:	428a      	cmp	r2, r1
 8000dea:	d907      	bls.n	8000dfc <__aeabi_ddiv+0x2f4>
 8000dec:	1989      	adds	r1, r1, r6
 8000dee:	3d01      	subs	r5, #1
 8000df0:	428e      	cmp	r6, r1
 8000df2:	d803      	bhi.n	8000dfc <__aeabi_ddiv+0x2f4>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	d901      	bls.n	8000dfc <__aeabi_ddiv+0x2f4>
 8000df8:	1e85      	subs	r5, r0, #2
 8000dfa:	1989      	adds	r1, r1, r6
 8000dfc:	1a88      	subs	r0, r1, r2
 8000dfe:	9901      	ldr	r1, [sp, #4]
 8000e00:	f7ff fa1a 	bl	8000238 <__aeabi_uidivmod>
 8000e04:	0409      	lsls	r1, r1, #16
 8000e06:	468c      	mov	ip, r1
 8000e08:	464a      	mov	r2, r9
 8000e0a:	0421      	lsls	r1, r4, #16
 8000e0c:	4664      	mov	r4, ip
 8000e0e:	4342      	muls	r2, r0
 8000e10:	0c09      	lsrs	r1, r1, #16
 8000e12:	0003      	movs	r3, r0
 8000e14:	4321      	orrs	r1, r4
 8000e16:	428a      	cmp	r2, r1
 8000e18:	d904      	bls.n	8000e24 <__aeabi_ddiv+0x31c>
 8000e1a:	1989      	adds	r1, r1, r6
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	428e      	cmp	r6, r1
 8000e20:	d800      	bhi.n	8000e24 <__aeabi_ddiv+0x31c>
 8000e22:	e0f1      	b.n	8001008 <__aeabi_ddiv+0x500>
 8000e24:	042d      	lsls	r5, r5, #16
 8000e26:	431d      	orrs	r5, r3
 8000e28:	46ab      	mov	fp, r5
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	1a89      	subs	r1, r1, r2
 8000e2e:	4642      	mov	r2, r8
 8000e30:	0c28      	lsrs	r0, r5, #16
 8000e32:	0412      	lsls	r2, r2, #16
 8000e34:	0c1d      	lsrs	r5, r3, #16
 8000e36:	465b      	mov	r3, fp
 8000e38:	0c14      	lsrs	r4, r2, #16
 8000e3a:	0022      	movs	r2, r4
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	435a      	muls	r2, r3
 8000e42:	9403      	str	r4, [sp, #12]
 8000e44:	436b      	muls	r3, r5
 8000e46:	4344      	muls	r4, r0
 8000e48:	9502      	str	r5, [sp, #8]
 8000e4a:	4368      	muls	r0, r5
 8000e4c:	191b      	adds	r3, r3, r4
 8000e4e:	0c15      	lsrs	r5, r2, #16
 8000e50:	18eb      	adds	r3, r5, r3
 8000e52:	429c      	cmp	r4, r3
 8000e54:	d903      	bls.n	8000e5e <__aeabi_ddiv+0x356>
 8000e56:	2480      	movs	r4, #128	; 0x80
 8000e58:	0264      	lsls	r4, r4, #9
 8000e5a:	46a4      	mov	ip, r4
 8000e5c:	4460      	add	r0, ip
 8000e5e:	0c1c      	lsrs	r4, r3, #16
 8000e60:	0415      	lsls	r5, r2, #16
 8000e62:	041b      	lsls	r3, r3, #16
 8000e64:	0c2d      	lsrs	r5, r5, #16
 8000e66:	1820      	adds	r0, r4, r0
 8000e68:	195d      	adds	r5, r3, r5
 8000e6a:	4281      	cmp	r1, r0
 8000e6c:	d377      	bcc.n	8000f5e <__aeabi_ddiv+0x456>
 8000e6e:	d073      	beq.n	8000f58 <__aeabi_ddiv+0x450>
 8000e70:	1a0c      	subs	r4, r1, r0
 8000e72:	4aa2      	ldr	r2, [pc, #648]	; (80010fc <__aeabi_ddiv+0x5f4>)
 8000e74:	1b7d      	subs	r5, r7, r5
 8000e76:	42af      	cmp	r7, r5
 8000e78:	41bf      	sbcs	r7, r7
 8000e7a:	4694      	mov	ip, r2
 8000e7c:	9b00      	ldr	r3, [sp, #0]
 8000e7e:	427f      	negs	r7, r7
 8000e80:	4463      	add	r3, ip
 8000e82:	1be0      	subs	r0, r4, r7
 8000e84:	001c      	movs	r4, r3
 8000e86:	4286      	cmp	r6, r0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_ddiv+0x384>
 8000e8a:	e0db      	b.n	8001044 <__aeabi_ddiv+0x53c>
 8000e8c:	9901      	ldr	r1, [sp, #4]
 8000e8e:	f7ff f9d3 	bl	8000238 <__aeabi_uidivmod>
 8000e92:	464a      	mov	r2, r9
 8000e94:	4342      	muls	r2, r0
 8000e96:	040b      	lsls	r3, r1, #16
 8000e98:	0c29      	lsrs	r1, r5, #16
 8000e9a:	0007      	movs	r7, r0
 8000e9c:	4319      	orrs	r1, r3
 8000e9e:	428a      	cmp	r2, r1
 8000ea0:	d907      	bls.n	8000eb2 <__aeabi_ddiv+0x3aa>
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	3f01      	subs	r7, #1
 8000ea6:	428e      	cmp	r6, r1
 8000ea8:	d803      	bhi.n	8000eb2 <__aeabi_ddiv+0x3aa>
 8000eaa:	428a      	cmp	r2, r1
 8000eac:	d901      	bls.n	8000eb2 <__aeabi_ddiv+0x3aa>
 8000eae:	1e87      	subs	r7, r0, #2
 8000eb0:	1989      	adds	r1, r1, r6
 8000eb2:	1a88      	subs	r0, r1, r2
 8000eb4:	9901      	ldr	r1, [sp, #4]
 8000eb6:	f7ff f9bf 	bl	8000238 <__aeabi_uidivmod>
 8000eba:	0409      	lsls	r1, r1, #16
 8000ebc:	464a      	mov	r2, r9
 8000ebe:	4689      	mov	r9, r1
 8000ec0:	0429      	lsls	r1, r5, #16
 8000ec2:	464d      	mov	r5, r9
 8000ec4:	4342      	muls	r2, r0
 8000ec6:	0c09      	lsrs	r1, r1, #16
 8000ec8:	0003      	movs	r3, r0
 8000eca:	4329      	orrs	r1, r5
 8000ecc:	428a      	cmp	r2, r1
 8000ece:	d907      	bls.n	8000ee0 <__aeabi_ddiv+0x3d8>
 8000ed0:	1989      	adds	r1, r1, r6
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	428e      	cmp	r6, r1
 8000ed6:	d803      	bhi.n	8000ee0 <__aeabi_ddiv+0x3d8>
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d901      	bls.n	8000ee0 <__aeabi_ddiv+0x3d8>
 8000edc:	1e83      	subs	r3, r0, #2
 8000ede:	1989      	adds	r1, r1, r6
 8000ee0:	043f      	lsls	r7, r7, #16
 8000ee2:	1a89      	subs	r1, r1, r2
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	9f03      	ldr	r7, [sp, #12]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	0038      	movs	r0, r7
 8000eec:	0413      	lsls	r3, r2, #16
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	4358      	muls	r0, r3
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	9802      	ldr	r0, [sp, #8]
 8000ef6:	0c15      	lsrs	r5, r2, #16
 8000ef8:	436f      	muls	r7, r5
 8000efa:	4343      	muls	r3, r0
 8000efc:	4345      	muls	r5, r0
 8000efe:	4648      	mov	r0, r9
 8000f00:	0c00      	lsrs	r0, r0, #16
 8000f02:	4684      	mov	ip, r0
 8000f04:	19db      	adds	r3, r3, r7
 8000f06:	4463      	add	r3, ip
 8000f08:	429f      	cmp	r7, r3
 8000f0a:	d903      	bls.n	8000f14 <__aeabi_ddiv+0x40c>
 8000f0c:	2080      	movs	r0, #128	; 0x80
 8000f0e:	0240      	lsls	r0, r0, #9
 8000f10:	4684      	mov	ip, r0
 8000f12:	4465      	add	r5, ip
 8000f14:	4648      	mov	r0, r9
 8000f16:	0c1f      	lsrs	r7, r3, #16
 8000f18:	0400      	lsls	r0, r0, #16
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	0c00      	lsrs	r0, r0, #16
 8000f1e:	197d      	adds	r5, r7, r5
 8000f20:	1818      	adds	r0, r3, r0
 8000f22:	42a9      	cmp	r1, r5
 8000f24:	d200      	bcs.n	8000f28 <__aeabi_ddiv+0x420>
 8000f26:	e084      	b.n	8001032 <__aeabi_ddiv+0x52a>
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x424>
 8000f2a:	e07f      	b.n	800102c <__aeabi_ddiv+0x524>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	e657      	b.n	8000be2 <__aeabi_ddiv+0xda>
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	464a      	mov	r2, r9
 8000f36:	031b      	lsls	r3, r3, #12
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	0b1b      	lsrs	r3, r3, #12
 8000f3e:	46aa      	mov	sl, r5
 8000f40:	4a6f      	ldr	r2, [pc, #444]	; (8001100 <__aeabi_ddiv+0x5f8>)
 8000f42:	e66f      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000f44:	42ba      	cmp	r2, r7
 8000f46:	d900      	bls.n	8000f4a <__aeabi_ddiv+0x442>
 8000f48:	e735      	b.n	8000db6 <__aeabi_ddiv+0x2ae>
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	07dc      	lsls	r4, r3, #31
 8000f4e:	0858      	lsrs	r0, r3, #1
 8000f50:	087b      	lsrs	r3, r7, #1
 8000f52:	431c      	orrs	r4, r3
 8000f54:	07ff      	lsls	r7, r7, #31
 8000f56:	e734      	b.n	8000dc2 <__aeabi_ddiv+0x2ba>
 8000f58:	2400      	movs	r4, #0
 8000f5a:	42af      	cmp	r7, r5
 8000f5c:	d289      	bcs.n	8000e72 <__aeabi_ddiv+0x36a>
 8000f5e:	4447      	add	r7, r8
 8000f60:	4547      	cmp	r7, r8
 8000f62:	41a4      	sbcs	r4, r4
 8000f64:	465b      	mov	r3, fp
 8000f66:	4264      	negs	r4, r4
 8000f68:	19a4      	adds	r4, r4, r6
 8000f6a:	1864      	adds	r4, r4, r1
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	42a6      	cmp	r6, r4
 8000f70:	d21e      	bcs.n	8000fb0 <__aeabi_ddiv+0x4a8>
 8000f72:	42a0      	cmp	r0, r4
 8000f74:	d86d      	bhi.n	8001052 <__aeabi_ddiv+0x54a>
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x472>
 8000f78:	e0b6      	b.n	80010e8 <__aeabi_ddiv+0x5e0>
 8000f7a:	1a24      	subs	r4, r4, r0
 8000f7c:	469b      	mov	fp, r3
 8000f7e:	e778      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 8000f80:	0003      	movs	r3, r0
 8000f82:	465a      	mov	r2, fp
 8000f84:	3b28      	subs	r3, #40	; 0x28
 8000f86:	409a      	lsls	r2, r3
 8000f88:	2700      	movs	r7, #0
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	e688      	b.n	8000ca0 <__aeabi_ddiv+0x198>
 8000f8e:	4658      	mov	r0, fp
 8000f90:	f001 f8c0 	bl	8002114 <__clzsi2>
 8000f94:	3020      	adds	r0, #32
 8000f96:	e672      	b.n	8000c7e <__aeabi_ddiv+0x176>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	4652      	mov	r2, sl
 8000f9c:	3b28      	subs	r3, #40	; 0x28
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	e6b4      	b.n	8000d10 <__aeabi_ddiv+0x208>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	f001 f8b4 	bl	8002114 <__clzsi2>
 8000fac:	3020      	adds	r0, #32
 8000fae:	e69a      	b.n	8000ce6 <__aeabi_ddiv+0x1de>
 8000fb0:	42a6      	cmp	r6, r4
 8000fb2:	d1e2      	bne.n	8000f7a <__aeabi_ddiv+0x472>
 8000fb4:	45b8      	cmp	r8, r7
 8000fb6:	d9dc      	bls.n	8000f72 <__aeabi_ddiv+0x46a>
 8000fb8:	1a34      	subs	r4, r6, r0
 8000fba:	469b      	mov	fp, r3
 8000fbc:	e759      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 8000fbe:	2b1f      	cmp	r3, #31
 8000fc0:	dc65      	bgt.n	800108e <__aeabi_ddiv+0x586>
 8000fc2:	4c50      	ldr	r4, [pc, #320]	; (8001104 <__aeabi_ddiv+0x5fc>)
 8000fc4:	9900      	ldr	r1, [sp, #0]
 8000fc6:	46a4      	mov	ip, r4
 8000fc8:	465c      	mov	r4, fp
 8000fca:	4461      	add	r1, ip
 8000fcc:	0008      	movs	r0, r1
 8000fce:	408c      	lsls	r4, r1
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	4082      	lsls	r2, r0
 8000fd4:	40d9      	lsrs	r1, r3
 8000fd6:	1e50      	subs	r0, r2, #1
 8000fd8:	4182      	sbcs	r2, r0
 8000fda:	430c      	orrs	r4, r1
 8000fdc:	4314      	orrs	r4, r2
 8000fde:	465a      	mov	r2, fp
 8000fe0:	40da      	lsrs	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d009      	beq.n	8000ffc <__aeabi_ddiv+0x4f4>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d005      	beq.n	8000ffc <__aeabi_ddiv+0x4f4>
 8000ff0:	0022      	movs	r2, r4
 8000ff2:	1d14      	adds	r4, r2, #4
 8000ff4:	4294      	cmp	r4, r2
 8000ff6:	4189      	sbcs	r1, r1
 8000ff8:	4249      	negs	r1, r1
 8000ffa:	185b      	adds	r3, r3, r1
 8000ffc:	021a      	lsls	r2, r3, #8
 8000ffe:	d562      	bpl.n	80010c6 <__aeabi_ddiv+0x5be>
 8001000:	2201      	movs	r2, #1
 8001002:	2300      	movs	r3, #0
 8001004:	2700      	movs	r7, #0
 8001006:	e60d      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8001008:	428a      	cmp	r2, r1
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x506>
 800100c:	e70a      	b.n	8000e24 <__aeabi_ddiv+0x31c>
 800100e:	1e83      	subs	r3, r0, #2
 8001010:	1989      	adds	r1, r1, r6
 8001012:	e707      	b.n	8000e24 <__aeabi_ddiv+0x31c>
 8001014:	230f      	movs	r3, #15
 8001016:	4013      	ands	r3, r2
 8001018:	2b04      	cmp	r3, #4
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x516>
 800101c:	e5e6      	b.n	8000bec <__aeabi_ddiv+0xe4>
 800101e:	1d17      	adds	r7, r2, #4
 8001020:	4297      	cmp	r7, r2
 8001022:	4192      	sbcs	r2, r2
 8001024:	4253      	negs	r3, r2
 8001026:	449b      	add	fp, r3
 8001028:	08fa      	lsrs	r2, r7, #3
 800102a:	e5e0      	b.n	8000bee <__aeabi_ddiv+0xe6>
 800102c:	2800      	cmp	r0, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_ddiv+0x52a>
 8001030:	e5d7      	b.n	8000be2 <__aeabi_ddiv+0xda>
 8001032:	1871      	adds	r1, r6, r1
 8001034:	1e53      	subs	r3, r2, #1
 8001036:	42b1      	cmp	r1, r6
 8001038:	d327      	bcc.n	800108a <__aeabi_ddiv+0x582>
 800103a:	42a9      	cmp	r1, r5
 800103c:	d315      	bcc.n	800106a <__aeabi_ddiv+0x562>
 800103e:	d058      	beq.n	80010f2 <__aeabi_ddiv+0x5ea>
 8001040:	001a      	movs	r2, r3
 8001042:	e773      	b.n	8000f2c <__aeabi_ddiv+0x424>
 8001044:	2b00      	cmp	r3, #0
 8001046:	dc00      	bgt.n	800104a <__aeabi_ddiv+0x542>
 8001048:	e604      	b.n	8000c54 <__aeabi_ddiv+0x14c>
 800104a:	2301      	movs	r3, #1
 800104c:	2200      	movs	r2, #0
 800104e:	449b      	add	fp, r3
 8001050:	e5cd      	b.n	8000bee <__aeabi_ddiv+0xe6>
 8001052:	2302      	movs	r3, #2
 8001054:	4447      	add	r7, r8
 8001056:	4547      	cmp	r7, r8
 8001058:	4189      	sbcs	r1, r1
 800105a:	425b      	negs	r3, r3
 800105c:	469c      	mov	ip, r3
 800105e:	4249      	negs	r1, r1
 8001060:	1989      	adds	r1, r1, r6
 8001062:	190c      	adds	r4, r1, r4
 8001064:	44e3      	add	fp, ip
 8001066:	1a24      	subs	r4, r4, r0
 8001068:	e703      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 800106a:	4643      	mov	r3, r8
 800106c:	005f      	lsls	r7, r3, #1
 800106e:	4547      	cmp	r7, r8
 8001070:	419b      	sbcs	r3, r3
 8001072:	46b8      	mov	r8, r7
 8001074:	425b      	negs	r3, r3
 8001076:	199e      	adds	r6, r3, r6
 8001078:	3a02      	subs	r2, #2
 800107a:	1989      	adds	r1, r1, r6
 800107c:	42a9      	cmp	r1, r5
 800107e:	d000      	beq.n	8001082 <__aeabi_ddiv+0x57a>
 8001080:	e754      	b.n	8000f2c <__aeabi_ddiv+0x424>
 8001082:	4540      	cmp	r0, r8
 8001084:	d000      	beq.n	8001088 <__aeabi_ddiv+0x580>
 8001086:	e751      	b.n	8000f2c <__aeabi_ddiv+0x424>
 8001088:	e5ab      	b.n	8000be2 <__aeabi_ddiv+0xda>
 800108a:	001a      	movs	r2, r3
 800108c:	e7f6      	b.n	800107c <__aeabi_ddiv+0x574>
 800108e:	211f      	movs	r1, #31
 8001090:	465f      	mov	r7, fp
 8001092:	4249      	negs	r1, r1
 8001094:	1b0c      	subs	r4, r1, r4
 8001096:	40e7      	lsrs	r7, r4
 8001098:	2b20      	cmp	r3, #32
 800109a:	d007      	beq.n	80010ac <__aeabi_ddiv+0x5a4>
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <__aeabi_ddiv+0x600>)
 800109e:	9b00      	ldr	r3, [sp, #0]
 80010a0:	468c      	mov	ip, r1
 80010a2:	4463      	add	r3, ip
 80010a4:	0018      	movs	r0, r3
 80010a6:	465b      	mov	r3, fp
 80010a8:	4083      	lsls	r3, r0
 80010aa:	431a      	orrs	r2, r3
 80010ac:	1e50      	subs	r0, r2, #1
 80010ae:	4182      	sbcs	r2, r0
 80010b0:	433a      	orrs	r2, r7
 80010b2:	2707      	movs	r7, #7
 80010b4:	2300      	movs	r3, #0
 80010b6:	4017      	ands	r7, r2
 80010b8:	d009      	beq.n	80010ce <__aeabi_ddiv+0x5c6>
 80010ba:	210f      	movs	r1, #15
 80010bc:	2300      	movs	r3, #0
 80010be:	4011      	ands	r1, r2
 80010c0:	0014      	movs	r4, r2
 80010c2:	2904      	cmp	r1, #4
 80010c4:	d195      	bne.n	8000ff2 <__aeabi_ddiv+0x4ea>
 80010c6:	0022      	movs	r2, r4
 80010c8:	075f      	lsls	r7, r3, #29
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	0b1b      	lsrs	r3, r3, #12
 80010ce:	08d2      	lsrs	r2, r2, #3
 80010d0:	4317      	orrs	r7, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	e5a6      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4659      	mov	r1, fp
 80010da:	031b      	lsls	r3, r3, #12
 80010dc:	430b      	orrs	r3, r1
 80010de:	031b      	lsls	r3, r3, #12
 80010e0:	0017      	movs	r7, r2
 80010e2:	0b1b      	lsrs	r3, r3, #12
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <__aeabi_ddiv+0x5f8>)
 80010e6:	e59d      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 80010e8:	42bd      	cmp	r5, r7
 80010ea:	d8b2      	bhi.n	8001052 <__aeabi_ddiv+0x54a>
 80010ec:	469b      	mov	fp, r3
 80010ee:	2400      	movs	r4, #0
 80010f0:	e6bf      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 80010f2:	4580      	cmp	r8, r0
 80010f4:	d3b9      	bcc.n	800106a <__aeabi_ddiv+0x562>
 80010f6:	001a      	movs	r2, r3
 80010f8:	e7c3      	b.n	8001082 <__aeabi_ddiv+0x57a>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000003ff 	.word	0x000003ff
 8001100:	000007ff 	.word	0x000007ff
 8001104:	0000041e 	.word	0x0000041e
 8001108:	0000043e 	.word	0x0000043e

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464f      	mov	r7, r9
 8001110:	4646      	mov	r6, r8
 8001112:	46d6      	mov	lr, sl
 8001114:	4684      	mov	ip, r0
 8001116:	b5c0      	push	{r6, r7, lr}
 8001118:	4680      	mov	r8, r0
 800111a:	4e19      	ldr	r6, [pc, #100]	; (8001180 <__eqdf2+0x74>)
 800111c:	0318      	lsls	r0, r3, #12
 800111e:	030f      	lsls	r7, r1, #12
 8001120:	004d      	lsls	r5, r1, #1
 8001122:	0b00      	lsrs	r0, r0, #12
 8001124:	005c      	lsls	r4, r3, #1
 8001126:	4682      	mov	sl, r0
 8001128:	0b3f      	lsrs	r7, r7, #12
 800112a:	0d6d      	lsrs	r5, r5, #21
 800112c:	0fc9      	lsrs	r1, r1, #31
 800112e:	4691      	mov	r9, r2
 8001130:	0d64      	lsrs	r4, r4, #21
 8001132:	0fdb      	lsrs	r3, r3, #31
 8001134:	2001      	movs	r0, #1
 8001136:	42b5      	cmp	r5, r6
 8001138:	d00a      	beq.n	8001150 <__eqdf2+0x44>
 800113a:	42b4      	cmp	r4, r6
 800113c:	d003      	beq.n	8001146 <__eqdf2+0x3a>
 800113e:	42a5      	cmp	r5, r4
 8001140:	d101      	bne.n	8001146 <__eqdf2+0x3a>
 8001142:	4557      	cmp	r7, sl
 8001144:	d00c      	beq.n	8001160 <__eqdf2+0x54>
 8001146:	bc1c      	pop	{r2, r3, r4}
 8001148:	4690      	mov	r8, r2
 800114a:	4699      	mov	r9, r3
 800114c:	46a2      	mov	sl, r4
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	4666      	mov	r6, ip
 8001152:	433e      	orrs	r6, r7
 8001154:	d1f7      	bne.n	8001146 <__eqdf2+0x3a>
 8001156:	42ac      	cmp	r4, r5
 8001158:	d1f5      	bne.n	8001146 <__eqdf2+0x3a>
 800115a:	4654      	mov	r4, sl
 800115c:	4314      	orrs	r4, r2
 800115e:	d1f2      	bne.n	8001146 <__eqdf2+0x3a>
 8001160:	2001      	movs	r0, #1
 8001162:	45c8      	cmp	r8, r9
 8001164:	d1ef      	bne.n	8001146 <__eqdf2+0x3a>
 8001166:	4299      	cmp	r1, r3
 8001168:	d007      	beq.n	800117a <__eqdf2+0x6e>
 800116a:	2d00      	cmp	r5, #0
 800116c:	d1eb      	bne.n	8001146 <__eqdf2+0x3a>
 800116e:	4663      	mov	r3, ip
 8001170:	431f      	orrs	r7, r3
 8001172:	0038      	movs	r0, r7
 8001174:	1e47      	subs	r7, r0, #1
 8001176:	41b8      	sbcs	r0, r7
 8001178:	e7e5      	b.n	8001146 <__eqdf2+0x3a>
 800117a:	2000      	movs	r0, #0
 800117c:	e7e3      	b.n	8001146 <__eqdf2+0x3a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	464f      	mov	r7, r9
 8001188:	4646      	mov	r6, r8
 800118a:	46d6      	mov	lr, sl
 800118c:	004d      	lsls	r5, r1, #1
 800118e:	b5c0      	push	{r6, r7, lr}
 8001190:	030e      	lsls	r6, r1, #12
 8001192:	0fc9      	lsrs	r1, r1, #31
 8001194:	468a      	mov	sl, r1
 8001196:	492c      	ldr	r1, [pc, #176]	; (8001248 <__gedf2+0xc4>)
 8001198:	031f      	lsls	r7, r3, #12
 800119a:	005c      	lsls	r4, r3, #1
 800119c:	4680      	mov	r8, r0
 800119e:	0b36      	lsrs	r6, r6, #12
 80011a0:	0d6d      	lsrs	r5, r5, #21
 80011a2:	4691      	mov	r9, r2
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d64      	lsrs	r4, r4, #21
 80011a8:	0fdb      	lsrs	r3, r3, #31
 80011aa:	428d      	cmp	r5, r1
 80011ac:	d01e      	beq.n	80011ec <__gedf2+0x68>
 80011ae:	428c      	cmp	r4, r1
 80011b0:	d016      	beq.n	80011e0 <__gedf2+0x5c>
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d11e      	bne.n	80011f4 <__gedf2+0x70>
 80011b6:	4330      	orrs	r0, r6
 80011b8:	4684      	mov	ip, r0
 80011ba:	2c00      	cmp	r4, #0
 80011bc:	d101      	bne.n	80011c2 <__gedf2+0x3e>
 80011be:	433a      	orrs	r2, r7
 80011c0:	d023      	beq.n	800120a <__gedf2+0x86>
 80011c2:	4662      	mov	r2, ip
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d01a      	beq.n	80011fe <__gedf2+0x7a>
 80011c8:	459a      	cmp	sl, r3
 80011ca:	d029      	beq.n	8001220 <__gedf2+0x9c>
 80011cc:	4651      	mov	r1, sl
 80011ce:	2002      	movs	r0, #2
 80011d0:	3901      	subs	r1, #1
 80011d2:	4008      	ands	r0, r1
 80011d4:	3801      	subs	r0, #1
 80011d6:	bc1c      	pop	{r2, r3, r4}
 80011d8:	4690      	mov	r8, r2
 80011da:	4699      	mov	r9, r3
 80011dc:	46a2      	mov	sl, r4
 80011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e0:	0039      	movs	r1, r7
 80011e2:	4311      	orrs	r1, r2
 80011e4:	d0e5      	beq.n	80011b2 <__gedf2+0x2e>
 80011e6:	2002      	movs	r0, #2
 80011e8:	4240      	negs	r0, r0
 80011ea:	e7f4      	b.n	80011d6 <__gedf2+0x52>
 80011ec:	4330      	orrs	r0, r6
 80011ee:	d1fa      	bne.n	80011e6 <__gedf2+0x62>
 80011f0:	42ac      	cmp	r4, r5
 80011f2:	d00f      	beq.n	8001214 <__gedf2+0x90>
 80011f4:	2c00      	cmp	r4, #0
 80011f6:	d10f      	bne.n	8001218 <__gedf2+0x94>
 80011f8:	433a      	orrs	r2, r7
 80011fa:	d0e7      	beq.n	80011cc <__gedf2+0x48>
 80011fc:	e00c      	b.n	8001218 <__gedf2+0x94>
 80011fe:	2201      	movs	r2, #1
 8001200:	3b01      	subs	r3, #1
 8001202:	4393      	bics	r3, r2
 8001204:	0018      	movs	r0, r3
 8001206:	3001      	adds	r0, #1
 8001208:	e7e5      	b.n	80011d6 <__gedf2+0x52>
 800120a:	4663      	mov	r3, ip
 800120c:	2000      	movs	r0, #0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0e1      	beq.n	80011d6 <__gedf2+0x52>
 8001212:	e7db      	b.n	80011cc <__gedf2+0x48>
 8001214:	433a      	orrs	r2, r7
 8001216:	d1e6      	bne.n	80011e6 <__gedf2+0x62>
 8001218:	459a      	cmp	sl, r3
 800121a:	d1d7      	bne.n	80011cc <__gedf2+0x48>
 800121c:	42a5      	cmp	r5, r4
 800121e:	dcd5      	bgt.n	80011cc <__gedf2+0x48>
 8001220:	42a5      	cmp	r5, r4
 8001222:	db05      	blt.n	8001230 <__gedf2+0xac>
 8001224:	42be      	cmp	r6, r7
 8001226:	d8d1      	bhi.n	80011cc <__gedf2+0x48>
 8001228:	d008      	beq.n	800123c <__gedf2+0xb8>
 800122a:	2000      	movs	r0, #0
 800122c:	42be      	cmp	r6, r7
 800122e:	d2d2      	bcs.n	80011d6 <__gedf2+0x52>
 8001230:	4650      	mov	r0, sl
 8001232:	2301      	movs	r3, #1
 8001234:	3801      	subs	r0, #1
 8001236:	4398      	bics	r0, r3
 8001238:	3001      	adds	r0, #1
 800123a:	e7cc      	b.n	80011d6 <__gedf2+0x52>
 800123c:	45c8      	cmp	r8, r9
 800123e:	d8c5      	bhi.n	80011cc <__gedf2+0x48>
 8001240:	2000      	movs	r0, #0
 8001242:	45c8      	cmp	r8, r9
 8001244:	d3f4      	bcc.n	8001230 <__gedf2+0xac>
 8001246:	e7c6      	b.n	80011d6 <__gedf2+0x52>
 8001248:	000007ff 	.word	0x000007ff

0800124c <__ledf2>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	464f      	mov	r7, r9
 8001250:	4646      	mov	r6, r8
 8001252:	46d6      	mov	lr, sl
 8001254:	004d      	lsls	r5, r1, #1
 8001256:	b5c0      	push	{r6, r7, lr}
 8001258:	030e      	lsls	r6, r1, #12
 800125a:	0fc9      	lsrs	r1, r1, #31
 800125c:	468a      	mov	sl, r1
 800125e:	492e      	ldr	r1, [pc, #184]	; (8001318 <__ledf2+0xcc>)
 8001260:	031f      	lsls	r7, r3, #12
 8001262:	005c      	lsls	r4, r3, #1
 8001264:	4680      	mov	r8, r0
 8001266:	0b36      	lsrs	r6, r6, #12
 8001268:	0d6d      	lsrs	r5, r5, #21
 800126a:	4691      	mov	r9, r2
 800126c:	0b3f      	lsrs	r7, r7, #12
 800126e:	0d64      	lsrs	r4, r4, #21
 8001270:	0fdb      	lsrs	r3, r3, #31
 8001272:	428d      	cmp	r5, r1
 8001274:	d018      	beq.n	80012a8 <__ledf2+0x5c>
 8001276:	428c      	cmp	r4, r1
 8001278:	d011      	beq.n	800129e <__ledf2+0x52>
 800127a:	2d00      	cmp	r5, #0
 800127c:	d118      	bne.n	80012b0 <__ledf2+0x64>
 800127e:	4330      	orrs	r0, r6
 8001280:	4684      	mov	ip, r0
 8001282:	2c00      	cmp	r4, #0
 8001284:	d11e      	bne.n	80012c4 <__ledf2+0x78>
 8001286:	433a      	orrs	r2, r7
 8001288:	d11c      	bne.n	80012c4 <__ledf2+0x78>
 800128a:	4663      	mov	r3, ip
 800128c:	2000      	movs	r0, #0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d030      	beq.n	80012f4 <__ledf2+0xa8>
 8001292:	4651      	mov	r1, sl
 8001294:	2002      	movs	r0, #2
 8001296:	3901      	subs	r1, #1
 8001298:	4008      	ands	r0, r1
 800129a:	3801      	subs	r0, #1
 800129c:	e02a      	b.n	80012f4 <__ledf2+0xa8>
 800129e:	0039      	movs	r1, r7
 80012a0:	4311      	orrs	r1, r2
 80012a2:	d0ea      	beq.n	800127a <__ledf2+0x2e>
 80012a4:	2002      	movs	r0, #2
 80012a6:	e025      	b.n	80012f4 <__ledf2+0xa8>
 80012a8:	4330      	orrs	r0, r6
 80012aa:	d1fb      	bne.n	80012a4 <__ledf2+0x58>
 80012ac:	42ac      	cmp	r4, r5
 80012ae:	d026      	beq.n	80012fe <__ledf2+0xb2>
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d126      	bne.n	8001302 <__ledf2+0xb6>
 80012b4:	433a      	orrs	r2, r7
 80012b6:	d124      	bne.n	8001302 <__ledf2+0xb6>
 80012b8:	4651      	mov	r1, sl
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	e017      	b.n	80012f4 <__ledf2+0xa8>
 80012c4:	4662      	mov	r2, ip
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d00f      	beq.n	80012ea <__ledf2+0x9e>
 80012ca:	459a      	cmp	sl, r3
 80012cc:	d1e1      	bne.n	8001292 <__ledf2+0x46>
 80012ce:	42a5      	cmp	r5, r4
 80012d0:	db05      	blt.n	80012de <__ledf2+0x92>
 80012d2:	42be      	cmp	r6, r7
 80012d4:	d8dd      	bhi.n	8001292 <__ledf2+0x46>
 80012d6:	d019      	beq.n	800130c <__ledf2+0xc0>
 80012d8:	2000      	movs	r0, #0
 80012da:	42be      	cmp	r6, r7
 80012dc:	d20a      	bcs.n	80012f4 <__ledf2+0xa8>
 80012de:	4650      	mov	r0, sl
 80012e0:	2301      	movs	r3, #1
 80012e2:	3801      	subs	r0, #1
 80012e4:	4398      	bics	r0, r3
 80012e6:	3001      	adds	r0, #1
 80012e8:	e004      	b.n	80012f4 <__ledf2+0xa8>
 80012ea:	2201      	movs	r2, #1
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4393      	bics	r3, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	3001      	adds	r0, #1
 80012f4:	bc1c      	pop	{r2, r3, r4}
 80012f6:	4690      	mov	r8, r2
 80012f8:	4699      	mov	r9, r3
 80012fa:	46a2      	mov	sl, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	433a      	orrs	r2, r7
 8001300:	d1d0      	bne.n	80012a4 <__ledf2+0x58>
 8001302:	459a      	cmp	sl, r3
 8001304:	d1c5      	bne.n	8001292 <__ledf2+0x46>
 8001306:	42a5      	cmp	r5, r4
 8001308:	dcc3      	bgt.n	8001292 <__ledf2+0x46>
 800130a:	e7e0      	b.n	80012ce <__ledf2+0x82>
 800130c:	45c8      	cmp	r8, r9
 800130e:	d8c0      	bhi.n	8001292 <__ledf2+0x46>
 8001310:	2000      	movs	r0, #0
 8001312:	45c8      	cmp	r8, r9
 8001314:	d3e3      	bcc.n	80012de <__ledf2+0x92>
 8001316:	e7ed      	b.n	80012f4 <__ledf2+0xa8>
 8001318:	000007ff 	.word	0x000007ff

0800131c <__aeabi_dmul>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	4657      	mov	r7, sl
 8001320:	46de      	mov	lr, fp
 8001322:	464e      	mov	r6, r9
 8001324:	4645      	mov	r5, r8
 8001326:	b5e0      	push	{r5, r6, r7, lr}
 8001328:	4683      	mov	fp, r0
 800132a:	0006      	movs	r6, r0
 800132c:	030f      	lsls	r7, r1, #12
 800132e:	0048      	lsls	r0, r1, #1
 8001330:	b087      	sub	sp, #28
 8001332:	4692      	mov	sl, r2
 8001334:	001d      	movs	r5, r3
 8001336:	0b3f      	lsrs	r7, r7, #12
 8001338:	0d40      	lsrs	r0, r0, #21
 800133a:	0fcc      	lsrs	r4, r1, #31
 800133c:	2800      	cmp	r0, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_dmul+0x26>
 8001340:	e06f      	b.n	8001422 <__aeabi_dmul+0x106>
 8001342:	4bde      	ldr	r3, [pc, #888]	; (80016bc <__aeabi_dmul+0x3a0>)
 8001344:	4298      	cmp	r0, r3
 8001346:	d038      	beq.n	80013ba <__aeabi_dmul+0x9e>
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	00ff      	lsls	r7, r7, #3
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	431f      	orrs	r7, r3
 8001350:	0f73      	lsrs	r3, r6, #29
 8001352:	433b      	orrs	r3, r7
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	4bda      	ldr	r3, [pc, #872]	; (80016c0 <__aeabi_dmul+0x3a4>)
 8001358:	2700      	movs	r7, #0
 800135a:	4699      	mov	r9, r3
 800135c:	2300      	movs	r3, #0
 800135e:	469b      	mov	fp, r3
 8001360:	00f6      	lsls	r6, r6, #3
 8001362:	4481      	add	r9, r0
 8001364:	032b      	lsls	r3, r5, #12
 8001366:	0069      	lsls	r1, r5, #1
 8001368:	0b1b      	lsrs	r3, r3, #12
 800136a:	4652      	mov	r2, sl
 800136c:	4698      	mov	r8, r3
 800136e:	0d49      	lsrs	r1, r1, #21
 8001370:	0fed      	lsrs	r5, r5, #31
 8001372:	2900      	cmp	r1, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_dmul+0x5c>
 8001376:	e085      	b.n	8001484 <__aeabi_dmul+0x168>
 8001378:	4bd0      	ldr	r3, [pc, #832]	; (80016bc <__aeabi_dmul+0x3a0>)
 800137a:	4299      	cmp	r1, r3
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0x64>
 800137e:	e073      	b.n	8001468 <__aeabi_dmul+0x14c>
 8001380:	4643      	mov	r3, r8
 8001382:	00da      	lsls	r2, r3, #3
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	4313      	orrs	r3, r2
 800138a:	4652      	mov	r2, sl
 800138c:	48cc      	ldr	r0, [pc, #816]	; (80016c0 <__aeabi_dmul+0x3a4>)
 800138e:	0f52      	lsrs	r2, r2, #29
 8001390:	4684      	mov	ip, r0
 8001392:	4313      	orrs	r3, r2
 8001394:	4652      	mov	r2, sl
 8001396:	2000      	movs	r0, #0
 8001398:	4461      	add	r1, ip
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	4489      	add	r9, r1
 800139e:	0021      	movs	r1, r4
 80013a0:	4069      	eors	r1, r5
 80013a2:	9100      	str	r1, [sp, #0]
 80013a4:	468c      	mov	ip, r1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4449      	add	r1, r9
 80013aa:	468a      	mov	sl, r1
 80013ac:	2f0f      	cmp	r7, #15
 80013ae:	d900      	bls.n	80013b2 <__aeabi_dmul+0x96>
 80013b0:	e090      	b.n	80014d4 <__aeabi_dmul+0x1b8>
 80013b2:	49c4      	ldr	r1, [pc, #784]	; (80016c4 <__aeabi_dmul+0x3a8>)
 80013b4:	00bf      	lsls	r7, r7, #2
 80013b6:	59cf      	ldr	r7, [r1, r7]
 80013b8:	46bf      	mov	pc, r7
 80013ba:	465b      	mov	r3, fp
 80013bc:	433b      	orrs	r3, r7
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dmul+0xa8>
 80013c2:	e16a      	b.n	800169a <__aeabi_dmul+0x37e>
 80013c4:	2302      	movs	r3, #2
 80013c6:	2708      	movs	r7, #8
 80013c8:	2600      	movs	r6, #0
 80013ca:	4681      	mov	r9, r0
 80013cc:	469b      	mov	fp, r3
 80013ce:	e7c9      	b.n	8001364 <__aeabi_dmul+0x48>
 80013d0:	0032      	movs	r2, r6
 80013d2:	4658      	mov	r0, fp
 80013d4:	9b01      	ldr	r3, [sp, #4]
 80013d6:	4661      	mov	r1, ip
 80013d8:	9100      	str	r1, [sp, #0]
 80013da:	2802      	cmp	r0, #2
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dmul+0xc4>
 80013de:	e075      	b.n	80014cc <__aeabi_dmul+0x1b0>
 80013e0:	2803      	cmp	r0, #3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dmul+0xca>
 80013e4:	e1fe      	b.n	80017e4 <__aeabi_dmul+0x4c8>
 80013e6:	2801      	cmp	r0, #1
 80013e8:	d000      	beq.n	80013ec <__aeabi_dmul+0xd0>
 80013ea:	e12c      	b.n	8001646 <__aeabi_dmul+0x32a>
 80013ec:	2300      	movs	r3, #0
 80013ee:	2700      	movs	r7, #0
 80013f0:	2600      	movs	r6, #0
 80013f2:	2500      	movs	r5, #0
 80013f4:	033f      	lsls	r7, r7, #12
 80013f6:	0d2a      	lsrs	r2, r5, #20
 80013f8:	0b3f      	lsrs	r7, r7, #12
 80013fa:	48b3      	ldr	r0, [pc, #716]	; (80016c8 <__aeabi_dmul+0x3ac>)
 80013fc:	0512      	lsls	r2, r2, #20
 80013fe:	433a      	orrs	r2, r7
 8001400:	4002      	ands	r2, r0
 8001402:	051b      	lsls	r3, r3, #20
 8001404:	4313      	orrs	r3, r2
 8001406:	9a00      	ldr	r2, [sp, #0]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	07d1      	lsls	r1, r2, #31
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	430b      	orrs	r3, r1
 8001410:	0030      	movs	r0, r6
 8001412:	0019      	movs	r1, r3
 8001414:	b007      	add	sp, #28
 8001416:	bc3c      	pop	{r2, r3, r4, r5}
 8001418:	4690      	mov	r8, r2
 800141a:	4699      	mov	r9, r3
 800141c:	46a2      	mov	sl, r4
 800141e:	46ab      	mov	fp, r5
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001422:	465b      	mov	r3, fp
 8001424:	433b      	orrs	r3, r7
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	d100      	bne.n	800142c <__aeabi_dmul+0x110>
 800142a:	e12f      	b.n	800168c <__aeabi_dmul+0x370>
 800142c:	2f00      	cmp	r7, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x116>
 8001430:	e1a5      	b.n	800177e <__aeabi_dmul+0x462>
 8001432:	0038      	movs	r0, r7
 8001434:	f000 fe6e 	bl	8002114 <__clzsi2>
 8001438:	0003      	movs	r3, r0
 800143a:	3b0b      	subs	r3, #11
 800143c:	2b1c      	cmp	r3, #28
 800143e:	dd00      	ble.n	8001442 <__aeabi_dmul+0x126>
 8001440:	e196      	b.n	8001770 <__aeabi_dmul+0x454>
 8001442:	221d      	movs	r2, #29
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	465a      	mov	r2, fp
 8001448:	0001      	movs	r1, r0
 800144a:	40da      	lsrs	r2, r3
 800144c:	465e      	mov	r6, fp
 800144e:	3908      	subs	r1, #8
 8001450:	408f      	lsls	r7, r1
 8001452:	0013      	movs	r3, r2
 8001454:	408e      	lsls	r6, r1
 8001456:	433b      	orrs	r3, r7
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	4b9c      	ldr	r3, [pc, #624]	; (80016cc <__aeabi_dmul+0x3b0>)
 800145c:	2700      	movs	r7, #0
 800145e:	1a1b      	subs	r3, r3, r0
 8001460:	4699      	mov	r9, r3
 8001462:	2300      	movs	r3, #0
 8001464:	469b      	mov	fp, r3
 8001466:	e77d      	b.n	8001364 <__aeabi_dmul+0x48>
 8001468:	4641      	mov	r1, r8
 800146a:	4653      	mov	r3, sl
 800146c:	430b      	orrs	r3, r1
 800146e:	4993      	ldr	r1, [pc, #588]	; (80016bc <__aeabi_dmul+0x3a0>)
 8001470:	468c      	mov	ip, r1
 8001472:	44e1      	add	r9, ip
 8001474:	2b00      	cmp	r3, #0
 8001476:	d000      	beq.n	800147a <__aeabi_dmul+0x15e>
 8001478:	e11a      	b.n	80016b0 <__aeabi_dmul+0x394>
 800147a:	2202      	movs	r2, #2
 800147c:	2002      	movs	r0, #2
 800147e:	4317      	orrs	r7, r2
 8001480:	2200      	movs	r2, #0
 8001482:	e78c      	b.n	800139e <__aeabi_dmul+0x82>
 8001484:	4313      	orrs	r3, r2
 8001486:	d100      	bne.n	800148a <__aeabi_dmul+0x16e>
 8001488:	e10d      	b.n	80016a6 <__aeabi_dmul+0x38a>
 800148a:	4643      	mov	r3, r8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x176>
 8001490:	e181      	b.n	8001796 <__aeabi_dmul+0x47a>
 8001492:	4640      	mov	r0, r8
 8001494:	f000 fe3e 	bl	8002114 <__clzsi2>
 8001498:	0002      	movs	r2, r0
 800149a:	3a0b      	subs	r2, #11
 800149c:	2a1c      	cmp	r2, #28
 800149e:	dd00      	ble.n	80014a2 <__aeabi_dmul+0x186>
 80014a0:	e172      	b.n	8001788 <__aeabi_dmul+0x46c>
 80014a2:	0001      	movs	r1, r0
 80014a4:	4643      	mov	r3, r8
 80014a6:	3908      	subs	r1, #8
 80014a8:	408b      	lsls	r3, r1
 80014aa:	4698      	mov	r8, r3
 80014ac:	231d      	movs	r3, #29
 80014ae:	1a9a      	subs	r2, r3, r2
 80014b0:	4653      	mov	r3, sl
 80014b2:	40d3      	lsrs	r3, r2
 80014b4:	001a      	movs	r2, r3
 80014b6:	4643      	mov	r3, r8
 80014b8:	4313      	orrs	r3, r2
 80014ba:	4652      	mov	r2, sl
 80014bc:	408a      	lsls	r2, r1
 80014be:	4649      	mov	r1, r9
 80014c0:	1a08      	subs	r0, r1, r0
 80014c2:	4982      	ldr	r1, [pc, #520]	; (80016cc <__aeabi_dmul+0x3b0>)
 80014c4:	4689      	mov	r9, r1
 80014c6:	4481      	add	r9, r0
 80014c8:	2000      	movs	r0, #0
 80014ca:	e768      	b.n	800139e <__aeabi_dmul+0x82>
 80014cc:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <__aeabi_dmul+0x3a0>)
 80014ce:	2700      	movs	r7, #0
 80014d0:	2600      	movs	r6, #0
 80014d2:	e78e      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80014d4:	0c14      	lsrs	r4, r2, #16
 80014d6:	0412      	lsls	r2, r2, #16
 80014d8:	0c12      	lsrs	r2, r2, #16
 80014da:	0011      	movs	r1, r2
 80014dc:	0c37      	lsrs	r7, r6, #16
 80014de:	0436      	lsls	r6, r6, #16
 80014e0:	0c35      	lsrs	r5, r6, #16
 80014e2:	4379      	muls	r1, r7
 80014e4:	0028      	movs	r0, r5
 80014e6:	468c      	mov	ip, r1
 80014e8:	002e      	movs	r6, r5
 80014ea:	4360      	muls	r0, r4
 80014ec:	4460      	add	r0, ip
 80014ee:	4683      	mov	fp, r0
 80014f0:	4356      	muls	r6, r2
 80014f2:	0021      	movs	r1, r4
 80014f4:	0c30      	lsrs	r0, r6, #16
 80014f6:	4680      	mov	r8, r0
 80014f8:	4658      	mov	r0, fp
 80014fa:	4379      	muls	r1, r7
 80014fc:	4440      	add	r0, r8
 80014fe:	9102      	str	r1, [sp, #8]
 8001500:	4584      	cmp	ip, r0
 8001502:	d906      	bls.n	8001512 <__aeabi_dmul+0x1f6>
 8001504:	4688      	mov	r8, r1
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0249      	lsls	r1, r1, #9
 800150a:	468c      	mov	ip, r1
 800150c:	44e0      	add	r8, ip
 800150e:	4641      	mov	r1, r8
 8001510:	9102      	str	r1, [sp, #8]
 8001512:	0436      	lsls	r6, r6, #16
 8001514:	0c01      	lsrs	r1, r0, #16
 8001516:	0c36      	lsrs	r6, r6, #16
 8001518:	0400      	lsls	r0, r0, #16
 800151a:	468b      	mov	fp, r1
 800151c:	1981      	adds	r1, r0, r6
 800151e:	0c1e      	lsrs	r6, r3, #16
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	0c1b      	lsrs	r3, r3, #16
 8001524:	9103      	str	r1, [sp, #12]
 8001526:	0019      	movs	r1, r3
 8001528:	4379      	muls	r1, r7
 800152a:	468c      	mov	ip, r1
 800152c:	0028      	movs	r0, r5
 800152e:	4375      	muls	r5, r6
 8001530:	4465      	add	r5, ip
 8001532:	46a8      	mov	r8, r5
 8001534:	4358      	muls	r0, r3
 8001536:	0c05      	lsrs	r5, r0, #16
 8001538:	4445      	add	r5, r8
 800153a:	4377      	muls	r7, r6
 800153c:	42a9      	cmp	r1, r5
 800153e:	d903      	bls.n	8001548 <__aeabi_dmul+0x22c>
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0249      	lsls	r1, r1, #9
 8001544:	468c      	mov	ip, r1
 8001546:	4467      	add	r7, ip
 8001548:	0c29      	lsrs	r1, r5, #16
 800154a:	468c      	mov	ip, r1
 800154c:	0039      	movs	r1, r7
 800154e:	0400      	lsls	r0, r0, #16
 8001550:	0c00      	lsrs	r0, r0, #16
 8001552:	042d      	lsls	r5, r5, #16
 8001554:	182d      	adds	r5, r5, r0
 8001556:	4461      	add	r1, ip
 8001558:	44ab      	add	fp, r5
 800155a:	9105      	str	r1, [sp, #20]
 800155c:	4659      	mov	r1, fp
 800155e:	9104      	str	r1, [sp, #16]
 8001560:	9901      	ldr	r1, [sp, #4]
 8001562:	040f      	lsls	r7, r1, #16
 8001564:	0c3f      	lsrs	r7, r7, #16
 8001566:	0c08      	lsrs	r0, r1, #16
 8001568:	0039      	movs	r1, r7
 800156a:	4351      	muls	r1, r2
 800156c:	4342      	muls	r2, r0
 800156e:	4690      	mov	r8, r2
 8001570:	0002      	movs	r2, r0
 8001572:	468c      	mov	ip, r1
 8001574:	0c09      	lsrs	r1, r1, #16
 8001576:	468b      	mov	fp, r1
 8001578:	4362      	muls	r2, r4
 800157a:	437c      	muls	r4, r7
 800157c:	4444      	add	r4, r8
 800157e:	445c      	add	r4, fp
 8001580:	45a0      	cmp	r8, r4
 8001582:	d903      	bls.n	800158c <__aeabi_dmul+0x270>
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	0249      	lsls	r1, r1, #9
 8001588:	4688      	mov	r8, r1
 800158a:	4442      	add	r2, r8
 800158c:	0c21      	lsrs	r1, r4, #16
 800158e:	4688      	mov	r8, r1
 8001590:	4661      	mov	r1, ip
 8001592:	0409      	lsls	r1, r1, #16
 8001594:	0c09      	lsrs	r1, r1, #16
 8001596:	468c      	mov	ip, r1
 8001598:	0039      	movs	r1, r7
 800159a:	4359      	muls	r1, r3
 800159c:	4343      	muls	r3, r0
 800159e:	4370      	muls	r0, r6
 80015a0:	437e      	muls	r6, r7
 80015a2:	0c0f      	lsrs	r7, r1, #16
 80015a4:	18f6      	adds	r6, r6, r3
 80015a6:	0424      	lsls	r4, r4, #16
 80015a8:	19be      	adds	r6, r7, r6
 80015aa:	4464      	add	r4, ip
 80015ac:	4442      	add	r2, r8
 80015ae:	468c      	mov	ip, r1
 80015b0:	42b3      	cmp	r3, r6
 80015b2:	d903      	bls.n	80015bc <__aeabi_dmul+0x2a0>
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	4698      	mov	r8, r3
 80015ba:	4440      	add	r0, r8
 80015bc:	9b02      	ldr	r3, [sp, #8]
 80015be:	4661      	mov	r1, ip
 80015c0:	4698      	mov	r8, r3
 80015c2:	9b04      	ldr	r3, [sp, #16]
 80015c4:	0437      	lsls	r7, r6, #16
 80015c6:	4443      	add	r3, r8
 80015c8:	469b      	mov	fp, r3
 80015ca:	45ab      	cmp	fp, r5
 80015cc:	41ad      	sbcs	r5, r5
 80015ce:	426b      	negs	r3, r5
 80015d0:	040d      	lsls	r5, r1, #16
 80015d2:	9905      	ldr	r1, [sp, #20]
 80015d4:	0c2d      	lsrs	r5, r5, #16
 80015d6:	468c      	mov	ip, r1
 80015d8:	197f      	adds	r7, r7, r5
 80015da:	4467      	add	r7, ip
 80015dc:	18fd      	adds	r5, r7, r3
 80015de:	46a8      	mov	r8, r5
 80015e0:	465d      	mov	r5, fp
 80015e2:	192d      	adds	r5, r5, r4
 80015e4:	42a5      	cmp	r5, r4
 80015e6:	41a4      	sbcs	r4, r4
 80015e8:	4693      	mov	fp, r2
 80015ea:	4264      	negs	r4, r4
 80015ec:	46a4      	mov	ip, r4
 80015ee:	44c3      	add	fp, r8
 80015f0:	44dc      	add	ip, fp
 80015f2:	428f      	cmp	r7, r1
 80015f4:	41bf      	sbcs	r7, r7
 80015f6:	4598      	cmp	r8, r3
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4593      	cmp	fp, r2
 80015fc:	4192      	sbcs	r2, r2
 80015fe:	45a4      	cmp	ip, r4
 8001600:	41a4      	sbcs	r4, r4
 8001602:	425b      	negs	r3, r3
 8001604:	427f      	negs	r7, r7
 8001606:	431f      	orrs	r7, r3
 8001608:	0c36      	lsrs	r6, r6, #16
 800160a:	4252      	negs	r2, r2
 800160c:	4264      	negs	r4, r4
 800160e:	19bf      	adds	r7, r7, r6
 8001610:	4322      	orrs	r2, r4
 8001612:	18bf      	adds	r7, r7, r2
 8001614:	4662      	mov	r2, ip
 8001616:	1838      	adds	r0, r7, r0
 8001618:	0243      	lsls	r3, r0, #9
 800161a:	0dd2      	lsrs	r2, r2, #23
 800161c:	9903      	ldr	r1, [sp, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	026a      	lsls	r2, r5, #9
 8001622:	430a      	orrs	r2, r1
 8001624:	1e50      	subs	r0, r2, #1
 8001626:	4182      	sbcs	r2, r0
 8001628:	4661      	mov	r1, ip
 800162a:	0ded      	lsrs	r5, r5, #23
 800162c:	432a      	orrs	r2, r5
 800162e:	024e      	lsls	r6, r1, #9
 8001630:	4332      	orrs	r2, r6
 8001632:	01d9      	lsls	r1, r3, #7
 8001634:	d400      	bmi.n	8001638 <__aeabi_dmul+0x31c>
 8001636:	e0b3      	b.n	80017a0 <__aeabi_dmul+0x484>
 8001638:	2601      	movs	r6, #1
 800163a:	0850      	lsrs	r0, r2, #1
 800163c:	4032      	ands	r2, r6
 800163e:	4302      	orrs	r2, r0
 8001640:	07de      	lsls	r6, r3, #31
 8001642:	4332      	orrs	r2, r6
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	4c22      	ldr	r4, [pc, #136]	; (80016d0 <__aeabi_dmul+0x3b4>)
 8001648:	4454      	add	r4, sl
 800164a:	2c00      	cmp	r4, #0
 800164c:	dd62      	ble.n	8001714 <__aeabi_dmul+0x3f8>
 800164e:	0751      	lsls	r1, r2, #29
 8001650:	d009      	beq.n	8001666 <__aeabi_dmul+0x34a>
 8001652:	200f      	movs	r0, #15
 8001654:	4010      	ands	r0, r2
 8001656:	2804      	cmp	r0, #4
 8001658:	d005      	beq.n	8001666 <__aeabi_dmul+0x34a>
 800165a:	1d10      	adds	r0, r2, #4
 800165c:	4290      	cmp	r0, r2
 800165e:	4192      	sbcs	r2, r2
 8001660:	4252      	negs	r2, r2
 8001662:	189b      	adds	r3, r3, r2
 8001664:	0002      	movs	r2, r0
 8001666:	01d9      	lsls	r1, r3, #7
 8001668:	d504      	bpl.n	8001674 <__aeabi_dmul+0x358>
 800166a:	2480      	movs	r4, #128	; 0x80
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <__aeabi_dmul+0x3b8>)
 800166e:	00e4      	lsls	r4, r4, #3
 8001670:	4003      	ands	r3, r0
 8001672:	4454      	add	r4, sl
 8001674:	4818      	ldr	r0, [pc, #96]	; (80016d8 <__aeabi_dmul+0x3bc>)
 8001676:	4284      	cmp	r4, r0
 8001678:	dd00      	ble.n	800167c <__aeabi_dmul+0x360>
 800167a:	e727      	b.n	80014cc <__aeabi_dmul+0x1b0>
 800167c:	075e      	lsls	r6, r3, #29
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	08d2      	lsrs	r2, r2, #3
 8001682:	0b1f      	lsrs	r7, r3, #12
 8001684:	0563      	lsls	r3, r4, #21
 8001686:	4316      	orrs	r6, r2
 8001688:	0d5b      	lsrs	r3, r3, #21
 800168a:	e6b2      	b.n	80013f2 <__aeabi_dmul+0xd6>
 800168c:	2300      	movs	r3, #0
 800168e:	4699      	mov	r9, r3
 8001690:	3301      	adds	r3, #1
 8001692:	2704      	movs	r7, #4
 8001694:	2600      	movs	r6, #0
 8001696:	469b      	mov	fp, r3
 8001698:	e664      	b.n	8001364 <__aeabi_dmul+0x48>
 800169a:	2303      	movs	r3, #3
 800169c:	9701      	str	r7, [sp, #4]
 800169e:	4681      	mov	r9, r0
 80016a0:	270c      	movs	r7, #12
 80016a2:	469b      	mov	fp, r3
 80016a4:	e65e      	b.n	8001364 <__aeabi_dmul+0x48>
 80016a6:	2201      	movs	r2, #1
 80016a8:	2001      	movs	r0, #1
 80016aa:	4317      	orrs	r7, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	e676      	b.n	800139e <__aeabi_dmul+0x82>
 80016b0:	2303      	movs	r3, #3
 80016b2:	2003      	movs	r0, #3
 80016b4:	431f      	orrs	r7, r3
 80016b6:	4643      	mov	r3, r8
 80016b8:	e671      	b.n	800139e <__aeabi_dmul+0x82>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	08009d1c 	.word	0x08009d1c
 80016c8:	800fffff 	.word	0x800fffff
 80016cc:	fffffc0d 	.word	0xfffffc0d
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	2300      	movs	r3, #0
 80016de:	2780      	movs	r7, #128	; 0x80
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	033f      	lsls	r7, r7, #12
 80016e4:	2600      	movs	r6, #0
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <__aeabi_dmul+0x4d8>)
 80016e8:	e683      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80016ea:	9b01      	ldr	r3, [sp, #4]
 80016ec:	0032      	movs	r2, r6
 80016ee:	46a4      	mov	ip, r4
 80016f0:	4658      	mov	r0, fp
 80016f2:	e670      	b.n	80013d6 <__aeabi_dmul+0xba>
 80016f4:	46ac      	mov	ip, r5
 80016f6:	e66e      	b.n	80013d6 <__aeabi_dmul+0xba>
 80016f8:	2780      	movs	r7, #128	; 0x80
 80016fa:	9901      	ldr	r1, [sp, #4]
 80016fc:	033f      	lsls	r7, r7, #12
 80016fe:	4239      	tst	r1, r7
 8001700:	d02d      	beq.n	800175e <__aeabi_dmul+0x442>
 8001702:	423b      	tst	r3, r7
 8001704:	d12b      	bne.n	800175e <__aeabi_dmul+0x442>
 8001706:	431f      	orrs	r7, r3
 8001708:	033f      	lsls	r7, r7, #12
 800170a:	0b3f      	lsrs	r7, r7, #12
 800170c:	9500      	str	r5, [sp, #0]
 800170e:	0016      	movs	r6, r2
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <__aeabi_dmul+0x4d8>)
 8001712:	e66e      	b.n	80013f2 <__aeabi_dmul+0xd6>
 8001714:	2501      	movs	r5, #1
 8001716:	1b2d      	subs	r5, r5, r4
 8001718:	2d38      	cmp	r5, #56	; 0x38
 800171a:	dd00      	ble.n	800171e <__aeabi_dmul+0x402>
 800171c:	e666      	b.n	80013ec <__aeabi_dmul+0xd0>
 800171e:	2d1f      	cmp	r5, #31
 8001720:	dc40      	bgt.n	80017a4 <__aeabi_dmul+0x488>
 8001722:	4835      	ldr	r0, [pc, #212]	; (80017f8 <__aeabi_dmul+0x4dc>)
 8001724:	001c      	movs	r4, r3
 8001726:	4450      	add	r0, sl
 8001728:	0016      	movs	r6, r2
 800172a:	4082      	lsls	r2, r0
 800172c:	4084      	lsls	r4, r0
 800172e:	40ee      	lsrs	r6, r5
 8001730:	1e50      	subs	r0, r2, #1
 8001732:	4182      	sbcs	r2, r0
 8001734:	4334      	orrs	r4, r6
 8001736:	4314      	orrs	r4, r2
 8001738:	40eb      	lsrs	r3, r5
 800173a:	0762      	lsls	r2, r4, #29
 800173c:	d009      	beq.n	8001752 <__aeabi_dmul+0x436>
 800173e:	220f      	movs	r2, #15
 8001740:	4022      	ands	r2, r4
 8001742:	2a04      	cmp	r2, #4
 8001744:	d005      	beq.n	8001752 <__aeabi_dmul+0x436>
 8001746:	0022      	movs	r2, r4
 8001748:	1d14      	adds	r4, r2, #4
 800174a:	4294      	cmp	r4, r2
 800174c:	4180      	sbcs	r0, r0
 800174e:	4240      	negs	r0, r0
 8001750:	181b      	adds	r3, r3, r0
 8001752:	021a      	lsls	r2, r3, #8
 8001754:	d53e      	bpl.n	80017d4 <__aeabi_dmul+0x4b8>
 8001756:	2301      	movs	r3, #1
 8001758:	2700      	movs	r7, #0
 800175a:	2600      	movs	r6, #0
 800175c:	e649      	b.n	80013f2 <__aeabi_dmul+0xd6>
 800175e:	2780      	movs	r7, #128	; 0x80
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	431f      	orrs	r7, r3
 8001766:	033f      	lsls	r7, r7, #12
 8001768:	0b3f      	lsrs	r7, r7, #12
 800176a:	9400      	str	r4, [sp, #0]
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <__aeabi_dmul+0x4d8>)
 800176e:	e640      	b.n	80013f2 <__aeabi_dmul+0xd6>
 8001770:	0003      	movs	r3, r0
 8001772:	465a      	mov	r2, fp
 8001774:	3b28      	subs	r3, #40	; 0x28
 8001776:	409a      	lsls	r2, r3
 8001778:	2600      	movs	r6, #0
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	e66d      	b.n	800145a <__aeabi_dmul+0x13e>
 800177e:	4658      	mov	r0, fp
 8001780:	f000 fcc8 	bl	8002114 <__clzsi2>
 8001784:	3020      	adds	r0, #32
 8001786:	e657      	b.n	8001438 <__aeabi_dmul+0x11c>
 8001788:	0003      	movs	r3, r0
 800178a:	4652      	mov	r2, sl
 800178c:	3b28      	subs	r3, #40	; 0x28
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	e693      	b.n	80014be <__aeabi_dmul+0x1a2>
 8001796:	4650      	mov	r0, sl
 8001798:	f000 fcbc 	bl	8002114 <__clzsi2>
 800179c:	3020      	adds	r0, #32
 800179e:	e67b      	b.n	8001498 <__aeabi_dmul+0x17c>
 80017a0:	46ca      	mov	sl, r9
 80017a2:	e750      	b.n	8001646 <__aeabi_dmul+0x32a>
 80017a4:	201f      	movs	r0, #31
 80017a6:	001e      	movs	r6, r3
 80017a8:	4240      	negs	r0, r0
 80017aa:	1b04      	subs	r4, r0, r4
 80017ac:	40e6      	lsrs	r6, r4
 80017ae:	2d20      	cmp	r5, #32
 80017b0:	d003      	beq.n	80017ba <__aeabi_dmul+0x49e>
 80017b2:	4c12      	ldr	r4, [pc, #72]	; (80017fc <__aeabi_dmul+0x4e0>)
 80017b4:	4454      	add	r4, sl
 80017b6:	40a3      	lsls	r3, r4
 80017b8:	431a      	orrs	r2, r3
 80017ba:	1e50      	subs	r0, r2, #1
 80017bc:	4182      	sbcs	r2, r0
 80017be:	4332      	orrs	r2, r6
 80017c0:	2607      	movs	r6, #7
 80017c2:	2700      	movs	r7, #0
 80017c4:	4016      	ands	r6, r2
 80017c6:	d009      	beq.n	80017dc <__aeabi_dmul+0x4c0>
 80017c8:	200f      	movs	r0, #15
 80017ca:	2300      	movs	r3, #0
 80017cc:	4010      	ands	r0, r2
 80017ce:	0014      	movs	r4, r2
 80017d0:	2804      	cmp	r0, #4
 80017d2:	d1b9      	bne.n	8001748 <__aeabi_dmul+0x42c>
 80017d4:	0022      	movs	r2, r4
 80017d6:	075e      	lsls	r6, r3, #29
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	0b1f      	lsrs	r7, r3, #12
 80017dc:	08d2      	lsrs	r2, r2, #3
 80017de:	4316      	orrs	r6, r2
 80017e0:	2300      	movs	r3, #0
 80017e2:	e606      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80017e4:	2780      	movs	r7, #128	; 0x80
 80017e6:	033f      	lsls	r7, r7, #12
 80017e8:	431f      	orrs	r7, r3
 80017ea:	033f      	lsls	r7, r7, #12
 80017ec:	0b3f      	lsrs	r7, r7, #12
 80017ee:	0016      	movs	r6, r2
 80017f0:	4b00      	ldr	r3, [pc, #0]	; (80017f4 <__aeabi_dmul+0x4d8>)
 80017f2:	e5fe      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80017f4:	000007ff 	.word	0x000007ff
 80017f8:	0000041e 	.word	0x0000041e
 80017fc:	0000043e 	.word	0x0000043e

08001800 <__aeabi_dsub>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4657      	mov	r7, sl
 8001804:	464e      	mov	r6, r9
 8001806:	4645      	mov	r5, r8
 8001808:	46de      	mov	lr, fp
 800180a:	000c      	movs	r4, r1
 800180c:	0309      	lsls	r1, r1, #12
 800180e:	b5e0      	push	{r5, r6, r7, lr}
 8001810:	0a49      	lsrs	r1, r1, #9
 8001812:	0f46      	lsrs	r6, r0, #29
 8001814:	005f      	lsls	r7, r3, #1
 8001816:	4331      	orrs	r1, r6
 8001818:	031e      	lsls	r6, r3, #12
 800181a:	0fdb      	lsrs	r3, r3, #31
 800181c:	0a76      	lsrs	r6, r6, #9
 800181e:	469b      	mov	fp, r3
 8001820:	0f53      	lsrs	r3, r2, #29
 8001822:	4333      	orrs	r3, r6
 8001824:	4ec8      	ldr	r6, [pc, #800]	; (8001b48 <__aeabi_dsub+0x348>)
 8001826:	0065      	lsls	r5, r4, #1
 8001828:	00c0      	lsls	r0, r0, #3
 800182a:	0fe4      	lsrs	r4, r4, #31
 800182c:	00d2      	lsls	r2, r2, #3
 800182e:	0d6d      	lsrs	r5, r5, #21
 8001830:	46a2      	mov	sl, r4
 8001832:	4681      	mov	r9, r0
 8001834:	0d7f      	lsrs	r7, r7, #21
 8001836:	469c      	mov	ip, r3
 8001838:	4690      	mov	r8, r2
 800183a:	42b7      	cmp	r7, r6
 800183c:	d100      	bne.n	8001840 <__aeabi_dsub+0x40>
 800183e:	e0b9      	b.n	80019b4 <__aeabi_dsub+0x1b4>
 8001840:	465b      	mov	r3, fp
 8001842:	2601      	movs	r6, #1
 8001844:	4073      	eors	r3, r6
 8001846:	469b      	mov	fp, r3
 8001848:	1bee      	subs	r6, r5, r7
 800184a:	45a3      	cmp	fp, r4
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x50>
 800184e:	e083      	b.n	8001958 <__aeabi_dsub+0x158>
 8001850:	2e00      	cmp	r6, #0
 8001852:	dd63      	ble.n	800191c <__aeabi_dsub+0x11c>
 8001854:	2f00      	cmp	r7, #0
 8001856:	d000      	beq.n	800185a <__aeabi_dsub+0x5a>
 8001858:	e0b1      	b.n	80019be <__aeabi_dsub+0x1be>
 800185a:	4663      	mov	r3, ip
 800185c:	4313      	orrs	r3, r2
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x62>
 8001860:	e123      	b.n	8001aaa <__aeabi_dsub+0x2aa>
 8001862:	1e73      	subs	r3, r6, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d000      	beq.n	800186a <__aeabi_dsub+0x6a>
 8001868:	e1ba      	b.n	8001be0 <__aeabi_dsub+0x3e0>
 800186a:	1a86      	subs	r6, r0, r2
 800186c:	4663      	mov	r3, ip
 800186e:	42b0      	cmp	r0, r6
 8001870:	4180      	sbcs	r0, r0
 8001872:	2501      	movs	r5, #1
 8001874:	1ac9      	subs	r1, r1, r3
 8001876:	4240      	negs	r0, r0
 8001878:	1a09      	subs	r1, r1, r0
 800187a:	020b      	lsls	r3, r1, #8
 800187c:	d400      	bmi.n	8001880 <__aeabi_dsub+0x80>
 800187e:	e147      	b.n	8001b10 <__aeabi_dsub+0x310>
 8001880:	0249      	lsls	r1, r1, #9
 8001882:	0a4b      	lsrs	r3, r1, #9
 8001884:	4698      	mov	r8, r3
 8001886:	4643      	mov	r3, r8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d100      	bne.n	800188e <__aeabi_dsub+0x8e>
 800188c:	e189      	b.n	8001ba2 <__aeabi_dsub+0x3a2>
 800188e:	4640      	mov	r0, r8
 8001890:	f000 fc40 	bl	8002114 <__clzsi2>
 8001894:	0003      	movs	r3, r0
 8001896:	3b08      	subs	r3, #8
 8001898:	2b1f      	cmp	r3, #31
 800189a:	dd00      	ble.n	800189e <__aeabi_dsub+0x9e>
 800189c:	e17c      	b.n	8001b98 <__aeabi_dsub+0x398>
 800189e:	2220      	movs	r2, #32
 80018a0:	0030      	movs	r0, r6
 80018a2:	1ad2      	subs	r2, r2, r3
 80018a4:	4641      	mov	r1, r8
 80018a6:	40d0      	lsrs	r0, r2
 80018a8:	4099      	lsls	r1, r3
 80018aa:	0002      	movs	r2, r0
 80018ac:	409e      	lsls	r6, r3
 80018ae:	430a      	orrs	r2, r1
 80018b0:	429d      	cmp	r5, r3
 80018b2:	dd00      	ble.n	80018b6 <__aeabi_dsub+0xb6>
 80018b4:	e16a      	b.n	8001b8c <__aeabi_dsub+0x38c>
 80018b6:	1b5d      	subs	r5, r3, r5
 80018b8:	1c6b      	adds	r3, r5, #1
 80018ba:	2b1f      	cmp	r3, #31
 80018bc:	dd00      	ble.n	80018c0 <__aeabi_dsub+0xc0>
 80018be:	e194      	b.n	8001bea <__aeabi_dsub+0x3ea>
 80018c0:	2120      	movs	r1, #32
 80018c2:	0010      	movs	r0, r2
 80018c4:	0035      	movs	r5, r6
 80018c6:	1ac9      	subs	r1, r1, r3
 80018c8:	408e      	lsls	r6, r1
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	4088      	lsls	r0, r1
 80018ce:	40dd      	lsrs	r5, r3
 80018d0:	1e71      	subs	r1, r6, #1
 80018d2:	418e      	sbcs	r6, r1
 80018d4:	0011      	movs	r1, r2
 80018d6:	2207      	movs	r2, #7
 80018d8:	4328      	orrs	r0, r5
 80018da:	2500      	movs	r5, #0
 80018dc:	4306      	orrs	r6, r0
 80018de:	4032      	ands	r2, r6
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d009      	beq.n	80018f8 <__aeabi_dsub+0xf8>
 80018e4:	230f      	movs	r3, #15
 80018e6:	4033      	ands	r3, r6
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <__aeabi_dsub+0xf8>
 80018ec:	1d33      	adds	r3, r6, #4
 80018ee:	42b3      	cmp	r3, r6
 80018f0:	41b6      	sbcs	r6, r6
 80018f2:	4276      	negs	r6, r6
 80018f4:	1989      	adds	r1, r1, r6
 80018f6:	001e      	movs	r6, r3
 80018f8:	020b      	lsls	r3, r1, #8
 80018fa:	d400      	bmi.n	80018fe <__aeabi_dsub+0xfe>
 80018fc:	e23d      	b.n	8001d7a <__aeabi_dsub+0x57a>
 80018fe:	1c6a      	adds	r2, r5, #1
 8001900:	4b91      	ldr	r3, [pc, #580]	; (8001b48 <__aeabi_dsub+0x348>)
 8001902:	0555      	lsls	r5, r2, #21
 8001904:	0d6d      	lsrs	r5, r5, #21
 8001906:	429a      	cmp	r2, r3
 8001908:	d100      	bne.n	800190c <__aeabi_dsub+0x10c>
 800190a:	e119      	b.n	8001b40 <__aeabi_dsub+0x340>
 800190c:	4a8f      	ldr	r2, [pc, #572]	; (8001b4c <__aeabi_dsub+0x34c>)
 800190e:	08f6      	lsrs	r6, r6, #3
 8001910:	400a      	ands	r2, r1
 8001912:	0757      	lsls	r7, r2, #29
 8001914:	0252      	lsls	r2, r2, #9
 8001916:	4337      	orrs	r7, r6
 8001918:	0b12      	lsrs	r2, r2, #12
 800191a:	e09b      	b.n	8001a54 <__aeabi_dsub+0x254>
 800191c:	2e00      	cmp	r6, #0
 800191e:	d000      	beq.n	8001922 <__aeabi_dsub+0x122>
 8001920:	e0c5      	b.n	8001aae <__aeabi_dsub+0x2ae>
 8001922:	1c6e      	adds	r6, r5, #1
 8001924:	0576      	lsls	r6, r6, #21
 8001926:	0d76      	lsrs	r6, r6, #21
 8001928:	2e01      	cmp	r6, #1
 800192a:	dc00      	bgt.n	800192e <__aeabi_dsub+0x12e>
 800192c:	e148      	b.n	8001bc0 <__aeabi_dsub+0x3c0>
 800192e:	4667      	mov	r7, ip
 8001930:	1a86      	subs	r6, r0, r2
 8001932:	1bcb      	subs	r3, r1, r7
 8001934:	42b0      	cmp	r0, r6
 8001936:	41bf      	sbcs	r7, r7
 8001938:	427f      	negs	r7, r7
 800193a:	46b8      	mov	r8, r7
 800193c:	001f      	movs	r7, r3
 800193e:	4643      	mov	r3, r8
 8001940:	1aff      	subs	r7, r7, r3
 8001942:	003b      	movs	r3, r7
 8001944:	46b8      	mov	r8, r7
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	d500      	bpl.n	800194c <__aeabi_dsub+0x14c>
 800194a:	e15f      	b.n	8001c0c <__aeabi_dsub+0x40c>
 800194c:	4337      	orrs	r7, r6
 800194e:	d19a      	bne.n	8001886 <__aeabi_dsub+0x86>
 8001950:	2200      	movs	r2, #0
 8001952:	2400      	movs	r4, #0
 8001954:	2500      	movs	r5, #0
 8001956:	e079      	b.n	8001a4c <__aeabi_dsub+0x24c>
 8001958:	2e00      	cmp	r6, #0
 800195a:	dc00      	bgt.n	800195e <__aeabi_dsub+0x15e>
 800195c:	e0fa      	b.n	8001b54 <__aeabi_dsub+0x354>
 800195e:	2f00      	cmp	r7, #0
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x164>
 8001962:	e08d      	b.n	8001a80 <__aeabi_dsub+0x280>
 8001964:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <__aeabi_dsub+0x348>)
 8001966:	429d      	cmp	r5, r3
 8001968:	d067      	beq.n	8001a3a <__aeabi_dsub+0x23a>
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	4667      	mov	r7, ip
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	431f      	orrs	r7, r3
 8001972:	46bc      	mov	ip, r7
 8001974:	2e38      	cmp	r6, #56	; 0x38
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x17a>
 8001978:	e152      	b.n	8001c20 <__aeabi_dsub+0x420>
 800197a:	4663      	mov	r3, ip
 800197c:	4313      	orrs	r3, r2
 800197e:	1e5a      	subs	r2, r3, #1
 8001980:	4193      	sbcs	r3, r2
 8001982:	181e      	adds	r6, r3, r0
 8001984:	4286      	cmp	r6, r0
 8001986:	4180      	sbcs	r0, r0
 8001988:	4240      	negs	r0, r0
 800198a:	1809      	adds	r1, r1, r0
 800198c:	020b      	lsls	r3, r1, #8
 800198e:	d400      	bmi.n	8001992 <__aeabi_dsub+0x192>
 8001990:	e0be      	b.n	8001b10 <__aeabi_dsub+0x310>
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <__aeabi_dsub+0x348>)
 8001994:	3501      	adds	r5, #1
 8001996:	429d      	cmp	r5, r3
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x19c>
 800199a:	e0d2      	b.n	8001b42 <__aeabi_dsub+0x342>
 800199c:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <__aeabi_dsub+0x34c>)
 800199e:	0873      	lsrs	r3, r6, #1
 80019a0:	400a      	ands	r2, r1
 80019a2:	2101      	movs	r1, #1
 80019a4:	400e      	ands	r6, r1
 80019a6:	431e      	orrs	r6, r3
 80019a8:	0851      	lsrs	r1, r2, #1
 80019aa:	07d3      	lsls	r3, r2, #31
 80019ac:	2207      	movs	r2, #7
 80019ae:	431e      	orrs	r6, r3
 80019b0:	4032      	ands	r2, r6
 80019b2:	e795      	b.n	80018e0 <__aeabi_dsub+0xe0>
 80019b4:	001e      	movs	r6, r3
 80019b6:	4316      	orrs	r6, r2
 80019b8:	d000      	beq.n	80019bc <__aeabi_dsub+0x1bc>
 80019ba:	e745      	b.n	8001848 <__aeabi_dsub+0x48>
 80019bc:	e740      	b.n	8001840 <__aeabi_dsub+0x40>
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <__aeabi_dsub+0x348>)
 80019c0:	429d      	cmp	r5, r3
 80019c2:	d03a      	beq.n	8001a3a <__aeabi_dsub+0x23a>
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	4667      	mov	r7, ip
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431f      	orrs	r7, r3
 80019cc:	46bc      	mov	ip, r7
 80019ce:	2e38      	cmp	r6, #56	; 0x38
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_dsub+0x1d4>
 80019d2:	e0eb      	b.n	8001bac <__aeabi_dsub+0x3ac>
 80019d4:	2e1f      	cmp	r6, #31
 80019d6:	dc00      	bgt.n	80019da <__aeabi_dsub+0x1da>
 80019d8:	e13a      	b.n	8001c50 <__aeabi_dsub+0x450>
 80019da:	0033      	movs	r3, r6
 80019dc:	4667      	mov	r7, ip
 80019de:	3b20      	subs	r3, #32
 80019e0:	40df      	lsrs	r7, r3
 80019e2:	003b      	movs	r3, r7
 80019e4:	2e20      	cmp	r6, #32
 80019e6:	d005      	beq.n	80019f4 <__aeabi_dsub+0x1f4>
 80019e8:	2740      	movs	r7, #64	; 0x40
 80019ea:	1bbf      	subs	r7, r7, r6
 80019ec:	4666      	mov	r6, ip
 80019ee:	40be      	lsls	r6, r7
 80019f0:	4332      	orrs	r2, r6
 80019f2:	4690      	mov	r8, r2
 80019f4:	4646      	mov	r6, r8
 80019f6:	1e72      	subs	r2, r6, #1
 80019f8:	4196      	sbcs	r6, r2
 80019fa:	4333      	orrs	r3, r6
 80019fc:	e0da      	b.n	8001bb4 <__aeabi_dsub+0x3b4>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x204>
 8001a02:	e214      	b.n	8001e2e <__aeabi_dsub+0x62e>
 8001a04:	4663      	mov	r3, ip
 8001a06:	4313      	orrs	r3, r2
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x20c>
 8001a0a:	e168      	b.n	8001cde <__aeabi_dsub+0x4de>
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	074e      	lsls	r6, r1, #29
 8001a10:	08c0      	lsrs	r0, r0, #3
 8001a12:	08c9      	lsrs	r1, r1, #3
 8001a14:	031b      	lsls	r3, r3, #12
 8001a16:	4306      	orrs	r6, r0
 8001a18:	4219      	tst	r1, r3
 8001a1a:	d008      	beq.n	8001a2e <__aeabi_dsub+0x22e>
 8001a1c:	4660      	mov	r0, ip
 8001a1e:	08c0      	lsrs	r0, r0, #3
 8001a20:	4218      	tst	r0, r3
 8001a22:	d104      	bne.n	8001a2e <__aeabi_dsub+0x22e>
 8001a24:	4663      	mov	r3, ip
 8001a26:	0001      	movs	r1, r0
 8001a28:	08d2      	lsrs	r2, r2, #3
 8001a2a:	075e      	lsls	r6, r3, #29
 8001a2c:	4316      	orrs	r6, r2
 8001a2e:	00f3      	lsls	r3, r6, #3
 8001a30:	4699      	mov	r9, r3
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	0f72      	lsrs	r2, r6, #29
 8001a36:	4d44      	ldr	r5, [pc, #272]	; (8001b48 <__aeabi_dsub+0x348>)
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	08de      	lsrs	r6, r3, #3
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <__aeabi_dsub+0x348>)
 8001a40:	074f      	lsls	r7, r1, #29
 8001a42:	4337      	orrs	r7, r6
 8001a44:	08ca      	lsrs	r2, r1, #3
 8001a46:	429d      	cmp	r5, r3
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x24c>
 8001a4a:	e06e      	b.n	8001b2a <__aeabi_dsub+0x32a>
 8001a4c:	0312      	lsls	r2, r2, #12
 8001a4e:	056d      	lsls	r5, r5, #21
 8001a50:	0b12      	lsrs	r2, r2, #12
 8001a52:	0d6d      	lsrs	r5, r5, #21
 8001a54:	2100      	movs	r1, #0
 8001a56:	0312      	lsls	r2, r2, #12
 8001a58:	0b13      	lsrs	r3, r2, #12
 8001a5a:	0d0a      	lsrs	r2, r1, #20
 8001a5c:	0512      	lsls	r2, r2, #20
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <__aeabi_dsub+0x350>)
 8001a62:	052d      	lsls	r5, r5, #20
 8001a64:	4013      	ands	r3, r2
 8001a66:	432b      	orrs	r3, r5
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	07e4      	lsls	r4, r4, #31
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	0038      	movs	r0, r7
 8001a72:	0019      	movs	r1, r3
 8001a74:	bc3c      	pop	{r2, r3, r4, r5}
 8001a76:	4690      	mov	r8, r2
 8001a78:	4699      	mov	r9, r3
 8001a7a:	46a2      	mov	sl, r4
 8001a7c:	46ab      	mov	fp, r5
 8001a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a80:	4663      	mov	r3, ip
 8001a82:	4313      	orrs	r3, r2
 8001a84:	d011      	beq.n	8001aaa <__aeabi_dsub+0x2aa>
 8001a86:	1e73      	subs	r3, r6, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d000      	beq.n	8001a8e <__aeabi_dsub+0x28e>
 8001a8c:	e107      	b.n	8001c9e <__aeabi_dsub+0x49e>
 8001a8e:	1886      	adds	r6, r0, r2
 8001a90:	4286      	cmp	r6, r0
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	4461      	add	r1, ip
 8001a96:	4240      	negs	r0, r0
 8001a98:	1809      	adds	r1, r1, r0
 8001a9a:	2501      	movs	r5, #1
 8001a9c:	020b      	lsls	r3, r1, #8
 8001a9e:	d537      	bpl.n	8001b10 <__aeabi_dsub+0x310>
 8001aa0:	2502      	movs	r5, #2
 8001aa2:	e77b      	b.n	800199c <__aeabi_dsub+0x19c>
 8001aa4:	003e      	movs	r6, r7
 8001aa6:	4661      	mov	r1, ip
 8001aa8:	4691      	mov	r9, r2
 8001aaa:	0035      	movs	r5, r6
 8001aac:	e7c5      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001aae:	465c      	mov	r4, fp
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dsub+0x2b6>
 8001ab4:	e0e1      	b.n	8001c7a <__aeabi_dsub+0x47a>
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	4303      	orrs	r3, r0
 8001aba:	d0f3      	beq.n	8001aa4 <__aeabi_dsub+0x2a4>
 8001abc:	1c73      	adds	r3, r6, #1
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x2c2>
 8001ac0:	e1ac      	b.n	8001e1c <__aeabi_dsub+0x61c>
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <__aeabi_dsub+0x348>)
 8001ac4:	429f      	cmp	r7, r3
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x2ca>
 8001ac8:	e13a      	b.n	8001d40 <__aeabi_dsub+0x540>
 8001aca:	43f3      	mvns	r3, r6
 8001acc:	2b38      	cmp	r3, #56	; 0x38
 8001ace:	dd00      	ble.n	8001ad2 <__aeabi_dsub+0x2d2>
 8001ad0:	e16f      	b.n	8001db2 <__aeabi_dsub+0x5b2>
 8001ad2:	2b1f      	cmp	r3, #31
 8001ad4:	dd00      	ble.n	8001ad8 <__aeabi_dsub+0x2d8>
 8001ad6:	e18c      	b.n	8001df2 <__aeabi_dsub+0x5f2>
 8001ad8:	2520      	movs	r5, #32
 8001ada:	000e      	movs	r6, r1
 8001adc:	1aed      	subs	r5, r5, r3
 8001ade:	40ae      	lsls	r6, r5
 8001ae0:	46b0      	mov	r8, r6
 8001ae2:	0006      	movs	r6, r0
 8001ae4:	46aa      	mov	sl, r5
 8001ae6:	40de      	lsrs	r6, r3
 8001ae8:	4645      	mov	r5, r8
 8001aea:	4335      	orrs	r5, r6
 8001aec:	002e      	movs	r6, r5
 8001aee:	4655      	mov	r5, sl
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	40a8      	lsls	r0, r5
 8001af4:	4663      	mov	r3, ip
 8001af6:	1e45      	subs	r5, r0, #1
 8001af8:	41a8      	sbcs	r0, r5
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	469c      	mov	ip, r3
 8001afe:	4330      	orrs	r0, r6
 8001b00:	1a16      	subs	r6, r2, r0
 8001b02:	42b2      	cmp	r2, r6
 8001b04:	4192      	sbcs	r2, r2
 8001b06:	4663      	mov	r3, ip
 8001b08:	4252      	negs	r2, r2
 8001b0a:	1a99      	subs	r1, r3, r2
 8001b0c:	003d      	movs	r5, r7
 8001b0e:	e6b4      	b.n	800187a <__aeabi_dsub+0x7a>
 8001b10:	2207      	movs	r2, #7
 8001b12:	4032      	ands	r2, r6
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dsub+0x31a>
 8001b18:	e6e4      	b.n	80018e4 <__aeabi_dsub+0xe4>
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <__aeabi_dsub+0x348>)
 8001b1c:	08f6      	lsrs	r6, r6, #3
 8001b1e:	074f      	lsls	r7, r1, #29
 8001b20:	4337      	orrs	r7, r6
 8001b22:	08ca      	lsrs	r2, r1, #3
 8001b24:	429d      	cmp	r5, r3
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x32a>
 8001b28:	e790      	b.n	8001a4c <__aeabi_dsub+0x24c>
 8001b2a:	003b      	movs	r3, r7
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x332>
 8001b30:	e1a6      	b.n	8001e80 <__aeabi_dsub+0x680>
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	431a      	orrs	r2, r3
 8001b38:	0312      	lsls	r2, r2, #12
 8001b3a:	0b12      	lsrs	r2, r2, #12
 8001b3c:	4d02      	ldr	r5, [pc, #8]	; (8001b48 <__aeabi_dsub+0x348>)
 8001b3e:	e789      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001b40:	0015      	movs	r5, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	2700      	movs	r7, #0
 8001b46:	e785      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	800fffff 	.word	0x800fffff
 8001b54:	2e00      	cmp	r6, #0
 8001b56:	d000      	beq.n	8001b5a <__aeabi_dsub+0x35a>
 8001b58:	e0c7      	b.n	8001cea <__aeabi_dsub+0x4ea>
 8001b5a:	1c6b      	adds	r3, r5, #1
 8001b5c:	055e      	lsls	r6, r3, #21
 8001b5e:	0d76      	lsrs	r6, r6, #21
 8001b60:	2e01      	cmp	r6, #1
 8001b62:	dc00      	bgt.n	8001b66 <__aeabi_dsub+0x366>
 8001b64:	e0f0      	b.n	8001d48 <__aeabi_dsub+0x548>
 8001b66:	4dc8      	ldr	r5, [pc, #800]	; (8001e88 <__aeabi_dsub+0x688>)
 8001b68:	42ab      	cmp	r3, r5
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0x36e>
 8001b6c:	e0b9      	b.n	8001ce2 <__aeabi_dsub+0x4e2>
 8001b6e:	1885      	adds	r5, r0, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	4285      	cmp	r5, r0
 8001b74:	4189      	sbcs	r1, r1
 8001b76:	4462      	add	r2, ip
 8001b78:	4249      	negs	r1, r1
 8001b7a:	1851      	adds	r1, r2, r1
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	07ce      	lsls	r6, r1, #31
 8001b80:	086d      	lsrs	r5, r5, #1
 8001b82:	432e      	orrs	r6, r5
 8001b84:	0849      	lsrs	r1, r1, #1
 8001b86:	4032      	ands	r2, r6
 8001b88:	001d      	movs	r5, r3
 8001b8a:	e6a9      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001b8c:	49bf      	ldr	r1, [pc, #764]	; (8001e8c <__aeabi_dsub+0x68c>)
 8001b8e:	1aed      	subs	r5, r5, r3
 8001b90:	4011      	ands	r1, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	4032      	ands	r2, r6
 8001b96:	e6a3      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001b98:	0032      	movs	r2, r6
 8001b9a:	3828      	subs	r0, #40	; 0x28
 8001b9c:	4082      	lsls	r2, r0
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	e686      	b.n	80018b0 <__aeabi_dsub+0xb0>
 8001ba2:	0030      	movs	r0, r6
 8001ba4:	f000 fab6 	bl	8002114 <__clzsi2>
 8001ba8:	3020      	adds	r0, #32
 8001baa:	e673      	b.n	8001894 <__aeabi_dsub+0x94>
 8001bac:	4663      	mov	r3, ip
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	4193      	sbcs	r3, r2
 8001bb4:	1ac6      	subs	r6, r0, r3
 8001bb6:	42b0      	cmp	r0, r6
 8001bb8:	4180      	sbcs	r0, r0
 8001bba:	4240      	negs	r0, r0
 8001bbc:	1a09      	subs	r1, r1, r0
 8001bbe:	e65c      	b.n	800187a <__aeabi_dsub+0x7a>
 8001bc0:	000e      	movs	r6, r1
 8001bc2:	4667      	mov	r7, ip
 8001bc4:	4306      	orrs	r6, r0
 8001bc6:	4317      	orrs	r7, r2
 8001bc8:	2d00      	cmp	r5, #0
 8001bca:	d15e      	bne.n	8001c8a <__aeabi_dsub+0x48a>
 8001bcc:	2e00      	cmp	r6, #0
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_dsub+0x3d2>
 8001bd0:	e0f3      	b.n	8001dba <__aeabi_dsub+0x5ba>
 8001bd2:	2f00      	cmp	r7, #0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x3d8>
 8001bd6:	e11e      	b.n	8001e16 <__aeabi_dsub+0x616>
 8001bd8:	465c      	mov	r4, fp
 8001bda:	4661      	mov	r1, ip
 8001bdc:	4691      	mov	r9, r2
 8001bde:	e72c      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001be0:	4fa9      	ldr	r7, [pc, #676]	; (8001e88 <__aeabi_dsub+0x688>)
 8001be2:	42be      	cmp	r6, r7
 8001be4:	d07b      	beq.n	8001cde <__aeabi_dsub+0x4de>
 8001be6:	001e      	movs	r6, r3
 8001be8:	e6f1      	b.n	80019ce <__aeabi_dsub+0x1ce>
 8001bea:	0010      	movs	r0, r2
 8001bec:	3d1f      	subs	r5, #31
 8001bee:	40e8      	lsrs	r0, r5
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d003      	beq.n	8001bfc <__aeabi_dsub+0x3fc>
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	1acb      	subs	r3, r1, r3
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	4316      	orrs	r6, r2
 8001bfc:	1e73      	subs	r3, r6, #1
 8001bfe:	419e      	sbcs	r6, r3
 8001c00:	2207      	movs	r2, #7
 8001c02:	4306      	orrs	r6, r0
 8001c04:	4032      	ands	r2, r6
 8001c06:	2100      	movs	r1, #0
 8001c08:	2500      	movs	r5, #0
 8001c0a:	e783      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001c0c:	1a16      	subs	r6, r2, r0
 8001c0e:	4663      	mov	r3, ip
 8001c10:	42b2      	cmp	r2, r6
 8001c12:	4180      	sbcs	r0, r0
 8001c14:	1a59      	subs	r1, r3, r1
 8001c16:	4240      	negs	r0, r0
 8001c18:	1a0b      	subs	r3, r1, r0
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	465c      	mov	r4, fp
 8001c1e:	e632      	b.n	8001886 <__aeabi_dsub+0x86>
 8001c20:	2e1f      	cmp	r6, #31
 8001c22:	dd00      	ble.n	8001c26 <__aeabi_dsub+0x426>
 8001c24:	e0ab      	b.n	8001d7e <__aeabi_dsub+0x57e>
 8001c26:	2720      	movs	r7, #32
 8001c28:	1bbb      	subs	r3, r7, r6
 8001c2a:	469a      	mov	sl, r3
 8001c2c:	4663      	mov	r3, ip
 8001c2e:	4657      	mov	r7, sl
 8001c30:	40bb      	lsls	r3, r7
 8001c32:	4699      	mov	r9, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	464f      	mov	r7, r9
 8001c38:	40f3      	lsrs	r3, r6
 8001c3a:	431f      	orrs	r7, r3
 8001c3c:	003b      	movs	r3, r7
 8001c3e:	4657      	mov	r7, sl
 8001c40:	40ba      	lsls	r2, r7
 8001c42:	1e57      	subs	r7, r2, #1
 8001c44:	41ba      	sbcs	r2, r7
 8001c46:	4313      	orrs	r3, r2
 8001c48:	4662      	mov	r2, ip
 8001c4a:	40f2      	lsrs	r2, r6
 8001c4c:	1889      	adds	r1, r1, r2
 8001c4e:	e698      	b.n	8001982 <__aeabi_dsub+0x182>
 8001c50:	2720      	movs	r7, #32
 8001c52:	1bbb      	subs	r3, r7, r6
 8001c54:	469a      	mov	sl, r3
 8001c56:	4663      	mov	r3, ip
 8001c58:	4657      	mov	r7, sl
 8001c5a:	40bb      	lsls	r3, r7
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	464f      	mov	r7, r9
 8001c62:	40f3      	lsrs	r3, r6
 8001c64:	431f      	orrs	r7, r3
 8001c66:	003b      	movs	r3, r7
 8001c68:	4657      	mov	r7, sl
 8001c6a:	40ba      	lsls	r2, r7
 8001c6c:	1e57      	subs	r7, r2, #1
 8001c6e:	41ba      	sbcs	r2, r7
 8001c70:	4313      	orrs	r3, r2
 8001c72:	4662      	mov	r2, ip
 8001c74:	40f2      	lsrs	r2, r6
 8001c76:	1a89      	subs	r1, r1, r2
 8001c78:	e79c      	b.n	8001bb4 <__aeabi_dsub+0x3b4>
 8001c7a:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <__aeabi_dsub+0x688>)
 8001c7c:	429f      	cmp	r7, r3
 8001c7e:	d05f      	beq.n	8001d40 <__aeabi_dsub+0x540>
 8001c80:	2580      	movs	r5, #128	; 0x80
 8001c82:	042d      	lsls	r5, r5, #16
 8001c84:	4273      	negs	r3, r6
 8001c86:	4329      	orrs	r1, r5
 8001c88:	e720      	b.n	8001acc <__aeabi_dsub+0x2cc>
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d10c      	bne.n	8001ca8 <__aeabi_dsub+0x4a8>
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x494>
 8001c92:	e0d0      	b.n	8001e36 <__aeabi_dsub+0x636>
 8001c94:	465c      	mov	r4, fp
 8001c96:	4661      	mov	r1, ip
 8001c98:	4691      	mov	r9, r2
 8001c9a:	4d7b      	ldr	r5, [pc, #492]	; (8001e88 <__aeabi_dsub+0x688>)
 8001c9c:	e6cd      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001c9e:	4f7a      	ldr	r7, [pc, #488]	; (8001e88 <__aeabi_dsub+0x688>)
 8001ca0:	42be      	cmp	r6, r7
 8001ca2:	d01c      	beq.n	8001cde <__aeabi_dsub+0x4de>
 8001ca4:	001e      	movs	r6, r3
 8001ca6:	e665      	b.n	8001974 <__aeabi_dsub+0x174>
 8001ca8:	2f00      	cmp	r7, #0
 8001caa:	d018      	beq.n	8001cde <__aeabi_dsub+0x4de>
 8001cac:	08c0      	lsrs	r0, r0, #3
 8001cae:	074e      	lsls	r6, r1, #29
 8001cb0:	4306      	orrs	r6, r0
 8001cb2:	2080      	movs	r0, #128	; 0x80
 8001cb4:	08c9      	lsrs	r1, r1, #3
 8001cb6:	0300      	lsls	r0, r0, #12
 8001cb8:	4201      	tst	r1, r0
 8001cba:	d008      	beq.n	8001cce <__aeabi_dsub+0x4ce>
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	08dc      	lsrs	r4, r3, #3
 8001cc0:	4204      	tst	r4, r0
 8001cc2:	d104      	bne.n	8001cce <__aeabi_dsub+0x4ce>
 8001cc4:	0021      	movs	r1, r4
 8001cc6:	46da      	mov	sl, fp
 8001cc8:	08d2      	lsrs	r2, r2, #3
 8001cca:	075e      	lsls	r6, r3, #29
 8001ccc:	4316      	orrs	r6, r2
 8001cce:	00f3      	lsls	r3, r6, #3
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	2401      	movs	r4, #1
 8001cd4:	4653      	mov	r3, sl
 8001cd6:	00c9      	lsls	r1, r1, #3
 8001cd8:	0f72      	lsrs	r2, r6, #29
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	401c      	ands	r4, r3
 8001cde:	4d6a      	ldr	r5, [pc, #424]	; (8001e88 <__aeabi_dsub+0x688>)
 8001ce0:	e6ab      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001ce2:	001d      	movs	r5, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2700      	movs	r7, #0
 8001ce8:	e6b4      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d159      	bne.n	8001da2 <__aeabi_dsub+0x5a2>
 8001cee:	000b      	movs	r3, r1
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x4f6>
 8001cf4:	e6d6      	b.n	8001aa4 <__aeabi_dsub+0x2a4>
 8001cf6:	1c73      	adds	r3, r6, #1
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x4fc>
 8001cfa:	e0b2      	b.n	8001e62 <__aeabi_dsub+0x662>
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <__aeabi_dsub+0x688>)
 8001cfe:	429f      	cmp	r7, r3
 8001d00:	d01e      	beq.n	8001d40 <__aeabi_dsub+0x540>
 8001d02:	43f3      	mvns	r3, r6
 8001d04:	2b38      	cmp	r3, #56	; 0x38
 8001d06:	dc6f      	bgt.n	8001de8 <__aeabi_dsub+0x5e8>
 8001d08:	2b1f      	cmp	r3, #31
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dsub+0x50e>
 8001d0c:	e097      	b.n	8001e3e <__aeabi_dsub+0x63e>
 8001d0e:	2520      	movs	r5, #32
 8001d10:	000e      	movs	r6, r1
 8001d12:	1aed      	subs	r5, r5, r3
 8001d14:	40ae      	lsls	r6, r5
 8001d16:	46b0      	mov	r8, r6
 8001d18:	0006      	movs	r6, r0
 8001d1a:	46aa      	mov	sl, r5
 8001d1c:	40de      	lsrs	r6, r3
 8001d1e:	4645      	mov	r5, r8
 8001d20:	4335      	orrs	r5, r6
 8001d22:	002e      	movs	r6, r5
 8001d24:	4655      	mov	r5, sl
 8001d26:	40a8      	lsls	r0, r5
 8001d28:	40d9      	lsrs	r1, r3
 8001d2a:	1e45      	subs	r5, r0, #1
 8001d2c:	41a8      	sbcs	r0, r5
 8001d2e:	448c      	add	ip, r1
 8001d30:	4306      	orrs	r6, r0
 8001d32:	18b6      	adds	r6, r6, r2
 8001d34:	4296      	cmp	r6, r2
 8001d36:	4192      	sbcs	r2, r2
 8001d38:	4251      	negs	r1, r2
 8001d3a:	4461      	add	r1, ip
 8001d3c:	003d      	movs	r5, r7
 8001d3e:	e625      	b.n	800198c <__aeabi_dsub+0x18c>
 8001d40:	003d      	movs	r5, r7
 8001d42:	4661      	mov	r1, ip
 8001d44:	4691      	mov	r9, r2
 8001d46:	e678      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001d48:	000b      	movs	r3, r1
 8001d4a:	4303      	orrs	r3, r0
 8001d4c:	2d00      	cmp	r5, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x552>
 8001d50:	e655      	b.n	80019fe <__aeabi_dsub+0x1fe>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f5      	beq.n	8001d42 <__aeabi_dsub+0x542>
 8001d56:	4663      	mov	r3, ip
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x55e>
 8001d5c:	e66d      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001d5e:	1886      	adds	r6, r0, r2
 8001d60:	4286      	cmp	r6, r0
 8001d62:	4180      	sbcs	r0, r0
 8001d64:	4461      	add	r1, ip
 8001d66:	4240      	negs	r0, r0
 8001d68:	1809      	adds	r1, r1, r0
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	020b      	lsls	r3, r1, #8
 8001d6e:	d400      	bmi.n	8001d72 <__aeabi_dsub+0x572>
 8001d70:	e6d0      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <__aeabi_dsub+0x68c>)
 8001d74:	3501      	adds	r5, #1
 8001d76:	4019      	ands	r1, r3
 8001d78:	e5b2      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001d7a:	46b1      	mov	r9, r6
 8001d7c:	e65d      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001d7e:	0033      	movs	r3, r6
 8001d80:	4667      	mov	r7, ip
 8001d82:	3b20      	subs	r3, #32
 8001d84:	40df      	lsrs	r7, r3
 8001d86:	003b      	movs	r3, r7
 8001d88:	2e20      	cmp	r6, #32
 8001d8a:	d005      	beq.n	8001d98 <__aeabi_dsub+0x598>
 8001d8c:	2740      	movs	r7, #64	; 0x40
 8001d8e:	1bbf      	subs	r7, r7, r6
 8001d90:	4666      	mov	r6, ip
 8001d92:	40be      	lsls	r6, r7
 8001d94:	4332      	orrs	r2, r6
 8001d96:	4690      	mov	r8, r2
 8001d98:	4646      	mov	r6, r8
 8001d9a:	1e72      	subs	r2, r6, #1
 8001d9c:	4196      	sbcs	r6, r2
 8001d9e:	4333      	orrs	r3, r6
 8001da0:	e5ef      	b.n	8001982 <__aeabi_dsub+0x182>
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <__aeabi_dsub+0x688>)
 8001da4:	429f      	cmp	r7, r3
 8001da6:	d0cb      	beq.n	8001d40 <__aeabi_dsub+0x540>
 8001da8:	2580      	movs	r5, #128	; 0x80
 8001daa:	042d      	lsls	r5, r5, #16
 8001dac:	4273      	negs	r3, r6
 8001dae:	4329      	orrs	r1, r5
 8001db0:	e7a8      	b.n	8001d04 <__aeabi_dsub+0x504>
 8001db2:	4308      	orrs	r0, r1
 8001db4:	1e41      	subs	r1, r0, #1
 8001db6:	4188      	sbcs	r0, r1
 8001db8:	e6a2      	b.n	8001b00 <__aeabi_dsub+0x300>
 8001dba:	2f00      	cmp	r7, #0
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x5c0>
 8001dbe:	e63c      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001dc0:	4663      	mov	r3, ip
 8001dc2:	1a86      	subs	r6, r0, r2
 8001dc4:	1acf      	subs	r7, r1, r3
 8001dc6:	42b0      	cmp	r0, r6
 8001dc8:	419b      	sbcs	r3, r3
 8001dca:	425b      	negs	r3, r3
 8001dcc:	1afb      	subs	r3, r7, r3
 8001dce:	4698      	mov	r8, r3
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	d54e      	bpl.n	8001e72 <__aeabi_dsub+0x672>
 8001dd4:	1a16      	subs	r6, r2, r0
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	42b2      	cmp	r2, r6
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	1a59      	subs	r1, r3, r1
 8001dde:	4252      	negs	r2, r2
 8001de0:	1a89      	subs	r1, r1, r2
 8001de2:	465c      	mov	r4, fp
 8001de4:	2200      	movs	r2, #0
 8001de6:	e57b      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001de8:	4301      	orrs	r1, r0
 8001dea:	000e      	movs	r6, r1
 8001dec:	1e71      	subs	r1, r6, #1
 8001dee:	418e      	sbcs	r6, r1
 8001df0:	e79f      	b.n	8001d32 <__aeabi_dsub+0x532>
 8001df2:	001d      	movs	r5, r3
 8001df4:	000e      	movs	r6, r1
 8001df6:	3d20      	subs	r5, #32
 8001df8:	40ee      	lsrs	r6, r5
 8001dfa:	46b0      	mov	r8, r6
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d004      	beq.n	8001e0a <__aeabi_dsub+0x60a>
 8001e00:	2540      	movs	r5, #64	; 0x40
 8001e02:	1aeb      	subs	r3, r5, r3
 8001e04:	4099      	lsls	r1, r3
 8001e06:	4308      	orrs	r0, r1
 8001e08:	4681      	mov	r9, r0
 8001e0a:	4648      	mov	r0, r9
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	1e41      	subs	r1, r0, #1
 8001e10:	4188      	sbcs	r0, r1
 8001e12:	4318      	orrs	r0, r3
 8001e14:	e674      	b.n	8001b00 <__aeabi_dsub+0x300>
 8001e16:	2200      	movs	r2, #0
 8001e18:	2400      	movs	r4, #0
 8001e1a:	e617      	b.n	8001a4c <__aeabi_dsub+0x24c>
 8001e1c:	1a16      	subs	r6, r2, r0
 8001e1e:	4663      	mov	r3, ip
 8001e20:	42b2      	cmp	r2, r6
 8001e22:	4192      	sbcs	r2, r2
 8001e24:	1a59      	subs	r1, r3, r1
 8001e26:	4252      	negs	r2, r2
 8001e28:	1a89      	subs	r1, r1, r2
 8001e2a:	003d      	movs	r5, r7
 8001e2c:	e525      	b.n	800187a <__aeabi_dsub+0x7a>
 8001e2e:	4661      	mov	r1, ip
 8001e30:	4691      	mov	r9, r2
 8001e32:	4d15      	ldr	r5, [pc, #84]	; (8001e88 <__aeabi_dsub+0x688>)
 8001e34:	e601      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	2400      	movs	r4, #0
 8001e3a:	0312      	lsls	r2, r2, #12
 8001e3c:	e679      	b.n	8001b32 <__aeabi_dsub+0x332>
 8001e3e:	001d      	movs	r5, r3
 8001e40:	000e      	movs	r6, r1
 8001e42:	3d20      	subs	r5, #32
 8001e44:	40ee      	lsrs	r6, r5
 8001e46:	46b0      	mov	r8, r6
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d004      	beq.n	8001e56 <__aeabi_dsub+0x656>
 8001e4c:	2540      	movs	r5, #64	; 0x40
 8001e4e:	1aeb      	subs	r3, r5, r3
 8001e50:	4099      	lsls	r1, r3
 8001e52:	4308      	orrs	r0, r1
 8001e54:	4681      	mov	r9, r0
 8001e56:	464e      	mov	r6, r9
 8001e58:	4643      	mov	r3, r8
 8001e5a:	1e71      	subs	r1, r6, #1
 8001e5c:	418e      	sbcs	r6, r1
 8001e5e:	431e      	orrs	r6, r3
 8001e60:	e767      	b.n	8001d32 <__aeabi_dsub+0x532>
 8001e62:	1886      	adds	r6, r0, r2
 8001e64:	4296      	cmp	r6, r2
 8001e66:	419b      	sbcs	r3, r3
 8001e68:	4461      	add	r1, ip
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	18c9      	adds	r1, r1, r3
 8001e6e:	003d      	movs	r5, r7
 8001e70:	e58c      	b.n	800198c <__aeabi_dsub+0x18c>
 8001e72:	4647      	mov	r7, r8
 8001e74:	4337      	orrs	r7, r6
 8001e76:	d0ce      	beq.n	8001e16 <__aeabi_dsub+0x616>
 8001e78:	2207      	movs	r2, #7
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	4032      	ands	r2, r6
 8001e7e:	e649      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001e80:	2700      	movs	r7, #0
 8001e82:	003a      	movs	r2, r7
 8001e84:	e5e6      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	000007ff 	.word	0x000007ff
 8001e8c:	ff7fffff 	.word	0xff7fffff

08001e90 <__aeabi_dcmpun>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4e0c      	ldr	r6, [pc, #48]	; (8001ec4 <__aeabi_dcmpun+0x34>)
 8001e94:	030d      	lsls	r5, r1, #12
 8001e96:	031c      	lsls	r4, r3, #12
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	0b2d      	lsrs	r5, r5, #12
 8001e9e:	0d49      	lsrs	r1, r1, #21
 8001ea0:	0b24      	lsrs	r4, r4, #12
 8001ea2:	0d5b      	lsrs	r3, r3, #21
 8001ea4:	42b1      	cmp	r1, r6
 8001ea6:	d008      	beq.n	8001eba <__aeabi_dcmpun+0x2a>
 8001ea8:	4906      	ldr	r1, [pc, #24]	; (8001ec4 <__aeabi_dcmpun+0x34>)
 8001eaa:	2000      	movs	r0, #0
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d103      	bne.n	8001eb8 <__aeabi_dcmpun+0x28>
 8001eb0:	4314      	orrs	r4, r2
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	1e44      	subs	r4, r0, #1
 8001eb6:	41a0      	sbcs	r0, r4
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d1fa      	bne.n	8001eb8 <__aeabi_dcmpun+0x28>
 8001ec2:	e7f1      	b.n	8001ea8 <__aeabi_dcmpun+0x18>
 8001ec4:	000007ff 	.word	0x000007ff

08001ec8 <__aeabi_d2iz>:
 8001ec8:	b530      	push	{r4, r5, lr}
 8001eca:	4d14      	ldr	r5, [pc, #80]	; (8001f1c <__aeabi_d2iz+0x54>)
 8001ecc:	030a      	lsls	r2, r1, #12
 8001ece:	004b      	lsls	r3, r1, #1
 8001ed0:	0b12      	lsrs	r2, r2, #12
 8001ed2:	0d5b      	lsrs	r3, r3, #21
 8001ed4:	0fc9      	lsrs	r1, r1, #31
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	42ab      	cmp	r3, r5
 8001eda:	dd11      	ble.n	8001f00 <__aeabi_d2iz+0x38>
 8001edc:	4c10      	ldr	r4, [pc, #64]	; (8001f20 <__aeabi_d2iz+0x58>)
 8001ede:	42a3      	cmp	r3, r4
 8001ee0:	dc10      	bgt.n	8001f04 <__aeabi_d2iz+0x3c>
 8001ee2:	2480      	movs	r4, #128	; 0x80
 8001ee4:	0364      	lsls	r4, r4, #13
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	4c0e      	ldr	r4, [pc, #56]	; (8001f24 <__aeabi_d2iz+0x5c>)
 8001eea:	1ae4      	subs	r4, r4, r3
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd0c      	ble.n	8001f0a <__aeabi_d2iz+0x42>
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <__aeabi_d2iz+0x60>)
 8001ef2:	1ac3      	subs	r3, r0, r3
 8001ef4:	40da      	lsrs	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	425c      	negs	r4, r3
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_d2iz+0x38>
 8001efe:	001c      	movs	r4, r3
 8001f00:	0020      	movs	r0, r4
 8001f02:	bd30      	pop	{r4, r5, pc}
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <__aeabi_d2iz+0x64>)
 8001f06:	18cc      	adds	r4, r1, r3
 8001f08:	e7fa      	b.n	8001f00 <__aeabi_d2iz+0x38>
 8001f0a:	4d09      	ldr	r5, [pc, #36]	; (8001f30 <__aeabi_d2iz+0x68>)
 8001f0c:	40e0      	lsrs	r0, r4
 8001f0e:	46ac      	mov	ip, r5
 8001f10:	4463      	add	r3, ip
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	4303      	orrs	r3, r0
 8001f18:	e7ee      	b.n	8001ef8 <__aeabi_d2iz+0x30>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000003fe 	.word	0x000003fe
 8001f20:	0000041d 	.word	0x0000041d
 8001f24:	00000433 	.word	0x00000433
 8001f28:	00000413 	.word	0x00000413
 8001f2c:	7fffffff 	.word	0x7fffffff
 8001f30:	fffffbed 	.word	0xfffffbed

08001f34 <__aeabi_i2d>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d02d      	beq.n	8001f96 <__aeabi_i2d+0x62>
 8001f3a:	17c3      	asrs	r3, r0, #31
 8001f3c:	18c5      	adds	r5, r0, r3
 8001f3e:	405d      	eors	r5, r3
 8001f40:	0fc4      	lsrs	r4, r0, #31
 8001f42:	0028      	movs	r0, r5
 8001f44:	f000 f8e6 	bl	8002114 <__clzsi2>
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <__aeabi_i2d+0x6c>)
 8001f4a:	1a1b      	subs	r3, r3, r0
 8001f4c:	055b      	lsls	r3, r3, #21
 8001f4e:	0d5b      	lsrs	r3, r3, #21
 8001f50:	280a      	cmp	r0, #10
 8001f52:	dd15      	ble.n	8001f80 <__aeabi_i2d+0x4c>
 8001f54:	380b      	subs	r0, #11
 8001f56:	4085      	lsls	r5, r0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	032d      	lsls	r5, r5, #12
 8001f5c:	0b2d      	lsrs	r5, r5, #12
 8001f5e:	2100      	movs	r1, #0
 8001f60:	0010      	movs	r0, r2
 8001f62:	032d      	lsls	r5, r5, #12
 8001f64:	0d0a      	lsrs	r2, r1, #20
 8001f66:	0b2d      	lsrs	r5, r5, #12
 8001f68:	0512      	lsls	r2, r2, #20
 8001f6a:	432a      	orrs	r2, r5
 8001f6c:	4d0d      	ldr	r5, [pc, #52]	; (8001fa4 <__aeabi_i2d+0x70>)
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	402a      	ands	r2, r5
 8001f72:	4313      	orrs	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	07e4      	lsls	r4, r4, #31
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	4323      	orrs	r3, r4
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	0002      	movs	r2, r0
 8001f82:	0029      	movs	r1, r5
 8001f84:	3215      	adds	r2, #21
 8001f86:	4091      	lsls	r1, r2
 8001f88:	000a      	movs	r2, r1
 8001f8a:	210b      	movs	r1, #11
 8001f8c:	1a08      	subs	r0, r1, r0
 8001f8e:	40c5      	lsrs	r5, r0
 8001f90:	032d      	lsls	r5, r5, #12
 8001f92:	0b2d      	lsrs	r5, r5, #12
 8001f94:	e7e3      	b.n	8001f5e <__aeabi_i2d+0x2a>
 8001f96:	2400      	movs	r4, #0
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2500      	movs	r5, #0
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	e7de      	b.n	8001f5e <__aeabi_i2d+0x2a>
 8001fa0:	0000041e 	.word	0x0000041e
 8001fa4:	800fffff 	.word	0x800fffff

08001fa8 <__aeabi_ui2d>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	1e04      	subs	r4, r0, #0
 8001fac:	d025      	beq.n	8001ffa <__aeabi_ui2d+0x52>
 8001fae:	f000 f8b1 	bl	8002114 <__clzsi2>
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <__aeabi_ui2d+0x5c>)
 8001fb4:	1a1b      	subs	r3, r3, r0
 8001fb6:	055b      	lsls	r3, r3, #21
 8001fb8:	0d5b      	lsrs	r3, r3, #21
 8001fba:	280a      	cmp	r0, #10
 8001fbc:	dd12      	ble.n	8001fe4 <__aeabi_ui2d+0x3c>
 8001fbe:	380b      	subs	r0, #11
 8001fc0:	4084      	lsls	r4, r0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	0324      	lsls	r4, r4, #12
 8001fc6:	0b24      	lsrs	r4, r4, #12
 8001fc8:	2100      	movs	r1, #0
 8001fca:	0010      	movs	r0, r2
 8001fcc:	0324      	lsls	r4, r4, #12
 8001fce:	0d0a      	lsrs	r2, r1, #20
 8001fd0:	0b24      	lsrs	r4, r4, #12
 8001fd2:	0512      	lsls	r2, r2, #20
 8001fd4:	4322      	orrs	r2, r4
 8001fd6:	4c0c      	ldr	r4, [pc, #48]	; (8002008 <__aeabi_ui2d+0x60>)
 8001fd8:	051b      	lsls	r3, r3, #20
 8001fda:	4022      	ands	r2, r4
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	0859      	lsrs	r1, r3, #1
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	0021      	movs	r1, r4
 8001fe8:	3215      	adds	r2, #21
 8001fea:	4091      	lsls	r1, r2
 8001fec:	000a      	movs	r2, r1
 8001fee:	210b      	movs	r1, #11
 8001ff0:	1a08      	subs	r0, r1, r0
 8001ff2:	40c4      	lsrs	r4, r0
 8001ff4:	0324      	lsls	r4, r4, #12
 8001ff6:	0b24      	lsrs	r4, r4, #12
 8001ff8:	e7e6      	b.n	8001fc8 <__aeabi_ui2d+0x20>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	e7e2      	b.n	8001fc8 <__aeabi_ui2d+0x20>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	0000041e 	.word	0x0000041e
 8002008:	800fffff 	.word	0x800fffff

0800200c <__aeabi_d2f>:
 800200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200e:	004c      	lsls	r4, r1, #1
 8002010:	0d64      	lsrs	r4, r4, #21
 8002012:	030b      	lsls	r3, r1, #12
 8002014:	1c62      	adds	r2, r4, #1
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	0f46      	lsrs	r6, r0, #29
 800201a:	0552      	lsls	r2, r2, #21
 800201c:	0fc9      	lsrs	r1, r1, #31
 800201e:	431e      	orrs	r6, r3
 8002020:	00c5      	lsls	r5, r0, #3
 8002022:	0d52      	lsrs	r2, r2, #21
 8002024:	2a01      	cmp	r2, #1
 8002026:	dd29      	ble.n	800207c <__aeabi_d2f+0x70>
 8002028:	4b37      	ldr	r3, [pc, #220]	; (8002108 <__aeabi_d2f+0xfc>)
 800202a:	18e7      	adds	r7, r4, r3
 800202c:	2ffe      	cmp	r7, #254	; 0xfe
 800202e:	dc1c      	bgt.n	800206a <__aeabi_d2f+0x5e>
 8002030:	2f00      	cmp	r7, #0
 8002032:	dd3b      	ble.n	80020ac <__aeabi_d2f+0xa0>
 8002034:	0180      	lsls	r0, r0, #6
 8002036:	1e43      	subs	r3, r0, #1
 8002038:	4198      	sbcs	r0, r3
 800203a:	2207      	movs	r2, #7
 800203c:	00f3      	lsls	r3, r6, #3
 800203e:	0f6d      	lsrs	r5, r5, #29
 8002040:	4303      	orrs	r3, r0
 8002042:	432b      	orrs	r3, r5
 8002044:	401a      	ands	r2, r3
 8002046:	2a00      	cmp	r2, #0
 8002048:	d004      	beq.n	8002054 <__aeabi_d2f+0x48>
 800204a:	220f      	movs	r2, #15
 800204c:	401a      	ands	r2, r3
 800204e:	2a04      	cmp	r2, #4
 8002050:	d000      	beq.n	8002054 <__aeabi_d2f+0x48>
 8002052:	3304      	adds	r3, #4
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	04d2      	lsls	r2, r2, #19
 8002058:	401a      	ands	r2, r3
 800205a:	d024      	beq.n	80020a6 <__aeabi_d2f+0x9a>
 800205c:	3701      	adds	r7, #1
 800205e:	b2fa      	uxtb	r2, r7
 8002060:	2fff      	cmp	r7, #255	; 0xff
 8002062:	d002      	beq.n	800206a <__aeabi_d2f+0x5e>
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	0a58      	lsrs	r0, r3, #9
 8002068:	e001      	b.n	800206e <__aeabi_d2f+0x62>
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	2000      	movs	r0, #0
 800206e:	0240      	lsls	r0, r0, #9
 8002070:	05d2      	lsls	r2, r2, #23
 8002072:	0a40      	lsrs	r0, r0, #9
 8002074:	07c9      	lsls	r1, r1, #31
 8002076:	4310      	orrs	r0, r2
 8002078:	4308      	orrs	r0, r1
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	4335      	orrs	r5, r6
 800207e:	2c00      	cmp	r4, #0
 8002080:	d104      	bne.n	800208c <__aeabi_d2f+0x80>
 8002082:	2d00      	cmp	r5, #0
 8002084:	d10a      	bne.n	800209c <__aeabi_d2f+0x90>
 8002086:	2200      	movs	r2, #0
 8002088:	2000      	movs	r0, #0
 800208a:	e7f0      	b.n	800206e <__aeabi_d2f+0x62>
 800208c:	2d00      	cmp	r5, #0
 800208e:	d0ec      	beq.n	800206a <__aeabi_d2f+0x5e>
 8002090:	2080      	movs	r0, #128	; 0x80
 8002092:	03c0      	lsls	r0, r0, #15
 8002094:	4330      	orrs	r0, r6
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	e7e9      	b.n	800206e <__aeabi_d2f+0x62>
 800209a:	2400      	movs	r4, #0
 800209c:	2300      	movs	r3, #0
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	0a58      	lsrs	r0, r3, #9
 80020a2:	b2e2      	uxtb	r2, r4
 80020a4:	e7e3      	b.n	800206e <__aeabi_d2f+0x62>
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	003c      	movs	r4, r7
 80020aa:	e7f8      	b.n	800209e <__aeabi_d2f+0x92>
 80020ac:	003b      	movs	r3, r7
 80020ae:	3317      	adds	r3, #23
 80020b0:	dbf3      	blt.n	800209a <__aeabi_d2f+0x8e>
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	4333      	orrs	r3, r6
 80020b8:	261e      	movs	r6, #30
 80020ba:	1bf6      	subs	r6, r6, r7
 80020bc:	2e1f      	cmp	r6, #31
 80020be:	dd14      	ble.n	80020ea <__aeabi_d2f+0xde>
 80020c0:	2202      	movs	r2, #2
 80020c2:	4252      	negs	r2, r2
 80020c4:	1bd7      	subs	r7, r2, r7
 80020c6:	001a      	movs	r2, r3
 80020c8:	40fa      	lsrs	r2, r7
 80020ca:	0017      	movs	r7, r2
 80020cc:	2e20      	cmp	r6, #32
 80020ce:	d004      	beq.n	80020da <__aeabi_d2f+0xce>
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <__aeabi_d2f+0x100>)
 80020d2:	4694      	mov	ip, r2
 80020d4:	4464      	add	r4, ip
 80020d6:	40a3      	lsls	r3, r4
 80020d8:	431d      	orrs	r5, r3
 80020da:	002b      	movs	r3, r5
 80020dc:	1e5d      	subs	r5, r3, #1
 80020de:	41ab      	sbcs	r3, r5
 80020e0:	2207      	movs	r2, #7
 80020e2:	433b      	orrs	r3, r7
 80020e4:	401a      	ands	r2, r3
 80020e6:	2700      	movs	r7, #0
 80020e8:	e7ad      	b.n	8002046 <__aeabi_d2f+0x3a>
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <__aeabi_d2f+0x104>)
 80020ec:	0028      	movs	r0, r5
 80020ee:	18a2      	adds	r2, r4, r2
 80020f0:	4095      	lsls	r5, r2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	1e6c      	subs	r4, r5, #1
 80020f6:	41a5      	sbcs	r5, r4
 80020f8:	40f0      	lsrs	r0, r6
 80020fa:	2207      	movs	r2, #7
 80020fc:	432b      	orrs	r3, r5
 80020fe:	4303      	orrs	r3, r0
 8002100:	401a      	ands	r2, r3
 8002102:	2700      	movs	r7, #0
 8002104:	e79f      	b.n	8002046 <__aeabi_d2f+0x3a>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	fffffc80 	.word	0xfffffc80
 800210c:	fffffca2 	.word	0xfffffca2
 8002110:	fffffc82 	.word	0xfffffc82

08002114 <__clzsi2>:
 8002114:	211c      	movs	r1, #28
 8002116:	2301      	movs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	4298      	cmp	r0, r3
 800211c:	d301      	bcc.n	8002122 <__clzsi2+0xe>
 800211e:	0c00      	lsrs	r0, r0, #16
 8002120:	3910      	subs	r1, #16
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	4298      	cmp	r0, r3
 8002126:	d301      	bcc.n	800212c <__clzsi2+0x18>
 8002128:	0a00      	lsrs	r0, r0, #8
 800212a:	3908      	subs	r1, #8
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	4298      	cmp	r0, r3
 8002130:	d301      	bcc.n	8002136 <__clzsi2+0x22>
 8002132:	0900      	lsrs	r0, r0, #4
 8002134:	3904      	subs	r1, #4
 8002136:	a202      	add	r2, pc, #8	; (adr r2, 8002140 <__clzsi2+0x2c>)
 8002138:	5c10      	ldrb	r0, [r2, r0]
 800213a:	1840      	adds	r0, r0, r1
 800213c:	4770      	bx	lr
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	02020304 	.word	0x02020304
 8002144:	01010101 	.word	0x01010101
	...

08002150 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	0018      	movs	r0, r3
 800215a:	230c      	movs	r3, #12
 800215c:	001a      	movs	r2, r3
 800215e:	2100      	movs	r1, #0
 8002160:	f003 f99e 	bl	80054a0 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <MX_ADC_Init+0xe4>)
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <MX_ADC_Init+0xe8>)
 8002168:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <MX_ADC_Init+0xe4>)
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	05d2      	lsls	r2, r2, #23
 8002170:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <MX_ADC_Init+0xe4>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <MX_ADC_Init+0xe4>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <MX_ADC_Init+0xe4>)
 8002180:	2201      	movs	r2, #1
 8002182:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <MX_ADC_Init+0xe4>)
 8002186:	2204      	movs	r2, #4
 8002188:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <MX_ADC_Init+0xe4>)
 800218c:	2200      	movs	r2, #0
 800218e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <MX_ADC_Init+0xe4>)
 8002192:	2200      	movs	r2, #0
 8002194:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <MX_ADC_Init+0xe4>)
 8002198:	2201      	movs	r2, #1
 800219a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <MX_ADC_Init+0xe4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <MX_ADC_Init+0xe4>)
 80021a4:	22c2      	movs	r2, #194	; 0xc2
 80021a6:	32ff      	adds	r2, #255	; 0xff
 80021a8:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <MX_ADC_Init+0xe4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MX_ADC_Init+0xe4>)
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <MX_ADC_Init+0xe4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_ADC_Init+0xe4>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fccd 	bl	8002b60 <HAL_ADC_Init>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80021ca:	f000 fa45 	bl	8002658 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	0152      	lsls	r2, r2, #5
 80021da:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2207      	movs	r2, #7
 80021e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021e2:	1d3a      	adds	r2, r7, #4
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MX_ADC_Init+0xe4>)
 80021e6:	0011      	movs	r1, r2
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fe7b 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80021f2:	f000 fa31 	bl	8002658 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021fc:	1d3a      	adds	r2, r7, #4
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <MX_ADC_Init+0xe4>)
 8002200:	0011      	movs	r1, r2
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fe6e 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d001      	beq.n	8002210 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800220c:	f000 fa24 	bl	8002658 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2204      	movs	r2, #4
 8002214:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002216:	1d3a      	adds	r2, r7, #4
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_ADC_Init+0xe4>)
 800221a:	0011      	movs	r1, r2
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fe61 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8002226:	f000 fa17 	bl	8002658 <Error_Handler>
  }

}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20000248 	.word	0x20000248
 8002238:	40012400 	.word	0x40012400

0800223c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	2314      	movs	r3, #20
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	0018      	movs	r0, r3
 800224a:	2314      	movs	r3, #20
 800224c:	001a      	movs	r2, r3
 800224e:	2100      	movs	r1, #0
 8002250:	f003 f926 	bl	80054a0 <memset>
  if(adcHandle->Instance==ADC1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <HAL_ADC_MspInit+0xd4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d154      	bne.n	8002308 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	0089      	lsls	r1, r1, #2
 8002268:	430a      	orrs	r2, r1
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0289      	lsls	r1, r1, #10
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002296:	2114      	movs	r1, #20
 8002298:	187b      	adds	r3, r7, r1
 800229a:	2213      	movs	r2, #19
 800229c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2203      	movs	r2, #3
 80022a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	187a      	adds	r2, r7, r1
 80022ac:	2390      	movs	r3, #144	; 0x90
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f001 fb38 	bl	8003928 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_ADC_MspInit+0xe0>)
 80022bc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	00d2      	lsls	r2, r2, #3
 80022de:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022e2:	2220      	movs	r2, #32
 80022e4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022ee:	0018      	movs	r0, r3
 80022f0:	f001 f982 	bl	80035f8 <HAL_DMA_Init>
 80022f4:	1e03      	subs	r3, r0, #0
 80022f6:	d001      	beq.n	80022fc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80022f8:	f000 f9ae 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b00a      	add	sp, #40	; 0x28
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40012400 	.word	0x40012400
 8002314:	40021000 	.word	0x40021000
 8002318:	20000204 	.word	0x20000204
 800231c:	40020008 	.word	0x40020008

08002320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_DMA_Init+0x38>)
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_DMA_Init+0x38>)
 800232c:	2101      	movs	r1, #1
 800232e:	430a      	orrs	r2, r1
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_DMA_Init+0x38>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2009      	movs	r0, #9
 8002344:	f001 f926 	bl	8003594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002348:	2009      	movs	r0, #9
 800234a:	f001 f938 	bl	80035be <HAL_NVIC_EnableIRQ>

}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40021000 	.word	0x40021000

0800235c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0289      	lsls	r1, r1, #10
 800236c:	430a      	orrs	r2, r1
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	029b      	lsls	r3, r3, #10
 8002378:	4013      	ands	r3, r2
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	02c9      	lsls	r1, r1, #11
 8002388:	430a      	orrs	r2, r1
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <MX_GPIO_Init+0x48>)
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	02db      	lsls	r3, r3, #11
 8002394:	4013      	ands	r3, r2
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000

080023a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_I2C1_Init+0x74>)
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <MX_I2C1_Init+0x78>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_I2C1_Init+0x74>)
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <MX_I2C1_Init+0x7c>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 200;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_I2C1_Init+0x74>)
 80023ba:	22c8      	movs	r2, #200	; 0xc8
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_I2C1_Init+0x74>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_I2C1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_I2C1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_I2C1_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_I2C1_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_I2C1_Init+0x74>)
 80023e4:	0018      	movs	r0, r3
 80023e6:	f001 fc17 	bl	8003c18 <HAL_I2C_Init>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023ee:	f000 f933 	bl	8002658 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_I2C1_Init+0x74>)
 80023f4:	2100      	movs	r1, #0
 80023f6:	0018      	movs	r0, r3
 80023f8:	f001 fca4 	bl	8003d44 <HAL_I2CEx_ConfigAnalogFilter>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002400:	f000 f92a 	bl	8002658 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <MX_I2C1_Init+0x74>)
 8002406:	2100      	movs	r1, #0
 8002408:	0018      	movs	r0, r3
 800240a:	f001 fce7 	bl	8003ddc <HAL_I2CEx_ConfigDigitalFilter>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002412:	f000 f921 	bl	8002658 <Error_Handler>
  }

}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000288 	.word	0x20000288
 8002420:	40005400 	.word	0x40005400
 8002424:	2000090e 	.word	0x2000090e

08002428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	2314      	movs	r3, #20
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	0018      	movs	r0, r3
 8002436:	2314      	movs	r3, #20
 8002438:	001a      	movs	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	f003 f830 	bl	80054a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_I2C_MspInit+0x90>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d131      	bne.n	80024ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	02c9      	lsls	r1, r1, #11
 8002454:	430a      	orrs	r2, r1
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	02db      	lsls	r3, r3, #11
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	2114      	movs	r1, #20
 8002468:	187b      	adds	r3, r7, r1
 800246a:	22c0      	movs	r2, #192	; 0xc0
 800246c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2212      	movs	r2, #18
 8002472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2201      	movs	r2, #1
 8002478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2203      	movs	r2, #3
 800247e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2201      	movs	r2, #1
 8002484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	187b      	adds	r3, r7, r1
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_I2C_MspInit+0x98>)
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f001 fa4b 	bl	8003928 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0389      	lsls	r1, r1, #14
 800249c:	430a      	orrs	r2, r1
 800249e:	61da      	str	r2, [r3, #28]
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_I2C_MspInit+0x94>)
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b00a      	add	sp, #40	; 0x28
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40005400 	.word	0x40005400
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000400 	.word	0x48000400

080024c4 <main>:

#define BUFFER_LIMIT 3
uint16_t adc_buff[BUFFER_LIMIT];

int main(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  HAL_Init();
 80024c8:	f000 fac4 	bl	8002a54 <HAL_Init>

  SystemClock_Config();
 80024cc:	f000 f864 	bl	8002598 <SystemClock_Config>

  MX_GPIO_Init();
 80024d0:	f7ff ff44 	bl	800235c <MX_GPIO_Init>
  MX_DMA_Init();
 80024d4:	f7ff ff24 	bl	8002320 <MX_DMA_Init>
  MX_ADC_Init();
 80024d8:	f7ff fe3a 	bl	8002150 <MX_ADC_Init>
  MX_I2C1_Init();
 80024dc:	f7ff ff64 	bl	80023a8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80024e0:	f000 fa12 	bl	8002908 <MX_USART2_UART_Init>

  if(HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <main+0x80>)
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 ff0a 	bl	8003300 <HAL_ADCEx_Calibration_Start>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <main+0x30>
  {
	  Error_Handler();
 80024f0:	f000 f8b2 	bl	8002658 <Error_Handler>
  }

  RetargetInit(&huart2);
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <main+0x84>)
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f8b8 	bl	800266c <RetargetInit>
  printf("\r\nBegin Log Session ------- \r\n\r\n");
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <main+0x88>)
 80024fe:	0018      	movs	r0, r3
 8002500:	f003 feac 	bl	800625c <puts>

  // Calibrate The ADC
  //HAL_ADCEx_Calibration_Start(&hadc1);

  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buff, BUFFER_LIMIT) != HAL_OK)
 8002504:	4912      	ldr	r1, [pc, #72]	; (8002550 <main+0x8c>)
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <main+0x80>)
 8002508:	2203      	movs	r2, #3
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fc68 	bl	8002de0 <HAL_ADC_Start_DMA>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <main+0x54>
  {
	  Error_Handler();
 8002514:	f000 f8a0 	bl	8002658 <Error_Handler>
  }


  while (1)
  {
	  printf("\r\n------ ADC Cycle -------");
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <main+0x90>)
 800251a:	0018      	movs	r0, r3
 800251c:	f003 fe24 	bl	8006168 <iprintf>
	  printf("\r\nADC0 = %d\r\nADC1 = %d\r\nADC4 = %d\r\n", adc_buff[0], adc_buff[1], adc_buff[2]);
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <main+0x8c>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	0019      	movs	r1, r3
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <main+0x8c>)
 8002528:	885b      	ldrh	r3, [r3, #2]
 800252a:	001a      	movs	r2, r3
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <main+0x8c>)
 800252e:	889b      	ldrh	r3, [r3, #4]
 8002530:	4809      	ldr	r0, [pc, #36]	; (8002558 <main+0x94>)
 8002532:	f003 fe19 	bl	8006168 <iprintf>
	  HAL_Delay(1000);
 8002536:	23fa      	movs	r3, #250	; 0xfa
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	0018      	movs	r0, r3
 800253c:	f000 faee 	bl	8002b1c <HAL_Delay>
	  printf("\r\n------ ADC Cycle -------");
 8002540:	e7ea      	b.n	8002518 <main+0x54>
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	20000248 	.word	0x20000248
 8002548:	200002e0 	.word	0x200002e0
 800254c:	08009c18 	.word	0x08009c18
 8002550:	200002d4 	.word	0x200002d4
 8002554:	08009c38 	.word	0x08009c38
 8002558:	08009c54 	.word	0x08009c54

0800255c <HAL_ADC_ConvCpltCallback>:

}

// DMA ADC Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef * hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef * hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	printf("\r\n ------ ADC ERROR ------ \r\n");
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_ADC_ErrorCallback+0x18>)
 8002586:	0018      	movs	r0, r3
 8002588:	f003 fe68 	bl	800625c <puts>
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}
 8002594:	08009c78 	.word	0x08009c78

08002598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b099      	sub	sp, #100	; 0x64
 800259c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800259e:	242c      	movs	r4, #44	; 0x2c
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	0018      	movs	r0, r3
 80025a4:	2334      	movs	r3, #52	; 0x34
 80025a6:	001a      	movs	r2, r3
 80025a8:	2100      	movs	r1, #0
 80025aa:	f002 ff79 	bl	80054a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ae:	231c      	movs	r3, #28
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	0018      	movs	r0, r3
 80025b4:	2310      	movs	r3, #16
 80025b6:	001a      	movs	r2, r3
 80025b8:	2100      	movs	r1, #0
 80025ba:	f002 ff71 	bl	80054a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025be:	003b      	movs	r3, r7
 80025c0:	0018      	movs	r0, r3
 80025c2:	231c      	movs	r3, #28
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f002 ff6a 	bl	80054a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80025cc:	0021      	movs	r1, r4
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2212      	movs	r2, #18
 80025d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2201      	movs	r2, #1
 80025d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	2201      	movs	r2, #1
 80025de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2210      	movs	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	2210      	movs	r2, #16
 80025ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	0018      	movs	r0, r3
 80025f6:	f001 fc3d 	bl	8003e74 <HAL_RCC_OscConfig>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80025fe:	f000 f82b 	bl	8002658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002602:	211c      	movs	r1, #28
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2207      	movs	r2, #7
 8002608:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2100      	movs	r1, #0
 8002620:	0018      	movs	r0, r3
 8002622:	f001 ffad 	bl	8004580 <HAL_RCC_ClockConfig>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800262a:	f000 f815 	bl	8002658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800262e:	003b      	movs	r3, r7
 8002630:	2222      	movs	r2, #34	; 0x22
 8002632:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002634:	003b      	movs	r3, r7
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800263a:	003b      	movs	r3, r7
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002640:	003b      	movs	r3, r7
 8002642:	0018      	movs	r0, r3
 8002644:	f002 f914 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d001      	beq.n	8002650 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800264c:	f000 f804 	bl	8002658 <Error_Handler>
  }
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b019      	add	sp, #100	; 0x64
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("\r\n------ ERROR HAS OCCURED ------\r\n");
 800265e:	4b02      	ldr	r3, [pc, #8]	; (8002668 <Error_Handler+0x10>)
 8002660:	0018      	movs	r0, r3
 8002662:	f003 fdfb 	bl	800625c <puts>
  while (1)
 8002666:	e7fe      	b.n	8002666 <Error_Handler+0xe>
 8002668:	08009c98 	.word	0x08009c98

0800266c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <RetargetInit+0x28>)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <RetargetInit+0x2c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6898      	ldr	r0, [r3, #8]
 8002680:	2300      	movs	r3, #0
 8002682:	2202      	movs	r2, #2
 8002684:	2100      	movs	r1, #0
 8002686:	f003 fdf3 	bl	8006270 <setvbuf>
}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b002      	add	sp, #8
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	200002dc 	.word	0x200002dc
 8002698:	2000000c 	.word	0x2000000c

0800269c <_isatty>:

int _isatty(int fd) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db04      	blt.n	80026b4 <_isatty+0x18>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	dc01      	bgt.n	80026b4 <_isatty+0x18>
    return 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e005      	b.n	80026c0 <_isatty+0x24>

  errno = EBADF;
 80026b4:	f002 feca 	bl	800544c <__errno>
 80026b8:	0003      	movs	r3, r0
 80026ba:	2209      	movs	r2, #9
 80026bc:	601a      	str	r2, [r3, #0]
  return 0;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_write>:

int _write(int fd, char* ptr, int len) {
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d002      	beq.n	80026e0 <_write+0x18>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d114      	bne.n	800270a <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <_write+0x58>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	2517      	movs	r5, #23
 80026ea:	197c      	adds	r4, r7, r5
 80026ec:	2301      	movs	r3, #1
 80026ee:	425b      	negs	r3, r3
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	f002 fa11 	bl	8004b18 <HAL_UART_Transmit>
 80026f6:	0003      	movs	r3, r0
 80026f8:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 80026fa:	197b      	adds	r3, r7, r5
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <_write+0x3e>
      return len;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	e008      	b.n	8002718 <_write+0x50>
    else
      return EIO;
 8002706:	2305      	movs	r3, #5
 8002708:	e006      	b.n	8002718 <_write+0x50>
  }
  errno = EBADF;
 800270a:	f002 fe9f 	bl	800544c <__errno>
 800270e:	0003      	movs	r3, r0
 8002710:	2209      	movs	r2, #9
 8002712:	601a      	str	r2, [r3, #0]
  return -1;
 8002714:	2301      	movs	r3, #1
 8002716:	425b      	negs	r3, r3
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b006      	add	sp, #24
 800271e:	bdb0      	pop	{r4, r5, r7, pc}
 8002720:	200002dc 	.word	0x200002dc

08002724 <_close>:

int _close(int fd) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db04      	blt.n	800273c <_close+0x18>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b02      	cmp	r3, #2
 8002736:	dc01      	bgt.n	800273c <_close+0x18>
    return 0;
 8002738:	2300      	movs	r3, #0
 800273a:	e006      	b.n	800274a <_close+0x26>

  errno = EBADF;
 800273c:	f002 fe86 	bl	800544c <__errno>
 8002740:	0003      	movs	r3, r0
 8002742:	2209      	movs	r2, #9
 8002744:	601a      	str	r2, [r3, #0]
  return -1;
 8002746:	2301      	movs	r3, #1
 8002748:	425b      	negs	r3, r3
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}

08002752 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800275e:	f002 fe75 	bl	800544c <__errno>
 8002762:	0003      	movs	r3, r0
 8002764:	2209      	movs	r2, #9
 8002766:	601a      	str	r2, [r3, #0]
  return -1;
 8002768:	2301      	movs	r3, #1
 800276a:	425b      	negs	r3, r3
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}

08002774 <_read>:

int _read(int fd, char* ptr, int len) {
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <_read+0x50>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	2517      	movs	r5, #23
 800278c:	197c      	adds	r4, r7, r5
 800278e:	2301      	movs	r3, #1
 8002790:	425b      	negs	r3, r3
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	2201      	movs	r2, #1
 8002796:	f002 fa69 	bl	8004c6c <HAL_UART_Receive>
 800279a:	0003      	movs	r3, r0
 800279c:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800279e:	197b      	adds	r3, r7, r5
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <_read+0x36>
      return 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e008      	b.n	80027bc <_read+0x48>
    else
      return EIO;
 80027aa:	2305      	movs	r3, #5
 80027ac:	e006      	b.n	80027bc <_read+0x48>
  }
  errno = EBADF;
 80027ae:	f002 fe4d 	bl	800544c <__errno>
 80027b2:	0003      	movs	r3, r0
 80027b4:	2209      	movs	r2, #9
 80027b6:	601a      	str	r2, [r3, #0]
  return -1;
 80027b8:	2301      	movs	r3, #1
 80027ba:	425b      	negs	r3, r3
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b006      	add	sp, #24
 80027c2:	bdb0      	pop	{r4, r5, r7, pc}
 80027c4:	200002dc 	.word	0x200002dc

080027c8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db08      	blt.n	80027ea <_fstat+0x22>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	dc05      	bgt.n	80027ea <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0192      	lsls	r2, r2, #6
 80027e4:	605a      	str	r2, [r3, #4]
    return 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e005      	b.n	80027f6 <_fstat+0x2e>
  }

  errno = EBADF;
 80027ea:	f002 fe2f 	bl	800544c <__errno>
 80027ee:	0003      	movs	r3, r0
 80027f0:	2209      	movs	r2, #9
 80027f2:	601a      	str	r2, [r3, #0]
  return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b002      	add	sp, #8
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_MspInit+0x44>)
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_MspInit+0x44>)
 800280c:	2101      	movs	r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_MspInit+0x44>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2201      	movs	r2, #1
 8002818:	4013      	ands	r3, r2
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_MspInit+0x44>)
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_MspInit+0x44>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0549      	lsls	r1, r1, #21
 8002828:	430a      	orrs	r2, r1
 800282a:	61da      	str	r2, [r3, #28]
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_MspInit+0x44>)
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	055b      	lsls	r3, r3, #21
 8002834:	4013      	ands	r3, r2
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	40021000 	.word	0x40021000

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800284c:	e7fe      	b.n	800284c <NMI_Handler+0x4>

0800284e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler+0x4>

08002854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286c:	f000 f93a 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <DMA1_Channel1_IRQHandler+0x14>)
 800287e:	0018      	movs	r0, r3
 8002880:	f000 ff68 	bl	8003754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	20000204 	.word	0x20000204

08002890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <_sbrk+0x5c>)
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <_sbrk+0x60>)
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <_sbrk+0x64>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <_sbrk+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c0:	f002 fdc4 	bl	800544c <__errno>
 80028c4:	0003      	movs	r3, r0
 80028c6:	220c      	movs	r2, #12
 80028c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	425b      	negs	r3, r3
 80028ce:	e009      	b.n	80028e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	18d2      	adds	r2, r2, r3
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <_sbrk+0x64>)
 80028e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b006      	add	sp, #24
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20004000 	.word	0x20004000
 80028f0:	00000400 	.word	0x00000400
 80028f4:	200001f8 	.word	0x200001f8
 80028f8:	20000370 	.word	0x20000370

080028fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <MX_USART2_UART_Init+0x5c>)
 8002910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002914:	2296      	movs	r2, #150	; 0x96
 8002916:	0212      	lsls	r2, r2, #8
 8002918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_USART2_UART_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <MX_USART2_UART_Init+0x58>)
 800294c:	0018      	movs	r0, r3
 800294e:	f002 f88f 	bl	8004a70 <HAL_UART_Init>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d001      	beq.n	800295a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002956:	f7ff fe7f 	bl	8002658 <Error_Handler>
  }

}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200002e0 	.word	0x200002e0
 8002964:	40004400 	.word	0x40004400

08002968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	2314      	movs	r3, #20
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	0018      	movs	r0, r3
 8002976:	2314      	movs	r3, #20
 8002978:	001a      	movs	r2, r3
 800297a:	2100      	movs	r1, #0
 800297c:	f002 fd90 	bl	80054a0 <memset>
  if(uartHandle->Instance==USART2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_UART_MspInit+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d132      	bne.n	80029f0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_UART_MspInit+0x94>)
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_UART_MspInit+0x94>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0289      	lsls	r1, r1, #10
 8002994:	430a      	orrs	r2, r1
 8002996:	61da      	str	r2, [r3, #28]
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0x94>)
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	029b      	lsls	r3, r3, #10
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x94>)
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_UART_MspInit+0x94>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	0289      	lsls	r1, r1, #10
 80029b0:	430a      	orrs	r2, r1
 80029b2:	615a      	str	r2, [r3, #20]
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_UART_MspInit+0x94>)
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029c2:	2114      	movs	r1, #20
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2202      	movs	r2, #2
 80029ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2203      	movs	r2, #3
 80029da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2201      	movs	r2, #1
 80029e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	187a      	adds	r2, r7, r1
 80029e4:	2390      	movs	r3, #144	; 0x90
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	0011      	movs	r1, r2
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 ff9c 	bl	8003928 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b00a      	add	sp, #40	; 0x28
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40004400 	.word	0x40004400
 80029fc:	40021000 	.word	0x40021000

08002a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a04:	480d      	ldr	r0, [pc, #52]	; (8002a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a06:	490e      	ldr	r1, [pc, #56]	; (8002a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a08:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <LoopForever+0xe>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a0c:	e002      	b.n	8002a14 <LoopCopyDataInit>

08002a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a12:	3304      	adds	r3, #4

08002a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a18:	d3f9      	bcc.n	8002a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a1c:	4c0b      	ldr	r4, [pc, #44]	; (8002a4c <LoopForever+0x16>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a20:	e001      	b.n	8002a26 <LoopFillZerobss>

08002a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a24:	3204      	adds	r2, #4

08002a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a28:	d3fb      	bcc.n	8002a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a2a:	f7ff ff67 	bl	80028fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a2e:	f002 fd13 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a32:	f7ff fd47 	bl	80024c4 <main>

08002a36 <LoopForever>:

LoopForever:
    b LoopForever
 8002a36:	e7fe      	b.n	8002a36 <LoopForever>
  ldr   r0, =_estack
 8002a38:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a44:	0800a0a0 	.word	0x0800a0a0
  ldr r2, =_sbss
 8002a48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a4c:	2000036c 	.word	0x2000036c

08002a50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <ADC1_COMP_IRQHandler>
	...

08002a54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_Init+0x24>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_Init+0x24>)
 8002a5e:	2110      	movs	r1, #16
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f000 f809 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6a:	f7ff fec9 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40022000 	.word	0x40022000

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_InitTick+0x60>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	23fa      	movs	r3, #250	; 0xfa
 8002a90:	0098      	lsls	r0, r3, #2
 8002a92:	f7fd fb4b 	bl	800012c <__udivsi3>
 8002a96:	0003      	movs	r3, r0
 8002a98:	0019      	movs	r1, r3
 8002a9a:	0020      	movs	r0, r4
 8002a9c:	f7fd fb46 	bl	800012c <__udivsi3>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 fd9b 	bl	80035de <HAL_SYSTICK_Config>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e00f      	b.n	8002ad0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d80b      	bhi.n	8002ace <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	425b      	negs	r3, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fd68 	bl	8003594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_InitTick+0x64>)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b003      	add	sp, #12
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_IncTick+0x1c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	001a      	movs	r2, r3
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_IncTick+0x20>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	18d2      	adds	r2, r2, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_IncTick+0x20>)
 8002af6:	601a      	str	r2, [r3, #0]
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	20000008 	.word	0x20000008
 8002b04:	20000364 	.word	0x20000364

08002b08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <HAL_GetTick+0x10>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	20000364 	.word	0x20000364

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_Delay+0x40>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	f7ff ffe0 	bl	8002b08 <HAL_GetTick>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000008 	.word	0x20000008

08002b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	230f      	movs	r3, #15
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e125      	b.n	8002dca <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2234      	movs	r2, #52	; 0x34
 8002b90:	2100      	movs	r1, #0
 8002b92:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7ff fb50 	bl	800223c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d000      	beq.n	8002ba8 <HAL_ADC_Init+0x48>
 8002ba6:	e103      	b.n	8002db0 <HAL_ADC_Init+0x250>
 8002ba8:	230f      	movs	r3, #15
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d000      	beq.n	8002bb4 <HAL_ADC_Init+0x54>
 8002bb2:	e0fd      	b.n	8002db0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002bbe:	d000      	beq.n	8002bc2 <HAL_ADC_Init+0x62>
 8002bc0:	e0f6      	b.n	8002db0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	4a83      	ldr	r2, [pc, #524]	; (8002dd4 <HAL_ADC_Init+0x274>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2202      	movs	r2, #2
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d112      	bne.n	8002c06 <HAL_ADC_Init+0xa6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d009      	beq.n	8002c02 <HAL_ADC_Init+0xa2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0xa6>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_ADC_Init+0xa8>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d116      	bne.n	8002c3a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2218      	movs	r2, #24
 8002c14:	4393      	bics	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	0899      	lsrs	r1, r3, #2
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4964      	ldr	r1, [pc, #400]	; (8002dd8 <HAL_ADC_Init+0x278>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7e1b      	ldrb	r3, [r3, #24]
 8002c4e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e5b      	ldrb	r3, [r3, #25]
 8002c54:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c56:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e9b      	ldrb	r3, [r3, #26]
 8002c5c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c5e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <HAL_ADC_Init+0x10e>
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	015b      	lsls	r3, r3, #5
 8002c6c:	e000      	b.n	8002c70 <HAL_ADC_Init+0x110>
 8002c6e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c70:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c76:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_Init+0x124>
 8002c80:	2304      	movs	r3, #4
 8002c82:	e000      	b.n	8002c86 <HAL_ADC_Init+0x126>
 8002c84:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c86:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2124      	movs	r1, #36	; 0x24
 8002c8c:	5c5b      	ldrb	r3, [r3, r1]
 8002c8e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c90:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7edb      	ldrb	r3, [r3, #27]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d115      	bne.n	8002ccc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7e9b      	ldrb	r3, [r3, #26]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	0252      	lsls	r2, r2, #9
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	e00b      	b.n	8002ccc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	2220      	movs	r2, #32
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	23c2      	movs	r3, #194	; 0xc2
 8002cd2:	33ff      	adds	r3, #255	; 0xff
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d007      	beq.n	8002ce8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	055b      	lsls	r3, r3, #21
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d01b      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d017      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d013      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d00f      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d00b      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d007      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b06      	cmp	r3, #6
 8002d32:	d003      	beq.n	8002d3c <HAL_ADC_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	2b07      	cmp	r3, #7
 8002d3a:	d112      	bne.n	8002d62 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2107      	movs	r1, #7
 8002d48:	438a      	bics	r2, r1
 8002d4a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6959      	ldr	r1, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	2207      	movs	r2, #7
 8002d58:	401a      	ands	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_ADC_Init+0x27c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10b      	bne.n	8002d8a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4393      	bics	r3, r2
 8002d80:	2201      	movs	r2, #1
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d88:	e01c      	b.n	8002dc4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	2212      	movs	r2, #18
 8002d90:	4393      	bics	r3, r2
 8002d92:	2210      	movs	r2, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2201      	movs	r2, #1
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002dae:	e009      	b.n	8002dc4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	2210      	movs	r2, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	fffffefd 	.word	0xfffffefd
 8002dd8:	fffe0219 	.word	0xfffe0219
 8002ddc:	833fffe7 	.word	0x833fffe7

08002de0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d15e      	bne.n	8002ebe <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2234      	movs	r2, #52	; 0x34
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_Start_DMA+0x2e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e05e      	b.n	8002ecc <HAL_ADC_Start_DMA+0xec>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2234      	movs	r2, #52	; 0x34
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	7e5b      	ldrb	r3, [r3, #25]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d007      	beq.n	8002e2e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e1e:	2317      	movs	r3, #23
 8002e20:	18fc      	adds	r4, r7, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 f96b 	bl	8003100 <ADC_Enable>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e2e:	2317      	movs	r3, #23
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d146      	bne.n	8002ec6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <HAL_ADC_Start_DMA+0xf4>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0052      	lsls	r2, r2, #1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2234      	movs	r2, #52	; 0x34
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_ADC_Start_DMA+0xf8>)
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_ADC_Start_DMA+0xfc>)
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_ADC_Start_DMA+0x100>)
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	221c      	movs	r2, #28
 8002e76:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2110      	movs	r1, #16
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f000 fbee 	bl	8003688 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ebe:	2317      	movs	r3, #23
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ec6:	2317      	movs	r3, #23
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	781b      	ldrb	r3, [r3, #0]
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b007      	add	sp, #28
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	fffff0fe 	.word	0xfffff0fe
 8002ed8:	080031f9 	.word	0x080031f9
 8002edc:	080032ad 	.word	0x080032ad
 8002ee0:	080032cb 	.word	0x080032cb

08002ee4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eee:	230f      	movs	r3, #15
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	055b      	lsls	r3, r3, #21
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d011      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x46>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d00d      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x46>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d009      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x46>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d005      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x46>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d001      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x46>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2234      	movs	r2, #52	; 0x34
 8002f2e:	5c9b      	ldrb	r3, [r3, r2]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x54>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0d0      	b.n	80030da <HAL_ADC_ConfigChannel+0x1f6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2234      	movs	r2, #52	; 0x34
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2204      	movs	r2, #4
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d000      	beq.n	8002f4e <HAL_ADC_ConfigChannel+0x6a>
 8002f4c:	e0b4      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a64      	ldr	r2, [pc, #400]	; (80030e4 <HAL_ADC_ConfigChannel+0x200>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x76>
 8002f58:	e082      	b.n	8003060 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	055b      	lsls	r3, r3, #21
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d037      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d033      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d02f      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d02b      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d027      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d023      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d01f      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d01b      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2107      	movs	r1, #7
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d012      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2107      	movs	r1, #7
 8002fd2:	438a      	bics	r2, r1
 8002fd4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6959      	ldr	r1, [r3, #20]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d007      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x120>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b11      	cmp	r3, #17
 8002ffa:	d003      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x120>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b12      	cmp	r3, #18
 8003002:	d163      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003004:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_ADC_ConfigChannel+0x204>)
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d009      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x140>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b11      	cmp	r3, #17
 8003016:	d102      	bne.n	800301e <HAL_ADC_ConfigChannel+0x13a>
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	03db      	lsls	r3, r3, #15
 800301c:	e004      	b.n	8003028 <HAL_ADC_ConfigChannel+0x144>
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	045b      	lsls	r3, r3, #17
 8003022:	e001      	b.n	8003028 <HAL_ADC_ConfigChannel+0x144>
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <HAL_ADC_ConfigChannel+0x204>)
 800302a:	430b      	orrs	r3, r1
 800302c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b10      	cmp	r3, #16
 8003034:	d14a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_ADC_ConfigChannel+0x208>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	492d      	ldr	r1, [pc, #180]	; (80030f0 <HAL_ADC_ConfigChannel+0x20c>)
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd f875 	bl	800012c <__udivsi3>
 8003042:	0003      	movs	r3, r0
 8003044:	001a      	movs	r2, r3
 8003046:	0013      	movs	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	189b      	adds	r3, r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003050:	e002      	b.n	8003058 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3b01      	subs	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x16e>
 800305e:	e035      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2101      	movs	r1, #1
 800306c:	4099      	lsls	r1, r3
 800306e:	000b      	movs	r3, r1
 8003070:	43d9      	mvns	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b10      	cmp	r3, #16
 8003080:	d007      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x1ae>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b11      	cmp	r3, #17
 8003088:	d003      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x1ae>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b12      	cmp	r3, #18
 8003090:	d11c      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_ADC_ConfigChannel+0x204>)
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b10      	cmp	r3, #16
 800309c:	d007      	beq.n	80030ae <HAL_ADC_ConfigChannel+0x1ca>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b11      	cmp	r3, #17
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x1c6>
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_ADC_ConfigChannel+0x210>)
 80030a8:	e002      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x1cc>
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_ADC_ConfigChannel+0x214>)
 80030ac:	e000      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x1cc>
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_ADC_ConfigChannel+0x218>)
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_ADC_ConfigChannel+0x204>)
 80030b2:	400b      	ands	r3, r1
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e009      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	2220      	movs	r2, #32
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2234      	movs	r2, #52	; 0x34
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030d4:	230f      	movs	r3, #15
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	781b      	ldrb	r3, [r3, #0]
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	00001001 	.word	0x00001001
 80030e8:	40012708 	.word	0x40012708
 80030ec:	20000000 	.word	0x20000000
 80030f0:	000f4240 	.word	0x000f4240
 80030f4:	ffbfffff 	.word	0xffbfffff
 80030f8:	feffffff 	.word	0xfeffffff
 80030fc:	ff7fffff 	.word	0xff7fffff

08003100 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2203      	movs	r2, #3
 8003118:	4013      	ands	r3, r2
 800311a:	2b01      	cmp	r3, #1
 800311c:	d112      	bne.n	8003144 <ADC_Enable+0x44>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	2b01      	cmp	r3, #1
 800312a:	d009      	beq.n	8003140 <ADC_Enable+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	401a      	ands	r2, r3
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	429a      	cmp	r2, r3
 800313e:	d101      	bne.n	8003144 <ADC_Enable+0x44>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <ADC_Enable+0x46>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d14b      	bne.n	80031e2 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <ADC_Enable+0xec>)
 8003152:	4013      	ands	r3, r2
 8003154:	d00d      	beq.n	8003172 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	2210      	movs	r2, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	2201      	movs	r2, #1
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e038      	b.n	80031e4 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <ADC_Enable+0xf0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	491b      	ldr	r1, [pc, #108]	; (80031f4 <ADC_Enable+0xf4>)
 8003188:	0018      	movs	r0, r3
 800318a:	f7fc ffcf 	bl	800012c <__udivsi3>
 800318e:	0003      	movs	r3, r0
 8003190:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003192:	e002      	b.n	800319a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	3b01      	subs	r3, #1
 8003198:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f9      	bne.n	8003194 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80031a0:	f7ff fcb2 	bl	8002b08 <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031a8:	e014      	b.n	80031d4 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031aa:	f7ff fcad 	bl	8002b08 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d90d      	bls.n	80031d4 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	2210      	movs	r2, #16
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	2201      	movs	r2, #1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	4013      	ands	r3, r2
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d1e3      	bne.n	80031aa <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	80000017 	.word	0x80000017
 80031f0:	20000000 	.word	0x20000000
 80031f4:	000f4240 	.word	0x000f4240

080031f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	2250      	movs	r2, #80	; 0x50
 800320c:	4013      	ands	r3, r2
 800320e:	d140      	bne.n	8003292 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	23c0      	movs	r3, #192	; 0xc0
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4013      	ands	r3, r2
 800322a:	d12d      	bne.n	8003288 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003230:	2b00      	cmp	r3, #0
 8003232:	d129      	bne.n	8003288 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2208      	movs	r2, #8
 800323c:	4013      	ands	r3, r2
 800323e:	2b08      	cmp	r3, #8
 8003240:	d122      	bne.n	8003288 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d110      	bne.n	8003270 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	210c      	movs	r1, #12
 800325a:	438a      	bics	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <ADC_DMAConvCplt+0xb0>)
 8003264:	4013      	ands	r3, r2
 8003266:	2201      	movs	r2, #1
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
 800326e:	e00b      	b.n	8003288 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	2220      	movs	r2, #32
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	2201      	movs	r2, #1
 8003282:	431a      	orrs	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff f966 	bl	800255c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003290:	e005      	b.n	800329e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	0010      	movs	r0, r2
 800329c:	4798      	blx	r3
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	fffffefe 	.word	0xfffffefe

080032ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7ff f955 	bl	800256c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}

080032ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	431a      	orrs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	2204      	movs	r2, #4
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff f942 	bl	800257c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003308:	2317      	movs	r3, #23
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2234      	movs	r2, #52	; 0x34
 800331c:	5c9b      	ldrb	r3, [r3, r2]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_ADCEx_Calibration_Start+0x26>
 8003322:	2302      	movs	r3, #2
 8003324:	e084      	b.n	8003430 <HAL_ADCEx_Calibration_Start+0x130>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2234      	movs	r2, #52	; 0x34
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2203      	movs	r2, #3
 8003336:	4013      	ands	r3, r2
 8003338:	2b01      	cmp	r3, #1
 800333a:	d112      	bne.n	8003362 <HAL_ADCEx_Calibration_Start+0x62>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2201      	movs	r2, #1
 8003344:	4013      	ands	r3, r2
 8003346:	2b01      	cmp	r3, #1
 8003348:	d009      	beq.n	800335e <HAL_ADCEx_Calibration_Start+0x5e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	401a      	ands	r2, r3
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	429a      	cmp	r2, r3
 800335c:	d101      	bne.n	8003362 <HAL_ADCEx_Calibration_Start+0x62>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_ADCEx_Calibration_Start+0x64>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d152      	bne.n	800340e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	4a32      	ldr	r2, [pc, #200]	; (8003438 <HAL_ADCEx_Calibration_Start+0x138>)
 800336e:	4013      	ands	r3, r2
 8003370:	2202      	movs	r2, #2
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2203      	movs	r2, #3
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2103      	movs	r1, #3
 8003390:	438a      	bics	r2, r1
 8003392:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	0609      	lsls	r1, r1, #24
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80033a6:	f7ff fbaf 	bl	8002b08 <HAL_GetTick>
 80033aa:	0003      	movs	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80033ae:	e014      	b.n	80033da <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033b0:	f7ff fbaa 	bl	8002b08 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d90d      	bls.n	80033da <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	2212      	movs	r2, #18
 80033c4:	4393      	bics	r3, r2
 80033c6:	2210      	movs	r2, #16
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2234      	movs	r2, #52	; 0x34
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02a      	b.n	8003430 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	0fdb      	lsrs	r3, r3, #31
 80033e2:	07da      	lsls	r2, r3, #31
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d0e1      	beq.n	80033b0 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	2203      	movs	r2, #3
 8003402:	4393      	bics	r3, r2
 8003404:	2201      	movs	r2, #1
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
 800340c:	e009      	b.n	8003422 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	2220      	movs	r2, #32
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800341a:	2317      	movs	r3, #23
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2234      	movs	r2, #52	; 0x34
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800342a:	2317      	movs	r3, #23
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	781b      	ldrb	r3, [r3, #0]
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b006      	add	sp, #24
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fffffefd 	.word	0xfffffefd

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	0002      	movs	r2, r0
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b7f      	cmp	r3, #127	; 0x7f
 800344e:	d809      	bhi.n	8003464 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	001a      	movs	r2, r3
 8003456:	231f      	movs	r3, #31
 8003458:	401a      	ands	r2, r3
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <__NVIC_EnableIRQ+0x30>)
 800345c:	2101      	movs	r1, #1
 800345e:	4091      	lsls	r1, r2
 8003460:	000a      	movs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
  }
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	0002      	movs	r2, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b7f      	cmp	r3, #127	; 0x7f
 8003484:	d828      	bhi.n	80034d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003486:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <__NVIC_SetPriority+0xd4>)
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b25b      	sxtb	r3, r3
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	33c0      	adds	r3, #192	; 0xc0
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	589b      	ldr	r3, [r3, r2]
 8003496:	1dfa      	adds	r2, r7, #7
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	0011      	movs	r1, r2
 800349c:	2203      	movs	r2, #3
 800349e:	400a      	ands	r2, r1
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	21ff      	movs	r1, #255	; 0xff
 80034a4:	4091      	lsls	r1, r2
 80034a6:	000a      	movs	r2, r1
 80034a8:	43d2      	mvns	r2, r2
 80034aa:	401a      	ands	r2, r3
 80034ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	22ff      	movs	r2, #255	; 0xff
 80034b4:	401a      	ands	r2, r3
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	0018      	movs	r0, r3
 80034bc:	2303      	movs	r3, #3
 80034be:	4003      	ands	r3, r0
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c4:	481f      	ldr	r0, [pc, #124]	; (8003544 <__NVIC_SetPriority+0xd4>)
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	430a      	orrs	r2, r1
 80034d0:	33c0      	adds	r3, #192	; 0xc0
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034d6:	e031      	b.n	800353c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <__NVIC_SetPriority+0xd8>)
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	0019      	movs	r1, r3
 80034e0:	230f      	movs	r3, #15
 80034e2:	400b      	ands	r3, r1
 80034e4:	3b08      	subs	r3, #8
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3306      	adds	r3, #6
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	3304      	adds	r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1dfa      	adds	r2, r7, #7
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	0011      	movs	r1, r2
 80034f8:	2203      	movs	r2, #3
 80034fa:	400a      	ands	r2, r1
 80034fc:	00d2      	lsls	r2, r2, #3
 80034fe:	21ff      	movs	r1, #255	; 0xff
 8003500:	4091      	lsls	r1, r2
 8003502:	000a      	movs	r2, r1
 8003504:	43d2      	mvns	r2, r2
 8003506:	401a      	ands	r2, r3
 8003508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	22ff      	movs	r2, #255	; 0xff
 8003510:	401a      	ands	r2, r3
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	0018      	movs	r0, r3
 8003518:	2303      	movs	r3, #3
 800351a:	4003      	ands	r3, r0
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003520:	4809      	ldr	r0, [pc, #36]	; (8003548 <__NVIC_SetPriority+0xd8>)
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	001c      	movs	r4, r3
 8003528:	230f      	movs	r3, #15
 800352a:	4023      	ands	r3, r4
 800352c:	3b08      	subs	r3, #8
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	430a      	orrs	r2, r1
 8003532:	3306      	adds	r3, #6
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	18c3      	adds	r3, r0, r3
 8003538:	3304      	adds	r3, #4
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b003      	add	sp, #12
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	4a0c      	ldr	r2, [pc, #48]	; (800358c <SysTick_Config+0x40>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e010      	b.n	8003584 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <SysTick_Config+0x44>)
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	3a01      	subs	r2, #1
 8003568:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	2301      	movs	r3, #1
 800356c:	425b      	negs	r3, r3
 800356e:	2103      	movs	r1, #3
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff ff7d 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <SysTick_Config+0x44>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <SysTick_Config+0x44>)
 800357e:	2207      	movs	r2, #7
 8003580:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}
 800358c:	00ffffff 	.word	0x00ffffff
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	210f      	movs	r1, #15
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	1c02      	adds	r2, r0, #0
 80035a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff ff5d 	bl	8003470 <__NVIC_SetPriority>
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	0002      	movs	r2, r0
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7ff ff33 	bl	800343c <__NVIC_EnableIRQ>
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff ffaf 	bl	800354c <SysTick_Config>
 80035ee:	0003      	movs	r3, r0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e036      	b.n	800367c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2221      	movs	r2, #33	; 0x21
 8003612:	2102      	movs	r1, #2
 8003614:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_DMA_Init+0x8c>)
 8003622:	4013      	ands	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f000 f946 	bl	80038f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2221      	movs	r2, #33	; 0x21
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}  
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}
 8003684:	ffffc00f 	.word	0xffffc00f

08003688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003696:	2317      	movs	r3, #23
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	5c9b      	ldrb	r3, [r3, r2]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Start_IT+0x24>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e04f      	b.n	800374c <HAL_DMA_Start_IT+0xc4>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	2101      	movs	r1, #1
 80036b2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	5c9b      	ldrb	r3, [r3, r2]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d13a      	bne.n	8003736 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	; 0x21
 80036c4:	2102      	movs	r1, #2
 80036c6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	438a      	bics	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8d7 	bl	8003898 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	210e      	movs	r1, #14
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e00f      	b.n	8003724 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	210a      	movs	r1, #10
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2104      	movs	r1, #4
 8003720:	438a      	bics	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e007      	b.n	8003746 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800373e:	2317      	movs	r3, #23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003746:	2317      	movs	r3, #23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	781b      	ldrb	r3, [r3, #0]
} 
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b006      	add	sp, #24
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2204      	movs	r2, #4
 8003772:	409a      	lsls	r2, r3
 8003774:	0013      	movs	r3, r2
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	d024      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x72>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2204      	movs	r2, #4
 8003780:	4013      	ands	r3, r2
 8003782:	d020      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	d107      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2104      	movs	r1, #4
 800379c:	438a      	bics	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2104      	movs	r1, #4
 80037aa:	4091      	lsls	r1, r2
 80037ac:	000a      	movs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d100      	bne.n	80037ba <HAL_DMA_IRQHandler+0x66>
 80037b8:	e06a      	b.n	8003890 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	0010      	movs	r0, r2
 80037c2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	e064      	b.n	8003890 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	2202      	movs	r2, #2
 80037cc:	409a      	lsls	r2, r3
 80037ce:	0013      	movs	r3, r2
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4013      	ands	r3, r2
 80037d4:	d02b      	beq.n	800382e <HAL_DMA_IRQHandler+0xda>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2202      	movs	r2, #2
 80037da:	4013      	ands	r3, r2
 80037dc:	d027      	beq.n	800382e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2220      	movs	r2, #32
 80037e6:	4013      	ands	r3, r2
 80037e8:	d10b      	bne.n	8003802 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	210a      	movs	r1, #10
 80037f6:	438a      	bics	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	2102      	movs	r1, #2
 800380c:	4091      	lsls	r1, r2
 800380e:	000a      	movs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	0010      	movs	r0, r2
 800382a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800382c:	e030      	b.n	8003890 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2208      	movs	r2, #8
 8003834:	409a      	lsls	r2, r3
 8003836:	0013      	movs	r3, r2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	d028      	beq.n	8003890 <HAL_DMA_IRQHandler+0x13c>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2208      	movs	r2, #8
 8003842:	4013      	ands	r3, r2
 8003844:	d024      	beq.n	8003890 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	210e      	movs	r1, #14
 8003852:	438a      	bics	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	2101      	movs	r1, #1
 8003860:	4091      	lsls	r1, r2
 8003862:	000a      	movs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2221      	movs	r2, #33	; 0x21
 8003870:	2101      	movs	r1, #1
 8003872:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	0010      	movs	r0, r2
 800388c:	4798      	blx	r3
    }
   }
}  
 800388e:	e7ff      	b.n	8003890 <HAL_DMA_IRQHandler+0x13c>
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bd80      	pop	{r7, pc}

08003898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	2101      	movs	r1, #1
 80038b0:	4091      	lsls	r1, r2
 80038b2:	000a      	movs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d108      	bne.n	80038d8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038d6:	e007      	b.n	80038e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b004      	add	sp, #16
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a08      	ldr	r2, [pc, #32]	; (8003920 <DMA_CalcBaseAndBitshift+0x30>)
 80038fe:	4694      	mov	ip, r2
 8003900:	4463      	add	r3, ip
 8003902:	2114      	movs	r1, #20
 8003904:	0018      	movs	r0, r3
 8003906:	f7fc fc11 	bl	800012c <__udivsi3>
 800390a:	0003      	movs	r3, r0
 800390c:	009a      	lsls	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <DMA_CalcBaseAndBitshift+0x34>)
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}
 8003920:	bffdfff8 	.word	0xbffdfff8
 8003924:	40020000 	.word	0x40020000

08003928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003936:	e155      	b.n	8003be4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4091      	lsls	r1, r2
 8003942:	000a      	movs	r2, r1
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d100      	bne.n	8003950 <HAL_GPIO_Init+0x28>
 800394e:	e146      	b.n	8003bde <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d00b      	beq.n	8003970 <HAL_GPIO_Init+0x48>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d007      	beq.n	8003970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003964:	2b11      	cmp	r3, #17
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	409a      	lsls	r2, r3
 800397e:	0013      	movs	r3, r2
 8003980:	43da      	mvns	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	0013      	movs	r3, r2
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
 80039ac:	0013      	movs	r3, r2
 80039ae:	43da      	mvns	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	2201      	movs	r2, #1
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
 80039c4:	0013      	movs	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	409a      	lsls	r2, r3
 80039e0:	0013      	movs	r3, r2
 80039e2:	43da      	mvns	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	0013      	movs	r3, r2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0xea>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b12      	cmp	r3, #18
 8003a10:	d123      	bne.n	8003a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	58d3      	ldr	r3, [r2, r3]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2207      	movs	r2, #7
 8003a24:	4013      	ands	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2107      	movs	r1, #7
 8003a3e:	400b      	ands	r3, r1
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	0013      	movs	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	0092      	lsls	r2, r2, #2
 8003a56:	6939      	ldr	r1, [r7, #16]
 8003a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	409a      	lsls	r2, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	0013      	movs	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	055b      	lsls	r3, r3, #21
 8003a96:	4013      	ands	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_GPIO_Init+0x174>
 8003a9a:	e0a0      	b.n	8003bde <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9c:	4b57      	ldr	r3, [pc, #348]	; (8003bfc <HAL_GPIO_Init+0x2d4>)
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <HAL_GPIO_Init+0x2d4>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
 8003aa8:	4b54      	ldr	r3, [pc, #336]	; (8003bfc <HAL_GPIO_Init+0x2d4>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_GPIO_Init+0x2d8>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3302      	adds	r3, #2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	589b      	ldr	r3, [r3, r2]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	220f      	movs	r2, #15
 8003acc:	409a      	lsls	r2, r3
 8003ace:	0013      	movs	r3, r2
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	2390      	movs	r3, #144	; 0x90
 8003adc:	05db      	lsls	r3, r3, #23
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d019      	beq.n	8003b16 <HAL_GPIO_Init+0x1ee>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a47      	ldr	r2, [pc, #284]	; (8003c04 <HAL_GPIO_Init+0x2dc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_GPIO_Init+0x1ea>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a46      	ldr	r2, [pc, #280]	; (8003c08 <HAL_GPIO_Init+0x2e0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00d      	beq.n	8003b0e <HAL_GPIO_Init+0x1e6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a45      	ldr	r2, [pc, #276]	; (8003c0c <HAL_GPIO_Init+0x2e4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <HAL_GPIO_Init+0x1e2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a44      	ldr	r2, [pc, #272]	; (8003c10 <HAL_GPIO_Init+0x2e8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_GPIO_Init+0x1de>
 8003b02:	2304      	movs	r3, #4
 8003b04:	e008      	b.n	8003b18 <HAL_GPIO_Init+0x1f0>
 8003b06:	2305      	movs	r3, #5
 8003b08:	e006      	b.n	8003b18 <HAL_GPIO_Init+0x1f0>
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e004      	b.n	8003b18 <HAL_GPIO_Init+0x1f0>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e002      	b.n	8003b18 <HAL_GPIO_Init+0x1f0>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_GPIO_Init+0x1f0>
 8003b16:	2300      	movs	r3, #0
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	0092      	lsls	r2, r2, #2
 8003b20:	4093      	lsls	r3, r2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b28:	4935      	ldr	r1, [pc, #212]	; (8003c00 <HAL_GPIO_Init+0x2d8>)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3302      	adds	r3, #2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003b60:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b8a:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	035b      	lsls	r3, r3, #13
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	039b      	lsls	r3, r3, #14
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_GPIO_Init+0x2ec>)
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	40da      	lsrs	r2, r3
 8003bec:	1e13      	subs	r3, r2, #0
 8003bee:	d000      	beq.n	8003bf2 <HAL_GPIO_Init+0x2ca>
 8003bf0:	e6a2      	b.n	8003938 <HAL_GPIO_Init+0x10>
  } 
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b006      	add	sp, #24
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40010000 	.word	0x40010000
 8003c04:	48000400 	.word	0x48000400
 8003c08:	48000800 	.word	0x48000800
 8003c0c:	48000c00 	.word	0x48000c00
 8003c10:	48001000 	.word	0x48001000
 8003c14:	40010400 	.word	0x40010400

08003c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e082      	b.n	8003d30 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2241      	movs	r2, #65	; 0x41
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2240      	movs	r2, #64	; 0x40
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fe fbf1 	bl	8002428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2241      	movs	r2, #65	; 0x41
 8003c4a:	2124      	movs	r1, #36	; 0x24
 8003c4c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	438a      	bics	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4934      	ldr	r1, [pc, #208]	; (8003d38 <HAL_I2C_Init+0x120>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4931      	ldr	r1, [pc, #196]	; (8003d3c <HAL_I2C_Init+0x124>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d108      	bne.n	8003c96 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	0209      	lsls	r1, r1, #8
 8003c90:	430a      	orrs	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	e007      	b.n	8003ca6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2184      	movs	r1, #132	; 0x84
 8003ca0:	0209      	lsls	r1, r1, #8
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d104      	bne.n	8003cb8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	491f      	ldr	r1, [pc, #124]	; (8003d40 <HAL_I2C_Init+0x128>)
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	491a      	ldr	r1, [pc, #104]	; (8003d3c <HAL_I2C_Init+0x124>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69d9      	ldr	r1, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2241      	movs	r2, #65	; 0x41
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2242      	movs	r2, #66	; 0x42
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	f0ffffff 	.word	0xf0ffffff
 8003d3c:	ffff7fff 	.word	0xffff7fff
 8003d40:	02008000 	.word	0x02008000

08003d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2241      	movs	r2, #65	; 0x41
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d138      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2240      	movs	r2, #64	; 0x40
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e032      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2240      	movs	r2, #64	; 0x40
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2241      	movs	r2, #65	; 0x41
 8003d74:	2124      	movs	r1, #36	; 0x24
 8003d76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4911      	ldr	r1, [pc, #68]	; (8003dd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2101      	movs	r1, #1
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2241      	movs	r2, #65	; 0x41
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	ffffefff 	.word	0xffffefff

08003ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2241      	movs	r2, #65	; 0x41
 8003dea:	5c9b      	ldrb	r3, [r3, r2]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d139      	bne.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2240      	movs	r2, #64	; 0x40
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e033      	b.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	2101      	movs	r1, #1
 8003e06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2241      	movs	r2, #65	; 0x41
 8003e0c:	2124      	movs	r1, #36	; 0x24
 8003e0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2241      	movs	r2, #65	; 0x41
 8003e56:	2120      	movs	r1, #32
 8003e58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b004      	add	sp, #16
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fffff0ff 	.word	0xfffff0ff

08003e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f000 fb76 	bl	8004574 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d100      	bne.n	8003e94 <HAL_RCC_OscConfig+0x20>
 8003e92:	e08e      	b.n	8003fb2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e94:	4bc5      	ldr	r3, [pc, #788]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	220c      	movs	r2, #12
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d00e      	beq.n	8003ebe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ea0:	4bc2      	ldr	r3, [pc, #776]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	220c      	movs	r2, #12
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d117      	bne.n	8003edc <HAL_RCC_OscConfig+0x68>
 8003eac:	4bbf      	ldr	r3, [pc, #764]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	23c0      	movs	r3, #192	; 0xc0
 8003eb2:	025b      	lsls	r3, r3, #9
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10e      	bne.n	8003edc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebe:	4bbb      	ldr	r3, [pc, #748]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <HAL_RCC_OscConfig+0x58>
 8003eca:	e071      	b.n	8003fb0 <HAL_RCC_OscConfig+0x13c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d000      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x62>
 8003ed4:	e06c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f000 fb4c 	bl	8004574 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x80>
 8003ee4:	4bb1      	ldr	r3, [pc, #708]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4bb0      	ldr	r3, [pc, #704]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	0249      	lsls	r1, r1, #9
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e02f      	b.n	8003f54 <HAL_RCC_OscConfig+0xe0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCC_OscConfig+0xa2>
 8003efc:	4bab      	ldr	r3, [pc, #684]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4baa      	ldr	r3, [pc, #680]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f02:	49ab      	ldr	r1, [pc, #684]	; (80041b0 <HAL_RCC_OscConfig+0x33c>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	4ba8      	ldr	r3, [pc, #672]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4ba7      	ldr	r3, [pc, #668]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f0e:	49a9      	ldr	r1, [pc, #676]	; (80041b4 <HAL_RCC_OscConfig+0x340>)
 8003f10:	400a      	ands	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e01e      	b.n	8003f54 <HAL_RCC_OscConfig+0xe0>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d10e      	bne.n	8003f3c <HAL_RCC_OscConfig+0xc8>
 8003f1e:	4ba3      	ldr	r3, [pc, #652]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4ba2      	ldr	r3, [pc, #648]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	02c9      	lsls	r1, r1, #11
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	4b9f      	ldr	r3, [pc, #636]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b9e      	ldr	r3, [pc, #632]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	0249      	lsls	r1, r1, #9
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0xe0>
 8003f3c:	4b9b      	ldr	r3, [pc, #620]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b9a      	ldr	r3, [pc, #616]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f42:	499b      	ldr	r1, [pc, #620]	; (80041b0 <HAL_RCC_OscConfig+0x33c>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	4b98      	ldr	r3, [pc, #608]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b97      	ldr	r3, [pc, #604]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f4e:	4999      	ldr	r1, [pc, #612]	; (80041b4 <HAL_RCC_OscConfig+0x340>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d014      	beq.n	8003f86 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe fdd4 	bl	8002b08 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f66:	f7fe fdcf 	bl	8002b08 <HAL_GetTick>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b64      	cmp	r3, #100	; 0x64
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e2fd      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f78:	4b8c      	ldr	r3, [pc, #560]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	4013      	ands	r3, r2
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0xf2>
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe fdbf 	bl	8002b08 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fe fdba 	bl	8002b08 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e2e8      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa2:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x11c>
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d100      	bne.n	8003fbe <HAL_RCC_OscConfig+0x14a>
 8003fbc:	e06c      	b.n	8004098 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fbe:	4b7b      	ldr	r3, [pc, #492]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fc8:	4b78      	ldr	r3, [pc, #480]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	220c      	movs	r2, #12
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d11f      	bne.n	8004014 <HAL_RCC_OscConfig+0x1a0>
 8003fd4:	4b75      	ldr	r3, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	23c0      	movs	r3, #192	; 0xc0
 8003fda:	025b      	lsls	r3, r3, #9
 8003fdc:	401a      	ands	r2, r3
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d116      	bne.n	8004014 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	4b71      	ldr	r3, [pc, #452]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_OscConfig+0x188>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e2bb      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	22f8      	movs	r2, #248	; 0xf8
 8004002:	4393      	bics	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00da      	lsls	r2, r3, #3
 800400c:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	e041      	b.n	8004098 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d024      	beq.n	8004066 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b62      	ldr	r3, [pc, #392]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004022:	2101      	movs	r1, #1
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fd6e 	bl	8002b08 <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004032:	f7fe fd69 	bl	8002b08 <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e297      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2202      	movs	r2, #2
 800404a:	4013      	ands	r3, r2
 800404c:	d0f1      	beq.n	8004032 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b57      	ldr	r3, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	22f8      	movs	r2, #248	; 0xf8
 8004054:	4393      	bics	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	00da      	lsls	r2, r3, #3
 800405e:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e018      	b.n	8004098 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 800406c:	2101      	movs	r1, #1
 800406e:	438a      	bics	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fe fd49 	bl	8002b08 <HAL_GetTick>
 8004076:	0003      	movs	r3, r0
 8004078:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe fd44 	bl	8002b08 <HAL_GetTick>
 8004080:	0002      	movs	r2, r0
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e272      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2202      	movs	r2, #2
 8004094:	4013      	ands	r3, r2
 8004096:	d1f1      	bne.n	800407c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2208      	movs	r2, #8
 800409e:	4013      	ands	r3, r2
 80040a0:	d036      	beq.n	8004110 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d019      	beq.n	80040de <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80040ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	430a      	orrs	r2, r1
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b6:	f7fe fd27 	bl	8002b08 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c0:	f7fe fd22 	bl	8002b08 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e250      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2202      	movs	r2, #2
 80040d8:	4013      	ands	r3, r2
 80040da:	d0f1      	beq.n	80040c0 <HAL_RCC_OscConfig+0x24c>
 80040dc:	e018      	b.n	8004110 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80040e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80040e4:	2101      	movs	r1, #1
 80040e6:	438a      	bics	r2, r1
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fe fd0d 	bl	8002b08 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fe fd08 	bl	8002b08 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e236      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2202      	movs	r2, #2
 800410c:	4013      	ands	r3, r2
 800410e:	d1f1      	bne.n	80040f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2204      	movs	r2, #4
 8004116:	4013      	ands	r3, r2
 8004118:	d100      	bne.n	800411c <HAL_RCC_OscConfig+0x2a8>
 800411a:	e0b5      	b.n	8004288 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411c:	231f      	movs	r3, #31
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	055b      	lsls	r3, r3, #21
 800412c:	4013      	ands	r3, r2
 800412e:	d111      	bne.n	8004154 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004130:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	0549      	lsls	r1, r1, #21
 800413a:	430a      	orrs	r2, r1
 800413c:	61da      	str	r2, [r3, #28]
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	055b      	lsls	r3, r3, #21
 8004146:	4013      	ands	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800414c:	231f      	movs	r3, #31
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_RCC_OscConfig+0x344>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4013      	ands	r3, r2
 800415e:	d11a      	bne.n	8004196 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x344>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_RCC_OscConfig+0x344>)
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	0049      	lsls	r1, r1, #1
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416e:	f7fe fccb 	bl	8002b08 <HAL_GetTick>
 8004172:	0003      	movs	r3, r0
 8004174:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fe fcc6 	bl	8002b08 <HAL_GetTick>
 800417c:	0002      	movs	r2, r0
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1f4      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_OscConfig+0x344>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4013      	ands	r3, r2
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10e      	bne.n	80041bc <HAL_RCC_OscConfig+0x348>
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	4b02      	ldr	r3, [pc, #8]	; (80041ac <HAL_RCC_OscConfig+0x338>)
 80041a4:	2101      	movs	r1, #1
 80041a6:	430a      	orrs	r2, r1
 80041a8:	621a      	str	r2, [r3, #32]
 80041aa:	e035      	b.n	8004218 <HAL_RCC_OscConfig+0x3a4>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	fffeffff 	.word	0xfffeffff
 80041b4:	fffbffff 	.word	0xfffbffff
 80041b8:	40007000 	.word	0x40007000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10c      	bne.n	80041de <HAL_RCC_OscConfig+0x36a>
 80041c4:	4bca      	ldr	r3, [pc, #808]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	4bc9      	ldr	r3, [pc, #804]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	621a      	str	r2, [r3, #32]
 80041d0:	4bc7      	ldr	r3, [pc, #796]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	4bc6      	ldr	r3, [pc, #792]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041d6:	2104      	movs	r1, #4
 80041d8:	438a      	bics	r2, r1
 80041da:	621a      	str	r2, [r3, #32]
 80041dc:	e01c      	b.n	8004218 <HAL_RCC_OscConfig+0x3a4>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x38c>
 80041e6:	4bc2      	ldr	r3, [pc, #776]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	4bc1      	ldr	r3, [pc, #772]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041ec:	2104      	movs	r1, #4
 80041ee:	430a      	orrs	r2, r1
 80041f0:	621a      	str	r2, [r3, #32]
 80041f2:	4bbf      	ldr	r3, [pc, #764]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	4bbe      	ldr	r3, [pc, #760]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80041f8:	2101      	movs	r1, #1
 80041fa:	430a      	orrs	r2, r1
 80041fc:	621a      	str	r2, [r3, #32]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0x3a4>
 8004200:	4bbb      	ldr	r3, [pc, #748]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	4bba      	ldr	r3, [pc, #744]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004206:	2101      	movs	r1, #1
 8004208:	438a      	bics	r2, r1
 800420a:	621a      	str	r2, [r3, #32]
 800420c:	4bb8      	ldr	r3, [pc, #736]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	4bb7      	ldr	r3, [pc, #732]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004212:	2104      	movs	r1, #4
 8004214:	438a      	bics	r2, r1
 8004216:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d014      	beq.n	800424a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7fe fc72 	bl	8002b08 <HAL_GetTick>
 8004224:	0003      	movs	r3, r0
 8004226:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e009      	b.n	800423e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fe fc6d 	bl	8002b08 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	4aaf      	ldr	r2, [pc, #700]	; (80044f4 <HAL_RCC_OscConfig+0x680>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e19a      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	4bac      	ldr	r3, [pc, #688]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	2202      	movs	r2, #2
 8004244:	4013      	ands	r3, r2
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x3b6>
 8004248:	e013      	b.n	8004272 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424a:	f7fe fc5d 	bl	8002b08 <HAL_GetTick>
 800424e:	0003      	movs	r3, r0
 8004250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004252:	e009      	b.n	8004268 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fe fc58 	bl	8002b08 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	4aa5      	ldr	r2, [pc, #660]	; (80044f4 <HAL_RCC_OscConfig+0x680>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e185      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	4ba1      	ldr	r3, [pc, #644]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	2202      	movs	r2, #2
 800426e:	4013      	ands	r3, r2
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004272:	231f      	movs	r3, #31
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427c:	4b9c      	ldr	r3, [pc, #624]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	4b9b      	ldr	r3, [pc, #620]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004282:	499d      	ldr	r1, [pc, #628]	; (80044f8 <HAL_RCC_OscConfig+0x684>)
 8004284:	400a      	ands	r2, r1
 8004286:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2210      	movs	r2, #16
 800428e:	4013      	ands	r3, r2
 8004290:	d063      	beq.n	800435a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d12a      	bne.n	80042f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800429a:	4b95      	ldr	r3, [pc, #596]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800429c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429e:	4b94      	ldr	r3, [pc, #592]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042a0:	2104      	movs	r1, #4
 80042a2:	430a      	orrs	r2, r1
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80042a6:	4b92      	ldr	r3, [pc, #584]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042aa:	4b91      	ldr	r3, [pc, #580]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042ac:	2101      	movs	r1, #1
 80042ae:	430a      	orrs	r2, r1
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fc29 	bl	8002b08 <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042bc:	f7fe fc24 	bl	8002b08 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e152      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042ce:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	2202      	movs	r2, #2
 80042d4:	4013      	ands	r3, r2
 80042d6:	d0f1      	beq.n	80042bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042d8:	4b85      	ldr	r3, [pc, #532]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	22f8      	movs	r2, #248	; 0xf8
 80042de:	4393      	bics	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	00da      	lsls	r2, r3, #3
 80042e8:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042ea:	430a      	orrs	r2, r1
 80042ec:	635a      	str	r2, [r3, #52]	; 0x34
 80042ee:	e034      	b.n	800435a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	3305      	adds	r3, #5
 80042f6:	d111      	bne.n	800431c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80042f8:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	4b7c      	ldr	r3, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80042fe:	2104      	movs	r1, #4
 8004300:	438a      	bics	r2, r1
 8004302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004304:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004308:	22f8      	movs	r2, #248	; 0xf8
 800430a:	4393      	bics	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	00da      	lsls	r2, r3, #3
 8004314:	4b76      	ldr	r3, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004316:	430a      	orrs	r2, r1
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
 800431a:	e01e      	b.n	800435a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800431c:	4b74      	ldr	r3, [pc, #464]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004322:	2104      	movs	r1, #4
 8004324:	430a      	orrs	r2, r1
 8004326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004328:	4b71      	ldr	r3, [pc, #452]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800432a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432c:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800432e:	2101      	movs	r1, #1
 8004330:	438a      	bics	r2, r1
 8004332:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004334:	f7fe fbe8 	bl	8002b08 <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800433e:	f7fe fbe3 	bl	8002b08 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e111      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004350:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	2202      	movs	r2, #2
 8004356:	4013      	ands	r3, r2
 8004358:	d1f1      	bne.n	800433e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2220      	movs	r2, #32
 8004360:	4013      	ands	r3, r2
 8004362:	d05c      	beq.n	800441e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004364:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	220c      	movs	r2, #12
 800436a:	4013      	ands	r3, r2
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d00e      	beq.n	800438e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004370:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	220c      	movs	r2, #12
 8004376:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004378:	2b08      	cmp	r3, #8
 800437a:	d114      	bne.n	80043a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800437c:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	23c0      	movs	r3, #192	; 0xc0
 8004382:	025b      	lsls	r3, r3, #9
 8004384:	401a      	ands	r2, r3
 8004386:	23c0      	movs	r3, #192	; 0xc0
 8004388:	025b      	lsls	r3, r3, #9
 800438a:	429a      	cmp	r2, r3
 800438c:	d10b      	bne.n	80043a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800438e:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	025b      	lsls	r3, r3, #9
 8004396:	4013      	ands	r3, r2
 8004398:	d040      	beq.n	800441c <HAL_RCC_OscConfig+0x5a8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d03c      	beq.n	800441c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0e6      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01b      	beq.n	80043e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80043ae:	4b50      	ldr	r3, [pc, #320]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80043b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b2:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	0249      	lsls	r1, r1, #9
 80043b8:	430a      	orrs	r2, r1
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fba4 	bl	8002b08 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c6:	f7fe fb9f 	bl	8002b08 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0cd      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043d8:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80043da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	025b      	lsls	r3, r3, #9
 80043e0:	4013      	ands	r3, r2
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x552>
 80043e4:	e01b      	b.n	800441e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043e6:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80043e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80043ec:	4943      	ldr	r1, [pc, #268]	; (80044fc <HAL_RCC_OscConfig+0x688>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fb89 	bl	8002b08 <HAL_GetTick>
 80043f6:	0003      	movs	r3, r0
 80043f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043fc:	f7fe fb84 	bl	8002b08 <HAL_GetTick>
 8004400:	0002      	movs	r2, r0
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e0b2      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	025b      	lsls	r3, r3, #9
 8004416:	4013      	ands	r3, r2
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x588>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800441c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d100      	bne.n	8004428 <HAL_RCC_OscConfig+0x5b4>
 8004426:	e0a4      	b.n	8004572 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	220c      	movs	r2, #12
 800442e:	4013      	ands	r3, r2
 8004430:	2b08      	cmp	r3, #8
 8004432:	d100      	bne.n	8004436 <HAL_RCC_OscConfig+0x5c2>
 8004434:	e078      	b.n	8004528 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b02      	cmp	r3, #2
 800443c:	d14c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004444:	492e      	ldr	r1, [pc, #184]	; (8004500 <HAL_RCC_OscConfig+0x68c>)
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fe fb5d 	bl	8002b08 <HAL_GetTick>
 800444e:	0003      	movs	r3, r0
 8004450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe fb58 	bl	8002b08 <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e086      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004466:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	049b      	lsls	r3, r3, #18
 800446e:	4013      	ands	r3, r2
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004472:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	220f      	movs	r2, #15
 8004478:	4393      	bics	r3, r2
 800447a:	0019      	movs	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004482:	430a      	orrs	r2, r1
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_RCC_OscConfig+0x690>)
 800448c:	4013      	ands	r3, r2
 800448e:	0019      	movs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	431a      	orrs	r2, r3
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	0449      	lsls	r1, r1, #17
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe fb2b 	bl	8002b08 <HAL_GetTick>
 80044b2:	0003      	movs	r3, r0
 80044b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fe fb26 	bl	8002b08 <HAL_GetTick>
 80044bc:	0002      	movs	r2, r0
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e054      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	049b      	lsls	r3, r3, #18
 80044d2:	4013      	ands	r3, r2
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x644>
 80044d6:	e04c      	b.n	8004572 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <HAL_RCC_OscConfig+0x67c>)
 80044de:	4908      	ldr	r1, [pc, #32]	; (8004500 <HAL_RCC_OscConfig+0x68c>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fb10 	bl	8002b08 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x6a6>
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	40021000 	.word	0x40021000
 80044f4:	00001388 	.word	0x00001388
 80044f8:	efffffff 	.word	0xefffffff
 80044fc:	fffeffff 	.word	0xfffeffff
 8004500:	feffffff 	.word	0xfeffffff
 8004504:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fe fafe 	bl	8002b08 <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e02c      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_RCC_OscConfig+0x708>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	049b      	lsls	r3, r3, #18
 8004522:	4013      	ands	r3, r2
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x694>
 8004526:	e024      	b.n	8004572 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e01f      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <HAL_RCC_OscConfig+0x708>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <HAL_RCC_OscConfig+0x708>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	23c0      	movs	r3, #192	; 0xc0
 8004544:	025b      	lsls	r3, r3, #9
 8004546:	401a      	ands	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	429a      	cmp	r2, r3
 800454e:	d10e      	bne.n	800456e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	220f      	movs	r2, #15
 8004554:	401a      	ands	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d107      	bne.n	800456e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	23f0      	movs	r3, #240	; 0xf0
 8004562:	039b      	lsls	r3, r3, #14
 8004564:	401a      	ands	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b008      	add	sp, #32
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0bf      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2201      	movs	r2, #1
 800459a:	4013      	ands	r3, r2
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d911      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b5e      	ldr	r3, [pc, #376]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2201      	movs	r2, #1
 80045a8:	4393      	bics	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	4b5b      	ldr	r3, [pc, #364]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b4:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	4013      	ands	r3, r2
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0a6      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d015      	beq.n	80045fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2204      	movs	r2, #4
 80045d6:	4013      	ands	r3, r2
 80045d8:	d006      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045da:	4b51      	ldr	r3, [pc, #324]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b50      	ldr	r3, [pc, #320]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80045e0:	21e0      	movs	r1, #224	; 0xe0
 80045e2:	00c9      	lsls	r1, r1, #3
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	22f0      	movs	r2, #240	; 0xf0
 80045ee:	4393      	bics	r3, r2
 80045f0:	0019      	movs	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2201      	movs	r2, #1
 8004602:	4013      	ands	r3, r2
 8004604:	d04c      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b44      	ldr	r3, [pc, #272]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	4013      	ands	r3, r2
 8004618:	d120      	bne.n	800465c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07a      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	049b      	lsls	r3, r3, #18
 800462e:	4013      	ands	r3, r2
 8004630:	d114      	bne.n	800465c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06e      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800463e:	4b38      	ldr	r3, [pc, #224]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 8004640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	025b      	lsls	r3, r3, #9
 8004646:	4013      	ands	r3, r2
 8004648:	d108      	bne.n	800465c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e062      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b34      	ldr	r3, [pc, #208]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2202      	movs	r2, #2
 8004654:	4013      	ands	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e05b      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465c:	4b30      	ldr	r3, [pc, #192]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	4393      	bics	r3, r2
 8004664:	0019      	movs	r1, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004670:	f7fe fa4a 	bl	8002b08 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004678:	e009      	b.n	800468e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467a:	f7fe fa45 	bl	8002b08 <HAL_GetTick>
 800467e:	0002      	movs	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	4a27      	ldr	r2, [pc, #156]	; (8004724 <HAL_RCC_ClockConfig+0x1a4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e042      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	220c      	movs	r2, #12
 8004694:	401a      	ands	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1ec      	bne.n	800467a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	4013      	ands	r3, r2
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d211      	bcs.n	80046d2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	4393      	bics	r3, r2
 80046b6:	0019      	movs	r1, r3
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_RCC_ClockConfig+0x19c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e020      	b.n	8004714 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2204      	movs	r2, #4
 80046d8:	4013      	ands	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HAL_RCC_ClockConfig+0x1a8>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046f0:	f000 f820 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f4:	0001      	movs	r1, r0
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x1a0>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	220f      	movs	r2, #15
 80046fe:	4013      	ands	r3, r2
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x1ac>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	000a      	movs	r2, r1
 8004706:	40da      	lsrs	r2, r3
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 800470a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800470c:	2000      	movs	r0, #0
 800470e:	f7fe f9b5 	bl	8002a7c <HAL_InitTick>
  
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	00001388 	.word	0x00001388
 8004728:	fffff8ff 	.word	0xfffff8ff
 800472c:	08009d5c 	.word	0x08009d5c
 8004730:	20000000 	.word	0x20000000

08004734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b08f      	sub	sp, #60	; 0x3c
 8004738:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800473a:	2314      	movs	r3, #20
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	4a37      	ldr	r2, [pc, #220]	; (800481c <HAL_RCC_GetSysClockFreq+0xe8>)
 8004740:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004742:	c313      	stmia	r3!, {r0, r1, r4}
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	4a35      	ldr	r2, [pc, #212]	; (8004820 <HAL_RCC_GetSysClockFreq+0xec>)
 800474c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800474e:	c313      	stmia	r3!, {r0, r1, r4}
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004758:	2300      	movs	r3, #0
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
 800475c:	2300      	movs	r3, #0
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
 8004760:	2300      	movs	r3, #0
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004768:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCC_GetSysClockFreq+0xf0>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	220c      	movs	r2, #12
 8004772:	4013      	ands	r3, r2
 8004774:	2b08      	cmp	r3, #8
 8004776:	d006      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x52>
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d043      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0xd0>
 800477c:	2b04      	cmp	r3, #4
 800477e:	d144      	bne.n	800480a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004780:	4b29      	ldr	r3, [pc, #164]	; (8004828 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004784:	e044      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	0c9b      	lsrs	r3, r3, #18
 800478a:	220f      	movs	r2, #15
 800478c:	4013      	ands	r3, r2
 800478e:	2214      	movs	r2, #20
 8004790:	18ba      	adds	r2, r7, r2
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	220f      	movs	r2, #15
 800479c:	4013      	ands	r3, r2
 800479e:	1d3a      	adds	r2, r7, #4
 80047a0:	5cd3      	ldrb	r3, [r2, r3]
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a6:	23c0      	movs	r3, #192	; 0xc0
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	401a      	ands	r2, r3
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	025b      	lsls	r3, r3, #9
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d109      	bne.n	80047c8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b6:	481c      	ldr	r0, [pc, #112]	; (8004828 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047b8:	f7fb fcb8 	bl	800012c <__udivsi3>
 80047bc:	0003      	movs	r3, r0
 80047be:	001a      	movs	r2, r3
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	4353      	muls	r3, r2
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	e01a      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80047c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ca:	23c0      	movs	r3, #192	; 0xc0
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	401a      	ands	r2, r3
 80047d0:	23c0      	movs	r3, #192	; 0xc0
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d109      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047da:	4814      	ldr	r0, [pc, #80]	; (800482c <HAL_RCC_GetSysClockFreq+0xf8>)
 80047dc:	f7fb fca6 	bl	800012c <__udivsi3>
 80047e0:	0003      	movs	r3, r0
 80047e2:	001a      	movs	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	4353      	muls	r3, r2
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	e008      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ee:	480e      	ldr	r0, [pc, #56]	; (8004828 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047f0:	f7fb fc9c 	bl	800012c <__udivsi3>
 80047f4:	0003      	movs	r3, r0
 80047f6:	001a      	movs	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	4353      	muls	r3, r2
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004802:	e005      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004806:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004808:	e002      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <HAL_RCC_GetSysClockFreq+0xf4>)
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800480e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004812:	0018      	movs	r0, r3
 8004814:	46bd      	mov	sp, r7
 8004816:	b00f      	add	sp, #60	; 0x3c
 8004818:	bd90      	pop	{r4, r7, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	08009cbc 	.word	0x08009cbc
 8004820:	08009ccc 	.word	0x08009ccc
 8004824:	40021000 	.word	0x40021000
 8004828:	007a1200 	.word	0x007a1200
 800482c:	02dc6c00 	.word	0x02dc6c00

08004830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004834:	4b02      	ldr	r3, [pc, #8]	; (8004840 <HAL_RCC_GetHCLKFreq+0x10>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20000000 	.word	0x20000000

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004848:	f7ff fff2 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 800484c:	0001      	movs	r1, r0
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	2207      	movs	r2, #7
 8004856:	4013      	ands	r3, r2
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <HAL_RCC_GetPCLK1Freq+0x28>)
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	40d9      	lsrs	r1, r3
 800485e:	000b      	movs	r3, r1
}    
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	40021000 	.word	0x40021000
 800486c:	08009d6c 	.word	0x08009d6c

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	025b      	lsls	r3, r3, #9
 8004888:	4013      	ands	r3, r2
 800488a:	d100      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800488c:	e08f      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800488e:	2317      	movs	r3, #23
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004896:	4b6f      	ldr	r3, [pc, #444]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	055b      	lsls	r3, r3, #21
 800489e:	4013      	ands	r3, r2
 80048a0:	d111      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	4b6c      	ldr	r3, [pc, #432]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	4b6b      	ldr	r3, [pc, #428]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	0549      	lsls	r1, r1, #21
 80048ac:	430a      	orrs	r2, r1
 80048ae:	61da      	str	r2, [r3, #28]
 80048b0:	4b68      	ldr	r3, [pc, #416]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	055b      	lsls	r3, r3, #21
 80048b8:	4013      	ands	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2317      	movs	r3, #23
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	4b64      	ldr	r3, [pc, #400]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4013      	ands	r3, r2
 80048d0:	d11a      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d2:	4b61      	ldr	r3, [pc, #388]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b60      	ldr	r3, [pc, #384]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	0049      	lsls	r1, r1, #1
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e0:	f7fe f912 	bl	8002b08 <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7fe f90d 	bl	8002b08 <HAL_GetTick>
 80048ee:	0002      	movs	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	; 0x64
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0a6      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4b56      	ldr	r3, [pc, #344]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4013      	ands	r3, r2
 8004906:	d0f0      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004908:	4b52      	ldr	r3, [pc, #328]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	23c0      	movs	r3, #192	; 0xc0
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4013      	ands	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d034      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	23c0      	movs	r3, #192	; 0xc0
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4013      	ands	r3, r2
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	429a      	cmp	r2, r3
 8004928:	d02c      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4a4b      	ldr	r2, [pc, #300]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004934:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	0249      	lsls	r1, r1, #9
 800493e:	430a      	orrs	r2, r1
 8004940:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004942:	4b44      	ldr	r3, [pc, #272]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004948:	4945      	ldr	r1, [pc, #276]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800494a:	400a      	ands	r2, r1
 800494c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800494e:	4b41      	ldr	r3, [pc, #260]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	4013      	ands	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe f8d4 	bl	8002b08 <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004964:	e009      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fe f8cf 	bl	8002b08 <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e067      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	2202      	movs	r2, #2
 8004980:	4013      	ands	r3, r2
 8004982:	d0f0      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004984:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4a34      	ldr	r2, [pc, #208]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800498a:	4013      	ands	r3, r2
 800498c:	0019      	movs	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004994:	430a      	orrs	r2, r1
 8004996:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004998:	2317      	movs	r3, #23
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a2:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049a8:	492f      	ldr	r1, [pc, #188]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049aa:	400a      	ands	r2, r1
 80049ac:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	4013      	ands	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b8:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	2203      	movs	r2, #3
 80049be:	4393      	bics	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049c8:	430a      	orrs	r2, r1
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2202      	movs	r2, #2
 80049d2:	4013      	ands	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d6:	4b1f      	ldr	r3, [pc, #124]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80049dc:	4013      	ands	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049e6:	430a      	orrs	r2, r1
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2220      	movs	r2, #32
 80049f0:	4013      	ands	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f4:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	2210      	movs	r2, #16
 80049fa:	4393      	bics	r3, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004a04:	430a      	orrs	r2, r1
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	029b      	lsls	r3, r3, #10
 8004a10:	4013      	ands	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	4393      	bics	r3, r2
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004a24:	430a      	orrs	r2, r1
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	2240      	movs	r2, #64	; 0x40
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004a44:	430a      	orrs	r2, r1
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b006      	add	sp, #24
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	fffffcff 	.word	0xfffffcff
 8004a60:	fffeffff 	.word	0xfffeffff
 8004a64:	00001388 	.word	0x00001388
 8004a68:	efffffff 	.word	0xefffffff
 8004a6c:	fffcffff 	.word	0xfffcffff

08004a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e044      	b.n	8004b0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2274      	movs	r2, #116	; 0x74
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7fd ff67 	bl	8002968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2224      	movs	r2, #36	; 0x24
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	438a      	bics	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 f9ca 	bl	8004e4c <UART_SetConfig>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e024      	b.n	8004b0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 fb41 	bl	8005154 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	490d      	ldr	r1, [pc, #52]	; (8004b14 <HAL_UART_Init+0xa4>)
 8004ade:	400a      	ands	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	212a      	movs	r1, #42	; 0x2a
 8004aee:	438a      	bics	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 fbd9 	bl	80052bc <UART_CheckIdleState>
 8004b0a:	0003      	movs	r3, r0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b002      	add	sp, #8
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	ffffb7ff 	.word	0xffffb7ff

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	1dbb      	adds	r3, r7, #6
 8004b26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d000      	beq.n	8004b32 <HAL_UART_Transmit+0x1a>
 8004b30:	e096      	b.n	8004c60 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_UART_Transmit+0x28>
 8004b38:	1dbb      	adds	r3, r7, #6
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e08e      	b.n	8004c62 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d109      	bne.n	8004b64 <HAL_UART_Transmit+0x4c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d001      	beq.n	8004b64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e07e      	b.n	8004c62 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2274      	movs	r2, #116	; 0x74
 8004b68:	5c9b      	ldrb	r3, [r3, r2]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Transmit+0x5a>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e077      	b.n	8004c62 <HAL_UART_Transmit+0x14a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2274      	movs	r2, #116	; 0x74
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2221      	movs	r2, #33	; 0x21
 8004b86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b88:	f7fd ffbe 	bl	8002b08 <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1dba      	adds	r2, r7, #6
 8004b94:	2150      	movs	r1, #80	; 0x50
 8004b96:	8812      	ldrh	r2, [r2, #0]
 8004b98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1dba      	adds	r2, r7, #6
 8004b9e:	2152      	movs	r1, #82	; 0x52
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d108      	bne.n	8004bc2 <HAL_UART_Transmit+0xaa>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e003      	b.n	8004bca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2274      	movs	r2, #116	; 0x74
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004bd2:	e02d      	b.n	8004c30 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	0013      	movs	r3, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	f000 fbb5 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8004be6:	1e03      	subs	r3, r0, #0
 8004be8:	d001      	beq.n	8004bee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e039      	b.n	8004c62 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	05d2      	lsls	r2, r2, #23
 8004bfe:	0dd2      	lsrs	r2, r2, #23
 8004c00:	b292      	uxth	r2, r2
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	3302      	adds	r3, #2
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e008      	b.n	8004c1e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b292      	uxth	r2, r2
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2252      	movs	r2, #82	; 0x52
 8004c22:	5a9b      	ldrh	r3, [r3, r2]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b299      	uxth	r1, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2252      	movs	r2, #82	; 0x52
 8004c2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2252      	movs	r2, #82	; 0x52
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1cb      	bne.n	8004bd4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	0013      	movs	r3, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	2140      	movs	r1, #64	; 0x40
 8004c4a:	f000 fb81 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8004c4e:	1e03      	subs	r3, r0, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e005      	b.n	8004c62 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b008      	add	sp, #32
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	1dbb      	adds	r3, r7, #6
 8004c7a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d000      	beq.n	8004c86 <HAL_UART_Receive+0x1a>
 8004c84:	e0da      	b.n	8004e3c <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_UART_Receive+0x28>
 8004c8c:	1dbb      	adds	r3, r7, #6
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0d2      	b.n	8004e3e <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	015b      	lsls	r3, r3, #5
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d109      	bne.n	8004cb8 <HAL_UART_Receive+0x4c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d001      	beq.n	8004cb8 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0c2      	b.n	8004e3e <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2274      	movs	r2, #116	; 0x74
 8004cbc:	5c9b      	ldrb	r3, [r3, r2]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Receive+0x5a>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0bb      	b.n	8004e3e <HAL_UART_Receive+0x1d2>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2274      	movs	r2, #116	; 0x74
 8004cca:	2101      	movs	r1, #1
 8004ccc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2222      	movs	r2, #34	; 0x22
 8004cda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fd ff11 	bl	8002b08 <HAL_GetTick>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1dba      	adds	r2, r7, #6
 8004cee:	2158      	movs	r1, #88	; 0x58
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1dba      	adds	r2, r7, #6
 8004cf8:	215a      	movs	r1, #90	; 0x5a
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	015b      	lsls	r3, r3, #5
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10d      	bne.n	8004d26 <HAL_UART_Receive+0xba>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Receive+0xb0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	225c      	movs	r2, #92	; 0x5c
 8004d16:	494c      	ldr	r1, [pc, #304]	; (8004e48 <HAL_UART_Receive+0x1dc>)
 8004d18:	5299      	strh	r1, [r3, r2]
 8004d1a:	e02e      	b.n	8004d7a <HAL_UART_Receive+0x10e>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	225c      	movs	r2, #92	; 0x5c
 8004d20:	21ff      	movs	r1, #255	; 0xff
 8004d22:	5299      	strh	r1, [r3, r2]
 8004d24:	e029      	b.n	8004d7a <HAL_UART_Receive+0x10e>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10d      	bne.n	8004d4a <HAL_UART_Receive+0xde>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <HAL_UART_Receive+0xd4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	225c      	movs	r2, #92	; 0x5c
 8004d3a:	21ff      	movs	r1, #255	; 0xff
 8004d3c:	5299      	strh	r1, [r3, r2]
 8004d3e:	e01c      	b.n	8004d7a <HAL_UART_Receive+0x10e>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	225c      	movs	r2, #92	; 0x5c
 8004d44:	217f      	movs	r1, #127	; 0x7f
 8004d46:	5299      	strh	r1, [r3, r2]
 8004d48:	e017      	b.n	8004d7a <HAL_UART_Receive+0x10e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	055b      	lsls	r3, r3, #21
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d10d      	bne.n	8004d72 <HAL_UART_Receive+0x106>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Receive+0xfc>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	225c      	movs	r2, #92	; 0x5c
 8004d62:	217f      	movs	r1, #127	; 0x7f
 8004d64:	5299      	strh	r1, [r3, r2]
 8004d66:	e008      	b.n	8004d7a <HAL_UART_Receive+0x10e>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	225c      	movs	r2, #92	; 0x5c
 8004d6c:	213f      	movs	r1, #63	; 0x3f
 8004d6e:	5299      	strh	r1, [r3, r2]
 8004d70:	e003      	b.n	8004d7a <HAL_UART_Receive+0x10e>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	225c      	movs	r2, #92	; 0x5c
 8004d76:	2100      	movs	r1, #0
 8004d78:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004d7a:	2312      	movs	r3, #18
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	215c      	movs	r1, #92	; 0x5c
 8004d82:	5a52      	ldrh	r2, [r2, r1]
 8004d84:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	015b      	lsls	r3, r3, #5
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d108      	bne.n	8004da4 <HAL_UART_Receive+0x138>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e003      	b.n	8004dac <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2274      	movs	r2, #116	; 0x74
 8004db0:	2100      	movs	r1, #0
 8004db2:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004db4:	e037      	b.n	8004e26 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	0013      	movs	r3, r2
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	f000 fac4 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8004dc8:	1e03      	subs	r3, r0, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e036      	b.n	8004e3e <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10e      	bne.n	8004df4 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2212      	movs	r2, #18
 8004de0:	18ba      	adds	r2, r7, r2
 8004de2:	8812      	ldrh	r2, [r2, #0]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	3302      	adds	r3, #2
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e00f      	b.n	8004e14 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2212      	movs	r2, #18
 8004e00:	18ba      	adds	r2, r7, r2
 8004e02:	8812      	ldrh	r2, [r2, #0]
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	4013      	ands	r3, r2
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	225a      	movs	r2, #90	; 0x5a
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b299      	uxth	r1, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	225a      	movs	r2, #90	; 0x5a
 8004e24:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	225a      	movs	r2, #90	; 0x5a
 8004e2a:	5a9b      	ldrh	r3, [r3, r2]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1c1      	bne.n	8004db6 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b008      	add	sp, #32
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	000001ff 	.word	0x000001ff

08004e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e54:	231e      	movs	r3, #30
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4aac      	ldr	r2, [pc, #688]	; (800512c <UART_SetConfig+0x2e0>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	0019      	movs	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4aa7      	ldr	r2, [pc, #668]	; (8005130 <UART_SetConfig+0x2e4>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	0019      	movs	r1, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a9e      	ldr	r2, [pc, #632]	; (8005134 <UART_SetConfig+0x2e8>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a9a      	ldr	r2, [pc, #616]	; (8005138 <UART_SetConfig+0x2ec>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d125      	bne.n	8004f1e <UART_SetConfig+0xd2>
 8004ed2:	4b9a      	ldr	r3, [pc, #616]	; (800513c <UART_SetConfig+0x2f0>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d00f      	beq.n	8004efe <UART_SetConfig+0xb2>
 8004ede:	d304      	bcc.n	8004eea <UART_SetConfig+0x9e>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d011      	beq.n	8004f08 <UART_SetConfig+0xbc>
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d005      	beq.n	8004ef4 <UART_SetConfig+0xa8>
 8004ee8:	e013      	b.n	8004f12 <UART_SetConfig+0xc6>
 8004eea:	231f      	movs	r3, #31
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e064      	b.n	8004fbe <UART_SetConfig+0x172>
 8004ef4:	231f      	movs	r3, #31
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2202      	movs	r2, #2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e05f      	b.n	8004fbe <UART_SetConfig+0x172>
 8004efe:	231f      	movs	r3, #31
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2204      	movs	r2, #4
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e05a      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f08:	231f      	movs	r3, #31
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e055      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f12:	231f      	movs	r3, #31
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	2210      	movs	r2, #16
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	e04f      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a87      	ldr	r2, [pc, #540]	; (8005140 <UART_SetConfig+0x2f4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d132      	bne.n	8004f8e <UART_SetConfig+0x142>
 8004f28:	4b84      	ldr	r3, [pc, #528]	; (800513c <UART_SetConfig+0x2f0>)
 8004f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2c:	23c0      	movs	r3, #192	; 0xc0
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	4013      	ands	r3, r2
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	0252      	lsls	r2, r2, #9
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d019      	beq.n	8004f6e <UART_SetConfig+0x122>
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	0252      	lsls	r2, r2, #9
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d802      	bhi.n	8004f48 <UART_SetConfig+0xfc>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <UART_SetConfig+0x10e>
 8004f46:	e01c      	b.n	8004f82 <UART_SetConfig+0x136>
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	0292      	lsls	r2, r2, #10
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <UART_SetConfig+0x12c>
 8004f50:	22c0      	movs	r2, #192	; 0xc0
 8004f52:	0292      	lsls	r2, r2, #10
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d005      	beq.n	8004f64 <UART_SetConfig+0x118>
 8004f58:	e013      	b.n	8004f82 <UART_SetConfig+0x136>
 8004f5a:	231f      	movs	r3, #31
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e02c      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f64:	231f      	movs	r3, #31
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	2202      	movs	r2, #2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e027      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f6e:	231f      	movs	r3, #31
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	2204      	movs	r2, #4
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e022      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f78:	231f      	movs	r3, #31
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e01d      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f82:	231f      	movs	r3, #31
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	2210      	movs	r2, #16
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	e017      	b.n	8004fbe <UART_SetConfig+0x172>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6c      	ldr	r2, [pc, #432]	; (8005144 <UART_SetConfig+0x2f8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d104      	bne.n	8004fa2 <UART_SetConfig+0x156>
 8004f98:	231f      	movs	r3, #31
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x172>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a68      	ldr	r2, [pc, #416]	; (8005148 <UART_SetConfig+0x2fc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d104      	bne.n	8004fb6 <UART_SetConfig+0x16a>
 8004fac:	231f      	movs	r3, #31
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	e003      	b.n	8004fbe <UART_SetConfig+0x172>
 8004fb6:	231f      	movs	r3, #31
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2210      	movs	r2, #16
 8004fbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d15c      	bne.n	8005084 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8004fca:	231f      	movs	r3, #31
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d00d      	beq.n	8004ff0 <UART_SetConfig+0x1a4>
 8004fd4:	dc02      	bgt.n	8004fdc <UART_SetConfig+0x190>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <UART_SetConfig+0x19a>
 8004fda:	e015      	b.n	8005008 <UART_SetConfig+0x1bc>
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d00a      	beq.n	8004ff6 <UART_SetConfig+0x1aa>
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d00d      	beq.n	8005000 <UART_SetConfig+0x1b4>
 8004fe4:	e010      	b.n	8005008 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7ff fc2d 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8004fea:	0003      	movs	r3, r0
 8004fec:	61bb      	str	r3, [r7, #24]
        break;
 8004fee:	e012      	b.n	8005016 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b56      	ldr	r3, [pc, #344]	; (800514c <UART_SetConfig+0x300>)
 8004ff2:	61bb      	str	r3, [r7, #24]
        break;
 8004ff4:	e00f      	b.n	8005016 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7ff fb9d 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	61bb      	str	r3, [r7, #24]
        break;
 8004ffe:	e00a      	b.n	8005016 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	61bb      	str	r3, [r7, #24]
        break;
 8005006:	e006      	b.n	8005016 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800500c:	231e      	movs	r3, #30
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
        break;
 8005014:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d100      	bne.n	800501e <UART_SetConfig+0x1d2>
 800501c:	e079      	b.n	8005112 <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	005a      	lsls	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	18d2      	adds	r2, r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	0019      	movs	r1, r3
 8005030:	0010      	movs	r0, r2
 8005032:	f7fb f87b 	bl	800012c <__udivsi3>
 8005036:	0003      	movs	r3, r0
 8005038:	b29b      	uxth	r3, r3
 800503a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d91b      	bls.n	800507a <UART_SetConfig+0x22e>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4a42      	ldr	r2, [pc, #264]	; (8005150 <UART_SetConfig+0x304>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d817      	bhi.n	800507a <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	b29a      	uxth	r2, r3
 800504e:	200e      	movs	r0, #14
 8005050:	183b      	adds	r3, r7, r0
 8005052:	210f      	movs	r1, #15
 8005054:	438a      	bics	r2, r1
 8005056:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	b29b      	uxth	r3, r3
 800505e:	2207      	movs	r2, #7
 8005060:	4013      	ands	r3, r2
 8005062:	b299      	uxth	r1, r3
 8005064:	183b      	adds	r3, r7, r0
 8005066:	183a      	adds	r2, r7, r0
 8005068:	8812      	ldrh	r2, [r2, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	183a      	adds	r2, r7, r0
 8005074:	8812      	ldrh	r2, [r2, #0]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e04b      	b.n	8005112 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 800507a:	231e      	movs	r3, #30
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e046      	b.n	8005112 <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005084:	231f      	movs	r3, #31
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d00d      	beq.n	80050aa <UART_SetConfig+0x25e>
 800508e:	dc02      	bgt.n	8005096 <UART_SetConfig+0x24a>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x254>
 8005094:	e015      	b.n	80050c2 <UART_SetConfig+0x276>
 8005096:	2b04      	cmp	r3, #4
 8005098:	d00a      	beq.n	80050b0 <UART_SetConfig+0x264>
 800509a:	2b08      	cmp	r3, #8
 800509c:	d00d      	beq.n	80050ba <UART_SetConfig+0x26e>
 800509e:	e010      	b.n	80050c2 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7ff fbd0 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80050a4:	0003      	movs	r3, r0
 80050a6:	61bb      	str	r3, [r7, #24]
        break;
 80050a8:	e012      	b.n	80050d0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050aa:	4b28      	ldr	r3, [pc, #160]	; (800514c <UART_SetConfig+0x300>)
 80050ac:	61bb      	str	r3, [r7, #24]
        break;
 80050ae:	e00f      	b.n	80050d0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b0:	f7ff fb40 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80050b4:	0003      	movs	r3, r0
 80050b6:	61bb      	str	r3, [r7, #24]
        break;
 80050b8:	e00a      	b.n	80050d0 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	61bb      	str	r3, [r7, #24]
        break;
 80050c0:	e006      	b.n	80050d0 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050c6:	231e      	movs	r3, #30
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
        break;
 80050ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01d      	beq.n	8005112 <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085a      	lsrs	r2, r3, #1
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	18d2      	adds	r2, r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	0019      	movs	r1, r3
 80050e6:	0010      	movs	r0, r2
 80050e8:	f7fb f820 	bl	800012c <__udivsi3>
 80050ec:	0003      	movs	r3, r0
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d908      	bls.n	800510a <UART_SetConfig+0x2be>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <UART_SetConfig+0x304>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d804      	bhi.n	800510a <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	60da      	str	r2, [r3, #12]
 8005108:	e003      	b.n	8005112 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 800510a:	231e      	movs	r3, #30
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800511e:	231e      	movs	r3, #30
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	781b      	ldrb	r3, [r3, #0]
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b008      	add	sp, #32
 800512a:	bd80      	pop	{r7, pc}
 800512c:	efff69f3 	.word	0xefff69f3
 8005130:	ffffcfff 	.word	0xffffcfff
 8005134:	fffff4ff 	.word	0xfffff4ff
 8005138:	40013800 	.word	0x40013800
 800513c:	40021000 	.word	0x40021000
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	40004c00 	.word	0x40004c00
 800514c:	007a1200 	.word	0x007a1200
 8005150:	0000ffff 	.word	0x0000ffff

08005154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2201      	movs	r2, #1
 8005162:	4013      	ands	r3, r2
 8005164:	d00b      	beq.n	800517e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a4a      	ldr	r2, [pc, #296]	; (8005298 <UART_AdvFeatureConfig+0x144>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2202      	movs	r2, #2
 8005184:	4013      	ands	r3, r2
 8005186:	d00b      	beq.n	80051a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a43      	ldr	r2, [pc, #268]	; (800529c <UART_AdvFeatureConfig+0x148>)
 8005190:	4013      	ands	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2204      	movs	r2, #4
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <UART_AdvFeatureConfig+0x14c>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2208      	movs	r2, #8
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <UART_AdvFeatureConfig+0x150>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2210      	movs	r2, #16
 80051ea:	4013      	ands	r3, r2
 80051ec:	d00b      	beq.n	8005206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <UART_AdvFeatureConfig+0x154>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	d00b      	beq.n	8005228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4a25      	ldr	r2, [pc, #148]	; (80052ac <UART_AdvFeatureConfig+0x158>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2240      	movs	r2, #64	; 0x40
 800522e:	4013      	ands	r3, r2
 8005230:	d01d      	beq.n	800526e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <UART_AdvFeatureConfig+0x15c>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	035b      	lsls	r3, r3, #13
 8005252:	429a      	cmp	r2, r3
 8005254:	d10b      	bne.n	800526e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <UART_AdvFeatureConfig+0x160>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2280      	movs	r2, #128	; 0x80
 8005274:	4013      	ands	r3, r2
 8005276:	d00b      	beq.n	8005290 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <UART_AdvFeatureConfig+0x164>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}
 8005298:	fffdffff 	.word	0xfffdffff
 800529c:	fffeffff 	.word	0xfffeffff
 80052a0:	fffbffff 	.word	0xfffbffff
 80052a4:	ffff7fff 	.word	0xffff7fff
 80052a8:	ffffefff 	.word	0xffffefff
 80052ac:	ffffdfff 	.word	0xffffdfff
 80052b0:	ffefffff 	.word	0xffefffff
 80052b4:	ff9fffff 	.word	0xff9fffff
 80052b8:	fff7ffff 	.word	0xfff7ffff

080052bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	2100      	movs	r1, #0
 80052ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052cc:	f7fd fc1c 	bl	8002b08 <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2208      	movs	r2, #8
 80052dc:	4013      	ands	r3, r2
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d10d      	bne.n	80052fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	0399      	lsls	r1, r3, #14
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4b18      	ldr	r3, [pc, #96]	; (800534c <UART_CheckIdleState+0x90>)
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	0013      	movs	r3, r2
 80052f0:	2200      	movs	r2, #0
 80052f2:	f000 f82d 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 80052f6:	1e03      	subs	r3, r0, #0
 80052f8:	d001      	beq.n	80052fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e022      	b.n	8005344 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2204      	movs	r2, #4
 8005306:	4013      	ands	r3, r2
 8005308:	2b04      	cmp	r3, #4
 800530a:	d10d      	bne.n	8005328 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	03d9      	lsls	r1, r3, #15
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4b0d      	ldr	r3, [pc, #52]	; (800534c <UART_CheckIdleState+0x90>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	0013      	movs	r3, r2
 800531a:	2200      	movs	r2, #0
 800531c:	f000 f818 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8005320:	1e03      	subs	r3, r0, #0
 8005322:	d001      	beq.n	8005328 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e00d      	b.n	8005344 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2274      	movs	r2, #116	; 0x74
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	01ffffff 	.word	0x01ffffff

08005350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005360:	e05e      	b.n	8005420 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	3301      	adds	r3, #1
 8005366:	d05b      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005368:	f7fd fbce 	bl	8002b08 <HAL_GetTick>
 800536c:	0002      	movs	r2, r0
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11b      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	492f      	ldr	r1, [pc, #188]	; (8005448 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800538a:	400a      	ands	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	438a      	bics	r2, r1
 800539c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2274      	movs	r2, #116	; 0x74
 80053ae:	2100      	movs	r1, #0
 80053b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e044      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2204      	movs	r2, #4
 80053be:	4013      	ands	r3, r2
 80053c0:	d02e      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	401a      	ands	r2, r3
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d124      	bne.n	8005420 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	0112      	lsls	r2, r2, #4
 80053de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4917      	ldr	r1, [pc, #92]	; (8005448 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	438a      	bics	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	2120      	movs	r1, #32
 8005412:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2274      	movs	r2, #116	; 0x74
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e00f      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	425a      	negs	r2, r3
 8005430:	4153      	adcs	r3, r2
 8005432:	b2db      	uxtb	r3, r3
 8005434:	001a      	movs	r2, r3
 8005436:	1dfb      	adds	r3, r7, #7
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d091      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b004      	add	sp, #16
 8005446:	bd80      	pop	{r7, pc}
 8005448:	fffffe5f 	.word	0xfffffe5f

0800544c <__errno>:
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <__errno+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	2000000c 	.word	0x2000000c

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	2600      	movs	r6, #0
 800545c:	4d0c      	ldr	r5, [pc, #48]	; (8005490 <__libc_init_array+0x38>)
 800545e:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	2600      	movs	r6, #0
 800546a:	f004 fbc9 	bl	8009c00 <_init>
 800546e:	4d0a      	ldr	r5, [pc, #40]	; (8005498 <__libc_init_array+0x40>)
 8005470:	4c0a      	ldr	r4, [pc, #40]	; (800549c <__libc_init_array+0x44>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	00b3      	lsls	r3, r6, #2
 800547e:	58eb      	ldr	r3, [r5, r3]
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	00b3      	lsls	r3, r6, #2
 8005488:	58eb      	ldr	r3, [r5, r3]
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	0800a098 	.word	0x0800a098
 8005494:	0800a098 	.word	0x0800a098
 8005498:	0800a098 	.word	0x0800a098
 800549c:	0800a09c 	.word	0x0800a09c

080054a0 <memset>:
 80054a0:	0003      	movs	r3, r0
 80054a2:	1812      	adds	r2, r2, r0
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d100      	bne.n	80054aa <memset+0xa>
 80054a8:	4770      	bx	lr
 80054aa:	7019      	strb	r1, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	e7f9      	b.n	80054a4 <memset+0x4>

080054b0 <__cvt>:
 80054b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b2:	b08b      	sub	sp, #44	; 0x2c
 80054b4:	0014      	movs	r4, r2
 80054b6:	1e1d      	subs	r5, r3, #0
 80054b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80054ba:	da53      	bge.n	8005564 <__cvt+0xb4>
 80054bc:	2480      	movs	r4, #128	; 0x80
 80054be:	0624      	lsls	r4, r4, #24
 80054c0:	191b      	adds	r3, r3, r4
 80054c2:	001d      	movs	r5, r3
 80054c4:	0014      	movs	r4, r2
 80054c6:	232d      	movs	r3, #45	; 0x2d
 80054c8:	700b      	strb	r3, [r1, #0]
 80054ca:	2320      	movs	r3, #32
 80054cc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80054ce:	2203      	movs	r2, #3
 80054d0:	439e      	bics	r6, r3
 80054d2:	2e46      	cmp	r6, #70	; 0x46
 80054d4:	d007      	beq.n	80054e6 <__cvt+0x36>
 80054d6:	0033      	movs	r3, r6
 80054d8:	3b45      	subs	r3, #69	; 0x45
 80054da:	4259      	negs	r1, r3
 80054dc:	414b      	adcs	r3, r1
 80054de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80054e0:	3a01      	subs	r2, #1
 80054e2:	18cb      	adds	r3, r1, r3
 80054e4:	9310      	str	r3, [sp, #64]	; 0x40
 80054e6:	ab09      	add	r3, sp, #36	; 0x24
 80054e8:	9304      	str	r3, [sp, #16]
 80054ea:	ab08      	add	r3, sp, #32
 80054ec:	9303      	str	r3, [sp, #12]
 80054ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80054f0:	9200      	str	r2, [sp, #0]
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054f6:	0022      	movs	r2, r4
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	002b      	movs	r3, r5
 80054fc:	f001 ffba 	bl	8007474 <_dtoa_r>
 8005500:	0007      	movs	r7, r0
 8005502:	2e47      	cmp	r6, #71	; 0x47
 8005504:	d102      	bne.n	800550c <__cvt+0x5c>
 8005506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005508:	07db      	lsls	r3, r3, #31
 800550a:	d524      	bpl.n	8005556 <__cvt+0xa6>
 800550c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	9307      	str	r3, [sp, #28]
 8005512:	2e46      	cmp	r6, #70	; 0x46
 8005514:	d114      	bne.n	8005540 <__cvt+0x90>
 8005516:	783b      	ldrb	r3, [r7, #0]
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d10c      	bne.n	8005536 <__cvt+0x86>
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	0020      	movs	r0, r4
 8005522:	0029      	movs	r1, r5
 8005524:	f7fa ff88 	bl	8000438 <__aeabi_dcmpeq>
 8005528:	2800      	cmp	r0, #0
 800552a:	d104      	bne.n	8005536 <__cvt+0x86>
 800552c:	2301      	movs	r3, #1
 800552e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005538:	9a07      	ldr	r2, [sp, #28]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	18d3      	adds	r3, r2, r3
 800553e:	9307      	str	r3, [sp, #28]
 8005540:	2200      	movs	r2, #0
 8005542:	2300      	movs	r3, #0
 8005544:	0020      	movs	r0, r4
 8005546:	0029      	movs	r1, r5
 8005548:	f7fa ff76 	bl	8000438 <__aeabi_dcmpeq>
 800554c:	2230      	movs	r2, #48	; 0x30
 800554e:	2800      	cmp	r0, #0
 8005550:	d00d      	beq.n	800556e <__cvt+0xbe>
 8005552:	9b07      	ldr	r3, [sp, #28]
 8005554:	9309      	str	r3, [sp, #36]	; 0x24
 8005556:	0038      	movs	r0, r7
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800555c:	1bdb      	subs	r3, r3, r7
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	b00b      	add	sp, #44	; 0x2c
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005564:	2300      	movs	r3, #0
 8005566:	e7af      	b.n	80054c8 <__cvt+0x18>
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	9109      	str	r1, [sp, #36]	; 0x24
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005570:	9907      	ldr	r1, [sp, #28]
 8005572:	428b      	cmp	r3, r1
 8005574:	d3f8      	bcc.n	8005568 <__cvt+0xb8>
 8005576:	e7ee      	b.n	8005556 <__cvt+0xa6>

08005578 <__exponent>:
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	1c83      	adds	r3, r0, #2
 800557c:	b085      	sub	sp, #20
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	0006      	movs	r6, r0
 8005582:	000c      	movs	r4, r1
 8005584:	7002      	strb	r2, [r0, #0]
 8005586:	232b      	movs	r3, #43	; 0x2b
 8005588:	2900      	cmp	r1, #0
 800558a:	da01      	bge.n	8005590 <__exponent+0x18>
 800558c:	232d      	movs	r3, #45	; 0x2d
 800558e:	424c      	negs	r4, r1
 8005590:	7073      	strb	r3, [r6, #1]
 8005592:	2c09      	cmp	r4, #9
 8005594:	dd22      	ble.n	80055dc <__exponent+0x64>
 8005596:	ab02      	add	r3, sp, #8
 8005598:	1ddd      	adds	r5, r3, #7
 800559a:	0020      	movs	r0, r4
 800559c:	210a      	movs	r1, #10
 800559e:	f7fa ff35 	bl	800040c <__aeabi_idivmod>
 80055a2:	1e6f      	subs	r7, r5, #1
 80055a4:	3130      	adds	r1, #48	; 0x30
 80055a6:	7039      	strb	r1, [r7, #0]
 80055a8:	0020      	movs	r0, r4
 80055aa:	210a      	movs	r1, #10
 80055ac:	f7fa fe48 	bl	8000240 <__divsi3>
 80055b0:	0004      	movs	r4, r0
 80055b2:	2809      	cmp	r0, #9
 80055b4:	dc0b      	bgt.n	80055ce <__exponent+0x56>
 80055b6:	3d02      	subs	r5, #2
 80055b8:	3430      	adds	r4, #48	; 0x30
 80055ba:	9b01      	ldr	r3, [sp, #4]
 80055bc:	702c      	strb	r4, [r5, #0]
 80055be:	aa02      	add	r2, sp, #8
 80055c0:	3207      	adds	r2, #7
 80055c2:	0018      	movs	r0, r3
 80055c4:	42aa      	cmp	r2, r5
 80055c6:	d804      	bhi.n	80055d2 <__exponent+0x5a>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	b005      	add	sp, #20
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	003d      	movs	r5, r7
 80055d0:	e7e3      	b.n	800559a <__exponent+0x22>
 80055d2:	782a      	ldrb	r2, [r5, #0]
 80055d4:	3501      	adds	r5, #1
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	e7f0      	b.n	80055be <__exponent+0x46>
 80055dc:	2330      	movs	r3, #48	; 0x30
 80055de:	18e4      	adds	r4, r4, r3
 80055e0:	70b3      	strb	r3, [r6, #2]
 80055e2:	1d30      	adds	r0, r6, #4
 80055e4:	70f4      	strb	r4, [r6, #3]
 80055e6:	e7ef      	b.n	80055c8 <__exponent+0x50>

080055e8 <_printf_float>:
 80055e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ea:	b095      	sub	sp, #84	; 0x54
 80055ec:	000c      	movs	r4, r1
 80055ee:	920a      	str	r2, [sp, #40]	; 0x28
 80055f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80055f4:	9009      	str	r0, [sp, #36]	; 0x24
 80055f6:	f003 f9df 	bl	80089b8 <_localeconv_r>
 80055fa:	6803      	ldr	r3, [r0, #0]
 80055fc:	0018      	movs	r0, r3
 80055fe:	930c      	str	r3, [sp, #48]	; 0x30
 8005600:	f7fa fd82 	bl	8000108 <strlen>
 8005604:	2300      	movs	r3, #0
 8005606:	9312      	str	r3, [sp, #72]	; 0x48
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	900e      	str	r0, [sp, #56]	; 0x38
 800560c:	930d      	str	r3, [sp, #52]	; 0x34
 800560e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005610:	7e27      	ldrb	r7, [r4, #24]
 8005612:	682b      	ldr	r3, [r5, #0]
 8005614:	2207      	movs	r2, #7
 8005616:	05c9      	lsls	r1, r1, #23
 8005618:	d545      	bpl.n	80056a6 <_printf_float+0xbe>
 800561a:	189b      	adds	r3, r3, r2
 800561c:	4393      	bics	r3, r2
 800561e:	001a      	movs	r2, r3
 8005620:	3208      	adds	r2, #8
 8005622:	602a      	str	r2, [r5, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	64a2      	str	r2, [r4, #72]	; 0x48
 800562a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800562c:	2201      	movs	r2, #1
 800562e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005630:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8005632:	006b      	lsls	r3, r5, #1
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	930f      	str	r3, [sp, #60]	; 0x3c
 8005638:	4252      	negs	r2, r2
 800563a:	4bac      	ldr	r3, [pc, #688]	; (80058ec <_printf_float+0x304>)
 800563c:	0030      	movs	r0, r6
 800563e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005640:	f7fc fc26 	bl	8001e90 <__aeabi_dcmpun>
 8005644:	2800      	cmp	r0, #0
 8005646:	d130      	bne.n	80056aa <_printf_float+0xc2>
 8005648:	2201      	movs	r2, #1
 800564a:	4ba8      	ldr	r3, [pc, #672]	; (80058ec <_printf_float+0x304>)
 800564c:	4252      	negs	r2, r2
 800564e:	0030      	movs	r0, r6
 8005650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005652:	f7fa ff01 	bl	8000458 <__aeabi_dcmple>
 8005656:	2800      	cmp	r0, #0
 8005658:	d127      	bne.n	80056aa <_printf_float+0xc2>
 800565a:	2200      	movs	r2, #0
 800565c:	2300      	movs	r3, #0
 800565e:	0030      	movs	r0, r6
 8005660:	0029      	movs	r1, r5
 8005662:	f7fa feef 	bl	8000444 <__aeabi_dcmplt>
 8005666:	2800      	cmp	r0, #0
 8005668:	d003      	beq.n	8005672 <_printf_float+0x8a>
 800566a:	0023      	movs	r3, r4
 800566c:	222d      	movs	r2, #45	; 0x2d
 800566e:	3343      	adds	r3, #67	; 0x43
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	4d9f      	ldr	r5, [pc, #636]	; (80058f0 <_printf_float+0x308>)
 8005674:	2f47      	cmp	r7, #71	; 0x47
 8005676:	d800      	bhi.n	800567a <_printf_float+0x92>
 8005678:	4d9e      	ldr	r5, [pc, #632]	; (80058f4 <_printf_float+0x30c>)
 800567a:	2303      	movs	r3, #3
 800567c:	2600      	movs	r6, #0
 800567e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	3301      	adds	r3, #1
 8005684:	439a      	bics	r2, r3
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800568a:	aa13      	add	r2, sp, #76	; 0x4c
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0021      	movs	r1, r4
 8005690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005694:	f000 f9f4 	bl	8005a80 <_printf_common>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d000      	beq.n	800569e <_printf_float+0xb6>
 800569c:	e093      	b.n	80057c6 <_printf_float+0x1de>
 800569e:	2001      	movs	r0, #1
 80056a0:	4240      	negs	r0, r0
 80056a2:	b015      	add	sp, #84	; 0x54
 80056a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a6:	3307      	adds	r3, #7
 80056a8:	e7b8      	b.n	800561c <_printf_float+0x34>
 80056aa:	0032      	movs	r2, r6
 80056ac:	002b      	movs	r3, r5
 80056ae:	0030      	movs	r0, r6
 80056b0:	0029      	movs	r1, r5
 80056b2:	f7fc fbed 	bl	8001e90 <__aeabi_dcmpun>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d004      	beq.n	80056c4 <_printf_float+0xdc>
 80056ba:	4d8f      	ldr	r5, [pc, #572]	; (80058f8 <_printf_float+0x310>)
 80056bc:	2f47      	cmp	r7, #71	; 0x47
 80056be:	d8dc      	bhi.n	800567a <_printf_float+0x92>
 80056c0:	4d8e      	ldr	r5, [pc, #568]	; (80058fc <_printf_float+0x314>)
 80056c2:	e7da      	b.n	800567a <_printf_float+0x92>
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056c8:	6862      	ldr	r2, [r4, #4]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	430b      	orrs	r3, r1
 80056ce:	1c51      	adds	r1, r2, #1
 80056d0:	d143      	bne.n	800575a <_printf_float+0x172>
 80056d2:	3207      	adds	r2, #7
 80056d4:	6062      	str	r2, [r4, #4]
 80056d6:	aa12      	add	r2, sp, #72	; 0x48
 80056d8:	2100      	movs	r1, #0
 80056da:	9205      	str	r2, [sp, #20]
 80056dc:	aa11      	add	r2, sp, #68	; 0x44
 80056de:	9203      	str	r2, [sp, #12]
 80056e0:	2223      	movs	r2, #35	; 0x23
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	9106      	str	r1, [sp, #24]
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	a908      	add	r1, sp, #32
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	1852      	adds	r2, r2, r1
 80056ee:	9202      	str	r2, [sp, #8]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	0032      	movs	r2, r6
 80056f4:	002b      	movs	r3, r5
 80056f6:	9704      	str	r7, [sp, #16]
 80056f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056fa:	f7ff fed9 	bl	80054b0 <__cvt>
 80056fe:	2320      	movs	r3, #32
 8005700:	003a      	movs	r2, r7
 8005702:	0005      	movs	r5, r0
 8005704:	439a      	bics	r2, r3
 8005706:	2a47      	cmp	r2, #71	; 0x47
 8005708:	d107      	bne.n	800571a <_printf_float+0x132>
 800570a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800570c:	1cda      	adds	r2, r3, #3
 800570e:	db02      	blt.n	8005716 <_printf_float+0x12e>
 8005710:	6862      	ldr	r2, [r4, #4]
 8005712:	4293      	cmp	r3, r2
 8005714:	dd45      	ble.n	80057a2 <_printf_float+0x1ba>
 8005716:	3f02      	subs	r7, #2
 8005718:	b2ff      	uxtb	r7, r7
 800571a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800571c:	2f65      	cmp	r7, #101	; 0x65
 800571e:	d825      	bhi.n	800576c <_printf_float+0x184>
 8005720:	0020      	movs	r0, r4
 8005722:	3901      	subs	r1, #1
 8005724:	003a      	movs	r2, r7
 8005726:	3050      	adds	r0, #80	; 0x50
 8005728:	9111      	str	r1, [sp, #68]	; 0x44
 800572a:	f7ff ff25 	bl	8005578 <__exponent>
 800572e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005730:	0006      	movs	r6, r0
 8005732:	1813      	adds	r3, r2, r0
 8005734:	6123      	str	r3, [r4, #16]
 8005736:	2a01      	cmp	r2, #1
 8005738:	dc02      	bgt.n	8005740 <_printf_float+0x158>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	07d2      	lsls	r2, r2, #31
 800573e:	d501      	bpl.n	8005744 <_printf_float+0x15c>
 8005740:	3301      	adds	r3, #1
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	2323      	movs	r3, #35	; 0x23
 8005746:	aa08      	add	r2, sp, #32
 8005748:	189b      	adds	r3, r3, r2
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d09b      	beq.n	8005688 <_printf_float+0xa0>
 8005750:	0023      	movs	r3, r4
 8005752:	222d      	movs	r2, #45	; 0x2d
 8005754:	3343      	adds	r3, #67	; 0x43
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e796      	b.n	8005688 <_printf_float+0xa0>
 800575a:	2f67      	cmp	r7, #103	; 0x67
 800575c:	d100      	bne.n	8005760 <_printf_float+0x178>
 800575e:	e176      	b.n	8005a4e <_printf_float+0x466>
 8005760:	2f47      	cmp	r7, #71	; 0x47
 8005762:	d1b8      	bne.n	80056d6 <_printf_float+0xee>
 8005764:	2a00      	cmp	r2, #0
 8005766:	d1b6      	bne.n	80056d6 <_printf_float+0xee>
 8005768:	2201      	movs	r2, #1
 800576a:	e7b3      	b.n	80056d4 <_printf_float+0xec>
 800576c:	2f66      	cmp	r7, #102	; 0x66
 800576e:	d119      	bne.n	80057a4 <_printf_float+0x1bc>
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	2900      	cmp	r1, #0
 8005774:	dd0c      	ble.n	8005790 <_printf_float+0x1a8>
 8005776:	6121      	str	r1, [r4, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <_printf_float+0x19a>
 800577c:	6822      	ldr	r2, [r4, #0]
 800577e:	07d2      	lsls	r2, r2, #31
 8005780:	d502      	bpl.n	8005788 <_printf_float+0x1a0>
 8005782:	3301      	adds	r3, #1
 8005784:	185b      	adds	r3, r3, r1
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800578a:	2600      	movs	r6, #0
 800578c:	65a3      	str	r3, [r4, #88]	; 0x58
 800578e:	e7d9      	b.n	8005744 <_printf_float+0x15c>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <_printf_float+0x1b4>
 8005794:	2201      	movs	r2, #1
 8005796:	6821      	ldr	r1, [r4, #0]
 8005798:	4211      	tst	r1, r2
 800579a:	d000      	beq.n	800579e <_printf_float+0x1b6>
 800579c:	1c9a      	adds	r2, r3, #2
 800579e:	6122      	str	r2, [r4, #16]
 80057a0:	e7f2      	b.n	8005788 <_printf_float+0x1a0>
 80057a2:	2767      	movs	r7, #103	; 0x67
 80057a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057a8:	4293      	cmp	r3, r2
 80057aa:	db05      	blt.n	80057b8 <_printf_float+0x1d0>
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	6123      	str	r3, [r4, #16]
 80057b0:	07d2      	lsls	r2, r2, #31
 80057b2:	d5e9      	bpl.n	8005788 <_printf_float+0x1a0>
 80057b4:	3301      	adds	r3, #1
 80057b6:	e7e6      	b.n	8005786 <_printf_float+0x19e>
 80057b8:	2101      	movs	r1, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dc01      	bgt.n	80057c2 <_printf_float+0x1da>
 80057be:	1849      	adds	r1, r1, r1
 80057c0:	1ac9      	subs	r1, r1, r3
 80057c2:	1852      	adds	r2, r2, r1
 80057c4:	e7eb      	b.n	800579e <_printf_float+0x1b6>
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	0553      	lsls	r3, r2, #21
 80057ca:	d408      	bmi.n	80057de <_printf_float+0x1f6>
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	002a      	movs	r2, r5
 80057d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80057d6:	47a8      	blx	r5
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d129      	bne.n	8005830 <_printf_float+0x248>
 80057dc:	e75f      	b.n	800569e <_printf_float+0xb6>
 80057de:	2f65      	cmp	r7, #101	; 0x65
 80057e0:	d800      	bhi.n	80057e4 <_printf_float+0x1fc>
 80057e2:	e0e0      	b.n	80059a6 <_printf_float+0x3be>
 80057e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80057e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	f7fa fe24 	bl	8000438 <__aeabi_dcmpeq>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d034      	beq.n	800585e <_printf_float+0x276>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4a42      	ldr	r2, [pc, #264]	; (8005900 <_printf_float+0x318>)
 80057f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80057fe:	47a8      	blx	r5
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	d100      	bne.n	8005806 <_printf_float+0x21e>
 8005804:	e74b      	b.n	800569e <_printf_float+0xb6>
 8005806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005808:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800580a:	4293      	cmp	r3, r2
 800580c:	db02      	blt.n	8005814 <_printf_float+0x22c>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	07db      	lsls	r3, r3, #31
 8005812:	d50d      	bpl.n	8005830 <_printf_float+0x248>
 8005814:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800581a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800581c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800581e:	47a8      	blx	r5
 8005820:	2500      	movs	r5, #0
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d100      	bne.n	8005828 <_printf_float+0x240>
 8005826:	e73a      	b.n	800569e <_printf_float+0xb6>
 8005828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800582a:	3b01      	subs	r3, #1
 800582c:	42ab      	cmp	r3, r5
 800582e:	dc0a      	bgt.n	8005846 <_printf_float+0x25e>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	079b      	lsls	r3, r3, #30
 8005834:	d500      	bpl.n	8005838 <_printf_float+0x250>
 8005836:	e108      	b.n	8005a4a <_printf_float+0x462>
 8005838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	4298      	cmp	r0, r3
 800583e:	db00      	blt.n	8005842 <_printf_float+0x25a>
 8005840:	e72f      	b.n	80056a2 <_printf_float+0xba>
 8005842:	0018      	movs	r0, r3
 8005844:	e72d      	b.n	80056a2 <_printf_float+0xba>
 8005846:	0022      	movs	r2, r4
 8005848:	2301      	movs	r3, #1
 800584a:	321a      	adds	r2, #26
 800584c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800584e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005850:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005852:	47b0      	blx	r6
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d100      	bne.n	800585a <_printf_float+0x272>
 8005858:	e721      	b.n	800569e <_printf_float+0xb6>
 800585a:	3501      	adds	r5, #1
 800585c:	e7e4      	b.n	8005828 <_printf_float+0x240>
 800585e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005860:	2b00      	cmp	r3, #0
 8005862:	dc2d      	bgt.n	80058c0 <_printf_float+0x2d8>
 8005864:	2301      	movs	r3, #1
 8005866:	4a26      	ldr	r2, [pc, #152]	; (8005900 <_printf_float+0x318>)
 8005868:	990a      	ldr	r1, [sp, #40]	; 0x28
 800586a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800586c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800586e:	47b0      	blx	r6
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d100      	bne.n	8005876 <_printf_float+0x28e>
 8005874:	e713      	b.n	800569e <_printf_float+0xb6>
 8005876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <_printf_float+0x2a0>
 800587c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <_printf_float+0x2a0>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	07db      	lsls	r3, r3, #31
 8005886:	d5d3      	bpl.n	8005830 <_printf_float+0x248>
 8005888:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800588a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800588c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800588e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005892:	47b0      	blx	r6
 8005894:	2600      	movs	r6, #0
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d100      	bne.n	800589c <_printf_float+0x2b4>
 800589a:	e700      	b.n	800569e <_printf_float+0xb6>
 800589c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800589e:	425b      	negs	r3, r3
 80058a0:	42b3      	cmp	r3, r6
 80058a2:	dc01      	bgt.n	80058a8 <_printf_float+0x2c0>
 80058a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058a6:	e792      	b.n	80057ce <_printf_float+0x1e6>
 80058a8:	0022      	movs	r2, r4
 80058aa:	2301      	movs	r3, #1
 80058ac:	321a      	adds	r2, #26
 80058ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80058b4:	47b8      	blx	r7
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d100      	bne.n	80058bc <_printf_float+0x2d4>
 80058ba:	e6f0      	b.n	800569e <_printf_float+0xb6>
 80058bc:	3601      	adds	r6, #1
 80058be:	e7ed      	b.n	800589c <_printf_float+0x2b4>
 80058c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80058c4:	429f      	cmp	r7, r3
 80058c6:	dd00      	ble.n	80058ca <_printf_float+0x2e2>
 80058c8:	001f      	movs	r7, r3
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	dd08      	ble.n	80058e0 <_printf_float+0x2f8>
 80058ce:	003b      	movs	r3, r7
 80058d0:	002a      	movs	r2, r5
 80058d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058d8:	47b0      	blx	r6
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	d100      	bne.n	80058e0 <_printf_float+0x2f8>
 80058de:	e6de      	b.n	800569e <_printf_float+0xb6>
 80058e0:	2300      	movs	r3, #0
 80058e2:	930d      	str	r3, [sp, #52]	; 0x34
 80058e4:	43fb      	mvns	r3, r7
 80058e6:	17db      	asrs	r3, r3, #31
 80058e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80058ea:	e018      	b.n	800591e <_printf_float+0x336>
 80058ec:	7fefffff 	.word	0x7fefffff
 80058f0:	08009d7c 	.word	0x08009d7c
 80058f4:	08009d78 	.word	0x08009d78
 80058f8:	08009d84 	.word	0x08009d84
 80058fc:	08009d80 	.word	0x08009d80
 8005900:	08009d88 	.word	0x08009d88
 8005904:	0022      	movs	r2, r4
 8005906:	2301      	movs	r3, #1
 8005908:	321a      	adds	r2, #26
 800590a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800590c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800590e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005910:	47b0      	blx	r6
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d100      	bne.n	8005918 <_printf_float+0x330>
 8005916:	e6c2      	b.n	800569e <_printf_float+0xb6>
 8005918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800591a:	3301      	adds	r3, #1
 800591c:	930d      	str	r3, [sp, #52]	; 0x34
 800591e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005920:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005922:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005924:	403b      	ands	r3, r7
 8005926:	1af3      	subs	r3, r6, r3
 8005928:	4293      	cmp	r3, r2
 800592a:	dceb      	bgt.n	8005904 <_printf_float+0x31c>
 800592c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800592e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005930:	19ad      	adds	r5, r5, r6
 8005932:	4293      	cmp	r3, r2
 8005934:	db10      	blt.n	8005958 <_printf_float+0x370>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	07db      	lsls	r3, r3, #31
 800593a:	d40d      	bmi.n	8005958 <_printf_float+0x370>
 800593c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800593e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005940:	1bbe      	subs	r6, r7, r6
 8005942:	1aff      	subs	r7, r7, r3
 8005944:	42b7      	cmp	r7, r6
 8005946:	dd00      	ble.n	800594a <_printf_float+0x362>
 8005948:	0037      	movs	r7, r6
 800594a:	2f00      	cmp	r7, #0
 800594c:	dc0d      	bgt.n	800596a <_printf_float+0x382>
 800594e:	43fe      	mvns	r6, r7
 8005950:	17f3      	asrs	r3, r6, #31
 8005952:	2500      	movs	r5, #0
 8005954:	930c      	str	r3, [sp, #48]	; 0x30
 8005956:	e01c      	b.n	8005992 <_printf_float+0x3aa>
 8005958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800595a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800595c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800595e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005960:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005962:	47b8      	blx	r7
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d1e9      	bne.n	800593c <_printf_float+0x354>
 8005968:	e699      	b.n	800569e <_printf_float+0xb6>
 800596a:	003b      	movs	r3, r7
 800596c:	002a      	movs	r2, r5
 800596e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005972:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005974:	47a8      	blx	r5
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	d1e9      	bne.n	800594e <_printf_float+0x366>
 800597a:	e690      	b.n	800569e <_printf_float+0xb6>
 800597c:	0022      	movs	r2, r4
 800597e:	2301      	movs	r3, #1
 8005980:	321a      	adds	r2, #26
 8005982:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005986:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005988:	47b0      	blx	r6
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	d100      	bne.n	8005990 <_printf_float+0x3a8>
 800598e:	e686      	b.n	800569e <_printf_float+0xb6>
 8005990:	3501      	adds	r5, #1
 8005992:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005996:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	003a      	movs	r2, r7
 800599c:	400a      	ands	r2, r1
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dceb      	bgt.n	800597c <_printf_float+0x394>
 80059a4:	e744      	b.n	8005830 <_printf_float+0x248>
 80059a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	dc02      	bgt.n	80059b2 <_printf_float+0x3ca>
 80059ac:	2301      	movs	r3, #1
 80059ae:	421a      	tst	r2, r3
 80059b0:	d032      	beq.n	8005a18 <_printf_float+0x430>
 80059b2:	2301      	movs	r3, #1
 80059b4:	002a      	movs	r2, r5
 80059b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80059bc:	47b8      	blx	r7
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d100      	bne.n	80059c4 <_printf_float+0x3dc>
 80059c2:	e66c      	b.n	800569e <_printf_float+0xb6>
 80059c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80059ce:	3501      	adds	r5, #1
 80059d0:	47b8      	blx	r7
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d100      	bne.n	80059d8 <_printf_float+0x3f0>
 80059d6:	e662      	b.n	800569e <_printf_float+0xb6>
 80059d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80059da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80059dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059de:	2200      	movs	r2, #0
 80059e0:	1e5f      	subs	r7, r3, #1
 80059e2:	2300      	movs	r3, #0
 80059e4:	f7fa fd28 	bl	8000438 <__aeabi_dcmpeq>
 80059e8:	003b      	movs	r3, r7
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d014      	beq.n	8005a18 <_printf_float+0x430>
 80059ee:	2500      	movs	r5, #0
 80059f0:	e00a      	b.n	8005a08 <_printf_float+0x420>
 80059f2:	0022      	movs	r2, r4
 80059f4:	2301      	movs	r3, #1
 80059f6:	321a      	adds	r2, #26
 80059f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80059fe:	47b8      	blx	r7
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d100      	bne.n	8005a06 <_printf_float+0x41e>
 8005a04:	e64b      	b.n	800569e <_printf_float+0xb6>
 8005a06:	3501      	adds	r5, #1
 8005a08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dcf0      	bgt.n	80059f2 <_printf_float+0x40a>
 8005a10:	0022      	movs	r2, r4
 8005a12:	0033      	movs	r3, r6
 8005a14:	3250      	adds	r2, #80	; 0x50
 8005a16:	e6db      	b.n	80057d0 <_printf_float+0x1e8>
 8005a18:	002a      	movs	r2, r5
 8005a1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005a20:	47a8      	blx	r5
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d1f4      	bne.n	8005a10 <_printf_float+0x428>
 8005a26:	e63a      	b.n	800569e <_printf_float+0xb6>
 8005a28:	0022      	movs	r2, r4
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	3219      	adds	r2, #25
 8005a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a32:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a34:	47b0      	blx	r6
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	d100      	bne.n	8005a3c <_printf_float+0x454>
 8005a3a:	e630      	b.n	800569e <_printf_float+0xb6>
 8005a3c:	3501      	adds	r5, #1
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dcef      	bgt.n	8005a28 <_printf_float+0x440>
 8005a48:	e6f6      	b.n	8005838 <_printf_float+0x250>
 8005a4a:	2500      	movs	r5, #0
 8005a4c:	e7f7      	b.n	8005a3e <_printf_float+0x456>
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d100      	bne.n	8005a54 <_printf_float+0x46c>
 8005a52:	e689      	b.n	8005768 <_printf_float+0x180>
 8005a54:	2100      	movs	r1, #0
 8005a56:	9106      	str	r1, [sp, #24]
 8005a58:	a912      	add	r1, sp, #72	; 0x48
 8005a5a:	9105      	str	r1, [sp, #20]
 8005a5c:	a911      	add	r1, sp, #68	; 0x44
 8005a5e:	9103      	str	r1, [sp, #12]
 8005a60:	2123      	movs	r1, #35	; 0x23
 8005a62:	a808      	add	r0, sp, #32
 8005a64:	1809      	adds	r1, r1, r0
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	9200      	str	r2, [sp, #0]
 8005a6c:	002b      	movs	r3, r5
 8005a6e:	9704      	str	r7, [sp, #16]
 8005a70:	9102      	str	r1, [sp, #8]
 8005a72:	0032      	movs	r2, r6
 8005a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a76:	f7ff fd1b 	bl	80054b0 <__cvt>
 8005a7a:	0005      	movs	r5, r0
 8005a7c:	e645      	b.n	800570a <_printf_float+0x122>
 8005a7e:	46c0      	nop			; (mov r8, r8)

08005a80 <_printf_common>:
 8005a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a82:	0015      	movs	r5, r2
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	688a      	ldr	r2, [r1, #8]
 8005a88:	690b      	ldr	r3, [r1, #16]
 8005a8a:	9000      	str	r0, [sp, #0]
 8005a8c:	000c      	movs	r4, r1
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	da00      	bge.n	8005a94 <_printf_common+0x14>
 8005a92:	0013      	movs	r3, r2
 8005a94:	0022      	movs	r2, r4
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	3243      	adds	r2, #67	; 0x43
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d001      	beq.n	8005aa4 <_printf_common+0x24>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	069b      	lsls	r3, r3, #26
 8005aa8:	d502      	bpl.n	8005ab0 <_printf_common+0x30>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	3302      	adds	r3, #2
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	2706      	movs	r7, #6
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	401f      	ands	r7, r3
 8005ab6:	d027      	beq.n	8005b08 <_printf_common+0x88>
 8005ab8:	0023      	movs	r3, r4
 8005aba:	3343      	adds	r3, #67	; 0x43
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	4193      	sbcs	r3, r2
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	0692      	lsls	r2, r2, #26
 8005ac6:	d430      	bmi.n	8005b2a <_printf_common+0xaa>
 8005ac8:	0022      	movs	r2, r4
 8005aca:	9901      	ldr	r1, [sp, #4]
 8005acc:	3243      	adds	r2, #67	; 0x43
 8005ace:	9800      	ldr	r0, [sp, #0]
 8005ad0:	9e08      	ldr	r6, [sp, #32]
 8005ad2:	47b0      	blx	r6
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d025      	beq.n	8005b24 <_printf_common+0xa4>
 8005ad8:	2306      	movs	r3, #6
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	682a      	ldr	r2, [r5, #0]
 8005ade:	68e1      	ldr	r1, [r4, #12]
 8005ae0:	4003      	ands	r3, r0
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d103      	bne.n	8005af0 <_printf_common+0x70>
 8005ae8:	1a8d      	subs	r5, r1, r2
 8005aea:	43eb      	mvns	r3, r5
 8005aec:	17db      	asrs	r3, r3, #31
 8005aee:	401d      	ands	r5, r3
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	6922      	ldr	r2, [r4, #16]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	dd01      	ble.n	8005afc <_printf_common+0x7c>
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	18ed      	adds	r5, r5, r3
 8005afc:	2700      	movs	r7, #0
 8005afe:	42bd      	cmp	r5, r7
 8005b00:	d120      	bne.n	8005b44 <_printf_common+0xc4>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e010      	b.n	8005b28 <_printf_common+0xa8>
 8005b06:	3701      	adds	r7, #1
 8005b08:	68e3      	ldr	r3, [r4, #12]
 8005b0a:	682a      	ldr	r2, [r5, #0]
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	42bb      	cmp	r3, r7
 8005b10:	ddd2      	ble.n	8005ab8 <_printf_common+0x38>
 8005b12:	0022      	movs	r2, r4
 8005b14:	2301      	movs	r3, #1
 8005b16:	3219      	adds	r2, #25
 8005b18:	9901      	ldr	r1, [sp, #4]
 8005b1a:	9800      	ldr	r0, [sp, #0]
 8005b1c:	9e08      	ldr	r6, [sp, #32]
 8005b1e:	47b0      	blx	r6
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d1f0      	bne.n	8005b06 <_printf_common+0x86>
 8005b24:	2001      	movs	r0, #1
 8005b26:	4240      	negs	r0, r0
 8005b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b2a:	2030      	movs	r0, #48	; 0x30
 8005b2c:	18e1      	adds	r1, r4, r3
 8005b2e:	3143      	adds	r1, #67	; 0x43
 8005b30:	7008      	strb	r0, [r1, #0]
 8005b32:	0021      	movs	r1, r4
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	3145      	adds	r1, #69	; 0x45
 8005b38:	7809      	ldrb	r1, [r1, #0]
 8005b3a:	18a2      	adds	r2, r4, r2
 8005b3c:	3243      	adds	r2, #67	; 0x43
 8005b3e:	3302      	adds	r3, #2
 8005b40:	7011      	strb	r1, [r2, #0]
 8005b42:	e7c1      	b.n	8005ac8 <_printf_common+0x48>
 8005b44:	0022      	movs	r2, r4
 8005b46:	2301      	movs	r3, #1
 8005b48:	321a      	adds	r2, #26
 8005b4a:	9901      	ldr	r1, [sp, #4]
 8005b4c:	9800      	ldr	r0, [sp, #0]
 8005b4e:	9e08      	ldr	r6, [sp, #32]
 8005b50:	47b0      	blx	r6
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d0e6      	beq.n	8005b24 <_printf_common+0xa4>
 8005b56:	3701      	adds	r7, #1
 8005b58:	e7d1      	b.n	8005afe <_printf_common+0x7e>
	...

08005b5c <_printf_i>:
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	9204      	str	r2, [sp, #16]
 8005b62:	000a      	movs	r2, r1
 8005b64:	3243      	adds	r2, #67	; 0x43
 8005b66:	9305      	str	r3, [sp, #20]
 8005b68:	9003      	str	r0, [sp, #12]
 8005b6a:	9202      	str	r2, [sp, #8]
 8005b6c:	7e0a      	ldrb	r2, [r1, #24]
 8005b6e:	000c      	movs	r4, r1
 8005b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b72:	2a6e      	cmp	r2, #110	; 0x6e
 8005b74:	d100      	bne.n	8005b78 <_printf_i+0x1c>
 8005b76:	e086      	b.n	8005c86 <_printf_i+0x12a>
 8005b78:	d81f      	bhi.n	8005bba <_printf_i+0x5e>
 8005b7a:	2a63      	cmp	r2, #99	; 0x63
 8005b7c:	d033      	beq.n	8005be6 <_printf_i+0x8a>
 8005b7e:	d808      	bhi.n	8005b92 <_printf_i+0x36>
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	d100      	bne.n	8005b86 <_printf_i+0x2a>
 8005b84:	e08c      	b.n	8005ca0 <_printf_i+0x144>
 8005b86:	2a58      	cmp	r2, #88	; 0x58
 8005b88:	d04d      	beq.n	8005c26 <_printf_i+0xca>
 8005b8a:	0025      	movs	r5, r4
 8005b8c:	3542      	adds	r5, #66	; 0x42
 8005b8e:	702a      	strb	r2, [r5, #0]
 8005b90:	e030      	b.n	8005bf4 <_printf_i+0x98>
 8005b92:	2a64      	cmp	r2, #100	; 0x64
 8005b94:	d001      	beq.n	8005b9a <_printf_i+0x3e>
 8005b96:	2a69      	cmp	r2, #105	; 0x69
 8005b98:	d1f7      	bne.n	8005b8a <_printf_i+0x2e>
 8005b9a:	6819      	ldr	r1, [r3, #0]
 8005b9c:	6825      	ldr	r5, [r4, #0]
 8005b9e:	1d0a      	adds	r2, r1, #4
 8005ba0:	0628      	lsls	r0, r5, #24
 8005ba2:	d529      	bpl.n	8005bf8 <_printf_i+0x9c>
 8005ba4:	6808      	ldr	r0, [r1, #0]
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	da03      	bge.n	8005bb4 <_printf_i+0x58>
 8005bac:	232d      	movs	r3, #45	; 0x2d
 8005bae:	9a02      	ldr	r2, [sp, #8]
 8005bb0:	4240      	negs	r0, r0
 8005bb2:	7013      	strb	r3, [r2, #0]
 8005bb4:	4e6b      	ldr	r6, [pc, #428]	; (8005d64 <_printf_i+0x208>)
 8005bb6:	270a      	movs	r7, #10
 8005bb8:	e04f      	b.n	8005c5a <_printf_i+0xfe>
 8005bba:	2a73      	cmp	r2, #115	; 0x73
 8005bbc:	d074      	beq.n	8005ca8 <_printf_i+0x14c>
 8005bbe:	d808      	bhi.n	8005bd2 <_printf_i+0x76>
 8005bc0:	2a6f      	cmp	r2, #111	; 0x6f
 8005bc2:	d01f      	beq.n	8005c04 <_printf_i+0xa8>
 8005bc4:	2a70      	cmp	r2, #112	; 0x70
 8005bc6:	d1e0      	bne.n	8005b8a <_printf_i+0x2e>
 8005bc8:	2220      	movs	r2, #32
 8005bca:	6809      	ldr	r1, [r1, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	6022      	str	r2, [r4, #0]
 8005bd0:	e003      	b.n	8005bda <_printf_i+0x7e>
 8005bd2:	2a75      	cmp	r2, #117	; 0x75
 8005bd4:	d016      	beq.n	8005c04 <_printf_i+0xa8>
 8005bd6:	2a78      	cmp	r2, #120	; 0x78
 8005bd8:	d1d7      	bne.n	8005b8a <_printf_i+0x2e>
 8005bda:	0022      	movs	r2, r4
 8005bdc:	2178      	movs	r1, #120	; 0x78
 8005bde:	3245      	adds	r2, #69	; 0x45
 8005be0:	7011      	strb	r1, [r2, #0]
 8005be2:	4e61      	ldr	r6, [pc, #388]	; (8005d68 <_printf_i+0x20c>)
 8005be4:	e022      	b.n	8005c2c <_printf_i+0xd0>
 8005be6:	0025      	movs	r5, r4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	3542      	adds	r5, #66	; 0x42
 8005bec:	1d11      	adds	r1, r2, #4
 8005bee:	6019      	str	r1, [r3, #0]
 8005bf0:	6813      	ldr	r3, [r2, #0]
 8005bf2:	702b      	strb	r3, [r5, #0]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e065      	b.n	8005cc4 <_printf_i+0x168>
 8005bf8:	6808      	ldr	r0, [r1, #0]
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	0669      	lsls	r1, r5, #25
 8005bfe:	d5d3      	bpl.n	8005ba8 <_printf_i+0x4c>
 8005c00:	b200      	sxth	r0, r0
 8005c02:	e7d1      	b.n	8005ba8 <_printf_i+0x4c>
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	6825      	ldr	r5, [r4, #0]
 8005c08:	1d08      	adds	r0, r1, #4
 8005c0a:	6018      	str	r0, [r3, #0]
 8005c0c:	6808      	ldr	r0, [r1, #0]
 8005c0e:	062e      	lsls	r6, r5, #24
 8005c10:	d505      	bpl.n	8005c1e <_printf_i+0xc2>
 8005c12:	4e54      	ldr	r6, [pc, #336]	; (8005d64 <_printf_i+0x208>)
 8005c14:	2708      	movs	r7, #8
 8005c16:	2a6f      	cmp	r2, #111	; 0x6f
 8005c18:	d01b      	beq.n	8005c52 <_printf_i+0xf6>
 8005c1a:	270a      	movs	r7, #10
 8005c1c:	e019      	b.n	8005c52 <_printf_i+0xf6>
 8005c1e:	066d      	lsls	r5, r5, #25
 8005c20:	d5f7      	bpl.n	8005c12 <_printf_i+0xb6>
 8005c22:	b280      	uxth	r0, r0
 8005c24:	e7f5      	b.n	8005c12 <_printf_i+0xb6>
 8005c26:	3145      	adds	r1, #69	; 0x45
 8005c28:	4e4e      	ldr	r6, [pc, #312]	; (8005d64 <_printf_i+0x208>)
 8005c2a:	700a      	strb	r2, [r1, #0]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	1d01      	adds	r1, r0, #4
 8005c32:	6800      	ldr	r0, [r0, #0]
 8005c34:	6019      	str	r1, [r3, #0]
 8005c36:	0615      	lsls	r5, r2, #24
 8005c38:	d521      	bpl.n	8005c7e <_printf_i+0x122>
 8005c3a:	07d3      	lsls	r3, r2, #31
 8005c3c:	d502      	bpl.n	8005c44 <_printf_i+0xe8>
 8005c3e:	2320      	movs	r3, #32
 8005c40:	431a      	orrs	r2, r3
 8005c42:	6022      	str	r2, [r4, #0]
 8005c44:	2710      	movs	r7, #16
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d103      	bne.n	8005c52 <_printf_i+0xf6>
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	439a      	bics	r2, r3
 8005c50:	6022      	str	r2, [r4, #0]
 8005c52:	0023      	movs	r3, r4
 8005c54:	2200      	movs	r2, #0
 8005c56:	3343      	adds	r3, #67	; 0x43
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	6863      	ldr	r3, [r4, #4]
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	db58      	blt.n	8005d14 <_printf_i+0x1b8>
 8005c62:	2204      	movs	r2, #4
 8005c64:	6821      	ldr	r1, [r4, #0]
 8005c66:	4391      	bics	r1, r2
 8005c68:	6021      	str	r1, [r4, #0]
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d154      	bne.n	8005d18 <_printf_i+0x1bc>
 8005c6e:	9d02      	ldr	r5, [sp, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05a      	beq.n	8005d2a <_printf_i+0x1ce>
 8005c74:	0025      	movs	r5, r4
 8005c76:	7833      	ldrb	r3, [r6, #0]
 8005c78:	3542      	adds	r5, #66	; 0x42
 8005c7a:	702b      	strb	r3, [r5, #0]
 8005c7c:	e055      	b.n	8005d2a <_printf_i+0x1ce>
 8005c7e:	0655      	lsls	r5, r2, #25
 8005c80:	d5db      	bpl.n	8005c3a <_printf_i+0xde>
 8005c82:	b280      	uxth	r0, r0
 8005c84:	e7d9      	b.n	8005c3a <_printf_i+0xde>
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	680d      	ldr	r5, [r1, #0]
 8005c8a:	1d10      	adds	r0, r2, #4
 8005c8c:	6949      	ldr	r1, [r1, #20]
 8005c8e:	6018      	str	r0, [r3, #0]
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	062e      	lsls	r6, r5, #24
 8005c94:	d501      	bpl.n	8005c9a <_printf_i+0x13e>
 8005c96:	6019      	str	r1, [r3, #0]
 8005c98:	e002      	b.n	8005ca0 <_printf_i+0x144>
 8005c9a:	066d      	lsls	r5, r5, #25
 8005c9c:	d5fb      	bpl.n	8005c96 <_printf_i+0x13a>
 8005c9e:	8019      	strh	r1, [r3, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9d02      	ldr	r5, [sp, #8]
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	e04f      	b.n	8005d48 <_printf_i+0x1ec>
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	1d11      	adds	r1, r2, #4
 8005cac:	6019      	str	r1, [r3, #0]
 8005cae:	6815      	ldr	r5, [r2, #0]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	0028      	movs	r0, r5
 8005cb6:	f002 ff13 	bl	8008ae0 <memchr>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d001      	beq.n	8005cc2 <_printf_i+0x166>
 8005cbe:	1b40      	subs	r0, r0, r5
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9a02      	ldr	r2, [sp, #8]
 8005cca:	7013      	strb	r3, [r2, #0]
 8005ccc:	e03c      	b.n	8005d48 <_printf_i+0x1ec>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	002a      	movs	r2, r5
 8005cd2:	9904      	ldr	r1, [sp, #16]
 8005cd4:	9803      	ldr	r0, [sp, #12]
 8005cd6:	9d05      	ldr	r5, [sp, #20]
 8005cd8:	47a8      	blx	r5
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	d03e      	beq.n	8005d5c <_printf_i+0x200>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	079b      	lsls	r3, r3, #30
 8005ce2:	d415      	bmi.n	8005d10 <_printf_i+0x1b4>
 8005ce4:	9b07      	ldr	r3, [sp, #28]
 8005ce6:	68e0      	ldr	r0, [r4, #12]
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	da39      	bge.n	8005d60 <_printf_i+0x204>
 8005cec:	0018      	movs	r0, r3
 8005cee:	e037      	b.n	8005d60 <_printf_i+0x204>
 8005cf0:	0022      	movs	r2, r4
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	3219      	adds	r2, #25
 8005cf6:	9904      	ldr	r1, [sp, #16]
 8005cf8:	9803      	ldr	r0, [sp, #12]
 8005cfa:	9e05      	ldr	r6, [sp, #20]
 8005cfc:	47b0      	blx	r6
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d02c      	beq.n	8005d5c <_printf_i+0x200>
 8005d02:	3501      	adds	r5, #1
 8005d04:	68e3      	ldr	r3, [r4, #12]
 8005d06:	9a07      	ldr	r2, [sp, #28]
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	42ab      	cmp	r3, r5
 8005d0c:	dcf0      	bgt.n	8005cf0 <_printf_i+0x194>
 8005d0e:	e7e9      	b.n	8005ce4 <_printf_i+0x188>
 8005d10:	2500      	movs	r5, #0
 8005d12:	e7f7      	b.n	8005d04 <_printf_i+0x1a8>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d0ad      	beq.n	8005c74 <_printf_i+0x118>
 8005d18:	9d02      	ldr	r5, [sp, #8]
 8005d1a:	0039      	movs	r1, r7
 8005d1c:	f7fa fa8c 	bl	8000238 <__aeabi_uidivmod>
 8005d20:	5c73      	ldrb	r3, [r6, r1]
 8005d22:	3d01      	subs	r5, #1
 8005d24:	702b      	strb	r3, [r5, #0]
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d1f7      	bne.n	8005d1a <_printf_i+0x1be>
 8005d2a:	2f08      	cmp	r7, #8
 8005d2c:	d109      	bne.n	8005d42 <_printf_i+0x1e6>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	07db      	lsls	r3, r3, #31
 8005d32:	d506      	bpl.n	8005d42 <_printf_i+0x1e6>
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	6922      	ldr	r2, [r4, #16]
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	dc02      	bgt.n	8005d42 <_printf_i+0x1e6>
 8005d3c:	2330      	movs	r3, #48	; 0x30
 8005d3e:	3d01      	subs	r5, #1
 8005d40:	702b      	strb	r3, [r5, #0]
 8005d42:	9b02      	ldr	r3, [sp, #8]
 8005d44:	1b5b      	subs	r3, r3, r5
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	9b05      	ldr	r3, [sp, #20]
 8005d4a:	aa07      	add	r2, sp, #28
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	0021      	movs	r1, r4
 8005d50:	9b04      	ldr	r3, [sp, #16]
 8005d52:	9803      	ldr	r0, [sp, #12]
 8005d54:	f7ff fe94 	bl	8005a80 <_printf_common>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d1b8      	bne.n	8005cce <_printf_i+0x172>
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	4240      	negs	r0, r0
 8005d60:	b009      	add	sp, #36	; 0x24
 8005d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d64:	08009d8a 	.word	0x08009d8a
 8005d68:	08009d9b 	.word	0x08009d9b

08005d6c <_scanf_float>:
 8005d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6e:	b08b      	sub	sp, #44	; 0x2c
 8005d70:	9002      	str	r0, [sp, #8]
 8005d72:	9200      	str	r2, [sp, #0]
 8005d74:	2000      	movs	r0, #0
 8005d76:	22ae      	movs	r2, #174	; 0xae
 8005d78:	9305      	str	r3, [sp, #20]
 8005d7a:	688b      	ldr	r3, [r1, #8]
 8005d7c:	000e      	movs	r6, r1
 8005d7e:	1e59      	subs	r1, r3, #1
 8005d80:	0052      	lsls	r2, r2, #1
 8005d82:	9004      	str	r0, [sp, #16]
 8005d84:	4291      	cmp	r1, r2
 8005d86:	d905      	bls.n	8005d94 <_scanf_float+0x28>
 8005d88:	3b5e      	subs	r3, #94	; 0x5e
 8005d8a:	3bff      	subs	r3, #255	; 0xff
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	235e      	movs	r3, #94	; 0x5e
 8005d90:	33ff      	adds	r3, #255	; 0xff
 8005d92:	60b3      	str	r3, [r6, #8]
 8005d94:	23f0      	movs	r3, #240	; 0xf0
 8005d96:	6832      	ldr	r2, [r6, #0]
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	6033      	str	r3, [r6, #0]
 8005d9e:	0033      	movs	r3, r6
 8005da0:	2700      	movs	r7, #0
 8005da2:	331c      	adds	r3, #28
 8005da4:	001d      	movs	r5, r3
 8005da6:	003c      	movs	r4, r7
 8005da8:	9303      	str	r3, [sp, #12]
 8005daa:	9708      	str	r7, [sp, #32]
 8005dac:	9707      	str	r7, [sp, #28]
 8005dae:	9701      	str	r7, [sp, #4]
 8005db0:	9706      	str	r7, [sp, #24]
 8005db2:	68b2      	ldr	r2, [r6, #8]
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d013      	beq.n	8005de0 <_scanf_float+0x74>
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b49      	cmp	r3, #73	; 0x49
 8005dc2:	d100      	bne.n	8005dc6 <_scanf_float+0x5a>
 8005dc4:	e07c      	b.n	8005ec0 <_scanf_float+0x154>
 8005dc6:	d854      	bhi.n	8005e72 <_scanf_float+0x106>
 8005dc8:	2b39      	cmp	r3, #57	; 0x39
 8005dca:	d847      	bhi.n	8005e5c <_scanf_float+0xf0>
 8005dcc:	2b31      	cmp	r3, #49	; 0x31
 8005dce:	d300      	bcc.n	8005dd2 <_scanf_float+0x66>
 8005dd0:	e094      	b.n	8005efc <_scanf_float+0x190>
 8005dd2:	2b2d      	cmp	r3, #45	; 0x2d
 8005dd4:	d100      	bne.n	8005dd8 <_scanf_float+0x6c>
 8005dd6:	e09c      	b.n	8005f12 <_scanf_float+0x1a6>
 8005dd8:	d817      	bhi.n	8005e0a <_scanf_float+0x9e>
 8005dda:	2b2b      	cmp	r3, #43	; 0x2b
 8005ddc:	d100      	bne.n	8005de0 <_scanf_float+0x74>
 8005dde:	e098      	b.n	8005f12 <_scanf_float+0x1a6>
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <_scanf_float+0x82>
 8005de6:	6832      	ldr	r2, [r6, #0]
 8005de8:	4b9b      	ldr	r3, [pc, #620]	; (8006058 <_scanf_float+0x2ec>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	3c01      	subs	r4, #1
 8005df0:	2c01      	cmp	r4, #1
 8005df2:	d900      	bls.n	8005df6 <_scanf_float+0x8a>
 8005df4:	e0ee      	b.n	8005fd4 <_scanf_float+0x268>
 8005df6:	24be      	movs	r4, #190	; 0xbe
 8005df8:	0064      	lsls	r4, r4, #1
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	429d      	cmp	r5, r3
 8005dfe:	d900      	bls.n	8005e02 <_scanf_float+0x96>
 8005e00:	e0de      	b.n	8005fc0 <_scanf_float+0x254>
 8005e02:	2701      	movs	r7, #1
 8005e04:	0038      	movs	r0, r7
 8005e06:	b00b      	add	sp, #44	; 0x2c
 8005e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e0c:	d100      	bne.n	8005e10 <_scanf_float+0xa4>
 8005e0e:	e0a2      	b.n	8005f56 <_scanf_float+0x1ea>
 8005e10:	2b30      	cmp	r3, #48	; 0x30
 8005e12:	d1e5      	bne.n	8005de0 <_scanf_float+0x74>
 8005e14:	6831      	ldr	r1, [r6, #0]
 8005e16:	05c8      	lsls	r0, r1, #23
 8005e18:	d570      	bpl.n	8005efc <_scanf_float+0x190>
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	4399      	bics	r1, r3
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	6031      	str	r1, [r6, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <_scanf_float+0xc8>
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	3201      	adds	r2, #1
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	60b2      	str	r2, [r6, #8]
 8005e34:	68b3      	ldr	r3, [r6, #8]
 8005e36:	9a00      	ldr	r2, [sp, #0]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	60b3      	str	r3, [r6, #8]
 8005e3c:	6933      	ldr	r3, [r6, #16]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6133      	str	r3, [r6, #16]
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	9309      	str	r3, [sp, #36]	; 0x24
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	6053      	str	r3, [r2, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dc00      	bgt.n	8005e52 <_scanf_float+0xe6>
 8005e50:	e0ac      	b.n	8005fac <_scanf_float+0x240>
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	3301      	adds	r3, #1
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e7aa      	b.n	8005db2 <_scanf_float+0x46>
 8005e5c:	2b45      	cmp	r3, #69	; 0x45
 8005e5e:	d100      	bne.n	8005e62 <_scanf_float+0xf6>
 8005e60:	e083      	b.n	8005f6a <_scanf_float+0x1fe>
 8005e62:	2b46      	cmp	r3, #70	; 0x46
 8005e64:	d06d      	beq.n	8005f42 <_scanf_float+0x1d6>
 8005e66:	2b41      	cmp	r3, #65	; 0x41
 8005e68:	d1ba      	bne.n	8005de0 <_scanf_float+0x74>
 8005e6a:	2c01      	cmp	r4, #1
 8005e6c:	d1b8      	bne.n	8005de0 <_scanf_float+0x74>
 8005e6e:	2402      	movs	r4, #2
 8005e70:	e04c      	b.n	8005f0c <_scanf_float+0x1a0>
 8005e72:	2b65      	cmp	r3, #101	; 0x65
 8005e74:	d079      	beq.n	8005f6a <_scanf_float+0x1fe>
 8005e76:	d81b      	bhi.n	8005eb0 <_scanf_float+0x144>
 8005e78:	2b54      	cmp	r3, #84	; 0x54
 8005e7a:	d067      	beq.n	8005f4c <_scanf_float+0x1e0>
 8005e7c:	d813      	bhi.n	8005ea6 <_scanf_float+0x13a>
 8005e7e:	2b4e      	cmp	r3, #78	; 0x4e
 8005e80:	d1ae      	bne.n	8005de0 <_scanf_float+0x74>
 8005e82:	2c00      	cmp	r4, #0
 8005e84:	d14c      	bne.n	8005f20 <_scanf_float+0x1b4>
 8005e86:	9a01      	ldr	r2, [sp, #4]
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d14b      	bne.n	8005f24 <_scanf_float+0x1b8>
 8005e8c:	21e0      	movs	r1, #224	; 0xe0
 8005e8e:	20e0      	movs	r0, #224	; 0xe0
 8005e90:	6832      	ldr	r2, [r6, #0]
 8005e92:	00c9      	lsls	r1, r1, #3
 8005e94:	4011      	ands	r1, r2
 8005e96:	00c0      	lsls	r0, r0, #3
 8005e98:	4281      	cmp	r1, r0
 8005e9a:	d143      	bne.n	8005f24 <_scanf_float+0x1b8>
 8005e9c:	496f      	ldr	r1, [pc, #444]	; (800605c <_scanf_float+0x2f0>)
 8005e9e:	3401      	adds	r4, #1
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	6032      	str	r2, [r6, #0]
 8005ea4:	e032      	b.n	8005f0c <_scanf_float+0x1a0>
 8005ea6:	2b59      	cmp	r3, #89	; 0x59
 8005ea8:	d023      	beq.n	8005ef2 <_scanf_float+0x186>
 8005eaa:	2b61      	cmp	r3, #97	; 0x61
 8005eac:	d0dd      	beq.n	8005e6a <_scanf_float+0xfe>
 8005eae:	e797      	b.n	8005de0 <_scanf_float+0x74>
 8005eb0:	2b6e      	cmp	r3, #110	; 0x6e
 8005eb2:	d0e6      	beq.n	8005e82 <_scanf_float+0x116>
 8005eb4:	d818      	bhi.n	8005ee8 <_scanf_float+0x17c>
 8005eb6:	2b66      	cmp	r3, #102	; 0x66
 8005eb8:	d043      	beq.n	8005f42 <_scanf_float+0x1d6>
 8005eba:	2b69      	cmp	r3, #105	; 0x69
 8005ebc:	d000      	beq.n	8005ec0 <_scanf_float+0x154>
 8005ebe:	e78f      	b.n	8005de0 <_scanf_float+0x74>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	d137      	bne.n	8005f34 <_scanf_float+0x1c8>
 8005ec4:	9a01      	ldr	r2, [sp, #4]
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	d000      	beq.n	8005ecc <_scanf_float+0x160>
 8005eca:	e78c      	b.n	8005de6 <_scanf_float+0x7a>
 8005ecc:	21e0      	movs	r1, #224	; 0xe0
 8005ece:	20e0      	movs	r0, #224	; 0xe0
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	00c9      	lsls	r1, r1, #3
 8005ed4:	4011      	ands	r1, r2
 8005ed6:	00c0      	lsls	r0, r0, #3
 8005ed8:	4281      	cmp	r1, r0
 8005eda:	d000      	beq.n	8005ede <_scanf_float+0x172>
 8005edc:	e787      	b.n	8005dee <_scanf_float+0x82>
 8005ede:	495f      	ldr	r1, [pc, #380]	; (800605c <_scanf_float+0x2f0>)
 8005ee0:	3701      	adds	r7, #1
 8005ee2:	400a      	ands	r2, r1
 8005ee4:	6032      	str	r2, [r6, #0]
 8005ee6:	e011      	b.n	8005f0c <_scanf_float+0x1a0>
 8005ee8:	2b74      	cmp	r3, #116	; 0x74
 8005eea:	d02f      	beq.n	8005f4c <_scanf_float+0x1e0>
 8005eec:	2b79      	cmp	r3, #121	; 0x79
 8005eee:	d000      	beq.n	8005ef2 <_scanf_float+0x186>
 8005ef0:	e776      	b.n	8005de0 <_scanf_float+0x74>
 8005ef2:	2f07      	cmp	r7, #7
 8005ef4:	d000      	beq.n	8005ef8 <_scanf_float+0x18c>
 8005ef6:	e773      	b.n	8005de0 <_scanf_float+0x74>
 8005ef8:	2708      	movs	r7, #8
 8005efa:	e007      	b.n	8005f0c <_scanf_float+0x1a0>
 8005efc:	19e2      	adds	r2, r4, r7
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d000      	beq.n	8005f04 <_scanf_float+0x198>
 8005f02:	e76d      	b.n	8005de0 <_scanf_float+0x74>
 8005f04:	4a56      	ldr	r2, [pc, #344]	; (8006060 <_scanf_float+0x2f4>)
 8005f06:	6831      	ldr	r1, [r6, #0]
 8005f08:	400a      	ands	r2, r1
 8005f0a:	6032      	str	r2, [r6, #0]
 8005f0c:	702b      	strb	r3, [r5, #0]
 8005f0e:	3501      	adds	r5, #1
 8005f10:	e790      	b.n	8005e34 <_scanf_float+0xc8>
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	6832      	ldr	r2, [r6, #0]
 8005f16:	420a      	tst	r2, r1
 8005f18:	d100      	bne.n	8005f1c <_scanf_float+0x1b0>
 8005f1a:	e761      	b.n	8005de0 <_scanf_float+0x74>
 8005f1c:	438a      	bics	r2, r1
 8005f1e:	e7f4      	b.n	8005f0a <_scanf_float+0x19e>
 8005f20:	2c02      	cmp	r4, #2
 8005f22:	d041      	beq.n	8005fa8 <_scanf_float+0x23c>
 8005f24:	2f01      	cmp	r7, #1
 8005f26:	d002      	beq.n	8005f2e <_scanf_float+0x1c2>
 8005f28:	2f04      	cmp	r7, #4
 8005f2a:	d000      	beq.n	8005f2e <_scanf_float+0x1c2>
 8005f2c:	e758      	b.n	8005de0 <_scanf_float+0x74>
 8005f2e:	3701      	adds	r7, #1
 8005f30:	b2ff      	uxtb	r7, r7
 8005f32:	e7eb      	b.n	8005f0c <_scanf_float+0x1a0>
 8005f34:	2102      	movs	r1, #2
 8005f36:	1efa      	subs	r2, r7, #3
 8005f38:	438a      	bics	r2, r1
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	d0f6      	beq.n	8005f2e <_scanf_float+0x1c2>
 8005f40:	e74e      	b.n	8005de0 <_scanf_float+0x74>
 8005f42:	2f02      	cmp	r7, #2
 8005f44:	d000      	beq.n	8005f48 <_scanf_float+0x1dc>
 8005f46:	e74b      	b.n	8005de0 <_scanf_float+0x74>
 8005f48:	2703      	movs	r7, #3
 8005f4a:	e7df      	b.n	8005f0c <_scanf_float+0x1a0>
 8005f4c:	2f06      	cmp	r7, #6
 8005f4e:	d000      	beq.n	8005f52 <_scanf_float+0x1e6>
 8005f50:	e746      	b.n	8005de0 <_scanf_float+0x74>
 8005f52:	2707      	movs	r7, #7
 8005f54:	e7da      	b.n	8005f0c <_scanf_float+0x1a0>
 8005f56:	6832      	ldr	r2, [r6, #0]
 8005f58:	0591      	lsls	r1, r2, #22
 8005f5a:	d400      	bmi.n	8005f5e <_scanf_float+0x1f2>
 8005f5c:	e740      	b.n	8005de0 <_scanf_float+0x74>
 8005f5e:	4941      	ldr	r1, [pc, #260]	; (8006064 <_scanf_float+0x2f8>)
 8005f60:	400a      	ands	r2, r1
 8005f62:	6032      	str	r2, [r6, #0]
 8005f64:	9a01      	ldr	r2, [sp, #4]
 8005f66:	9206      	str	r2, [sp, #24]
 8005f68:	e7d0      	b.n	8005f0c <_scanf_float+0x1a0>
 8005f6a:	21a0      	movs	r1, #160	; 0xa0
 8005f6c:	2080      	movs	r0, #128	; 0x80
 8005f6e:	6832      	ldr	r2, [r6, #0]
 8005f70:	00c9      	lsls	r1, r1, #3
 8005f72:	4011      	ands	r1, r2
 8005f74:	00c0      	lsls	r0, r0, #3
 8005f76:	4281      	cmp	r1, r0
 8005f78:	d006      	beq.n	8005f88 <_scanf_float+0x21c>
 8005f7a:	4202      	tst	r2, r0
 8005f7c:	d100      	bne.n	8005f80 <_scanf_float+0x214>
 8005f7e:	e72f      	b.n	8005de0 <_scanf_float+0x74>
 8005f80:	9901      	ldr	r1, [sp, #4]
 8005f82:	2900      	cmp	r1, #0
 8005f84:	d100      	bne.n	8005f88 <_scanf_float+0x21c>
 8005f86:	e732      	b.n	8005dee <_scanf_float+0x82>
 8005f88:	0591      	lsls	r1, r2, #22
 8005f8a:	d404      	bmi.n	8005f96 <_scanf_float+0x22a>
 8005f8c:	9901      	ldr	r1, [sp, #4]
 8005f8e:	9806      	ldr	r0, [sp, #24]
 8005f90:	9508      	str	r5, [sp, #32]
 8005f92:	1a09      	subs	r1, r1, r0
 8005f94:	9107      	str	r1, [sp, #28]
 8005f96:	4931      	ldr	r1, [pc, #196]	; (800605c <_scanf_float+0x2f0>)
 8005f98:	400a      	ands	r2, r1
 8005f9a:	21c0      	movs	r1, #192	; 0xc0
 8005f9c:	0049      	lsls	r1, r1, #1
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	6032      	str	r2, [r6, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	9201      	str	r2, [sp, #4]
 8005fa6:	e7b1      	b.n	8005f0c <_scanf_float+0x1a0>
 8005fa8:	2403      	movs	r4, #3
 8005faa:	e7af      	b.n	8005f0c <_scanf_float+0x1a0>
 8005fac:	23c0      	movs	r3, #192	; 0xc0
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	58f3      	ldr	r3, [r6, r3]
 8005fb2:	9900      	ldr	r1, [sp, #0]
 8005fb4:	9802      	ldr	r0, [sp, #8]
 8005fb6:	4798      	blx	r3
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d100      	bne.n	8005fbe <_scanf_float+0x252>
 8005fbc:	e6f9      	b.n	8005db2 <_scanf_float+0x46>
 8005fbe:	e70f      	b.n	8005de0 <_scanf_float+0x74>
 8005fc0:	3d01      	subs	r5, #1
 8005fc2:	5933      	ldr	r3, [r6, r4]
 8005fc4:	7829      	ldrb	r1, [r5, #0]
 8005fc6:	9a00      	ldr	r2, [sp, #0]
 8005fc8:	9802      	ldr	r0, [sp, #8]
 8005fca:	4798      	blx	r3
 8005fcc:	6933      	ldr	r3, [r6, #16]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	6133      	str	r3, [r6, #16]
 8005fd2:	e712      	b.n	8005dfa <_scanf_float+0x8e>
 8005fd4:	1e7b      	subs	r3, r7, #1
 8005fd6:	2b06      	cmp	r3, #6
 8005fd8:	d826      	bhi.n	8006028 <_scanf_float+0x2bc>
 8005fda:	2f02      	cmp	r7, #2
 8005fdc:	d839      	bhi.n	8006052 <_scanf_float+0x2e6>
 8005fde:	24be      	movs	r4, #190	; 0xbe
 8005fe0:	0064      	lsls	r4, r4, #1
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	429d      	cmp	r5, r3
 8005fe6:	d800      	bhi.n	8005fea <_scanf_float+0x27e>
 8005fe8:	e70b      	b.n	8005e02 <_scanf_float+0x96>
 8005fea:	3d01      	subs	r5, #1
 8005fec:	5933      	ldr	r3, [r6, r4]
 8005fee:	7829      	ldrb	r1, [r5, #0]
 8005ff0:	9a00      	ldr	r2, [sp, #0]
 8005ff2:	9802      	ldr	r0, [sp, #8]
 8005ff4:	4798      	blx	r3
 8005ff6:	6933      	ldr	r3, [r6, #16]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	6133      	str	r3, [r6, #16]
 8005ffc:	e7f1      	b.n	8005fe2 <_scanf_float+0x276>
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	9a00      	ldr	r2, [sp, #0]
 8006002:	3b01      	subs	r3, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	7819      	ldrb	r1, [r3, #0]
 8006008:	23be      	movs	r3, #190	; 0xbe
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	58f3      	ldr	r3, [r6, r3]
 800600e:	9802      	ldr	r0, [sp, #8]
 8006010:	9309      	str	r3, [sp, #36]	; 0x24
 8006012:	4798      	blx	r3
 8006014:	6933      	ldr	r3, [r6, #16]
 8006016:	3b01      	subs	r3, #1
 8006018:	6133      	str	r3, [r6, #16]
 800601a:	3c01      	subs	r4, #1
 800601c:	b2e4      	uxtb	r4, r4
 800601e:	2c02      	cmp	r4, #2
 8006020:	d1ed      	bne.n	8005ffe <_scanf_float+0x292>
 8006022:	3f03      	subs	r7, #3
 8006024:	b2ff      	uxtb	r7, r7
 8006026:	1bed      	subs	r5, r5, r7
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	05da      	lsls	r2, r3, #23
 800602c:	d537      	bpl.n	800609e <_scanf_float+0x332>
 800602e:	055b      	lsls	r3, r3, #21
 8006030:	d51a      	bpl.n	8006068 <_scanf_float+0x2fc>
 8006032:	24be      	movs	r4, #190	; 0xbe
 8006034:	0064      	lsls	r4, r4, #1
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	429d      	cmp	r5, r3
 800603a:	d800      	bhi.n	800603e <_scanf_float+0x2d2>
 800603c:	e6e1      	b.n	8005e02 <_scanf_float+0x96>
 800603e:	3d01      	subs	r5, #1
 8006040:	5933      	ldr	r3, [r6, r4]
 8006042:	7829      	ldrb	r1, [r5, #0]
 8006044:	9a00      	ldr	r2, [sp, #0]
 8006046:	9802      	ldr	r0, [sp, #8]
 8006048:	4798      	blx	r3
 800604a:	6933      	ldr	r3, [r6, #16]
 800604c:	3b01      	subs	r3, #1
 800604e:	6133      	str	r3, [r6, #16]
 8006050:	e7f1      	b.n	8006036 <_scanf_float+0x2ca>
 8006052:	003c      	movs	r4, r7
 8006054:	9504      	str	r5, [sp, #16]
 8006056:	e7e0      	b.n	800601a <_scanf_float+0x2ae>
 8006058:	fffffeff 	.word	0xfffffeff
 800605c:	fffff87f 	.word	0xfffff87f
 8006060:	fffffe7f 	.word	0xfffffe7f
 8006064:	fffffd7f 	.word	0xfffffd7f
 8006068:	6933      	ldr	r3, [r6, #16]
 800606a:	1e6c      	subs	r4, r5, #1
 800606c:	7821      	ldrb	r1, [r4, #0]
 800606e:	3b01      	subs	r3, #1
 8006070:	6133      	str	r3, [r6, #16]
 8006072:	2965      	cmp	r1, #101	; 0x65
 8006074:	d00c      	beq.n	8006090 <_scanf_float+0x324>
 8006076:	2945      	cmp	r1, #69	; 0x45
 8006078:	d00a      	beq.n	8006090 <_scanf_float+0x324>
 800607a:	23be      	movs	r3, #190	; 0xbe
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	58f3      	ldr	r3, [r6, r3]
 8006080:	9a00      	ldr	r2, [sp, #0]
 8006082:	9802      	ldr	r0, [sp, #8]
 8006084:	4798      	blx	r3
 8006086:	6933      	ldr	r3, [r6, #16]
 8006088:	1eac      	subs	r4, r5, #2
 800608a:	3b01      	subs	r3, #1
 800608c:	7821      	ldrb	r1, [r4, #0]
 800608e:	6133      	str	r3, [r6, #16]
 8006090:	23be      	movs	r3, #190	; 0xbe
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	58f3      	ldr	r3, [r6, r3]
 8006096:	9a00      	ldr	r2, [sp, #0]
 8006098:	9802      	ldr	r0, [sp, #8]
 800609a:	4798      	blx	r3
 800609c:	0025      	movs	r5, r4
 800609e:	2710      	movs	r7, #16
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	401f      	ands	r7, r3
 80060a4:	d15b      	bne.n	800615e <_scanf_float+0x3f2>
 80060a6:	23c0      	movs	r3, #192	; 0xc0
 80060a8:	702f      	strb	r7, [r5, #0]
 80060aa:	6832      	ldr	r2, [r6, #0]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4013      	ands	r3, r2
 80060b0:	2280      	movs	r2, #128	; 0x80
 80060b2:	00d2      	lsls	r2, r2, #3
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d11b      	bne.n	80060f0 <_scanf_float+0x384>
 80060b8:	9a06      	ldr	r2, [sp, #24]
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	425a      	negs	r2, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d122      	bne.n	800610a <_scanf_float+0x39e>
 80060c4:	2200      	movs	r2, #0
 80060c6:	9903      	ldr	r1, [sp, #12]
 80060c8:	9802      	ldr	r0, [sp, #8]
 80060ca:	f000 ffe1 	bl	8007090 <_strtod_r>
 80060ce:	9b05      	ldr	r3, [sp, #20]
 80060d0:	0004      	movs	r4, r0
 80060d2:	6830      	ldr	r0, [r6, #0]
 80060d4:	000d      	movs	r5, r1
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	0782      	lsls	r2, r0, #30
 80060da:	d523      	bpl.n	8006124 <_scanf_float+0x3b8>
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	9905      	ldr	r1, [sp, #20]
 80060e0:	600a      	str	r2, [r1, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	601c      	str	r4, [r3, #0]
 80060e6:	605d      	str	r5, [r3, #4]
 80060e8:	68f3      	ldr	r3, [r6, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60f3      	str	r3, [r6, #12]
 80060ee:	e689      	b.n	8005e04 <_scanf_float+0x98>
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0e6      	beq.n	80060c4 <_scanf_float+0x358>
 80060f6:	9b08      	ldr	r3, [sp, #32]
 80060f8:	003a      	movs	r2, r7
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	9802      	ldr	r0, [sp, #8]
 80060fe:	230a      	movs	r3, #10
 8006100:	f001 f856 	bl	80071b0 <_strtol_r>
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	9d08      	ldr	r5, [sp, #32]
 8006108:	1ac2      	subs	r2, r0, r3
 800610a:	0033      	movs	r3, r6
 800610c:	3370      	adds	r3, #112	; 0x70
 800610e:	33ff      	adds	r3, #255	; 0xff
 8006110:	429d      	cmp	r5, r3
 8006112:	d302      	bcc.n	800611a <_scanf_float+0x3ae>
 8006114:	0035      	movs	r5, r6
 8006116:	356f      	adds	r5, #111	; 0x6f
 8006118:	35ff      	adds	r5, #255	; 0xff
 800611a:	4912      	ldr	r1, [pc, #72]	; (8006164 <_scanf_float+0x3f8>)
 800611c:	0028      	movs	r0, r5
 800611e:	f000 f957 	bl	80063d0 <siprintf>
 8006122:	e7cf      	b.n	80060c4 <_scanf_float+0x358>
 8006124:	2104      	movs	r1, #4
 8006126:	4008      	ands	r0, r1
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	9001      	str	r0, [sp, #4]
 800612c:	2800      	cmp	r0, #0
 800612e:	d1d6      	bne.n	80060de <_scanf_float+0x372>
 8006130:	9905      	ldr	r1, [sp, #20]
 8006132:	0020      	movs	r0, r4
 8006134:	600a      	str	r2, [r1, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	0022      	movs	r2, r4
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	0029      	movs	r1, r5
 800613e:	002b      	movs	r3, r5
 8006140:	f7fb fea6 	bl	8001e90 <__aeabi_dcmpun>
 8006144:	2800      	cmp	r0, #0
 8006146:	d005      	beq.n	8006154 <_scanf_float+0x3e8>
 8006148:	9801      	ldr	r0, [sp, #4]
 800614a:	f000 f93d 	bl	80063c8 <nanf>
 800614e:	9b00      	ldr	r3, [sp, #0]
 8006150:	6018      	str	r0, [r3, #0]
 8006152:	e7c9      	b.n	80060e8 <_scanf_float+0x37c>
 8006154:	0020      	movs	r0, r4
 8006156:	0029      	movs	r1, r5
 8006158:	f7fb ff58 	bl	800200c <__aeabi_d2f>
 800615c:	e7f7      	b.n	800614e <_scanf_float+0x3e2>
 800615e:	2700      	movs	r7, #0
 8006160:	e650      	b.n	8005e04 <_scanf_float+0x98>
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	08009dac 	.word	0x08009dac

08006168 <iprintf>:
 8006168:	b40f      	push	{r0, r1, r2, r3}
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <iprintf+0x30>)
 800616c:	b513      	push	{r0, r1, r4, lr}
 800616e:	681c      	ldr	r4, [r3, #0]
 8006170:	2c00      	cmp	r4, #0
 8006172:	d005      	beq.n	8006180 <iprintf+0x18>
 8006174:	69a3      	ldr	r3, [r4, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <iprintf+0x18>
 800617a:	0020      	movs	r0, r4
 800617c:	f002 f852 	bl	8008224 <__sinit>
 8006180:	ab05      	add	r3, sp, #20
 8006182:	9a04      	ldr	r2, [sp, #16]
 8006184:	68a1      	ldr	r1, [r4, #8]
 8006186:	0020      	movs	r0, r4
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	f003 faf1 	bl	8009770 <_vfiprintf_r>
 800618e:	bc16      	pop	{r1, r2, r4}
 8006190:	bc08      	pop	{r3}
 8006192:	b004      	add	sp, #16
 8006194:	4718      	bx	r3
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	2000000c 	.word	0x2000000c

0800619c <_puts_r>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	0005      	movs	r5, r0
 80061a0:	000e      	movs	r6, r1
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d004      	beq.n	80061b0 <_puts_r+0x14>
 80061a6:	6983      	ldr	r3, [r0, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <_puts_r+0x14>
 80061ac:	f002 f83a 	bl	8008224 <__sinit>
 80061b0:	69ab      	ldr	r3, [r5, #24]
 80061b2:	68ac      	ldr	r4, [r5, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <_puts_r+0x22>
 80061b8:	0028      	movs	r0, r5
 80061ba:	f002 f833 	bl	8008224 <__sinit>
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <_puts_r+0xb4>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	d10f      	bne.n	80061e4 <_puts_r+0x48>
 80061c4:	686c      	ldr	r4, [r5, #4]
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	071b      	lsls	r3, r3, #28
 80061ca:	d502      	bpl.n	80061d2 <_puts_r+0x36>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d11f      	bne.n	8006212 <_puts_r+0x76>
 80061d2:	0021      	movs	r1, r4
 80061d4:	0028      	movs	r0, r5
 80061d6:	f001 f851 	bl	800727c <__swsetup_r>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d019      	beq.n	8006212 <_puts_r+0x76>
 80061de:	2001      	movs	r0, #1
 80061e0:	4240      	negs	r0, r0
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <_puts_r+0xb8>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d101      	bne.n	80061ee <_puts_r+0x52>
 80061ea:	68ac      	ldr	r4, [r5, #8]
 80061ec:	e7eb      	b.n	80061c6 <_puts_r+0x2a>
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <_puts_r+0xbc>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	d1e8      	bne.n	80061c6 <_puts_r+0x2a>
 80061f4:	68ec      	ldr	r4, [r5, #12]
 80061f6:	e7e6      	b.n	80061c6 <_puts_r+0x2a>
 80061f8:	3601      	adds	r6, #1
 80061fa:	60a3      	str	r3, [r4, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	da04      	bge.n	800620a <_puts_r+0x6e>
 8006200:	69a2      	ldr	r2, [r4, #24]
 8006202:	429a      	cmp	r2, r3
 8006204:	dc16      	bgt.n	8006234 <_puts_r+0x98>
 8006206:	290a      	cmp	r1, #10
 8006208:	d014      	beq.n	8006234 <_puts_r+0x98>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	7019      	strb	r1, [r3, #0]
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	7831      	ldrb	r1, [r6, #0]
 8006216:	3b01      	subs	r3, #1
 8006218:	2900      	cmp	r1, #0
 800621a:	d1ed      	bne.n	80061f8 <_puts_r+0x5c>
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da0f      	bge.n	8006242 <_puts_r+0xa6>
 8006222:	0022      	movs	r2, r4
 8006224:	310a      	adds	r1, #10
 8006226:	0028      	movs	r0, r5
 8006228:	f000 ffd2 	bl	80071d0 <__swbuf_r>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d0d6      	beq.n	80061de <_puts_r+0x42>
 8006230:	200a      	movs	r0, #10
 8006232:	e7d6      	b.n	80061e2 <_puts_r+0x46>
 8006234:	0022      	movs	r2, r4
 8006236:	0028      	movs	r0, r5
 8006238:	f000 ffca 	bl	80071d0 <__swbuf_r>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d1e8      	bne.n	8006212 <_puts_r+0x76>
 8006240:	e7cd      	b.n	80061de <_puts_r+0x42>
 8006242:	200a      	movs	r0, #10
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	6022      	str	r2, [r4, #0]
 800624a:	7018      	strb	r0, [r3, #0]
 800624c:	e7c9      	b.n	80061e2 <_puts_r+0x46>
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	08009e38 	.word	0x08009e38
 8006254:	08009e58 	.word	0x08009e58
 8006258:	08009e18 	.word	0x08009e18

0800625c <puts>:
 800625c:	b510      	push	{r4, lr}
 800625e:	4b03      	ldr	r3, [pc, #12]	; (800626c <puts+0x10>)
 8006260:	0001      	movs	r1, r0
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	f7ff ff9a 	bl	800619c <_puts_r>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	2000000c 	.word	0x2000000c

08006270 <setvbuf>:
 8006270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006272:	001d      	movs	r5, r3
 8006274:	4b4f      	ldr	r3, [pc, #316]	; (80063b4 <setvbuf+0x144>)
 8006276:	b085      	sub	sp, #20
 8006278:	681e      	ldr	r6, [r3, #0]
 800627a:	0004      	movs	r4, r0
 800627c:	000f      	movs	r7, r1
 800627e:	9200      	str	r2, [sp, #0]
 8006280:	2e00      	cmp	r6, #0
 8006282:	d005      	beq.n	8006290 <setvbuf+0x20>
 8006284:	69b3      	ldr	r3, [r6, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <setvbuf+0x20>
 800628a:	0030      	movs	r0, r6
 800628c:	f001 ffca 	bl	8008224 <__sinit>
 8006290:	4b49      	ldr	r3, [pc, #292]	; (80063b8 <setvbuf+0x148>)
 8006292:	429c      	cmp	r4, r3
 8006294:	d150      	bne.n	8006338 <setvbuf+0xc8>
 8006296:	6874      	ldr	r4, [r6, #4]
 8006298:	9b00      	ldr	r3, [sp, #0]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d005      	beq.n	80062aa <setvbuf+0x3a>
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d900      	bls.n	80062a4 <setvbuf+0x34>
 80062a2:	e084      	b.n	80063ae <setvbuf+0x13e>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	da00      	bge.n	80062aa <setvbuf+0x3a>
 80062a8:	e081      	b.n	80063ae <setvbuf+0x13e>
 80062aa:	0021      	movs	r1, r4
 80062ac:	0030      	movs	r0, r6
 80062ae:	f001 ff4b 	bl	8008148 <_fflush_r>
 80062b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062b4:	2900      	cmp	r1, #0
 80062b6:	d008      	beq.n	80062ca <setvbuf+0x5a>
 80062b8:	0023      	movs	r3, r4
 80062ba:	3344      	adds	r3, #68	; 0x44
 80062bc:	4299      	cmp	r1, r3
 80062be:	d002      	beq.n	80062c6 <setvbuf+0x56>
 80062c0:	0030      	movs	r0, r6
 80062c2:	f003 f825 	bl	8009310 <_free_r>
 80062c6:	2300      	movs	r3, #0
 80062c8:	6363      	str	r3, [r4, #52]	; 0x34
 80062ca:	2300      	movs	r3, #0
 80062cc:	61a3      	str	r3, [r4, #24]
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	061b      	lsls	r3, r3, #24
 80062d4:	d503      	bpl.n	80062de <setvbuf+0x6e>
 80062d6:	6921      	ldr	r1, [r4, #16]
 80062d8:	0030      	movs	r0, r6
 80062da:	f003 f819 	bl	8009310 <_free_r>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	4a36      	ldr	r2, [pc, #216]	; (80063bc <setvbuf+0x14c>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	9b00      	ldr	r3, [sp, #0]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d05a      	beq.n	80063a2 <setvbuf+0x132>
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	aa02      	add	r2, sp, #8
 80062f0:	0021      	movs	r1, r4
 80062f2:	0030      	movs	r0, r6
 80062f4:	f002 fb6c 	bl	80089d0 <__swhatbuf_r>
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	4318      	orrs	r0, r3
 80062fc:	81a0      	strh	r0, [r4, #12]
 80062fe:	2d00      	cmp	r5, #0
 8006300:	d124      	bne.n	800634c <setvbuf+0xdc>
 8006302:	9d02      	ldr	r5, [sp, #8]
 8006304:	0028      	movs	r0, r5
 8006306:	f002 fbcf 	bl	8008aa8 <malloc>
 800630a:	9501      	str	r5, [sp, #4]
 800630c:	1e07      	subs	r7, r0, #0
 800630e:	d142      	bne.n	8006396 <setvbuf+0x126>
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	42ab      	cmp	r3, r5
 8006316:	d139      	bne.n	800638c <setvbuf+0x11c>
 8006318:	2001      	movs	r0, #1
 800631a:	4240      	negs	r0, r0
 800631c:	2302      	movs	r3, #2
 800631e:	89a2      	ldrh	r2, [r4, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	2300      	movs	r3, #0
 8006326:	60a3      	str	r3, [r4, #8]
 8006328:	0023      	movs	r3, r4
 800632a:	3347      	adds	r3, #71	; 0x47
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	2301      	movs	r3, #1
 8006332:	6163      	str	r3, [r4, #20]
 8006334:	b005      	add	sp, #20
 8006336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <setvbuf+0x150>)
 800633a:	429c      	cmp	r4, r3
 800633c:	d101      	bne.n	8006342 <setvbuf+0xd2>
 800633e:	68b4      	ldr	r4, [r6, #8]
 8006340:	e7aa      	b.n	8006298 <setvbuf+0x28>
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <setvbuf+0x154>)
 8006344:	429c      	cmp	r4, r3
 8006346:	d1a7      	bne.n	8006298 <setvbuf+0x28>
 8006348:	68f4      	ldr	r4, [r6, #12]
 800634a:	e7a5      	b.n	8006298 <setvbuf+0x28>
 800634c:	2f00      	cmp	r7, #0
 800634e:	d0d9      	beq.n	8006304 <setvbuf+0x94>
 8006350:	69b3      	ldr	r3, [r6, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <setvbuf+0xec>
 8006356:	0030      	movs	r0, r6
 8006358:	f001 ff64 	bl	8008224 <__sinit>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d103      	bne.n	800636a <setvbuf+0xfa>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	9a00      	ldr	r2, [sp, #0]
 8006366:	431a      	orrs	r2, r3
 8006368:	81a2      	strh	r2, [r4, #12]
 800636a:	2008      	movs	r0, #8
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	6027      	str	r7, [r4, #0]
 8006370:	6127      	str	r7, [r4, #16]
 8006372:	6165      	str	r5, [r4, #20]
 8006374:	4018      	ands	r0, r3
 8006376:	d018      	beq.n	80063aa <setvbuf+0x13a>
 8006378:	2001      	movs	r0, #1
 800637a:	4018      	ands	r0, r3
 800637c:	2300      	movs	r3, #0
 800637e:	4298      	cmp	r0, r3
 8006380:	d011      	beq.n	80063a6 <setvbuf+0x136>
 8006382:	426d      	negs	r5, r5
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	61a5      	str	r5, [r4, #24]
 8006388:	0018      	movs	r0, r3
 800638a:	e7d3      	b.n	8006334 <setvbuf+0xc4>
 800638c:	9801      	ldr	r0, [sp, #4]
 800638e:	f002 fb8b 	bl	8008aa8 <malloc>
 8006392:	1e07      	subs	r7, r0, #0
 8006394:	d0c0      	beq.n	8006318 <setvbuf+0xa8>
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	89a2      	ldrh	r2, [r4, #12]
 800639a:	9d01      	ldr	r5, [sp, #4]
 800639c:	4313      	orrs	r3, r2
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	e7d6      	b.n	8006350 <setvbuf+0xe0>
 80063a2:	2000      	movs	r0, #0
 80063a4:	e7ba      	b.n	800631c <setvbuf+0xac>
 80063a6:	60a5      	str	r5, [r4, #8]
 80063a8:	e7c4      	b.n	8006334 <setvbuf+0xc4>
 80063aa:	60a0      	str	r0, [r4, #8]
 80063ac:	e7c2      	b.n	8006334 <setvbuf+0xc4>
 80063ae:	2001      	movs	r0, #1
 80063b0:	4240      	negs	r0, r0
 80063b2:	e7bf      	b.n	8006334 <setvbuf+0xc4>
 80063b4:	2000000c 	.word	0x2000000c
 80063b8:	08009e38 	.word	0x08009e38
 80063bc:	fffff35c 	.word	0xfffff35c
 80063c0:	08009e58 	.word	0x08009e58
 80063c4:	08009e18 	.word	0x08009e18

080063c8 <nanf>:
 80063c8:	4800      	ldr	r0, [pc, #0]	; (80063cc <nanf+0x4>)
 80063ca:	4770      	bx	lr
 80063cc:	7fc00000 	.word	0x7fc00000

080063d0 <siprintf>:
 80063d0:	b40e      	push	{r1, r2, r3}
 80063d2:	b500      	push	{lr}
 80063d4:	490b      	ldr	r1, [pc, #44]	; (8006404 <siprintf+0x34>)
 80063d6:	b09c      	sub	sp, #112	; 0x70
 80063d8:	ab1d      	add	r3, sp, #116	; 0x74
 80063da:	9002      	str	r0, [sp, #8]
 80063dc:	9006      	str	r0, [sp, #24]
 80063de:	9107      	str	r1, [sp, #28]
 80063e0:	9104      	str	r1, [sp, #16]
 80063e2:	4809      	ldr	r0, [pc, #36]	; (8006408 <siprintf+0x38>)
 80063e4:	4909      	ldr	r1, [pc, #36]	; (800640c <siprintf+0x3c>)
 80063e6:	cb04      	ldmia	r3!, {r2}
 80063e8:	9105      	str	r1, [sp, #20]
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	a902      	add	r1, sp, #8
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	f003 f898 	bl	8009524 <_svfiprintf_r>
 80063f4:	2300      	movs	r3, #0
 80063f6:	9a02      	ldr	r2, [sp, #8]
 80063f8:	7013      	strb	r3, [r2, #0]
 80063fa:	b01c      	add	sp, #112	; 0x70
 80063fc:	bc08      	pop	{r3}
 80063fe:	b003      	add	sp, #12
 8006400:	4718      	bx	r3
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	7fffffff 	.word	0x7fffffff
 8006408:	2000000c 	.word	0x2000000c
 800640c:	ffff0208 	.word	0xffff0208

08006410 <sulp>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	0016      	movs	r6, r2
 8006414:	000d      	movs	r5, r1
 8006416:	f002 fe47 	bl	80090a8 <__ulp>
 800641a:	2e00      	cmp	r6, #0
 800641c:	d00d      	beq.n	800643a <sulp+0x2a>
 800641e:	236b      	movs	r3, #107	; 0x6b
 8006420:	006a      	lsls	r2, r5, #1
 8006422:	0d52      	lsrs	r2, r2, #21
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd07      	ble.n	800643a <sulp+0x2a>
 800642a:	2400      	movs	r4, #0
 800642c:	4a03      	ldr	r2, [pc, #12]	; (800643c <sulp+0x2c>)
 800642e:	051b      	lsls	r3, r3, #20
 8006430:	189d      	adds	r5, r3, r2
 8006432:	002b      	movs	r3, r5
 8006434:	0022      	movs	r2, r4
 8006436:	f7fa ff71 	bl	800131c <__aeabi_dmul>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	3ff00000 	.word	0x3ff00000

08006440 <_strtod_l>:
 8006440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006442:	b0a7      	sub	sp, #156	; 0x9c
 8006444:	9307      	str	r3, [sp, #28]
 8006446:	2300      	movs	r3, #0
 8006448:	9004      	str	r0, [sp, #16]
 800644a:	9807      	ldr	r0, [sp, #28]
 800644c:	9322      	str	r3, [sp, #136]	; 0x88
 800644e:	9106      	str	r1, [sp, #24]
 8006450:	921d      	str	r2, [sp, #116]	; 0x74
 8006452:	f002 faae 	bl	80089b2 <__localeconv_l>
 8006456:	0005      	movs	r5, r0
 8006458:	6800      	ldr	r0, [r0, #0]
 800645a:	f7f9 fe55 	bl	8000108 <strlen>
 800645e:	2600      	movs	r6, #0
 8006460:	2700      	movs	r7, #0
 8006462:	9b06      	ldr	r3, [sp, #24]
 8006464:	9005      	str	r0, [sp, #20]
 8006466:	9321      	str	r3, [sp, #132]	; 0x84
 8006468:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	2a0d      	cmp	r2, #13
 800646e:	d839      	bhi.n	80064e4 <_strtod_l+0xa4>
 8006470:	2a09      	cmp	r2, #9
 8006472:	d23d      	bcs.n	80064f0 <_strtod_l+0xb0>
 8006474:	2a00      	cmp	r2, #0
 8006476:	d044      	beq.n	8006502 <_strtod_l+0xc2>
 8006478:	2300      	movs	r3, #0
 800647a:	9313      	str	r3, [sp, #76]	; 0x4c
 800647c:	2200      	movs	r2, #0
 800647e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006480:	920c      	str	r2, [sp, #48]	; 0x30
 8006482:	7823      	ldrb	r3, [r4, #0]
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d000      	beq.n	800648a <_strtod_l+0x4a>
 8006488:	e07e      	b.n	8006588 <_strtod_l+0x148>
 800648a:	7863      	ldrb	r3, [r4, #1]
 800648c:	2b58      	cmp	r3, #88	; 0x58
 800648e:	d002      	beq.n	8006496 <_strtod_l+0x56>
 8006490:	2b78      	cmp	r3, #120	; 0x78
 8006492:	d000      	beq.n	8006496 <_strtod_l+0x56>
 8006494:	e06e      	b.n	8006574 <_strtod_l+0x134>
 8006496:	9b07      	ldr	r3, [sp, #28]
 8006498:	4a96      	ldr	r2, [pc, #600]	; (80066f4 <_strtod_l+0x2b4>)
 800649a:	9302      	str	r3, [sp, #8]
 800649c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800649e:	a921      	add	r1, sp, #132	; 0x84
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	ab22      	add	r3, sp, #136	; 0x88
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	9804      	ldr	r0, [sp, #16]
 80064a8:	ab23      	add	r3, sp, #140	; 0x8c
 80064aa:	f001 ff97 	bl	80083dc <__gethex>
 80064ae:	2507      	movs	r5, #7
 80064b0:	9005      	str	r0, [sp, #20]
 80064b2:	4005      	ands	r5, r0
 80064b4:	d005      	beq.n	80064c2 <_strtod_l+0x82>
 80064b6:	2d06      	cmp	r5, #6
 80064b8:	d12f      	bne.n	800651a <_strtod_l+0xda>
 80064ba:	2300      	movs	r3, #0
 80064bc:	3401      	adds	r4, #1
 80064be:	9421      	str	r4, [sp, #132]	; 0x84
 80064c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80064c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <_strtod_l+0x8e>
 80064c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01d      	beq.n	8006510 <_strtod_l+0xd0>
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	0032      	movs	r2, r6
 80064d8:	061b      	lsls	r3, r3, #24
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	0010      	movs	r0, r2
 80064de:	0019      	movs	r1, r3
 80064e0:	b027      	add	sp, #156	; 0x9c
 80064e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e4:	2a2b      	cmp	r2, #43	; 0x2b
 80064e6:	d016      	beq.n	8006516 <_strtod_l+0xd6>
 80064e8:	2a2d      	cmp	r2, #45	; 0x2d
 80064ea:	d003      	beq.n	80064f4 <_strtod_l+0xb4>
 80064ec:	2a20      	cmp	r2, #32
 80064ee:	d1c3      	bne.n	8006478 <_strtod_l+0x38>
 80064f0:	3301      	adds	r3, #1
 80064f2:	e7b8      	b.n	8006466 <_strtod_l+0x26>
 80064f4:	2201      	movs	r2, #1
 80064f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	9221      	str	r2, [sp, #132]	; 0x84
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1bc      	bne.n	800647c <_strtod_l+0x3c>
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	9321      	str	r3, [sp, #132]	; 0x84
 8006506:	2300      	movs	r3, #0
 8006508:	9313      	str	r3, [sp, #76]	; 0x4c
 800650a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1db      	bne.n	80064c8 <_strtod_l+0x88>
 8006510:	0032      	movs	r2, r6
 8006512:	003b      	movs	r3, r7
 8006514:	e7e2      	b.n	80064dc <_strtod_l+0x9c>
 8006516:	2200      	movs	r2, #0
 8006518:	e7ed      	b.n	80064f6 <_strtod_l+0xb6>
 800651a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800651c:	2a00      	cmp	r2, #0
 800651e:	d007      	beq.n	8006530 <_strtod_l+0xf0>
 8006520:	2135      	movs	r1, #53	; 0x35
 8006522:	a824      	add	r0, sp, #144	; 0x90
 8006524:	f002 fead 	bl	8009282 <__copybits>
 8006528:	9922      	ldr	r1, [sp, #136]	; 0x88
 800652a:	9804      	ldr	r0, [sp, #16]
 800652c:	f002 fb24 	bl	8008b78 <_Bfree>
 8006530:	1e68      	subs	r0, r5, #1
 8006532:	2804      	cmp	r0, #4
 8006534:	d806      	bhi.n	8006544 <_strtod_l+0x104>
 8006536:	f7f9 fdef 	bl	8000118 <__gnu_thumb1_case_uqi>
 800653a:	030c      	.short	0x030c
 800653c:	1917      	.short	0x1917
 800653e:	0c          	.byte	0x0c
 800653f:	00          	.byte	0x00
 8006540:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006542:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006544:	9b05      	ldr	r3, [sp, #20]
 8006546:	071b      	lsls	r3, r3, #28
 8006548:	d5bb      	bpl.n	80064c2 <_strtod_l+0x82>
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	431f      	orrs	r7, r3
 8006550:	e7b7      	b.n	80064c2 <_strtod_l+0x82>
 8006552:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006554:	4a68      	ldr	r2, [pc, #416]	; (80066f8 <_strtod_l+0x2b8>)
 8006556:	4969      	ldr	r1, [pc, #420]	; (80066fc <_strtod_l+0x2bc>)
 8006558:	401a      	ands	r2, r3
 800655a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800655c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800655e:	185b      	adds	r3, r3, r1
 8006560:	051b      	lsls	r3, r3, #20
 8006562:	431a      	orrs	r2, r3
 8006564:	0017      	movs	r7, r2
 8006566:	e7ed      	b.n	8006544 <_strtod_l+0x104>
 8006568:	4f65      	ldr	r7, [pc, #404]	; (8006700 <_strtod_l+0x2c0>)
 800656a:	e7eb      	b.n	8006544 <_strtod_l+0x104>
 800656c:	2601      	movs	r6, #1
 800656e:	4f65      	ldr	r7, [pc, #404]	; (8006704 <_strtod_l+0x2c4>)
 8006570:	4276      	negs	r6, r6
 8006572:	e7e7      	b.n	8006544 <_strtod_l+0x104>
 8006574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	9221      	str	r2, [sp, #132]	; 0x84
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b30      	cmp	r3, #48	; 0x30
 800657e:	d0f9      	beq.n	8006574 <_strtod_l+0x134>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d09e      	beq.n	80064c2 <_strtod_l+0x82>
 8006584:	2301      	movs	r3, #1
 8006586:	930c      	str	r3, [sp, #48]	; 0x30
 8006588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800658a:	220a      	movs	r2, #10
 800658c:	9312      	str	r3, [sp, #72]	; 0x48
 800658e:	2300      	movs	r3, #0
 8006590:	930b      	str	r3, [sp, #44]	; 0x2c
 8006592:	9308      	str	r3, [sp, #32]
 8006594:	930a      	str	r3, [sp, #40]	; 0x28
 8006596:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006598:	7804      	ldrb	r4, [r0, #0]
 800659a:	0023      	movs	r3, r4
 800659c:	3b30      	subs	r3, #48	; 0x30
 800659e:	b2d9      	uxtb	r1, r3
 80065a0:	2909      	cmp	r1, #9
 80065a2:	d934      	bls.n	800660e <_strtod_l+0x1ce>
 80065a4:	9a05      	ldr	r2, [sp, #20]
 80065a6:	6829      	ldr	r1, [r5, #0]
 80065a8:	f003 fa56 	bl	8009a58 <strncmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d040      	beq.n	8006632 <_strtod_l+0x1f2>
 80065b0:	2000      	movs	r0, #0
 80065b2:	0023      	movs	r3, r4
 80065b4:	4684      	mov	ip, r0
 80065b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b8:	9007      	str	r0, [sp, #28]
 80065ba:	9205      	str	r2, [sp, #20]
 80065bc:	2220      	movs	r2, #32
 80065be:	0019      	movs	r1, r3
 80065c0:	4391      	bics	r1, r2
 80065c2:	000a      	movs	r2, r1
 80065c4:	2100      	movs	r1, #0
 80065c6:	2a45      	cmp	r2, #69	; 0x45
 80065c8:	d000      	beq.n	80065cc <_strtod_l+0x18c>
 80065ca:	e0bf      	b.n	800674c <_strtod_l+0x30c>
 80065cc:	9b05      	ldr	r3, [sp, #20]
 80065ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d0:	4303      	orrs	r3, r0
 80065d2:	4313      	orrs	r3, r2
 80065d4:	428b      	cmp	r3, r1
 80065d6:	d094      	beq.n	8006502 <_strtod_l+0xc2>
 80065d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065da:	9306      	str	r3, [sp, #24]
 80065dc:	3301      	adds	r3, #1
 80065de:	9321      	str	r3, [sp, #132]	; 0x84
 80065e0:	9b06      	ldr	r3, [sp, #24]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b2b      	cmp	r3, #43	; 0x2b
 80065e6:	d100      	bne.n	80065ea <_strtod_l+0x1aa>
 80065e8:	e082      	b.n	80066f0 <_strtod_l+0x2b0>
 80065ea:	000c      	movs	r4, r1
 80065ec:	2b2d      	cmp	r3, #45	; 0x2d
 80065ee:	d105      	bne.n	80065fc <_strtod_l+0x1bc>
 80065f0:	2401      	movs	r4, #1
 80065f2:	9b06      	ldr	r3, [sp, #24]
 80065f4:	3302      	adds	r3, #2
 80065f6:	9321      	str	r3, [sp, #132]	; 0x84
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	789b      	ldrb	r3, [r3, #2]
 80065fc:	001a      	movs	r2, r3
 80065fe:	3a30      	subs	r2, #48	; 0x30
 8006600:	2a09      	cmp	r2, #9
 8006602:	d800      	bhi.n	8006606 <_strtod_l+0x1c6>
 8006604:	e084      	b.n	8006710 <_strtod_l+0x2d0>
 8006606:	9a06      	ldr	r2, [sp, #24]
 8006608:	2100      	movs	r1, #0
 800660a:	9221      	str	r2, [sp, #132]	; 0x84
 800660c:	e09e      	b.n	800674c <_strtod_l+0x30c>
 800660e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006610:	2908      	cmp	r1, #8
 8006612:	dc09      	bgt.n	8006628 <_strtod_l+0x1e8>
 8006614:	9908      	ldr	r1, [sp, #32]
 8006616:	4351      	muls	r1, r2
 8006618:	18cb      	adds	r3, r1, r3
 800661a:	9308      	str	r3, [sp, #32]
 800661c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661e:	3001      	adds	r0, #1
 8006620:	3301      	adds	r3, #1
 8006622:	930a      	str	r3, [sp, #40]	; 0x28
 8006624:	9021      	str	r0, [sp, #132]	; 0x84
 8006626:	e7b6      	b.n	8006596 <_strtod_l+0x156>
 8006628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800662a:	4351      	muls	r1, r2
 800662c:	18cb      	adds	r3, r1, r3
 800662e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006630:	e7f4      	b.n	800661c <_strtod_l+0x1dc>
 8006632:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006634:	9b05      	ldr	r3, [sp, #20]
 8006636:	4694      	mov	ip, r2
 8006638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800663a:	4463      	add	r3, ip
 800663c:	9321      	str	r3, [sp, #132]	; 0x84
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2a00      	cmp	r2, #0
 8006642:	d036      	beq.n	80066b2 <_strtod_l+0x272>
 8006644:	4684      	mov	ip, r0
 8006646:	9205      	str	r2, [sp, #20]
 8006648:	001a      	movs	r2, r3
 800664a:	3a30      	subs	r2, #48	; 0x30
 800664c:	2a09      	cmp	r2, #9
 800664e:	d912      	bls.n	8006676 <_strtod_l+0x236>
 8006650:	2201      	movs	r2, #1
 8006652:	9207      	str	r2, [sp, #28]
 8006654:	e7b2      	b.n	80065bc <_strtod_l+0x17c>
 8006656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006658:	3001      	adds	r0, #1
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	9221      	str	r2, [sp, #132]	; 0x84
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b30      	cmp	r3, #48	; 0x30
 8006662:	d0f8      	beq.n	8006656 <_strtod_l+0x216>
 8006664:	001a      	movs	r2, r3
 8006666:	3a31      	subs	r2, #49	; 0x31
 8006668:	2a08      	cmp	r2, #8
 800666a:	d83c      	bhi.n	80066e6 <_strtod_l+0x2a6>
 800666c:	4684      	mov	ip, r0
 800666e:	2000      	movs	r0, #0
 8006670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006672:	9005      	str	r0, [sp, #20]
 8006674:	9212      	str	r2, [sp, #72]	; 0x48
 8006676:	3b30      	subs	r3, #48	; 0x30
 8006678:	1c42      	adds	r2, r0, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d013      	beq.n	80066a6 <_strtod_l+0x266>
 800667e:	210a      	movs	r1, #10
 8006680:	4494      	add	ip, r2
 8006682:	9a05      	ldr	r2, [sp, #20]
 8006684:	1885      	adds	r5, r0, r2
 8006686:	42aa      	cmp	r2, r5
 8006688:	d115      	bne.n	80066b6 <_strtod_l+0x276>
 800668a:	9905      	ldr	r1, [sp, #20]
 800668c:	9a05      	ldr	r2, [sp, #20]
 800668e:	3101      	adds	r1, #1
 8006690:	1809      	adds	r1, r1, r0
 8006692:	1812      	adds	r2, r2, r0
 8006694:	9105      	str	r1, [sp, #20]
 8006696:	2a08      	cmp	r2, #8
 8006698:	dc1b      	bgt.n	80066d2 <_strtod_l+0x292>
 800669a:	220a      	movs	r2, #10
 800669c:	9908      	ldr	r1, [sp, #32]
 800669e:	434a      	muls	r2, r1
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	9308      	str	r3, [sp, #32]
 80066a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066a8:	0010      	movs	r0, r2
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	9121      	str	r1, [sp, #132]	; 0x84
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	e7ca      	b.n	8006648 <_strtod_l+0x208>
 80066b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066b4:	e7d4      	b.n	8006660 <_strtod_l+0x220>
 80066b6:	1c54      	adds	r4, r2, #1
 80066b8:	2a08      	cmp	r2, #8
 80066ba:	dc04      	bgt.n	80066c6 <_strtod_l+0x286>
 80066bc:	9a08      	ldr	r2, [sp, #32]
 80066be:	434a      	muls	r2, r1
 80066c0:	9208      	str	r2, [sp, #32]
 80066c2:	0022      	movs	r2, r4
 80066c4:	e7df      	b.n	8006686 <_strtod_l+0x246>
 80066c6:	2c10      	cmp	r4, #16
 80066c8:	dcfb      	bgt.n	80066c2 <_strtod_l+0x282>
 80066ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066cc:	434a      	muls	r2, r1
 80066ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80066d0:	e7f7      	b.n	80066c2 <_strtod_l+0x282>
 80066d2:	9905      	ldr	r1, [sp, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	2910      	cmp	r1, #16
 80066d8:	dce5      	bgt.n	80066a6 <_strtod_l+0x266>
 80066da:	210a      	movs	r1, #10
 80066dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066de:	4341      	muls	r1, r0
 80066e0:	185b      	adds	r3, r3, r1
 80066e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e4:	e7df      	b.n	80066a6 <_strtod_l+0x266>
 80066e6:	2200      	movs	r2, #0
 80066e8:	4694      	mov	ip, r2
 80066ea:	9205      	str	r2, [sp, #20]
 80066ec:	3201      	adds	r2, #1
 80066ee:	e7b0      	b.n	8006652 <_strtod_l+0x212>
 80066f0:	000c      	movs	r4, r1
 80066f2:	e77e      	b.n	80065f2 <_strtod_l+0x1b2>
 80066f4:	08009db4 	.word	0x08009db4
 80066f8:	ffefffff 	.word	0xffefffff
 80066fc:	00000433 	.word	0x00000433
 8006700:	7ff00000 	.word	0x7ff00000
 8006704:	7fffffff 	.word	0x7fffffff
 8006708:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	9221      	str	r2, [sp, #132]	; 0x84
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d0f9      	beq.n	8006708 <_strtod_l+0x2c8>
 8006714:	001a      	movs	r2, r3
 8006716:	3a31      	subs	r2, #49	; 0x31
 8006718:	2100      	movs	r1, #0
 800671a:	2a08      	cmp	r2, #8
 800671c:	d816      	bhi.n	800674c <_strtod_l+0x30c>
 800671e:	3b30      	subs	r3, #48	; 0x30
 8006720:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006722:	930e      	str	r3, [sp, #56]	; 0x38
 8006724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006726:	1c59      	adds	r1, r3, #1
 8006728:	9121      	str	r1, [sp, #132]	; 0x84
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	001a      	movs	r2, r3
 800672e:	3a30      	subs	r2, #48	; 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d932      	bls.n	800679a <_strtod_l+0x35a>
 8006734:	1b4a      	subs	r2, r1, r5
 8006736:	4dad      	ldr	r5, [pc, #692]	; (80069ec <_strtod_l+0x5ac>)
 8006738:	0029      	movs	r1, r5
 800673a:	2a08      	cmp	r2, #8
 800673c:	dc03      	bgt.n	8006746 <_strtod_l+0x306>
 800673e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006740:	42a9      	cmp	r1, r5
 8006742:	dd00      	ble.n	8006746 <_strtod_l+0x306>
 8006744:	0029      	movs	r1, r5
 8006746:	2c00      	cmp	r4, #0
 8006748:	d000      	beq.n	800674c <_strtod_l+0x30c>
 800674a:	4249      	negs	r1, r1
 800674c:	9a05      	ldr	r2, [sp, #20]
 800674e:	2a00      	cmp	r2, #0
 8006750:	d149      	bne.n	80067e6 <_strtod_l+0x3a6>
 8006752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006754:	4310      	orrs	r0, r2
 8006756:	d000      	beq.n	800675a <_strtod_l+0x31a>
 8006758:	e6b3      	b.n	80064c2 <_strtod_l+0x82>
 800675a:	9a07      	ldr	r2, [sp, #28]
 800675c:	2a00      	cmp	r2, #0
 800675e:	d000      	beq.n	8006762 <_strtod_l+0x322>
 8006760:	e6cf      	b.n	8006502 <_strtod_l+0xc2>
 8006762:	2b4e      	cmp	r3, #78	; 0x4e
 8006764:	d025      	beq.n	80067b2 <_strtod_l+0x372>
 8006766:	dc1f      	bgt.n	80067a8 <_strtod_l+0x368>
 8006768:	2b49      	cmp	r3, #73	; 0x49
 800676a:	d000      	beq.n	800676e <_strtod_l+0x32e>
 800676c:	e6c9      	b.n	8006502 <_strtod_l+0xc2>
 800676e:	49a0      	ldr	r1, [pc, #640]	; (80069f0 <_strtod_l+0x5b0>)
 8006770:	a821      	add	r0, sp, #132	; 0x84
 8006772:	f002 f870 	bl	8008856 <__match>
 8006776:	2800      	cmp	r0, #0
 8006778:	d100      	bne.n	800677c <_strtod_l+0x33c>
 800677a:	e6c2      	b.n	8006502 <_strtod_l+0xc2>
 800677c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800677e:	499d      	ldr	r1, [pc, #628]	; (80069f4 <_strtod_l+0x5b4>)
 8006780:	3b01      	subs	r3, #1
 8006782:	a821      	add	r0, sp, #132	; 0x84
 8006784:	9321      	str	r3, [sp, #132]	; 0x84
 8006786:	f002 f866 	bl	8008856 <__match>
 800678a:	2800      	cmp	r0, #0
 800678c:	d102      	bne.n	8006794 <_strtod_l+0x354>
 800678e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006790:	3301      	adds	r3, #1
 8006792:	9321      	str	r3, [sp, #132]	; 0x84
 8006794:	4f98      	ldr	r7, [pc, #608]	; (80069f8 <_strtod_l+0x5b8>)
 8006796:	2600      	movs	r6, #0
 8006798:	e693      	b.n	80064c2 <_strtod_l+0x82>
 800679a:	220a      	movs	r2, #10
 800679c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800679e:	434a      	muls	r2, r1
 80067a0:	18d2      	adds	r2, r2, r3
 80067a2:	3a30      	subs	r2, #48	; 0x30
 80067a4:	920e      	str	r2, [sp, #56]	; 0x38
 80067a6:	e7bd      	b.n	8006724 <_strtod_l+0x2e4>
 80067a8:	2b69      	cmp	r3, #105	; 0x69
 80067aa:	d0e0      	beq.n	800676e <_strtod_l+0x32e>
 80067ac:	2b6e      	cmp	r3, #110	; 0x6e
 80067ae:	d000      	beq.n	80067b2 <_strtod_l+0x372>
 80067b0:	e6a7      	b.n	8006502 <_strtod_l+0xc2>
 80067b2:	4992      	ldr	r1, [pc, #584]	; (80069fc <_strtod_l+0x5bc>)
 80067b4:	a821      	add	r0, sp, #132	; 0x84
 80067b6:	f002 f84e 	bl	8008856 <__match>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d100      	bne.n	80067c0 <_strtod_l+0x380>
 80067be:	e6a0      	b.n	8006502 <_strtod_l+0xc2>
 80067c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b28      	cmp	r3, #40	; 0x28
 80067c6:	d10c      	bne.n	80067e2 <_strtod_l+0x3a2>
 80067c8:	aa24      	add	r2, sp, #144	; 0x90
 80067ca:	498d      	ldr	r1, [pc, #564]	; (8006a00 <_strtod_l+0x5c0>)
 80067cc:	a821      	add	r0, sp, #132	; 0x84
 80067ce:	f002 f856 	bl	800887e <__hexnan>
 80067d2:	2805      	cmp	r0, #5
 80067d4:	d105      	bne.n	80067e2 <_strtod_l+0x3a2>
 80067d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80067d8:	4a87      	ldr	r2, [pc, #540]	; (80069f8 <_strtod_l+0x5b8>)
 80067da:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80067dc:	431a      	orrs	r2, r3
 80067de:	0017      	movs	r7, r2
 80067e0:	e66f      	b.n	80064c2 <_strtod_l+0x82>
 80067e2:	4f88      	ldr	r7, [pc, #544]	; (8006a04 <_strtod_l+0x5c4>)
 80067e4:	e7d7      	b.n	8006796 <_strtod_l+0x356>
 80067e6:	4663      	mov	r3, ip
 80067e8:	1acb      	subs	r3, r1, r3
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <_strtod_l+0x3b6>
 80067f2:	9b05      	ldr	r3, [sp, #20]
 80067f4:	930a      	str	r3, [sp, #40]	; 0x28
 80067f6:	9c05      	ldr	r4, [sp, #20]
 80067f8:	2c10      	cmp	r4, #16
 80067fa:	dd00      	ble.n	80067fe <_strtod_l+0x3be>
 80067fc:	2410      	movs	r4, #16
 80067fe:	9808      	ldr	r0, [sp, #32]
 8006800:	f7fb fbd2 	bl	8001fa8 <__aeabi_ui2d>
 8006804:	9b05      	ldr	r3, [sp, #20]
 8006806:	0006      	movs	r6, r0
 8006808:	000f      	movs	r7, r1
 800680a:	2b09      	cmp	r3, #9
 800680c:	dc15      	bgt.n	800683a <_strtod_l+0x3fa>
 800680e:	9b07      	ldr	r3, [sp, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d100      	bne.n	8006816 <_strtod_l+0x3d6>
 8006814:	e655      	b.n	80064c2 <_strtod_l+0x82>
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc00      	bgt.n	800681e <_strtod_l+0x3de>
 800681c:	e07d      	b.n	800691a <_strtod_l+0x4da>
 800681e:	2b16      	cmp	r3, #22
 8006820:	dc62      	bgt.n	80068e8 <_strtod_l+0x4a8>
 8006822:	00dc      	lsls	r4, r3, #3
 8006824:	4b78      	ldr	r3, [pc, #480]	; (8006a08 <_strtod_l+0x5c8>)
 8006826:	0032      	movs	r2, r6
 8006828:	1919      	adds	r1, r3, r4
 800682a:	003b      	movs	r3, r7
 800682c:	6808      	ldr	r0, [r1, #0]
 800682e:	6849      	ldr	r1, [r1, #4]
 8006830:	f7fa fd74 	bl	800131c <__aeabi_dmul>
 8006834:	0006      	movs	r6, r0
 8006836:	000f      	movs	r7, r1
 8006838:	e643      	b.n	80064c2 <_strtod_l+0x82>
 800683a:	0022      	movs	r2, r4
 800683c:	4b72      	ldr	r3, [pc, #456]	; (8006a08 <_strtod_l+0x5c8>)
 800683e:	3a09      	subs	r2, #9
 8006840:	00d2      	lsls	r2, r2, #3
 8006842:	189b      	adds	r3, r3, r2
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f7fa fd68 	bl	800131c <__aeabi_dmul>
 800684c:	0006      	movs	r6, r0
 800684e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006850:	000f      	movs	r7, r1
 8006852:	f7fb fba9 	bl	8001fa8 <__aeabi_ui2d>
 8006856:	000b      	movs	r3, r1
 8006858:	0002      	movs	r2, r0
 800685a:	0039      	movs	r1, r7
 800685c:	0030      	movs	r0, r6
 800685e:	f7f9 fe37 	bl	80004d0 <__aeabi_dadd>
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	0006      	movs	r6, r0
 8006866:	000f      	movs	r7, r1
 8006868:	2b0f      	cmp	r3, #15
 800686a:	ddd0      	ble.n	800680e <_strtod_l+0x3ce>
 800686c:	9b05      	ldr	r3, [sp, #20]
 800686e:	1b1c      	subs	r4, r3, r4
 8006870:	9b07      	ldr	r3, [sp, #28]
 8006872:	18e4      	adds	r4, r4, r3
 8006874:	2c00      	cmp	r4, #0
 8006876:	dc00      	bgt.n	800687a <_strtod_l+0x43a>
 8006878:	e094      	b.n	80069a4 <_strtod_l+0x564>
 800687a:	230f      	movs	r3, #15
 800687c:	4023      	ands	r3, r4
 800687e:	d00a      	beq.n	8006896 <_strtod_l+0x456>
 8006880:	4961      	ldr	r1, [pc, #388]	; (8006a08 <_strtod_l+0x5c8>)
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	18c9      	adds	r1, r1, r3
 8006886:	0032      	movs	r2, r6
 8006888:	6808      	ldr	r0, [r1, #0]
 800688a:	6849      	ldr	r1, [r1, #4]
 800688c:	003b      	movs	r3, r7
 800688e:	f7fa fd45 	bl	800131c <__aeabi_dmul>
 8006892:	0006      	movs	r6, r0
 8006894:	000f      	movs	r7, r1
 8006896:	230f      	movs	r3, #15
 8006898:	439c      	bics	r4, r3
 800689a:	d06e      	beq.n	800697a <_strtod_l+0x53a>
 800689c:	3326      	adds	r3, #38	; 0x26
 800689e:	33ff      	adds	r3, #255	; 0xff
 80068a0:	429c      	cmp	r4, r3
 80068a2:	dd48      	ble.n	8006936 <_strtod_l+0x4f6>
 80068a4:	2400      	movs	r4, #0
 80068a6:	9405      	str	r4, [sp, #20]
 80068a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80068aa:	940a      	str	r4, [sp, #40]	; 0x28
 80068ac:	2322      	movs	r3, #34	; 0x22
 80068ae:	2600      	movs	r6, #0
 80068b0:	9a04      	ldr	r2, [sp, #16]
 80068b2:	4f51      	ldr	r7, [pc, #324]	; (80069f8 <_strtod_l+0x5b8>)
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b8:	42b3      	cmp	r3, r6
 80068ba:	d100      	bne.n	80068be <_strtod_l+0x47e>
 80068bc:	e601      	b.n	80064c2 <_strtod_l+0x82>
 80068be:	9922      	ldr	r1, [sp, #136]	; 0x88
 80068c0:	9804      	ldr	r0, [sp, #16]
 80068c2:	f002 f959 	bl	8008b78 <_Bfree>
 80068c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068c8:	9804      	ldr	r0, [sp, #16]
 80068ca:	f002 f955 	bl	8008b78 <_Bfree>
 80068ce:	9905      	ldr	r1, [sp, #20]
 80068d0:	9804      	ldr	r0, [sp, #16]
 80068d2:	f002 f951 	bl	8008b78 <_Bfree>
 80068d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068d8:	9804      	ldr	r0, [sp, #16]
 80068da:	f002 f94d 	bl	8008b78 <_Bfree>
 80068de:	0021      	movs	r1, r4
 80068e0:	9804      	ldr	r0, [sp, #16]
 80068e2:	f002 f949 	bl	8008b78 <_Bfree>
 80068e6:	e5ec      	b.n	80064c2 <_strtod_l+0x82>
 80068e8:	2325      	movs	r3, #37	; 0x25
 80068ea:	9a05      	ldr	r2, [sp, #20]
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	9a07      	ldr	r2, [sp, #28]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	dbbb      	blt.n	800686c <_strtod_l+0x42c>
 80068f4:	230f      	movs	r3, #15
 80068f6:	9a05      	ldr	r2, [sp, #20]
 80068f8:	4c43      	ldr	r4, [pc, #268]	; (8006a08 <_strtod_l+0x5c8>)
 80068fa:	1a9d      	subs	r5, r3, r2
 80068fc:	00e9      	lsls	r1, r5, #3
 80068fe:	1861      	adds	r1, r4, r1
 8006900:	0032      	movs	r2, r6
 8006902:	6808      	ldr	r0, [r1, #0]
 8006904:	6849      	ldr	r1, [r1, #4]
 8006906:	003b      	movs	r3, r7
 8006908:	f7fa fd08 	bl	800131c <__aeabi_dmul>
 800690c:	9b07      	ldr	r3, [sp, #28]
 800690e:	1b5e      	subs	r6, r3, r5
 8006910:	00f6      	lsls	r6, r6, #3
 8006912:	19a6      	adds	r6, r4, r6
 8006914:	6832      	ldr	r2, [r6, #0]
 8006916:	6873      	ldr	r3, [r6, #4]
 8006918:	e78a      	b.n	8006830 <_strtod_l+0x3f0>
 800691a:	9b07      	ldr	r3, [sp, #28]
 800691c:	3316      	adds	r3, #22
 800691e:	dba5      	blt.n	800686c <_strtod_l+0x42c>
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	0030      	movs	r0, r6
 8006924:	00da      	lsls	r2, r3, #3
 8006926:	4b38      	ldr	r3, [pc, #224]	; (8006a08 <_strtod_l+0x5c8>)
 8006928:	0039      	movs	r1, r7
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f7fa f8ea 	bl	8000b08 <__aeabi_ddiv>
 8006934:	e77e      	b.n	8006834 <_strtod_l+0x3f4>
 8006936:	2300      	movs	r3, #0
 8006938:	0030      	movs	r0, r6
 800693a:	0039      	movs	r1, r7
 800693c:	001d      	movs	r5, r3
 800693e:	1124      	asrs	r4, r4, #4
 8006940:	2c01      	cmp	r4, #1
 8006942:	dc1d      	bgt.n	8006980 <_strtod_l+0x540>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <_strtod_l+0x50c>
 8006948:	0006      	movs	r6, r0
 800694a:	000f      	movs	r7, r1
 800694c:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <_strtod_l+0x5cc>)
 800694e:	00ed      	lsls	r5, r5, #3
 8006950:	18ff      	adds	r7, r7, r3
 8006952:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <_strtod_l+0x5d0>)
 8006954:	0032      	movs	r2, r6
 8006956:	195d      	adds	r5, r3, r5
 8006958:	6828      	ldr	r0, [r5, #0]
 800695a:	6869      	ldr	r1, [r5, #4]
 800695c:	003b      	movs	r3, r7
 800695e:	f7fa fcdd 	bl	800131c <__aeabi_dmul>
 8006962:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <_strtod_l+0x5b8>)
 8006964:	4a2b      	ldr	r2, [pc, #172]	; (8006a14 <_strtod_l+0x5d4>)
 8006966:	0006      	movs	r6, r0
 8006968:	400b      	ands	r3, r1
 800696a:	4293      	cmp	r3, r2
 800696c:	d89a      	bhi.n	80068a4 <_strtod_l+0x464>
 800696e:	4a2a      	ldr	r2, [pc, #168]	; (8006a18 <_strtod_l+0x5d8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d913      	bls.n	800699c <_strtod_l+0x55c>
 8006974:	2601      	movs	r6, #1
 8006976:	4f29      	ldr	r7, [pc, #164]	; (8006a1c <_strtod_l+0x5dc>)
 8006978:	4276      	negs	r6, r6
 800697a:	2300      	movs	r3, #0
 800697c:	9306      	str	r3, [sp, #24]
 800697e:	e07b      	b.n	8006a78 <_strtod_l+0x638>
 8006980:	2201      	movs	r2, #1
 8006982:	4214      	tst	r4, r2
 8006984:	d007      	beq.n	8006996 <_strtod_l+0x556>
 8006986:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <_strtod_l+0x5d0>)
 8006988:	00eb      	lsls	r3, r5, #3
 800698a:	189b      	adds	r3, r3, r2
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f7fa fcc4 	bl	800131c <__aeabi_dmul>
 8006994:	2301      	movs	r3, #1
 8006996:	3501      	adds	r5, #1
 8006998:	1064      	asrs	r4, r4, #1
 800699a:	e7d1      	b.n	8006940 <_strtod_l+0x500>
 800699c:	23d4      	movs	r3, #212	; 0xd4
 800699e:	049b      	lsls	r3, r3, #18
 80069a0:	18cf      	adds	r7, r1, r3
 80069a2:	e7ea      	b.n	800697a <_strtod_l+0x53a>
 80069a4:	2c00      	cmp	r4, #0
 80069a6:	d0e8      	beq.n	800697a <_strtod_l+0x53a>
 80069a8:	230f      	movs	r3, #15
 80069aa:	4264      	negs	r4, r4
 80069ac:	4023      	ands	r3, r4
 80069ae:	d00a      	beq.n	80069c6 <_strtod_l+0x586>
 80069b0:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <_strtod_l+0x5c8>)
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	18d3      	adds	r3, r2, r3
 80069b6:	0030      	movs	r0, r6
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	0039      	movs	r1, r7
 80069be:	f7fa f8a3 	bl	8000b08 <__aeabi_ddiv>
 80069c2:	0006      	movs	r6, r0
 80069c4:	000f      	movs	r7, r1
 80069c6:	1124      	asrs	r4, r4, #4
 80069c8:	d0d7      	beq.n	800697a <_strtod_l+0x53a>
 80069ca:	2c1f      	cmp	r4, #31
 80069cc:	dd28      	ble.n	8006a20 <_strtod_l+0x5e0>
 80069ce:	2400      	movs	r4, #0
 80069d0:	9405      	str	r4, [sp, #20]
 80069d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80069d4:	940a      	str	r4, [sp, #40]	; 0x28
 80069d6:	2322      	movs	r3, #34	; 0x22
 80069d8:	9a04      	ldr	r2, [sp, #16]
 80069da:	2600      	movs	r6, #0
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e0:	2700      	movs	r7, #0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d000      	beq.n	80069e8 <_strtod_l+0x5a8>
 80069e6:	e76a      	b.n	80068be <_strtod_l+0x47e>
 80069e8:	e56b      	b.n	80064c2 <_strtod_l+0x82>
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	00004e1f 	.word	0x00004e1f
 80069f0:	08009d7d 	.word	0x08009d7d
 80069f4:	08009e0b 	.word	0x08009e0b
 80069f8:	7ff00000 	.word	0x7ff00000
 80069fc:	08009d85 	.word	0x08009d85
 8006a00:	08009dc8 	.word	0x08009dc8
 8006a04:	fff80000 	.word	0xfff80000
 8006a08:	08009eb0 	.word	0x08009eb0
 8006a0c:	fcb00000 	.word	0xfcb00000
 8006a10:	08009e88 	.word	0x08009e88
 8006a14:	7ca00000 	.word	0x7ca00000
 8006a18:	7c900000 	.word	0x7c900000
 8006a1c:	7fefffff 	.word	0x7fefffff
 8006a20:	2310      	movs	r3, #16
 8006a22:	4023      	ands	r3, r4
 8006a24:	9306      	str	r3, [sp, #24]
 8006a26:	d001      	beq.n	8006a2c <_strtod_l+0x5ec>
 8006a28:	236a      	movs	r3, #106	; 0x6a
 8006a2a:	9306      	str	r3, [sp, #24]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	0030      	movs	r0, r6
 8006a30:	0039      	movs	r1, r7
 8006a32:	001d      	movs	r5, r3
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	dd00      	ble.n	8006a3a <_strtod_l+0x5fa>
 8006a38:	e10e      	b.n	8006c58 <_strtod_l+0x818>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <_strtod_l+0x602>
 8006a3e:	0006      	movs	r6, r0
 8006a40:	000f      	movs	r7, r1
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <_strtod_l+0x628>
 8006a48:	236b      	movs	r3, #107	; 0x6b
 8006a4a:	0079      	lsls	r1, r7, #1
 8006a4c:	0d49      	lsrs	r1, r1, #21
 8006a4e:	003a      	movs	r2, r7
 8006a50:	1a5b      	subs	r3, r3, r1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dd08      	ble.n	8006a68 <_strtod_l+0x628>
 8006a56:	2b1f      	cmp	r3, #31
 8006a58:	dc00      	bgt.n	8006a5c <_strtod_l+0x61c>
 8006a5a:	e112      	b.n	8006c82 <_strtod_l+0x842>
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	2b34      	cmp	r3, #52	; 0x34
 8006a60:	dc00      	bgt.n	8006a64 <_strtod_l+0x624>
 8006a62:	e107      	b.n	8006c74 <_strtod_l+0x834>
 8006a64:	27dc      	movs	r7, #220	; 0xdc
 8006a66:	04bf      	lsls	r7, r7, #18
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	0030      	movs	r0, r6
 8006a6e:	0039      	movs	r1, r7
 8006a70:	f7f9 fce2 	bl	8000438 <__aeabi_dcmpeq>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1aa      	bne.n	80069ce <_strtod_l+0x58e>
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	9804      	ldr	r0, [sp, #16]
 8006a84:	f002 f8cf 	bl	8008c26 <__s2b>
 8006a88:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d100      	bne.n	8006a90 <_strtod_l+0x650>
 8006a8e:	e709      	b.n	80068a4 <_strtod_l+0x464>
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	9a07      	ldr	r2, [sp, #28]
 8006a94:	17db      	asrs	r3, r3, #31
 8006a96:	4252      	negs	r2, r2
 8006a98:	4013      	ands	r3, r2
 8006a9a:	9315      	str	r3, [sp, #84]	; 0x54
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	2400      	movs	r4, #0
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	9a07      	ldr	r2, [sp, #28]
 8006aa4:	17db      	asrs	r3, r3, #31
 8006aa6:	401a      	ands	r2, r3
 8006aa8:	921c      	str	r2, [sp, #112]	; 0x70
 8006aaa:	9405      	str	r4, [sp, #20]
 8006aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aae:	9804      	ldr	r0, [sp, #16]
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	f002 f829 	bl	8008b08 <_Balloc>
 8006ab6:	900a      	str	r0, [sp, #40]	; 0x28
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d100      	bne.n	8006abe <_strtod_l+0x67e>
 8006abc:	e6f6      	b.n	80068ac <_strtod_l+0x46c>
 8006abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	310c      	adds	r1, #12
 8006ac6:	1c9a      	adds	r2, r3, #2
 8006ac8:	0092      	lsls	r2, r2, #2
 8006aca:	300c      	adds	r0, #12
 8006acc:	9308      	str	r3, [sp, #32]
 8006ace:	f002 f812 	bl	8008af6 <memcpy>
 8006ad2:	ab24      	add	r3, sp, #144	; 0x90
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	ab23      	add	r3, sp, #140	; 0x8c
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	0032      	movs	r2, r6
 8006adc:	003b      	movs	r3, r7
 8006ade:	9804      	ldr	r0, [sp, #16]
 8006ae0:	960e      	str	r6, [sp, #56]	; 0x38
 8006ae2:	970f      	str	r7, [sp, #60]	; 0x3c
 8006ae4:	f002 fb52 	bl	800918c <__d2b>
 8006ae8:	9022      	str	r0, [sp, #136]	; 0x88
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d100      	bne.n	8006af0 <_strtod_l+0x6b0>
 8006aee:	e6dd      	b.n	80068ac <_strtod_l+0x46c>
 8006af0:	2101      	movs	r1, #1
 8006af2:	9804      	ldr	r0, [sp, #16]
 8006af4:	f002 f91e 	bl	8008d34 <__i2b>
 8006af8:	9005      	str	r0, [sp, #20]
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d100      	bne.n	8006b00 <_strtod_l+0x6c0>
 8006afe:	e6d5      	b.n	80068ac <_strtod_l+0x46c>
 8006b00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	da00      	bge.n	8006b08 <_strtod_l+0x6c8>
 8006b06:	e0c1      	b.n	8006c8c <_strtod_l+0x84c>
 8006b08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b0a:	189d      	adds	r5, r3, r2
 8006b0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b0e:	4694      	mov	ip, r2
 8006b10:	9906      	ldr	r1, [sp, #24]
 8006b12:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b14:	1a5b      	subs	r3, r3, r1
 8006b16:	2136      	movs	r1, #54	; 0x36
 8006b18:	189b      	adds	r3, r3, r2
 8006b1a:	1a8a      	subs	r2, r1, r2
 8006b1c:	49b2      	ldr	r1, [pc, #712]	; (8006de8 <_strtod_l+0x9a8>)
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	2001      	movs	r0, #1
 8006b22:	428b      	cmp	r3, r1
 8006b24:	db00      	blt.n	8006b28 <_strtod_l+0x6e8>
 8006b26:	e0bd      	b.n	8006ca4 <_strtod_l+0x864>
 8006b28:	1ac9      	subs	r1, r1, r3
 8006b2a:	1a52      	subs	r2, r2, r1
 8006b2c:	291f      	cmp	r1, #31
 8006b2e:	dd00      	ble.n	8006b32 <_strtod_l+0x6f2>
 8006b30:	e0b1      	b.n	8006c96 <_strtod_l+0x856>
 8006b32:	4088      	lsls	r0, r1
 8006b34:	2300      	movs	r3, #0
 8006b36:	9014      	str	r0, [sp, #80]	; 0x50
 8006b38:	9310      	str	r3, [sp, #64]	; 0x40
 8006b3a:	18ab      	adds	r3, r5, r2
 8006b3c:	9308      	str	r3, [sp, #32]
 8006b3e:	0013      	movs	r3, r2
 8006b40:	9a06      	ldr	r2, [sp, #24]
 8006b42:	4463      	add	r3, ip
 8006b44:	18d3      	adds	r3, r2, r3
 8006b46:	9a08      	ldr	r2, [sp, #32]
 8006b48:	930c      	str	r3, [sp, #48]	; 0x30
 8006b4a:	002b      	movs	r3, r5
 8006b4c:	4295      	cmp	r5, r2
 8006b4e:	dd00      	ble.n	8006b52 <_strtod_l+0x712>
 8006b50:	0013      	movs	r3, r2
 8006b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b54:	4293      	cmp	r3, r2
 8006b56:	dd00      	ble.n	8006b5a <_strtod_l+0x71a>
 8006b58:	0013      	movs	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dd06      	ble.n	8006b6c <_strtod_l+0x72c>
 8006b5e:	9a08      	ldr	r2, [sp, #32]
 8006b60:	1aed      	subs	r5, r5, r3
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	9208      	str	r2, [sp, #32]
 8006b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b68:	1ad2      	subs	r2, r2, r3
 8006b6a:	920c      	str	r2, [sp, #48]	; 0x30
 8006b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d017      	beq.n	8006ba2 <_strtod_l+0x762>
 8006b72:	001a      	movs	r2, r3
 8006b74:	9905      	ldr	r1, [sp, #20]
 8006b76:	9804      	ldr	r0, [sp, #16]
 8006b78:	f002 f974 	bl	8008e64 <__pow5mult>
 8006b7c:	9005      	str	r0, [sp, #20]
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d100      	bne.n	8006b84 <_strtod_l+0x744>
 8006b82:	e693      	b.n	80068ac <_strtod_l+0x46c>
 8006b84:	0001      	movs	r1, r0
 8006b86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b88:	9804      	ldr	r0, [sp, #16]
 8006b8a:	f002 f8dc 	bl	8008d46 <__multiply>
 8006b8e:	9012      	str	r0, [sp, #72]	; 0x48
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d100      	bne.n	8006b96 <_strtod_l+0x756>
 8006b94:	e68a      	b.n	80068ac <_strtod_l+0x46c>
 8006b96:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b98:	9804      	ldr	r0, [sp, #16]
 8006b9a:	f001 ffed 	bl	8008b78 <_Bfree>
 8006b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ba0:	9322      	str	r3, [sp, #136]	; 0x88
 8006ba2:	9b08      	ldr	r3, [sp, #32]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dd00      	ble.n	8006baa <_strtod_l+0x76a>
 8006ba8:	e07f      	b.n	8006caa <_strtod_l+0x86a>
 8006baa:	9b07      	ldr	r3, [sp, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd08      	ble.n	8006bc2 <_strtod_l+0x782>
 8006bb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006bb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bb4:	9804      	ldr	r0, [sp, #16]
 8006bb6:	f002 f955 	bl	8008e64 <__pow5mult>
 8006bba:	900a      	str	r0, [sp, #40]	; 0x28
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d100      	bne.n	8006bc2 <_strtod_l+0x782>
 8006bc0:	e674      	b.n	80068ac <_strtod_l+0x46c>
 8006bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd08      	ble.n	8006bda <_strtod_l+0x79a>
 8006bc8:	001a      	movs	r2, r3
 8006bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bcc:	9804      	ldr	r0, [sp, #16]
 8006bce:	f002 f99b 	bl	8008f08 <__lshift>
 8006bd2:	900a      	str	r0, [sp, #40]	; 0x28
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d100      	bne.n	8006bda <_strtod_l+0x79a>
 8006bd8:	e668      	b.n	80068ac <_strtod_l+0x46c>
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	dd08      	ble.n	8006bf0 <_strtod_l+0x7b0>
 8006bde:	002a      	movs	r2, r5
 8006be0:	9905      	ldr	r1, [sp, #20]
 8006be2:	9804      	ldr	r0, [sp, #16]
 8006be4:	f002 f990 	bl	8008f08 <__lshift>
 8006be8:	9005      	str	r0, [sp, #20]
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d100      	bne.n	8006bf0 <_strtod_l+0x7b0>
 8006bee:	e65d      	b.n	80068ac <_strtod_l+0x46c>
 8006bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006bf4:	9804      	ldr	r0, [sp, #16]
 8006bf6:	f002 f9f3 	bl	8008fe0 <__mdiff>
 8006bfa:	1e04      	subs	r4, r0, #0
 8006bfc:	d100      	bne.n	8006c00 <_strtod_l+0x7c0>
 8006bfe:	e655      	b.n	80068ac <_strtod_l+0x46c>
 8006c00:	2500      	movs	r5, #0
 8006c02:	68c3      	ldr	r3, [r0, #12]
 8006c04:	9905      	ldr	r1, [sp, #20]
 8006c06:	60c5      	str	r5, [r0, #12]
 8006c08:	9312      	str	r3, [sp, #72]	; 0x48
 8006c0a:	f002 f9cf 	bl	8008fac <__mcmp>
 8006c0e:	42a8      	cmp	r0, r5
 8006c10:	da55      	bge.n	8006cbe <_strtod_l+0x87e>
 8006c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c14:	42ab      	cmp	r3, r5
 8006c16:	d11b      	bne.n	8006c50 <_strtod_l+0x810>
 8006c18:	42ae      	cmp	r6, r5
 8006c1a:	d119      	bne.n	8006c50 <_strtod_l+0x810>
 8006c1c:	033b      	lsls	r3, r7, #12
 8006c1e:	42ab      	cmp	r3, r5
 8006c20:	d116      	bne.n	8006c50 <_strtod_l+0x810>
 8006c22:	22d6      	movs	r2, #214	; 0xd6
 8006c24:	4b71      	ldr	r3, [pc, #452]	; (8006dec <_strtod_l+0x9ac>)
 8006c26:	04d2      	lsls	r2, r2, #19
 8006c28:	403b      	ands	r3, r7
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d910      	bls.n	8006c50 <_strtod_l+0x810>
 8006c2e:	6963      	ldr	r3, [r4, #20]
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	d102      	bne.n	8006c3a <_strtod_l+0x7fa>
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	dd0a      	ble.n	8006c50 <_strtod_l+0x810>
 8006c3a:	0021      	movs	r1, r4
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	9804      	ldr	r0, [sp, #16]
 8006c40:	f002 f962 	bl	8008f08 <__lshift>
 8006c44:	9905      	ldr	r1, [sp, #20]
 8006c46:	0004      	movs	r4, r0
 8006c48:	f002 f9b0 	bl	8008fac <__mcmp>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	dc6b      	bgt.n	8006d28 <_strtod_l+0x8e8>
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d178      	bne.n	8006d48 <_strtod_l+0x908>
 8006c56:	e632      	b.n	80068be <_strtod_l+0x47e>
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4214      	tst	r4, r2
 8006c5c:	d007      	beq.n	8006c6e <_strtod_l+0x82e>
 8006c5e:	4a64      	ldr	r2, [pc, #400]	; (8006df0 <_strtod_l+0x9b0>)
 8006c60:	00eb      	lsls	r3, r5, #3
 8006c62:	18d3      	adds	r3, r2, r3
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f7fa fb58 	bl	800131c <__aeabi_dmul>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	3501      	adds	r5, #1
 8006c70:	1064      	asrs	r4, r4, #1
 8006c72:	e6df      	b.n	8006a34 <_strtod_l+0x5f4>
 8006c74:	2101      	movs	r1, #1
 8006c76:	3b20      	subs	r3, #32
 8006c78:	4249      	negs	r1, r1
 8006c7a:	4099      	lsls	r1, r3
 8006c7c:	400a      	ands	r2, r1
 8006c7e:	0017      	movs	r7, r2
 8006c80:	e6f2      	b.n	8006a68 <_strtod_l+0x628>
 8006c82:	2201      	movs	r2, #1
 8006c84:	4252      	negs	r2, r2
 8006c86:	409a      	lsls	r2, r3
 8006c88:	4016      	ands	r6, r2
 8006c8a:	e6ed      	b.n	8006a68 <_strtod_l+0x628>
 8006c8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c8e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006c90:	1ad2      	subs	r2, r2, r3
 8006c92:	4694      	mov	ip, r2
 8006c94:	e73c      	b.n	8006b10 <_strtod_l+0x6d0>
 8006c96:	4957      	ldr	r1, [pc, #348]	; (8006df4 <_strtod_l+0x9b4>)
 8006c98:	1acb      	subs	r3, r1, r3
 8006c9a:	0001      	movs	r1, r0
 8006c9c:	4099      	lsls	r1, r3
 8006c9e:	9110      	str	r1, [sp, #64]	; 0x40
 8006ca0:	9014      	str	r0, [sp, #80]	; 0x50
 8006ca2:	e74a      	b.n	8006b3a <_strtod_l+0x6fa>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ca8:	e7fa      	b.n	8006ca0 <_strtod_l+0x860>
 8006caa:	9a08      	ldr	r2, [sp, #32]
 8006cac:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006cae:	9804      	ldr	r0, [sp, #16]
 8006cb0:	f002 f92a 	bl	8008f08 <__lshift>
 8006cb4:	9022      	str	r0, [sp, #136]	; 0x88
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d000      	beq.n	8006cbc <_strtod_l+0x87c>
 8006cba:	e776      	b.n	8006baa <_strtod_l+0x76a>
 8006cbc:	e5f6      	b.n	80068ac <_strtod_l+0x46c>
 8006cbe:	970c      	str	r7, [sp, #48]	; 0x30
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d000      	beq.n	8006cc6 <_strtod_l+0x886>
 8006cc4:	e0a0      	b.n	8006e08 <_strtod_l+0x9c8>
 8006cc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc8:	033b      	lsls	r3, r7, #12
 8006cca:	0b1b      	lsrs	r3, r3, #12
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	d027      	beq.n	8006d20 <_strtod_l+0x8e0>
 8006cd0:	4a49      	ldr	r2, [pc, #292]	; (8006df8 <_strtod_l+0x9b8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d157      	bne.n	8006d86 <_strtod_l+0x946>
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	4252      	negs	r2, r2
 8006cdc:	0031      	movs	r1, r6
 8006cde:	0010      	movs	r0, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <_strtod_l+0x8bc>
 8006ce4:	25d4      	movs	r5, #212	; 0xd4
 8006ce6:	4b41      	ldr	r3, [pc, #260]	; (8006dec <_strtod_l+0x9ac>)
 8006ce8:	04ed      	lsls	r5, r5, #19
 8006cea:	403b      	ands	r3, r7
 8006cec:	0010      	movs	r0, r2
 8006cee:	42ab      	cmp	r3, r5
 8006cf0:	d804      	bhi.n	8006cfc <_strtod_l+0x8bc>
 8006cf2:	306c      	adds	r0, #108	; 0x6c
 8006cf4:	0d1b      	lsrs	r3, r3, #20
 8006cf6:	1ac3      	subs	r3, r0, r3
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	0010      	movs	r0, r2
 8006cfc:	4281      	cmp	r1, r0
 8006cfe:	d142      	bne.n	8006d86 <_strtod_l+0x946>
 8006d00:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <_strtod_l+0x9bc>)
 8006d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d102      	bne.n	8006d0e <_strtod_l+0x8ce>
 8006d08:	1c4b      	adds	r3, r1, #1
 8006d0a:	d100      	bne.n	8006d0e <_strtod_l+0x8ce>
 8006d0c:	e5ce      	b.n	80068ac <_strtod_l+0x46c>
 8006d0e:	4b37      	ldr	r3, [pc, #220]	; (8006dec <_strtod_l+0x9ac>)
 8006d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d12:	2600      	movs	r6, #0
 8006d14:	401a      	ands	r2, r3
 8006d16:	0013      	movs	r3, r2
 8006d18:	2280      	movs	r2, #128	; 0x80
 8006d1a:	0352      	lsls	r2, r2, #13
 8006d1c:	189f      	adds	r7, r3, r2
 8006d1e:	e797      	b.n	8006c50 <_strtod_l+0x810>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d130      	bne.n	8006d86 <_strtod_l+0x946>
 8006d24:	2e00      	cmp	r6, #0
 8006d26:	d12e      	bne.n	8006d86 <_strtod_l+0x946>
 8006d28:	9906      	ldr	r1, [sp, #24]
 8006d2a:	003b      	movs	r3, r7
 8006d2c:	4a2f      	ldr	r2, [pc, #188]	; (8006dec <_strtod_l+0x9ac>)
 8006d2e:	2900      	cmp	r1, #0
 8006d30:	d020      	beq.n	8006d74 <_strtod_l+0x934>
 8006d32:	0011      	movs	r1, r2
 8006d34:	20d6      	movs	r0, #214	; 0xd6
 8006d36:	4039      	ands	r1, r7
 8006d38:	04c0      	lsls	r0, r0, #19
 8006d3a:	4281      	cmp	r1, r0
 8006d3c:	dc1a      	bgt.n	8006d74 <_strtod_l+0x934>
 8006d3e:	23dc      	movs	r3, #220	; 0xdc
 8006d40:	049b      	lsls	r3, r3, #18
 8006d42:	4299      	cmp	r1, r3
 8006d44:	dc00      	bgt.n	8006d48 <_strtod_l+0x908>
 8006d46:	e646      	b.n	80069d6 <_strtod_l+0x596>
 8006d48:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <_strtod_l+0x9c0>)
 8006d4a:	0030      	movs	r0, r6
 8006d4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d4e:	2300      	movs	r3, #0
 8006d50:	931a      	str	r3, [sp, #104]	; 0x68
 8006d52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d56:	0039      	movs	r1, r7
 8006d58:	f7fa fae0 	bl	800131c <__aeabi_dmul>
 8006d5c:	0006      	movs	r6, r0
 8006d5e:	000f      	movs	r7, r1
 8006d60:	1e0b      	subs	r3, r1, #0
 8006d62:	d000      	beq.n	8006d66 <_strtod_l+0x926>
 8006d64:	e5ab      	b.n	80068be <_strtod_l+0x47e>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d000      	beq.n	8006d6c <_strtod_l+0x92c>
 8006d6a:	e5a8      	b.n	80068be <_strtod_l+0x47e>
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	3322      	adds	r3, #34	; 0x22
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e5a4      	b.n	80068be <_strtod_l+0x47e>
 8006d74:	2601      	movs	r6, #1
 8006d76:	4013      	ands	r3, r2
 8006d78:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <_strtod_l+0x9c4>)
 8006d7a:	4276      	negs	r6, r6
 8006d7c:	189b      	adds	r3, r3, r2
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <_strtod_l+0x9b8>)
 8006d80:	431a      	orrs	r2, r3
 8006d82:	0017      	movs	r7, r2
 8006d84:	e764      	b.n	8006c50 <_strtod_l+0x810>
 8006d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <_strtod_l+0x978>
 8006d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d90:	4213      	tst	r3, r2
 8006d92:	d100      	bne.n	8006d96 <_strtod_l+0x956>
 8006d94:	e75c      	b.n	8006c50 <_strtod_l+0x810>
 8006d96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d98:	9a06      	ldr	r2, [sp, #24]
 8006d9a:	0030      	movs	r0, r6
 8006d9c:	0039      	movs	r1, r7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00f      	beq.n	8006dc2 <_strtod_l+0x982>
 8006da2:	f7ff fb35 	bl	8006410 <sulp>
 8006da6:	0002      	movs	r2, r0
 8006da8:	000b      	movs	r3, r1
 8006daa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006dac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006dae:	f7f9 fb8f 	bl	80004d0 <__aeabi_dadd>
 8006db2:	0006      	movs	r6, r0
 8006db4:	000f      	movs	r7, r1
 8006db6:	e74b      	b.n	8006c50 <_strtod_l+0x810>
 8006db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dba:	4233      	tst	r3, r6
 8006dbc:	d100      	bne.n	8006dc0 <_strtod_l+0x980>
 8006dbe:	e747      	b.n	8006c50 <_strtod_l+0x810>
 8006dc0:	e7e9      	b.n	8006d96 <_strtod_l+0x956>
 8006dc2:	f7ff fb25 	bl	8006410 <sulp>
 8006dc6:	0002      	movs	r2, r0
 8006dc8:	000b      	movs	r3, r1
 8006dca:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006dcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006dce:	f7fa fd17 	bl	8001800 <__aeabi_dsub>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	0006      	movs	r6, r0
 8006dd8:	000f      	movs	r7, r1
 8006dda:	f7f9 fb2d 	bl	8000438 <__aeabi_dcmpeq>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d000      	beq.n	8006de4 <_strtod_l+0x9a4>
 8006de2:	e5f8      	b.n	80069d6 <_strtod_l+0x596>
 8006de4:	e734      	b.n	8006c50 <_strtod_l+0x810>
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	fffffc02 	.word	0xfffffc02
 8006dec:	7ff00000 	.word	0x7ff00000
 8006df0:	08009de0 	.word	0x08009de0
 8006df4:	fffffbe2 	.word	0xfffffbe2
 8006df8:	000fffff 	.word	0x000fffff
 8006dfc:	7fefffff 	.word	0x7fefffff
 8006e00:	39500000 	.word	0x39500000
 8006e04:	fff00000 	.word	0xfff00000
 8006e08:	9905      	ldr	r1, [sp, #20]
 8006e0a:	0020      	movs	r0, r4
 8006e0c:	f002 fa12 	bl	8009234 <__ratio>
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	2200      	movs	r2, #0
 8006e14:	05db      	lsls	r3, r3, #23
 8006e16:	9008      	str	r0, [sp, #32]
 8006e18:	9109      	str	r1, [sp, #36]	; 0x24
 8006e1a:	f7f9 fb1d 	bl	8000458 <__aeabi_dcmple>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d100      	bne.n	8006e24 <_strtod_l+0x9e4>
 8006e22:	e07f      	b.n	8006f24 <_strtod_l+0xae4>
 8006e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d04b      	beq.n	8006ec2 <_strtod_l+0xa82>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b8a      	ldr	r3, [pc, #552]	; (8007058 <_strtod_l+0xc18>)
 8006e2e:	9210      	str	r2, [sp, #64]	; 0x40
 8006e30:	9311      	str	r3, [sp, #68]	; 0x44
 8006e32:	4b89      	ldr	r3, [pc, #548]	; (8007058 <_strtod_l+0xc18>)
 8006e34:	9308      	str	r3, [sp, #32]
 8006e36:	4a89      	ldr	r2, [pc, #548]	; (800705c <_strtod_l+0xc1c>)
 8006e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	9314      	str	r3, [sp, #80]	; 0x50
 8006e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e40:	4b87      	ldr	r3, [pc, #540]	; (8007060 <_strtod_l+0xc20>)
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d000      	beq.n	8006e48 <_strtod_l+0xa08>
 8006e46:	e0ba      	b.n	8006fbe <_strtod_l+0xb7e>
 8006e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e4c:	921a      	str	r2, [sp, #104]	; 0x68
 8006e4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e50:	4a84      	ldr	r2, [pc, #528]	; (8007064 <_strtod_l+0xc24>)
 8006e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e54:	4694      	mov	ip, r2
 8006e56:	4463      	add	r3, ip
 8006e58:	001f      	movs	r7, r3
 8006e5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e5e:	0030      	movs	r0, r6
 8006e60:	0039      	movs	r1, r7
 8006e62:	920c      	str	r2, [sp, #48]	; 0x30
 8006e64:	930d      	str	r3, [sp, #52]	; 0x34
 8006e66:	f002 f91f 	bl	80090a8 <__ulp>
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	000b      	movs	r3, r1
 8006e6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e72:	f7fa fa53 	bl	800131c <__aeabi_dmul>
 8006e76:	0032      	movs	r2, r6
 8006e78:	003b      	movs	r3, r7
 8006e7a:	f7f9 fb29 	bl	80004d0 <__aeabi_dadd>
 8006e7e:	4a77      	ldr	r2, [pc, #476]	; (800705c <_strtod_l+0xc1c>)
 8006e80:	4b79      	ldr	r3, [pc, #484]	; (8007068 <_strtod_l+0xc28>)
 8006e82:	0006      	movs	r6, r0
 8006e84:	400a      	ands	r2, r1
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d964      	bls.n	8006f54 <_strtod_l+0xb14>
 8006e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e8c:	4a77      	ldr	r2, [pc, #476]	; (800706c <_strtod_l+0xc2c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d103      	bne.n	8006e9a <_strtod_l+0xa5a>
 8006e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e94:	3301      	adds	r3, #1
 8006e96:	d100      	bne.n	8006e9a <_strtod_l+0xa5a>
 8006e98:	e508      	b.n	80068ac <_strtod_l+0x46c>
 8006e9a:	2601      	movs	r6, #1
 8006e9c:	4f73      	ldr	r7, [pc, #460]	; (800706c <_strtod_l+0xc2c>)
 8006e9e:	4276      	negs	r6, r6
 8006ea0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ea2:	9804      	ldr	r0, [sp, #16]
 8006ea4:	f001 fe68 	bl	8008b78 <_Bfree>
 8006ea8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006eaa:	9804      	ldr	r0, [sp, #16]
 8006eac:	f001 fe64 	bl	8008b78 <_Bfree>
 8006eb0:	9905      	ldr	r1, [sp, #20]
 8006eb2:	9804      	ldr	r0, [sp, #16]
 8006eb4:	f001 fe60 	bl	8008b78 <_Bfree>
 8006eb8:	0021      	movs	r1, r4
 8006eba:	9804      	ldr	r0, [sp, #16]
 8006ebc:	f001 fe5c 	bl	8008b78 <_Bfree>
 8006ec0:	e5f4      	b.n	8006aac <_strtod_l+0x66c>
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d11e      	bne.n	8006f04 <_strtod_l+0xac4>
 8006ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	d121      	bne.n	8006f10 <_strtod_l+0xad0>
 8006ecc:	9808      	ldr	r0, [sp, #32]
 8006ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4b61      	ldr	r3, [pc, #388]	; (8007058 <_strtod_l+0xc18>)
 8006ed4:	f7f9 fab6 	bl	8000444 <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d11f      	bne.n	8006f1c <_strtod_l+0xadc>
 8006edc:	9808      	ldr	r0, [sp, #32]
 8006ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4b63      	ldr	r3, [pc, #396]	; (8007070 <_strtod_l+0xc30>)
 8006ee4:	f7fa fa1a 	bl	800131c <__aeabi_dmul>
 8006ee8:	0005      	movs	r5, r0
 8006eea:	9108      	str	r1, [sp, #32]
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	0612      	lsls	r2, r2, #24
 8006ef0:	4694      	mov	ip, r2
 8006ef2:	9b08      	ldr	r3, [sp, #32]
 8006ef4:	951e      	str	r5, [sp, #120]	; 0x78
 8006ef6:	4463      	add	r3, ip
 8006ef8:	931f      	str	r3, [sp, #124]	; 0x7c
 8006efa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006efe:	9210      	str	r2, [sp, #64]	; 0x40
 8006f00:	9311      	str	r3, [sp, #68]	; 0x44
 8006f02:	e798      	b.n	8006e36 <_strtod_l+0x9f6>
 8006f04:	2e01      	cmp	r6, #1
 8006f06:	d103      	bne.n	8006f10 <_strtod_l+0xad0>
 8006f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d100      	bne.n	8006f10 <_strtod_l+0xad0>
 8006f0e:	e562      	b.n	80069d6 <_strtod_l+0x596>
 8006f10:	2200      	movs	r2, #0
 8006f12:	4b58      	ldr	r3, [pc, #352]	; (8007074 <_strtod_l+0xc34>)
 8006f14:	2500      	movs	r5, #0
 8006f16:	9210      	str	r2, [sp, #64]	; 0x40
 8006f18:	9311      	str	r3, [sp, #68]	; 0x44
 8006f1a:	e78a      	b.n	8006e32 <_strtod_l+0x9f2>
 8006f1c:	4b54      	ldr	r3, [pc, #336]	; (8007070 <_strtod_l+0xc30>)
 8006f1e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006f20:	9308      	str	r3, [sp, #32]
 8006f22:	e7e3      	b.n	8006eec <_strtod_l+0xaac>
 8006f24:	4b52      	ldr	r3, [pc, #328]	; (8007070 <_strtod_l+0xc30>)
 8006f26:	9808      	ldr	r0, [sp, #32]
 8006f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f7fa f9f6 	bl	800131c <__aeabi_dmul>
 8006f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f32:	0005      	movs	r5, r0
 8006f34:	9108      	str	r1, [sp, #32]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <_strtod_l+0xb0a>
 8006f3a:	2380      	movs	r3, #128	; 0x80
 8006f3c:	061b      	lsls	r3, r3, #24
 8006f3e:	18cb      	adds	r3, r1, r3
 8006f40:	9016      	str	r0, [sp, #88]	; 0x58
 8006f42:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f48:	e7d9      	b.n	8006efe <_strtod_l+0xabe>
 8006f4a:	0002      	movs	r2, r0
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	9216      	str	r2, [sp, #88]	; 0x58
 8006f50:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f52:	e7f7      	b.n	8006f44 <_strtod_l+0xb04>
 8006f54:	23d4      	movs	r3, #212	; 0xd4
 8006f56:	049b      	lsls	r3, r3, #18
 8006f58:	18cf      	adds	r7, r1, r3
 8006f5a:	9b06      	ldr	r3, [sp, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d19f      	bne.n	8006ea0 <_strtod_l+0xa60>
 8006f60:	4b3e      	ldr	r3, [pc, #248]	; (800705c <_strtod_l+0xc1c>)
 8006f62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f64:	970c      	str	r7, [sp, #48]	; 0x30
 8006f66:	403b      	ands	r3, r7
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d199      	bne.n	8006ea0 <_strtod_l+0xa60>
 8006f6c:	9908      	ldr	r1, [sp, #32]
 8006f6e:	0028      	movs	r0, r5
 8006f70:	f7fa ffaa 	bl	8001ec8 <__aeabi_d2iz>
 8006f74:	f7fa ffde 	bl	8001f34 <__aeabi_i2d>
 8006f78:	000b      	movs	r3, r1
 8006f7a:	0002      	movs	r2, r0
 8006f7c:	9908      	ldr	r1, [sp, #32]
 8006f7e:	0028      	movs	r0, r5
 8006f80:	f7fa fc3e 	bl	8001800 <__aeabi_dsub>
 8006f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f86:	9008      	str	r0, [sp, #32]
 8006f88:	9109      	str	r1, [sp, #36]	; 0x24
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <_strtod_l+0xb58>
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d102      	bne.n	8006f98 <_strtod_l+0xb58>
 8006f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	d058      	beq.n	800704a <_strtod_l+0xc0a>
 8006f98:	9808      	ldr	r0, [sp, #32]
 8006f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f9c:	4a36      	ldr	r2, [pc, #216]	; (8007078 <_strtod_l+0xc38>)
 8006f9e:	4b37      	ldr	r3, [pc, #220]	; (800707c <_strtod_l+0xc3c>)
 8006fa0:	f7f9 fa50 	bl	8000444 <__aeabi_dcmplt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d000      	beq.n	8006faa <_strtod_l+0xb6a>
 8006fa8:	e489      	b.n	80068be <_strtod_l+0x47e>
 8006faa:	9808      	ldr	r0, [sp, #32]
 8006fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fae:	4a34      	ldr	r2, [pc, #208]	; (8007080 <_strtod_l+0xc40>)
 8006fb0:	4b2f      	ldr	r3, [pc, #188]	; (8007070 <_strtod_l+0xc30>)
 8006fb2:	f7f9 fa5b 	bl	800046c <__aeabi_dcmpgt>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d100      	bne.n	8006fbc <_strtod_l+0xb7c>
 8006fba:	e771      	b.n	8006ea0 <_strtod_l+0xa60>
 8006fbc:	e47f      	b.n	80068be <_strtod_l+0x47e>
 8006fbe:	9b06      	ldr	r3, [sp, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02a      	beq.n	800701a <_strtod_l+0xbda>
 8006fc4:	23d4      	movs	r3, #212	; 0xd4
 8006fc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fc8:	04db      	lsls	r3, r3, #19
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d825      	bhi.n	800701a <_strtod_l+0xbda>
 8006fce:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <_strtod_l+0xc44>)
 8006fd0:	4b2d      	ldr	r3, [pc, #180]	; (8007088 <_strtod_l+0xc48>)
 8006fd2:	0028      	movs	r0, r5
 8006fd4:	9908      	ldr	r1, [sp, #32]
 8006fd6:	f7f9 fa3f 	bl	8000458 <__aeabi_dcmple>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d016      	beq.n	800700c <_strtod_l+0xbcc>
 8006fde:	0028      	movs	r0, r5
 8006fe0:	9908      	ldr	r1, [sp, #32]
 8006fe2:	f7f9 fa57 	bl	8000494 <__aeabi_d2uiz>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d100      	bne.n	8006fec <_strtod_l+0xbac>
 8006fea:	3001      	adds	r0, #1
 8006fec:	f7fa ffdc 	bl	8001fa8 <__aeabi_ui2d>
 8006ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ff2:	0005      	movs	r5, r0
 8006ff4:	9108      	str	r1, [sp, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d122      	bne.n	8007040 <_strtod_l+0xc00>
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	18cb      	adds	r3, r1, r3
 8007000:	9018      	str	r0, [sp, #96]	; 0x60
 8007002:	9319      	str	r3, [sp, #100]	; 0x64
 8007004:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007008:	9210      	str	r2, [sp, #64]	; 0x40
 800700a:	9311      	str	r3, [sp, #68]	; 0x44
 800700c:	22d6      	movs	r2, #214	; 0xd6
 800700e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007010:	04d2      	lsls	r2, r2, #19
 8007012:	189b      	adds	r3, r3, r2
 8007014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	9311      	str	r3, [sp, #68]	; 0x44
 800701a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800701c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800701e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007020:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007022:	f002 f841 	bl	80090a8 <__ulp>
 8007026:	0002      	movs	r2, r0
 8007028:	000b      	movs	r3, r1
 800702a:	0030      	movs	r0, r6
 800702c:	0039      	movs	r1, r7
 800702e:	f7fa f975 	bl	800131c <__aeabi_dmul>
 8007032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007036:	f7f9 fa4b 	bl	80004d0 <__aeabi_dadd>
 800703a:	0006      	movs	r6, r0
 800703c:	000f      	movs	r7, r1
 800703e:	e78c      	b.n	8006f5a <_strtod_l+0xb1a>
 8007040:	0002      	movs	r2, r0
 8007042:	9b08      	ldr	r3, [sp, #32]
 8007044:	9218      	str	r2, [sp, #96]	; 0x60
 8007046:	9319      	str	r3, [sp, #100]	; 0x64
 8007048:	e7dc      	b.n	8007004 <_strtod_l+0xbc4>
 800704a:	4a0b      	ldr	r2, [pc, #44]	; (8007078 <_strtod_l+0xc38>)
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <_strtod_l+0xc4c>)
 800704e:	9808      	ldr	r0, [sp, #32]
 8007050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007052:	f7f9 f9f7 	bl	8000444 <__aeabi_dcmplt>
 8007056:	e7ae      	b.n	8006fb6 <_strtod_l+0xb76>
 8007058:	3ff00000 	.word	0x3ff00000
 800705c:	7ff00000 	.word	0x7ff00000
 8007060:	7fe00000 	.word	0x7fe00000
 8007064:	fcb00000 	.word	0xfcb00000
 8007068:	7c9fffff 	.word	0x7c9fffff
 800706c:	7fefffff 	.word	0x7fefffff
 8007070:	3fe00000 	.word	0x3fe00000
 8007074:	bff00000 	.word	0xbff00000
 8007078:	94a03595 	.word	0x94a03595
 800707c:	3fdfffff 	.word	0x3fdfffff
 8007080:	35afe535 	.word	0x35afe535
 8007084:	ffc00000 	.word	0xffc00000
 8007088:	41dfffff 	.word	0x41dfffff
 800708c:	3fcfffff 	.word	0x3fcfffff

08007090 <_strtod_r>:
 8007090:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <_strtod_r+0x14>)
 8007092:	b510      	push	{r4, lr}
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d100      	bne.n	800709e <_strtod_r+0xe>
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <_strtod_r+0x18>)
 800709e:	f7ff f9cf 	bl	8006440 <_strtod_l>
 80070a2:	bd10      	pop	{r4, pc}
 80070a4:	2000000c 	.word	0x2000000c
 80070a8:	20000070 	.word	0x20000070

080070ac <_strtol_l.isra.0>:
 80070ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ae:	001f      	movs	r7, r3
 80070b0:	000e      	movs	r6, r1
 80070b2:	b087      	sub	sp, #28
 80070b4:	9005      	str	r0, [sp, #20]
 80070b6:	9101      	str	r1, [sp, #4]
 80070b8:	9202      	str	r2, [sp, #8]
 80070ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070bc:	7834      	ldrb	r4, [r6, #0]
 80070be:	f001 fc75 	bl	80089ac <__locale_ctype_ptr_l>
 80070c2:	2208      	movs	r2, #8
 80070c4:	1900      	adds	r0, r0, r4
 80070c6:	7843      	ldrb	r3, [r0, #1]
 80070c8:	1c75      	adds	r5, r6, #1
 80070ca:	4013      	ands	r3, r2
 80070cc:	d136      	bne.n	800713c <_strtol_l.isra.0+0x90>
 80070ce:	2c2d      	cmp	r4, #45	; 0x2d
 80070d0:	d136      	bne.n	8007140 <_strtol_l.isra.0+0x94>
 80070d2:	1cb5      	adds	r5, r6, #2
 80070d4:	7874      	ldrb	r4, [r6, #1]
 80070d6:	2601      	movs	r6, #1
 80070d8:	2f00      	cmp	r7, #0
 80070da:	d062      	beq.n	80071a2 <_strtol_l.isra.0+0xf6>
 80070dc:	2f10      	cmp	r7, #16
 80070de:	d109      	bne.n	80070f4 <_strtol_l.isra.0+0x48>
 80070e0:	2c30      	cmp	r4, #48	; 0x30
 80070e2:	d107      	bne.n	80070f4 <_strtol_l.isra.0+0x48>
 80070e4:	2220      	movs	r2, #32
 80070e6:	782b      	ldrb	r3, [r5, #0]
 80070e8:	4393      	bics	r3, r2
 80070ea:	2b58      	cmp	r3, #88	; 0x58
 80070ec:	d154      	bne.n	8007198 <_strtol_l.isra.0+0xec>
 80070ee:	2710      	movs	r7, #16
 80070f0:	786c      	ldrb	r4, [r5, #1]
 80070f2:	3502      	adds	r5, #2
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <_strtol_l.isra.0+0x100>)
 80070f6:	0039      	movs	r1, r7
 80070f8:	18f3      	adds	r3, r6, r3
 80070fa:	0018      	movs	r0, r3
 80070fc:	9303      	str	r3, [sp, #12]
 80070fe:	f7f9 f89b 	bl	8000238 <__aeabi_uidivmod>
 8007102:	9104      	str	r1, [sp, #16]
 8007104:	2101      	movs	r1, #1
 8007106:	2300      	movs	r3, #0
 8007108:	4249      	negs	r1, r1
 800710a:	0002      	movs	r2, r0
 800710c:	468c      	mov	ip, r1
 800710e:	0018      	movs	r0, r3
 8007110:	0021      	movs	r1, r4
 8007112:	3930      	subs	r1, #48	; 0x30
 8007114:	2909      	cmp	r1, #9
 8007116:	d81a      	bhi.n	800714e <_strtol_l.isra.0+0xa2>
 8007118:	000c      	movs	r4, r1
 800711a:	42a7      	cmp	r7, r4
 800711c:	dd23      	ble.n	8007166 <_strtol_l.isra.0+0xba>
 800711e:	1c59      	adds	r1, r3, #1
 8007120:	d009      	beq.n	8007136 <_strtol_l.isra.0+0x8a>
 8007122:	4663      	mov	r3, ip
 8007124:	4282      	cmp	r2, r0
 8007126:	d306      	bcc.n	8007136 <_strtol_l.isra.0+0x8a>
 8007128:	d102      	bne.n	8007130 <_strtol_l.isra.0+0x84>
 800712a:	9904      	ldr	r1, [sp, #16]
 800712c:	42a1      	cmp	r1, r4
 800712e:	db02      	blt.n	8007136 <_strtol_l.isra.0+0x8a>
 8007130:	2301      	movs	r3, #1
 8007132:	4378      	muls	r0, r7
 8007134:	1820      	adds	r0, r4, r0
 8007136:	782c      	ldrb	r4, [r5, #0]
 8007138:	3501      	adds	r5, #1
 800713a:	e7e9      	b.n	8007110 <_strtol_l.isra.0+0x64>
 800713c:	002e      	movs	r6, r5
 800713e:	e7bc      	b.n	80070ba <_strtol_l.isra.0+0xe>
 8007140:	2c2b      	cmp	r4, #43	; 0x2b
 8007142:	d001      	beq.n	8007148 <_strtol_l.isra.0+0x9c>
 8007144:	001e      	movs	r6, r3
 8007146:	e7c7      	b.n	80070d8 <_strtol_l.isra.0+0x2c>
 8007148:	1cb5      	adds	r5, r6, #2
 800714a:	7874      	ldrb	r4, [r6, #1]
 800714c:	e7fa      	b.n	8007144 <_strtol_l.isra.0+0x98>
 800714e:	0021      	movs	r1, r4
 8007150:	3941      	subs	r1, #65	; 0x41
 8007152:	2919      	cmp	r1, #25
 8007154:	d801      	bhi.n	800715a <_strtol_l.isra.0+0xae>
 8007156:	3c37      	subs	r4, #55	; 0x37
 8007158:	e7df      	b.n	800711a <_strtol_l.isra.0+0x6e>
 800715a:	0021      	movs	r1, r4
 800715c:	3961      	subs	r1, #97	; 0x61
 800715e:	2919      	cmp	r1, #25
 8007160:	d801      	bhi.n	8007166 <_strtol_l.isra.0+0xba>
 8007162:	3c57      	subs	r4, #87	; 0x57
 8007164:	e7d9      	b.n	800711a <_strtol_l.isra.0+0x6e>
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	d108      	bne.n	800717c <_strtol_l.isra.0+0xd0>
 800716a:	9a05      	ldr	r2, [sp, #20]
 800716c:	3323      	adds	r3, #35	; 0x23
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	9b02      	ldr	r3, [sp, #8]
 8007172:	9803      	ldr	r0, [sp, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <_strtol_l.isra.0+0xe0>
 8007178:	b007      	add	sp, #28
 800717a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800717c:	2e00      	cmp	r6, #0
 800717e:	d000      	beq.n	8007182 <_strtol_l.isra.0+0xd6>
 8007180:	4240      	negs	r0, r0
 8007182:	9a02      	ldr	r2, [sp, #8]
 8007184:	2a00      	cmp	r2, #0
 8007186:	d0f7      	beq.n	8007178 <_strtol_l.isra.0+0xcc>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <_strtol_l.isra.0+0xe4>
 800718c:	1e6b      	subs	r3, r5, #1
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	9b02      	ldr	r3, [sp, #8]
 8007192:	9a01      	ldr	r2, [sp, #4]
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e7ef      	b.n	8007178 <_strtol_l.isra.0+0xcc>
 8007198:	2430      	movs	r4, #48	; 0x30
 800719a:	2f00      	cmp	r7, #0
 800719c:	d1aa      	bne.n	80070f4 <_strtol_l.isra.0+0x48>
 800719e:	2708      	movs	r7, #8
 80071a0:	e7a8      	b.n	80070f4 <_strtol_l.isra.0+0x48>
 80071a2:	2c30      	cmp	r4, #48	; 0x30
 80071a4:	d09e      	beq.n	80070e4 <_strtol_l.isra.0+0x38>
 80071a6:	270a      	movs	r7, #10
 80071a8:	e7a4      	b.n	80070f4 <_strtol_l.isra.0+0x48>
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	7fffffff 	.word	0x7fffffff

080071b0 <_strtol_r>:
 80071b0:	b513      	push	{r0, r1, r4, lr}
 80071b2:	4c05      	ldr	r4, [pc, #20]	; (80071c8 <_strtol_r+0x18>)
 80071b4:	6824      	ldr	r4, [r4, #0]
 80071b6:	6a24      	ldr	r4, [r4, #32]
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	d100      	bne.n	80071be <_strtol_r+0xe>
 80071bc:	4c03      	ldr	r4, [pc, #12]	; (80071cc <_strtol_r+0x1c>)
 80071be:	9400      	str	r4, [sp, #0]
 80071c0:	f7ff ff74 	bl	80070ac <_strtol_l.isra.0>
 80071c4:	bd16      	pop	{r1, r2, r4, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	20000070 	.word	0x20000070

080071d0 <__swbuf_r>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	0005      	movs	r5, r0
 80071d4:	000e      	movs	r6, r1
 80071d6:	0014      	movs	r4, r2
 80071d8:	2800      	cmp	r0, #0
 80071da:	d004      	beq.n	80071e6 <__swbuf_r+0x16>
 80071dc:	6983      	ldr	r3, [r0, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <__swbuf_r+0x16>
 80071e2:	f001 f81f 	bl	8008224 <__sinit>
 80071e6:	4b22      	ldr	r3, [pc, #136]	; (8007270 <__swbuf_r+0xa0>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d12d      	bne.n	8007248 <__swbuf_r+0x78>
 80071ec:	686c      	ldr	r4, [r5, #4]
 80071ee:	69a3      	ldr	r3, [r4, #24]
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	071b      	lsls	r3, r3, #28
 80071f6:	d531      	bpl.n	800725c <__swbuf_r+0x8c>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d02e      	beq.n	800725c <__swbuf_r+0x8c>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	6922      	ldr	r2, [r4, #16]
 8007202:	b2f7      	uxtb	r7, r6
 8007204:	1a98      	subs	r0, r3, r2
 8007206:	6963      	ldr	r3, [r4, #20]
 8007208:	b2f6      	uxtb	r6, r6
 800720a:	4283      	cmp	r3, r0
 800720c:	dc05      	bgt.n	800721a <__swbuf_r+0x4a>
 800720e:	0021      	movs	r1, r4
 8007210:	0028      	movs	r0, r5
 8007212:	f000 ff99 	bl	8008148 <_fflush_r>
 8007216:	2800      	cmp	r0, #0
 8007218:	d126      	bne.n	8007268 <__swbuf_r+0x98>
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	3001      	adds	r0, #1
 800721e:	3b01      	subs	r3, #1
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	701f      	strb	r7, [r3, #0]
 800722a:	6963      	ldr	r3, [r4, #20]
 800722c:	4283      	cmp	r3, r0
 800722e:	d004      	beq.n	800723a <__swbuf_r+0x6a>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	07db      	lsls	r3, r3, #31
 8007234:	d51a      	bpl.n	800726c <__swbuf_r+0x9c>
 8007236:	2e0a      	cmp	r6, #10
 8007238:	d118      	bne.n	800726c <__swbuf_r+0x9c>
 800723a:	0021      	movs	r1, r4
 800723c:	0028      	movs	r0, r5
 800723e:	f000 ff83 	bl	8008148 <_fflush_r>
 8007242:	2800      	cmp	r0, #0
 8007244:	d012      	beq.n	800726c <__swbuf_r+0x9c>
 8007246:	e00f      	b.n	8007268 <__swbuf_r+0x98>
 8007248:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <__swbuf_r+0xa4>)
 800724a:	429c      	cmp	r4, r3
 800724c:	d101      	bne.n	8007252 <__swbuf_r+0x82>
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	e7cd      	b.n	80071ee <__swbuf_r+0x1e>
 8007252:	4b09      	ldr	r3, [pc, #36]	; (8007278 <__swbuf_r+0xa8>)
 8007254:	429c      	cmp	r4, r3
 8007256:	d1ca      	bne.n	80071ee <__swbuf_r+0x1e>
 8007258:	68ec      	ldr	r4, [r5, #12]
 800725a:	e7c8      	b.n	80071ee <__swbuf_r+0x1e>
 800725c:	0021      	movs	r1, r4
 800725e:	0028      	movs	r0, r5
 8007260:	f000 f80c 	bl	800727c <__swsetup_r>
 8007264:	2800      	cmp	r0, #0
 8007266:	d0ca      	beq.n	80071fe <__swbuf_r+0x2e>
 8007268:	2601      	movs	r6, #1
 800726a:	4276      	negs	r6, r6
 800726c:	0030      	movs	r0, r6
 800726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007270:	08009e38 	.word	0x08009e38
 8007274:	08009e58 	.word	0x08009e58
 8007278:	08009e18 	.word	0x08009e18

0800727c <__swsetup_r>:
 800727c:	4b36      	ldr	r3, [pc, #216]	; (8007358 <__swsetup_r+0xdc>)
 800727e:	b570      	push	{r4, r5, r6, lr}
 8007280:	681d      	ldr	r5, [r3, #0]
 8007282:	0006      	movs	r6, r0
 8007284:	000c      	movs	r4, r1
 8007286:	2d00      	cmp	r5, #0
 8007288:	d005      	beq.n	8007296 <__swsetup_r+0x1a>
 800728a:	69ab      	ldr	r3, [r5, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <__swsetup_r+0x1a>
 8007290:	0028      	movs	r0, r5
 8007292:	f000 ffc7 	bl	8008224 <__sinit>
 8007296:	4b31      	ldr	r3, [pc, #196]	; (800735c <__swsetup_r+0xe0>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d10f      	bne.n	80072bc <__swsetup_r+0x40>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	230c      	movs	r3, #12
 80072a0:	5ee2      	ldrsh	r2, [r4, r3]
 80072a2:	b293      	uxth	r3, r2
 80072a4:	0719      	lsls	r1, r3, #28
 80072a6:	d42d      	bmi.n	8007304 <__swsetup_r+0x88>
 80072a8:	06d9      	lsls	r1, r3, #27
 80072aa:	d411      	bmi.n	80072d0 <__swsetup_r+0x54>
 80072ac:	2309      	movs	r3, #9
 80072ae:	2001      	movs	r0, #1
 80072b0:	6033      	str	r3, [r6, #0]
 80072b2:	3337      	adds	r3, #55	; 0x37
 80072b4:	4313      	orrs	r3, r2
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	4240      	negs	r0, r0
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	4b28      	ldr	r3, [pc, #160]	; (8007360 <__swsetup_r+0xe4>)
 80072be:	429c      	cmp	r4, r3
 80072c0:	d101      	bne.n	80072c6 <__swsetup_r+0x4a>
 80072c2:	68ac      	ldr	r4, [r5, #8]
 80072c4:	e7eb      	b.n	800729e <__swsetup_r+0x22>
 80072c6:	4b27      	ldr	r3, [pc, #156]	; (8007364 <__swsetup_r+0xe8>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	d1e8      	bne.n	800729e <__swsetup_r+0x22>
 80072cc:	68ec      	ldr	r4, [r5, #12]
 80072ce:	e7e6      	b.n	800729e <__swsetup_r+0x22>
 80072d0:	075b      	lsls	r3, r3, #29
 80072d2:	d513      	bpl.n	80072fc <__swsetup_r+0x80>
 80072d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d008      	beq.n	80072ec <__swsetup_r+0x70>
 80072da:	0023      	movs	r3, r4
 80072dc:	3344      	adds	r3, #68	; 0x44
 80072de:	4299      	cmp	r1, r3
 80072e0:	d002      	beq.n	80072e8 <__swsetup_r+0x6c>
 80072e2:	0030      	movs	r0, r6
 80072e4:	f002 f814 	bl	8009310 <_free_r>
 80072e8:	2300      	movs	r3, #0
 80072ea:	6363      	str	r3, [r4, #52]	; 0x34
 80072ec:	2224      	movs	r2, #36	; 0x24
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	4393      	bics	r3, r2
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	2300      	movs	r3, #0
 80072f6:	6063      	str	r3, [r4, #4]
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	2308      	movs	r3, #8
 80072fe:	89a2      	ldrh	r2, [r4, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <__swsetup_r+0xa6>
 800730a:	21a0      	movs	r1, #160	; 0xa0
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0089      	lsls	r1, r1, #2
 8007312:	0092      	lsls	r2, r2, #2
 8007314:	400b      	ands	r3, r1
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <__swsetup_r+0xa6>
 800731a:	0021      	movs	r1, r4
 800731c:	0030      	movs	r0, r6
 800731e:	f001 fb7f 	bl	8008a20 <__smakebuf_r>
 8007322:	2301      	movs	r3, #1
 8007324:	89a2      	ldrh	r2, [r4, #12]
 8007326:	4013      	ands	r3, r2
 8007328:	d011      	beq.n	800734e <__swsetup_r+0xd2>
 800732a:	2300      	movs	r3, #0
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	6963      	ldr	r3, [r4, #20]
 8007330:	425b      	negs	r3, r3
 8007332:	61a3      	str	r3, [r4, #24]
 8007334:	2000      	movs	r0, #0
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	4283      	cmp	r3, r0
 800733a:	d1be      	bne.n	80072ba <__swsetup_r+0x3e>
 800733c:	230c      	movs	r3, #12
 800733e:	5ee2      	ldrsh	r2, [r4, r3]
 8007340:	0613      	lsls	r3, r2, #24
 8007342:	d5ba      	bpl.n	80072ba <__swsetup_r+0x3e>
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	4313      	orrs	r3, r2
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	3801      	subs	r0, #1
 800734c:	e7b5      	b.n	80072ba <__swsetup_r+0x3e>
 800734e:	0792      	lsls	r2, r2, #30
 8007350:	d400      	bmi.n	8007354 <__swsetup_r+0xd8>
 8007352:	6963      	ldr	r3, [r4, #20]
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	e7ed      	b.n	8007334 <__swsetup_r+0xb8>
 8007358:	2000000c 	.word	0x2000000c
 800735c:	08009e38 	.word	0x08009e38
 8007360:	08009e58 	.word	0x08009e58
 8007364:	08009e18 	.word	0x08009e18

08007368 <quorem>:
 8007368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736a:	6903      	ldr	r3, [r0, #16]
 800736c:	690c      	ldr	r4, [r1, #16]
 800736e:	b089      	sub	sp, #36	; 0x24
 8007370:	0007      	movs	r7, r0
 8007372:	9105      	str	r1, [sp, #20]
 8007374:	2600      	movs	r6, #0
 8007376:	42a3      	cmp	r3, r4
 8007378:	db65      	blt.n	8007446 <quorem+0xde>
 800737a:	000b      	movs	r3, r1
 800737c:	3c01      	subs	r4, #1
 800737e:	3314      	adds	r3, #20
 8007380:	00a5      	lsls	r5, r4, #2
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	195b      	adds	r3, r3, r5
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	0003      	movs	r3, r0
 800738a:	3314      	adds	r3, #20
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	195d      	adds	r5, r3, r5
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	6828      	ldr	r0, [r5, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1c59      	adds	r1, r3, #1
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	f7f8 fec7 	bl	800012c <__udivsi3>
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	42b0      	cmp	r0, r6
 80073a2:	d029      	beq.n	80073f8 <quorem+0x90>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	9802      	ldr	r0, [sp, #8]
 80073a8:	469c      	mov	ip, r3
 80073aa:	9606      	str	r6, [sp, #24]
 80073ac:	4662      	mov	r2, ip
 80073ae:	ca08      	ldmia	r2!, {r3}
 80073b0:	4694      	mov	ip, r2
 80073b2:	9a01      	ldr	r2, [sp, #4]
 80073b4:	b299      	uxth	r1, r3
 80073b6:	4351      	muls	r1, r2
 80073b8:	0c1b      	lsrs	r3, r3, #16
 80073ba:	4353      	muls	r3, r2
 80073bc:	1989      	adds	r1, r1, r6
 80073be:	0c0a      	lsrs	r2, r1, #16
 80073c0:	189b      	adds	r3, r3, r2
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	0c1e      	lsrs	r6, r3, #16
 80073c6:	6803      	ldr	r3, [r0, #0]
 80073c8:	b289      	uxth	r1, r1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	18d2      	adds	r2, r2, r3
 80073d0:	6803      	ldr	r3, [r0, #0]
 80073d2:	1a52      	subs	r2, r2, r1
 80073d4:	0c19      	lsrs	r1, r3, #16
 80073d6:	466b      	mov	r3, sp
 80073d8:	8b9b      	ldrh	r3, [r3, #28]
 80073da:	1acb      	subs	r3, r1, r3
 80073dc:	1411      	asrs	r1, r2, #16
 80073de:	185b      	adds	r3, r3, r1
 80073e0:	1419      	asrs	r1, r3, #16
 80073e2:	b292      	uxth	r2, r2
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	431a      	orrs	r2, r3
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	9106      	str	r1, [sp, #24]
 80073ec:	c004      	stmia	r0!, {r2}
 80073ee:	4563      	cmp	r3, ip
 80073f0:	d2dc      	bcs.n	80073ac <quorem+0x44>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02d      	beq.n	8007454 <quorem+0xec>
 80073f8:	9905      	ldr	r1, [sp, #20]
 80073fa:	0038      	movs	r0, r7
 80073fc:	f001 fdd6 	bl	8008fac <__mcmp>
 8007400:	2800      	cmp	r0, #0
 8007402:	db1f      	blt.n	8007444 <quorem+0xdc>
 8007404:	2500      	movs	r5, #0
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	9802      	ldr	r0, [sp, #8]
 800740a:	3301      	adds	r3, #1
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	6802      	ldr	r2, [r0, #0]
 8007412:	c908      	ldmia	r1!, {r3}
 8007414:	b292      	uxth	r2, r2
 8007416:	1955      	adds	r5, r2, r5
 8007418:	b29a      	uxth	r2, r3
 800741a:	1aaa      	subs	r2, r5, r2
 800741c:	6805      	ldr	r5, [r0, #0]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	0c2d      	lsrs	r5, r5, #16
 8007422:	1aeb      	subs	r3, r5, r3
 8007424:	1415      	asrs	r5, r2, #16
 8007426:	195b      	adds	r3, r3, r5
 8007428:	141d      	asrs	r5, r3, #16
 800742a:	b292      	uxth	r2, r2
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	4313      	orrs	r3, r2
 8007430:	c008      	stmia	r0!, {r3}
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	428b      	cmp	r3, r1
 8007436:	d2eb      	bcs.n	8007410 <quorem+0xa8>
 8007438:	9a02      	ldr	r2, [sp, #8]
 800743a:	00a3      	lsls	r3, r4, #2
 800743c:	18d3      	adds	r3, r2, r3
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	2a00      	cmp	r2, #0
 8007442:	d011      	beq.n	8007468 <quorem+0x100>
 8007444:	9e01      	ldr	r6, [sp, #4]
 8007446:	0030      	movs	r0, r6
 8007448:	b009      	add	sp, #36	; 0x24
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <quorem+0xf4>
 8007452:	3c01      	subs	r4, #1
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	3d04      	subs	r5, #4
 8007458:	42ab      	cmp	r3, r5
 800745a:	d3f7      	bcc.n	800744c <quorem+0xe4>
 800745c:	613c      	str	r4, [r7, #16]
 800745e:	e7cb      	b.n	80073f8 <quorem+0x90>
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	2a00      	cmp	r2, #0
 8007464:	d104      	bne.n	8007470 <quorem+0x108>
 8007466:	3c01      	subs	r4, #1
 8007468:	9a02      	ldr	r2, [sp, #8]
 800746a:	3b04      	subs	r3, #4
 800746c:	429a      	cmp	r2, r3
 800746e:	d3f7      	bcc.n	8007460 <quorem+0xf8>
 8007470:	613c      	str	r4, [r7, #16]
 8007472:	e7e7      	b.n	8007444 <quorem+0xdc>

08007474 <_dtoa_r>:
 8007474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007476:	0016      	movs	r6, r2
 8007478:	001f      	movs	r7, r3
 800747a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800747c:	b09b      	sub	sp, #108	; 0x6c
 800747e:	9002      	str	r0, [sp, #8]
 8007480:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8007482:	9606      	str	r6, [sp, #24]
 8007484:	9707      	str	r7, [sp, #28]
 8007486:	2c00      	cmp	r4, #0
 8007488:	d108      	bne.n	800749c <_dtoa_r+0x28>
 800748a:	2010      	movs	r0, #16
 800748c:	f001 fb0c 	bl	8008aa8 <malloc>
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	6258      	str	r0, [r3, #36]	; 0x24
 8007494:	6044      	str	r4, [r0, #4]
 8007496:	6084      	str	r4, [r0, #8]
 8007498:	6004      	str	r4, [r0, #0]
 800749a:	60c4      	str	r4, [r0, #12]
 800749c:	9b02      	ldr	r3, [sp, #8]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	2900      	cmp	r1, #0
 80074a4:	d00b      	beq.n	80074be <_dtoa_r+0x4a>
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	2301      	movs	r3, #1
 80074aa:	4093      	lsls	r3, r2
 80074ac:	604a      	str	r2, [r1, #4]
 80074ae:	608b      	str	r3, [r1, #8]
 80074b0:	9802      	ldr	r0, [sp, #8]
 80074b2:	f001 fb61 	bl	8008b78 <_Bfree>
 80074b6:	2200      	movs	r2, #0
 80074b8:	9b02      	ldr	r3, [sp, #8]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	2f00      	cmp	r7, #0
 80074c0:	da20      	bge.n	8007504 <_dtoa_r+0x90>
 80074c2:	2301      	movs	r3, #1
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	007b      	lsls	r3, r7, #1
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	9307      	str	r3, [sp, #28]
 80074cc:	9c07      	ldr	r4, [sp, #28]
 80074ce:	4bb2      	ldr	r3, [pc, #712]	; (8007798 <_dtoa_r+0x324>)
 80074d0:	0022      	movs	r2, r4
 80074d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80074d4:	401a      	ands	r2, r3
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d117      	bne.n	800750a <_dtoa_r+0x96>
 80074da:	4bb0      	ldr	r3, [pc, #704]	; (800779c <_dtoa_r+0x328>)
 80074dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	9b06      	ldr	r3, [sp, #24]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <_dtoa_r+0x7a>
 80074e6:	0324      	lsls	r4, r4, #12
 80074e8:	d101      	bne.n	80074ee <_dtoa_r+0x7a>
 80074ea:	f000 fd87 	bl	8007ffc <_dtoa_r+0xb88>
 80074ee:	4bac      	ldr	r3, [pc, #688]	; (80077a0 <_dtoa_r+0x32c>)
 80074f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074f2:	9308      	str	r3, [sp, #32]
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	d002      	beq.n	80074fe <_dtoa_r+0x8a>
 80074f8:	4baa      	ldr	r3, [pc, #680]	; (80077a4 <_dtoa_r+0x330>)
 80074fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	9808      	ldr	r0, [sp, #32]
 8007500:	b01b      	add	sp, #108	; 0x6c
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007504:	2300      	movs	r3, #0
 8007506:	602b      	str	r3, [r5, #0]
 8007508:	e7e0      	b.n	80074cc <_dtoa_r+0x58>
 800750a:	9e06      	ldr	r6, [sp, #24]
 800750c:	9f07      	ldr	r7, [sp, #28]
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	0030      	movs	r0, r6
 8007514:	0039      	movs	r1, r7
 8007516:	f7f8 ff8f 	bl	8000438 <__aeabi_dcmpeq>
 800751a:	1e05      	subs	r5, r0, #0
 800751c:	d00b      	beq.n	8007536 <_dtoa_r+0xc2>
 800751e:	2301      	movs	r3, #1
 8007520:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	4ba0      	ldr	r3, [pc, #640]	; (80077a8 <_dtoa_r+0x334>)
 8007526:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	2a00      	cmp	r2, #0
 800752c:	d0e7      	beq.n	80074fe <_dtoa_r+0x8a>
 800752e:	4a9f      	ldr	r2, [pc, #636]	; (80077ac <_dtoa_r+0x338>)
 8007530:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007532:	600a      	str	r2, [r1, #0]
 8007534:	e7e3      	b.n	80074fe <_dtoa_r+0x8a>
 8007536:	ab18      	add	r3, sp, #96	; 0x60
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	ab19      	add	r3, sp, #100	; 0x64
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	0032      	movs	r2, r6
 8007540:	003b      	movs	r3, r7
 8007542:	9802      	ldr	r0, [sp, #8]
 8007544:	f001 fe22 	bl	800918c <__d2b>
 8007548:	0063      	lsls	r3, r4, #1
 800754a:	9003      	str	r0, [sp, #12]
 800754c:	0d5b      	lsrs	r3, r3, #21
 800754e:	d074      	beq.n	800763a <_dtoa_r+0x1c6>
 8007550:	033a      	lsls	r2, r7, #12
 8007552:	4c97      	ldr	r4, [pc, #604]	; (80077b0 <_dtoa_r+0x33c>)
 8007554:	0b12      	lsrs	r2, r2, #12
 8007556:	4314      	orrs	r4, r2
 8007558:	0021      	movs	r1, r4
 800755a:	4a96      	ldr	r2, [pc, #600]	; (80077b4 <_dtoa_r+0x340>)
 800755c:	0030      	movs	r0, r6
 800755e:	9516      	str	r5, [sp, #88]	; 0x58
 8007560:	189e      	adds	r6, r3, r2
 8007562:	2200      	movs	r2, #0
 8007564:	4b94      	ldr	r3, [pc, #592]	; (80077b8 <_dtoa_r+0x344>)
 8007566:	f7fa f94b 	bl	8001800 <__aeabi_dsub>
 800756a:	4a94      	ldr	r2, [pc, #592]	; (80077bc <_dtoa_r+0x348>)
 800756c:	4b94      	ldr	r3, [pc, #592]	; (80077c0 <_dtoa_r+0x34c>)
 800756e:	f7f9 fed5 	bl	800131c <__aeabi_dmul>
 8007572:	4a94      	ldr	r2, [pc, #592]	; (80077c4 <_dtoa_r+0x350>)
 8007574:	4b94      	ldr	r3, [pc, #592]	; (80077c8 <_dtoa_r+0x354>)
 8007576:	f7f8 ffab 	bl	80004d0 <__aeabi_dadd>
 800757a:	0004      	movs	r4, r0
 800757c:	0030      	movs	r0, r6
 800757e:	000d      	movs	r5, r1
 8007580:	f7fa fcd8 	bl	8001f34 <__aeabi_i2d>
 8007584:	4a91      	ldr	r2, [pc, #580]	; (80077cc <_dtoa_r+0x358>)
 8007586:	4b92      	ldr	r3, [pc, #584]	; (80077d0 <_dtoa_r+0x35c>)
 8007588:	f7f9 fec8 	bl	800131c <__aeabi_dmul>
 800758c:	0002      	movs	r2, r0
 800758e:	000b      	movs	r3, r1
 8007590:	0020      	movs	r0, r4
 8007592:	0029      	movs	r1, r5
 8007594:	f7f8 ff9c 	bl	80004d0 <__aeabi_dadd>
 8007598:	0004      	movs	r4, r0
 800759a:	000d      	movs	r5, r1
 800759c:	f7fa fc94 	bl	8001ec8 <__aeabi_d2iz>
 80075a0:	2200      	movs	r2, #0
 80075a2:	0007      	movs	r7, r0
 80075a4:	2300      	movs	r3, #0
 80075a6:	0020      	movs	r0, r4
 80075a8:	0029      	movs	r1, r5
 80075aa:	f7f8 ff4b 	bl	8000444 <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d009      	beq.n	80075c6 <_dtoa_r+0x152>
 80075b2:	0038      	movs	r0, r7
 80075b4:	f7fa fcbe 	bl	8001f34 <__aeabi_i2d>
 80075b8:	002b      	movs	r3, r5
 80075ba:	0022      	movs	r2, r4
 80075bc:	f7f8 ff3c 	bl	8000438 <__aeabi_dcmpeq>
 80075c0:	4243      	negs	r3, r0
 80075c2:	4158      	adcs	r0, r3
 80075c4:	1a3f      	subs	r7, r7, r0
 80075c6:	2301      	movs	r3, #1
 80075c8:	9314      	str	r3, [sp, #80]	; 0x50
 80075ca:	2f16      	cmp	r7, #22
 80075cc:	d80d      	bhi.n	80075ea <_dtoa_r+0x176>
 80075ce:	4981      	ldr	r1, [pc, #516]	; (80077d4 <_dtoa_r+0x360>)
 80075d0:	00fb      	lsls	r3, r7, #3
 80075d2:	18c9      	adds	r1, r1, r3
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	6849      	ldr	r1, [r1, #4]
 80075d8:	9a06      	ldr	r2, [sp, #24]
 80075da:	9b07      	ldr	r3, [sp, #28]
 80075dc:	f7f8 ff46 	bl	800046c <__aeabi_dcmpgt>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d046      	beq.n	8007672 <_dtoa_r+0x1fe>
 80075e4:	2300      	movs	r3, #0
 80075e6:	3f01      	subs	r7, #1
 80075e8:	9314      	str	r3, [sp, #80]	; 0x50
 80075ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80075ec:	1b9e      	subs	r6, r3, r6
 80075ee:	2300      	movs	r3, #0
 80075f0:	930a      	str	r3, [sp, #40]	; 0x28
 80075f2:	0033      	movs	r3, r6
 80075f4:	3b01      	subs	r3, #1
 80075f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075f8:	d504      	bpl.n	8007604 <_dtoa_r+0x190>
 80075fa:	2301      	movs	r3, #1
 80075fc:	1b9b      	subs	r3, r3, r6
 80075fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007600:	2300      	movs	r3, #0
 8007602:	930b      	str	r3, [sp, #44]	; 0x2c
 8007604:	2f00      	cmp	r7, #0
 8007606:	db36      	blt.n	8007676 <_dtoa_r+0x202>
 8007608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760a:	9711      	str	r7, [sp, #68]	; 0x44
 800760c:	19db      	adds	r3, r3, r7
 800760e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007610:	2300      	movs	r3, #0
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007616:	2401      	movs	r4, #1
 8007618:	2b09      	cmp	r3, #9
 800761a:	d900      	bls.n	800761e <_dtoa_r+0x1aa>
 800761c:	e084      	b.n	8007728 <_dtoa_r+0x2b4>
 800761e:	2b05      	cmp	r3, #5
 8007620:	dd02      	ble.n	8007628 <_dtoa_r+0x1b4>
 8007622:	2400      	movs	r4, #0
 8007624:	3b04      	subs	r3, #4
 8007626:	9320      	str	r3, [sp, #128]	; 0x80
 8007628:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800762a:	1e98      	subs	r0, r3, #2
 800762c:	2803      	cmp	r0, #3
 800762e:	d900      	bls.n	8007632 <_dtoa_r+0x1be>
 8007630:	e084      	b.n	800773c <_dtoa_r+0x2c8>
 8007632:	f7f8 fd71 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007636:	7775      	.short	0x7775
 8007638:	6a28      	.short	0x6a28
 800763a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800763c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800763e:	189e      	adds	r6, r3, r2
 8007640:	4b65      	ldr	r3, [pc, #404]	; (80077d8 <_dtoa_r+0x364>)
 8007642:	18f2      	adds	r2, r6, r3
 8007644:	2a20      	cmp	r2, #32
 8007646:	dd0f      	ble.n	8007668 <_dtoa_r+0x1f4>
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	409c      	lsls	r4, r3
 800764e:	4b63      	ldr	r3, [pc, #396]	; (80077dc <_dtoa_r+0x368>)
 8007650:	9806      	ldr	r0, [sp, #24]
 8007652:	18f3      	adds	r3, r6, r3
 8007654:	40d8      	lsrs	r0, r3
 8007656:	4320      	orrs	r0, r4
 8007658:	f7fa fca6 	bl	8001fa8 <__aeabi_ui2d>
 800765c:	2301      	movs	r3, #1
 800765e:	4c60      	ldr	r4, [pc, #384]	; (80077e0 <_dtoa_r+0x36c>)
 8007660:	3e01      	subs	r6, #1
 8007662:	1909      	adds	r1, r1, r4
 8007664:	9316      	str	r3, [sp, #88]	; 0x58
 8007666:	e77c      	b.n	8007562 <_dtoa_r+0xee>
 8007668:	2320      	movs	r3, #32
 800766a:	9806      	ldr	r0, [sp, #24]
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	4098      	lsls	r0, r3
 8007670:	e7f2      	b.n	8007658 <_dtoa_r+0x1e4>
 8007672:	9014      	str	r0, [sp, #80]	; 0x50
 8007674:	e7b9      	b.n	80075ea <_dtoa_r+0x176>
 8007676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007678:	1bdb      	subs	r3, r3, r7
 800767a:	930a      	str	r3, [sp, #40]	; 0x28
 800767c:	427b      	negs	r3, r7
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	2300      	movs	r3, #0
 8007682:	9311      	str	r3, [sp, #68]	; 0x44
 8007684:	e7c6      	b.n	8007614 <_dtoa_r+0x1a0>
 8007686:	2301      	movs	r3, #1
 8007688:	930d      	str	r3, [sp, #52]	; 0x34
 800768a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd59      	ble.n	8007744 <_dtoa_r+0x2d0>
 8007690:	930c      	str	r3, [sp, #48]	; 0x30
 8007692:	9309      	str	r3, [sp, #36]	; 0x24
 8007694:	9a02      	ldr	r2, [sp, #8]
 8007696:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007698:	2200      	movs	r2, #0
 800769a:	606a      	str	r2, [r5, #4]
 800769c:	3204      	adds	r2, #4
 800769e:	0010      	movs	r0, r2
 80076a0:	3014      	adds	r0, #20
 80076a2:	6869      	ldr	r1, [r5, #4]
 80076a4:	4298      	cmp	r0, r3
 80076a6:	d952      	bls.n	800774e <_dtoa_r+0x2da>
 80076a8:	9802      	ldr	r0, [sp, #8]
 80076aa:	f001 fa2d 	bl	8008b08 <_Balloc>
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	6028      	str	r0, [r5, #0]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ba:	2b0e      	cmp	r3, #14
 80076bc:	d900      	bls.n	80076c0 <_dtoa_r+0x24c>
 80076be:	e10a      	b.n	80078d6 <_dtoa_r+0x462>
 80076c0:	2c00      	cmp	r4, #0
 80076c2:	d100      	bne.n	80076c6 <_dtoa_r+0x252>
 80076c4:	e107      	b.n	80078d6 <_dtoa_r+0x462>
 80076c6:	9b06      	ldr	r3, [sp, #24]
 80076c8:	9c07      	ldr	r4, [sp, #28]
 80076ca:	9312      	str	r3, [sp, #72]	; 0x48
 80076cc:	9413      	str	r4, [sp, #76]	; 0x4c
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	dc00      	bgt.n	80076d4 <_dtoa_r+0x260>
 80076d2:	e089      	b.n	80077e8 <_dtoa_r+0x374>
 80076d4:	210f      	movs	r1, #15
 80076d6:	003a      	movs	r2, r7
 80076d8:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <_dtoa_r+0x360>)
 80076da:	400a      	ands	r2, r1
 80076dc:	00d2      	lsls	r2, r2, #3
 80076de:	189b      	adds	r3, r3, r2
 80076e0:	681d      	ldr	r5, [r3, #0]
 80076e2:	685e      	ldr	r6, [r3, #4]
 80076e4:	2302      	movs	r3, #2
 80076e6:	113c      	asrs	r4, r7, #4
 80076e8:	930e      	str	r3, [sp, #56]	; 0x38
 80076ea:	06e3      	lsls	r3, r4, #27
 80076ec:	d50b      	bpl.n	8007706 <_dtoa_r+0x292>
 80076ee:	4b3d      	ldr	r3, [pc, #244]	; (80077e4 <_dtoa_r+0x370>)
 80076f0:	400c      	ands	r4, r1
 80076f2:	6a1a      	ldr	r2, [r3, #32]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076fa:	f7f9 fa05 	bl	8000b08 <__aeabi_ddiv>
 80076fe:	2303      	movs	r3, #3
 8007700:	9006      	str	r0, [sp, #24]
 8007702:	9107      	str	r1, [sp, #28]
 8007704:	930e      	str	r3, [sp, #56]	; 0x38
 8007706:	2300      	movs	r3, #0
 8007708:	e03a      	b.n	8007780 <_dtoa_r+0x30c>
 800770a:	2301      	movs	r3, #1
 800770c:	930d      	str	r3, [sp, #52]	; 0x34
 800770e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	930c      	str	r3, [sp, #48]	; 0x30
 8007714:	3301      	adds	r3, #1
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	dcbb      	bgt.n	8007694 <_dtoa_r+0x220>
 800771c:	2301      	movs	r3, #1
 800771e:	e7b9      	b.n	8007694 <_dtoa_r+0x220>
 8007720:	2300      	movs	r3, #0
 8007722:	e7b1      	b.n	8007688 <_dtoa_r+0x214>
 8007724:	2300      	movs	r3, #0
 8007726:	e7f1      	b.n	800770c <_dtoa_r+0x298>
 8007728:	2300      	movs	r3, #0
 800772a:	940d      	str	r4, [sp, #52]	; 0x34
 800772c:	9320      	str	r3, [sp, #128]	; 0x80
 800772e:	3b01      	subs	r3, #1
 8007730:	2200      	movs	r2, #0
 8007732:	930c      	str	r3, [sp, #48]	; 0x30
 8007734:	9309      	str	r3, [sp, #36]	; 0x24
 8007736:	3313      	adds	r3, #19
 8007738:	9221      	str	r2, [sp, #132]	; 0x84
 800773a:	e7ab      	b.n	8007694 <_dtoa_r+0x220>
 800773c:	2301      	movs	r3, #1
 800773e:	930d      	str	r3, [sp, #52]	; 0x34
 8007740:	3b02      	subs	r3, #2
 8007742:	e7f5      	b.n	8007730 <_dtoa_r+0x2bc>
 8007744:	2301      	movs	r3, #1
 8007746:	930c      	str	r3, [sp, #48]	; 0x30
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	001a      	movs	r2, r3
 800774c:	e7f4      	b.n	8007738 <_dtoa_r+0x2c4>
 800774e:	3101      	adds	r1, #1
 8007750:	6069      	str	r1, [r5, #4]
 8007752:	0052      	lsls	r2, r2, #1
 8007754:	e7a3      	b.n	800769e <_dtoa_r+0x22a>
 8007756:	2301      	movs	r3, #1
 8007758:	421c      	tst	r4, r3
 800775a:	d00e      	beq.n	800777a <_dtoa_r+0x306>
 800775c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800775e:	4a21      	ldr	r2, [pc, #132]	; (80077e4 <_dtoa_r+0x370>)
 8007760:	3301      	adds	r3, #1
 8007762:	930e      	str	r3, [sp, #56]	; 0x38
 8007764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007766:	0028      	movs	r0, r5
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	189b      	adds	r3, r3, r2
 800776c:	0031      	movs	r1, r6
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f7f9 fdd3 	bl	800131c <__aeabi_dmul>
 8007776:	0005      	movs	r5, r0
 8007778:	000e      	movs	r6, r1
 800777a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800777c:	1064      	asrs	r4, r4, #1
 800777e:	3301      	adds	r3, #1
 8007780:	9310      	str	r3, [sp, #64]	; 0x40
 8007782:	2c00      	cmp	r4, #0
 8007784:	d1e7      	bne.n	8007756 <_dtoa_r+0x2e2>
 8007786:	9806      	ldr	r0, [sp, #24]
 8007788:	9907      	ldr	r1, [sp, #28]
 800778a:	002a      	movs	r2, r5
 800778c:	0033      	movs	r3, r6
 800778e:	f7f9 f9bb 	bl	8000b08 <__aeabi_ddiv>
 8007792:	9006      	str	r0, [sp, #24]
 8007794:	9107      	str	r1, [sp, #28]
 8007796:	e042      	b.n	800781e <_dtoa_r+0x3aa>
 8007798:	7ff00000 	.word	0x7ff00000
 800779c:	0000270f 	.word	0x0000270f
 80077a0:	08009e11 	.word	0x08009e11
 80077a4:	08009e14 	.word	0x08009e14
 80077a8:	08009d88 	.word	0x08009d88
 80077ac:	08009d89 	.word	0x08009d89
 80077b0:	3ff00000 	.word	0x3ff00000
 80077b4:	fffffc01 	.word	0xfffffc01
 80077b8:	3ff80000 	.word	0x3ff80000
 80077bc:	636f4361 	.word	0x636f4361
 80077c0:	3fd287a7 	.word	0x3fd287a7
 80077c4:	8b60c8b3 	.word	0x8b60c8b3
 80077c8:	3fc68a28 	.word	0x3fc68a28
 80077cc:	509f79fb 	.word	0x509f79fb
 80077d0:	3fd34413 	.word	0x3fd34413
 80077d4:	08009eb0 	.word	0x08009eb0
 80077d8:	00000432 	.word	0x00000432
 80077dc:	00000412 	.word	0x00000412
 80077e0:	fe100000 	.word	0xfe100000
 80077e4:	08009e88 	.word	0x08009e88
 80077e8:	2302      	movs	r3, #2
 80077ea:	930e      	str	r3, [sp, #56]	; 0x38
 80077ec:	2f00      	cmp	r7, #0
 80077ee:	d016      	beq.n	800781e <_dtoa_r+0x3aa>
 80077f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80077f4:	427c      	negs	r4, r7
 80077f6:	330d      	adds	r3, #13
 80077f8:	4023      	ands	r3, r4
 80077fa:	4ace      	ldr	r2, [pc, #824]	; (8007b34 <_dtoa_r+0x6c0>)
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	18d3      	adds	r3, r2, r3
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f7f9 fd8a 	bl	800131c <__aeabi_dmul>
 8007808:	2300      	movs	r3, #0
 800780a:	2601      	movs	r6, #1
 800780c:	001d      	movs	r5, r3
 800780e:	9006      	str	r0, [sp, #24]
 8007810:	9107      	str	r1, [sp, #28]
 8007812:	1124      	asrs	r4, r4, #4
 8007814:	2c00      	cmp	r4, #0
 8007816:	d000      	beq.n	800781a <_dtoa_r+0x3a6>
 8007818:	e08c      	b.n	8007934 <_dtoa_r+0x4c0>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1b9      	bne.n	8007792 <_dtoa_r+0x31e>
 800781e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007820:	2b00      	cmp	r3, #0
 8007822:	d100      	bne.n	8007826 <_dtoa_r+0x3b2>
 8007824:	e096      	b.n	8007954 <_dtoa_r+0x4e0>
 8007826:	9c06      	ldr	r4, [sp, #24]
 8007828:	9d07      	ldr	r5, [sp, #28]
 800782a:	2200      	movs	r2, #0
 800782c:	4bc2      	ldr	r3, [pc, #776]	; (8007b38 <_dtoa_r+0x6c4>)
 800782e:	0020      	movs	r0, r4
 8007830:	0029      	movs	r1, r5
 8007832:	f7f8 fe07 	bl	8000444 <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d100      	bne.n	800783c <_dtoa_r+0x3c8>
 800783a:	e08b      	b.n	8007954 <_dtoa_r+0x4e0>
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d100      	bne.n	8007844 <_dtoa_r+0x3d0>
 8007842:	e087      	b.n	8007954 <_dtoa_r+0x4e0>
 8007844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007846:	2b00      	cmp	r3, #0
 8007848:	dd41      	ble.n	80078ce <_dtoa_r+0x45a>
 800784a:	4bbc      	ldr	r3, [pc, #752]	; (8007b3c <_dtoa_r+0x6c8>)
 800784c:	2200      	movs	r2, #0
 800784e:	0020      	movs	r0, r4
 8007850:	0029      	movs	r1, r5
 8007852:	f7f9 fd63 	bl	800131c <__aeabi_dmul>
 8007856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007858:	9006      	str	r0, [sp, #24]
 800785a:	9107      	str	r1, [sp, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	930e      	str	r3, [sp, #56]	; 0x38
 8007860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007862:	1e7e      	subs	r6, r7, #1
 8007864:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007866:	9310      	str	r3, [sp, #64]	; 0x40
 8007868:	f7fa fb64 	bl	8001f34 <__aeabi_i2d>
 800786c:	9a06      	ldr	r2, [sp, #24]
 800786e:	9b07      	ldr	r3, [sp, #28]
 8007870:	f7f9 fd54 	bl	800131c <__aeabi_dmul>
 8007874:	2200      	movs	r2, #0
 8007876:	4bb2      	ldr	r3, [pc, #712]	; (8007b40 <_dtoa_r+0x6cc>)
 8007878:	f7f8 fe2a 	bl	80004d0 <__aeabi_dadd>
 800787c:	4ab1      	ldr	r2, [pc, #708]	; (8007b44 <_dtoa_r+0x6d0>)
 800787e:	900e      	str	r0, [sp, #56]	; 0x38
 8007880:	910f      	str	r1, [sp, #60]	; 0x3c
 8007882:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007884:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007886:	4694      	mov	ip, r2
 8007888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800788a:	4463      	add	r3, ip
 800788c:	9315      	str	r3, [sp, #84]	; 0x54
 800788e:	001d      	movs	r5, r3
 8007890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d161      	bne.n	800795a <_dtoa_r+0x4e6>
 8007896:	9806      	ldr	r0, [sp, #24]
 8007898:	9907      	ldr	r1, [sp, #28]
 800789a:	2200      	movs	r2, #0
 800789c:	4baa      	ldr	r3, [pc, #680]	; (8007b48 <_dtoa_r+0x6d4>)
 800789e:	f7f9 ffaf 	bl	8001800 <__aeabi_dsub>
 80078a2:	0022      	movs	r2, r4
 80078a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	9107      	str	r1, [sp, #28]
 80078aa:	f7f8 fddf 	bl	800046c <__aeabi_dcmpgt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d000      	beq.n	80078b4 <_dtoa_r+0x440>
 80078b2:	e2a8      	b.n	8007e06 <_dtoa_r+0x992>
 80078b4:	48a5      	ldr	r0, [pc, #660]	; (8007b4c <_dtoa_r+0x6d8>)
 80078b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078b8:	4684      	mov	ip, r0
 80078ba:	4461      	add	r1, ip
 80078bc:	000b      	movs	r3, r1
 80078be:	9806      	ldr	r0, [sp, #24]
 80078c0:	9907      	ldr	r1, [sp, #28]
 80078c2:	0022      	movs	r2, r4
 80078c4:	f7f8 fdbe 	bl	8000444 <__aeabi_dcmplt>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d000      	beq.n	80078ce <_dtoa_r+0x45a>
 80078cc:	e295      	b.n	8007dfa <_dtoa_r+0x986>
 80078ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	9407      	str	r4, [sp, #28]
 80078d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da00      	bge.n	80078de <_dtoa_r+0x46a>
 80078dc:	e15c      	b.n	8007b98 <_dtoa_r+0x724>
 80078de:	2f0e      	cmp	r7, #14
 80078e0:	dd00      	ble.n	80078e4 <_dtoa_r+0x470>
 80078e2:	e159      	b.n	8007b98 <_dtoa_r+0x724>
 80078e4:	4b93      	ldr	r3, [pc, #588]	; (8007b34 <_dtoa_r+0x6c0>)
 80078e6:	00fa      	lsls	r2, r7, #3
 80078e8:	189b      	adds	r3, r3, r2
 80078ea:	685c      	ldr	r4, [r3, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	9405      	str	r4, [sp, #20]
 80078f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db00      	blt.n	80078fa <_dtoa_r+0x486>
 80078f8:	e0d8      	b.n	8007aac <_dtoa_r+0x638>
 80078fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dd00      	ble.n	8007902 <_dtoa_r+0x48e>
 8007900:	e0d4      	b.n	8007aac <_dtoa_r+0x638>
 8007902:	d000      	beq.n	8007906 <_dtoa_r+0x492>
 8007904:	e27d      	b.n	8007e02 <_dtoa_r+0x98e>
 8007906:	9804      	ldr	r0, [sp, #16]
 8007908:	9905      	ldr	r1, [sp, #20]
 800790a:	2200      	movs	r2, #0
 800790c:	4b8e      	ldr	r3, [pc, #568]	; (8007b48 <_dtoa_r+0x6d4>)
 800790e:	f7f9 fd05 	bl	800131c <__aeabi_dmul>
 8007912:	9a06      	ldr	r2, [sp, #24]
 8007914:	9b07      	ldr	r3, [sp, #28]
 8007916:	f7f8 fdb3 	bl	8000480 <__aeabi_dcmpge>
 800791a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	001e      	movs	r6, r3
 8007920:	2800      	cmp	r0, #0
 8007922:	d000      	beq.n	8007926 <_dtoa_r+0x4b2>
 8007924:	e24f      	b.n	8007dc6 <_dtoa_r+0x952>
 8007926:	9b08      	ldr	r3, [sp, #32]
 8007928:	9a08      	ldr	r2, [sp, #32]
 800792a:	1c5d      	adds	r5, r3, #1
 800792c:	2331      	movs	r3, #49	; 0x31
 800792e:	3701      	adds	r7, #1
 8007930:	7013      	strb	r3, [r2, #0]
 8007932:	e24b      	b.n	8007dcc <_dtoa_r+0x958>
 8007934:	4234      	tst	r4, r6
 8007936:	d00a      	beq.n	800794e <_dtoa_r+0x4da>
 8007938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793a:	4a85      	ldr	r2, [pc, #532]	; (8007b50 <_dtoa_r+0x6dc>)
 800793c:	3301      	adds	r3, #1
 800793e:	930e      	str	r3, [sp, #56]	; 0x38
 8007940:	00eb      	lsls	r3, r5, #3
 8007942:	189b      	adds	r3, r3, r2
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f7f9 fce8 	bl	800131c <__aeabi_dmul>
 800794c:	0033      	movs	r3, r6
 800794e:	1064      	asrs	r4, r4, #1
 8007950:	3501      	adds	r5, #1
 8007952:	e75f      	b.n	8007814 <_dtoa_r+0x3a0>
 8007954:	003e      	movs	r6, r7
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	e784      	b.n	8007864 <_dtoa_r+0x3f0>
 800795a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800795c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800795e:	1e5a      	subs	r2, r3, #1
 8007960:	4b74      	ldr	r3, [pc, #464]	; (8007b34 <_dtoa_r+0x6c0>)
 8007962:	00d2      	lsls	r2, r2, #3
 8007964:	189b      	adds	r3, r3, r2
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2900      	cmp	r1, #0
 800796c:	d049      	beq.n	8007a02 <_dtoa_r+0x58e>
 800796e:	2000      	movs	r0, #0
 8007970:	4978      	ldr	r1, [pc, #480]	; (8007b54 <_dtoa_r+0x6e0>)
 8007972:	f7f9 f8c9 	bl	8000b08 <__aeabi_ddiv>
 8007976:	002b      	movs	r3, r5
 8007978:	0022      	movs	r2, r4
 800797a:	f7f9 ff41 	bl	8001800 <__aeabi_dsub>
 800797e:	9b08      	ldr	r3, [sp, #32]
 8007980:	900e      	str	r0, [sp, #56]	; 0x38
 8007982:	910f      	str	r1, [sp, #60]	; 0x3c
 8007984:	9315      	str	r3, [sp, #84]	; 0x54
 8007986:	9806      	ldr	r0, [sp, #24]
 8007988:	9907      	ldr	r1, [sp, #28]
 800798a:	f7fa fa9d 	bl	8001ec8 <__aeabi_d2iz>
 800798e:	0004      	movs	r4, r0
 8007990:	f7fa fad0 	bl	8001f34 <__aeabi_i2d>
 8007994:	0002      	movs	r2, r0
 8007996:	000b      	movs	r3, r1
 8007998:	9806      	ldr	r0, [sp, #24]
 800799a:	9907      	ldr	r1, [sp, #28]
 800799c:	f7f9 ff30 	bl	8001800 <__aeabi_dsub>
 80079a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079a2:	3430      	adds	r4, #48	; 0x30
 80079a4:	1c5d      	adds	r5, r3, #1
 80079a6:	701c      	strb	r4, [r3, #0]
 80079a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ac:	9006      	str	r0, [sp, #24]
 80079ae:	9107      	str	r1, [sp, #28]
 80079b0:	f7f8 fd48 	bl	8000444 <__aeabi_dcmplt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d16c      	bne.n	8007a92 <_dtoa_r+0x61e>
 80079b8:	9a06      	ldr	r2, [sp, #24]
 80079ba:	9b07      	ldr	r3, [sp, #28]
 80079bc:	2000      	movs	r0, #0
 80079be:	495e      	ldr	r1, [pc, #376]	; (8007b38 <_dtoa_r+0x6c4>)
 80079c0:	f7f9 ff1e 	bl	8001800 <__aeabi_dsub>
 80079c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079c8:	f7f8 fd3c 	bl	8000444 <__aeabi_dcmplt>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d000      	beq.n	80079d2 <_dtoa_r+0x55e>
 80079d0:	e0c3      	b.n	8007b5a <_dtoa_r+0x6e6>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079d6:	1aeb      	subs	r3, r5, r3
 80079d8:	429a      	cmp	r2, r3
 80079da:	dc00      	bgt.n	80079de <_dtoa_r+0x56a>
 80079dc:	e777      	b.n	80078ce <_dtoa_r+0x45a>
 80079de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80079e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079e2:	2200      	movs	r2, #0
 80079e4:	4b55      	ldr	r3, [pc, #340]	; (8007b3c <_dtoa_r+0x6c8>)
 80079e6:	f7f9 fc99 	bl	800131c <__aeabi_dmul>
 80079ea:	2200      	movs	r2, #0
 80079ec:	900e      	str	r0, [sp, #56]	; 0x38
 80079ee:	910f      	str	r1, [sp, #60]	; 0x3c
 80079f0:	9806      	ldr	r0, [sp, #24]
 80079f2:	9907      	ldr	r1, [sp, #28]
 80079f4:	4b51      	ldr	r3, [pc, #324]	; (8007b3c <_dtoa_r+0x6c8>)
 80079f6:	f7f9 fc91 	bl	800131c <__aeabi_dmul>
 80079fa:	9515      	str	r5, [sp, #84]	; 0x54
 80079fc:	9006      	str	r0, [sp, #24]
 80079fe:	9107      	str	r1, [sp, #28]
 8007a00:	e7c1      	b.n	8007986 <_dtoa_r+0x512>
 8007a02:	0020      	movs	r0, r4
 8007a04:	0029      	movs	r1, r5
 8007a06:	f7f9 fc89 	bl	800131c <__aeabi_dmul>
 8007a0a:	9c08      	ldr	r4, [sp, #32]
 8007a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a0e:	0023      	movs	r3, r4
 8007a10:	4694      	mov	ip, r2
 8007a12:	900e      	str	r0, [sp, #56]	; 0x38
 8007a14:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a16:	4463      	add	r3, ip
 8007a18:	9315      	str	r3, [sp, #84]	; 0x54
 8007a1a:	9806      	ldr	r0, [sp, #24]
 8007a1c:	9907      	ldr	r1, [sp, #28]
 8007a1e:	f7fa fa53 	bl	8001ec8 <__aeabi_d2iz>
 8007a22:	0005      	movs	r5, r0
 8007a24:	f7fa fa86 	bl	8001f34 <__aeabi_i2d>
 8007a28:	000b      	movs	r3, r1
 8007a2a:	0002      	movs	r2, r0
 8007a2c:	9806      	ldr	r0, [sp, #24]
 8007a2e:	9907      	ldr	r1, [sp, #28]
 8007a30:	f7f9 fee6 	bl	8001800 <__aeabi_dsub>
 8007a34:	3530      	adds	r5, #48	; 0x30
 8007a36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a38:	7025      	strb	r5, [r4, #0]
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	9006      	str	r0, [sp, #24]
 8007a3e:	9107      	str	r1, [sp, #28]
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	d12a      	bne.n	8007a9a <_dtoa_r+0x626>
 8007a44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a48:	9a08      	ldr	r2, [sp, #32]
 8007a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a4c:	4694      	mov	ip, r2
 8007a4e:	4463      	add	r3, ip
 8007a50:	2200      	movs	r2, #0
 8007a52:	001d      	movs	r5, r3
 8007a54:	4b3f      	ldr	r3, [pc, #252]	; (8007b54 <_dtoa_r+0x6e0>)
 8007a56:	f7f8 fd3b 	bl	80004d0 <__aeabi_dadd>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	000b      	movs	r3, r1
 8007a5e:	9806      	ldr	r0, [sp, #24]
 8007a60:	9907      	ldr	r1, [sp, #28]
 8007a62:	f7f8 fd03 	bl	800046c <__aeabi_dcmpgt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d000      	beq.n	8007a6c <_dtoa_r+0x5f8>
 8007a6a:	e076      	b.n	8007b5a <_dtoa_r+0x6e6>
 8007a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a70:	2000      	movs	r0, #0
 8007a72:	4938      	ldr	r1, [pc, #224]	; (8007b54 <_dtoa_r+0x6e0>)
 8007a74:	f7f9 fec4 	bl	8001800 <__aeabi_dsub>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	9806      	ldr	r0, [sp, #24]
 8007a7e:	9907      	ldr	r1, [sp, #28]
 8007a80:	f7f8 fce0 	bl	8000444 <__aeabi_dcmplt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d100      	bne.n	8007a8a <_dtoa_r+0x616>
 8007a88:	e721      	b.n	80078ce <_dtoa_r+0x45a>
 8007a8a:	1e6b      	subs	r3, r5, #1
 8007a8c:	781a      	ldrb	r2, [r3, #0]
 8007a8e:	2a30      	cmp	r2, #48	; 0x30
 8007a90:	d001      	beq.n	8007a96 <_dtoa_r+0x622>
 8007a92:	0037      	movs	r7, r6
 8007a94:	e03f      	b.n	8007b16 <_dtoa_r+0x6a2>
 8007a96:	001d      	movs	r5, r3
 8007a98:	e7f7      	b.n	8007a8a <_dtoa_r+0x616>
 8007a9a:	9806      	ldr	r0, [sp, #24]
 8007a9c:	9907      	ldr	r1, [sp, #28]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <_dtoa_r+0x6c8>)
 8007aa2:	f7f9 fc3b 	bl	800131c <__aeabi_dmul>
 8007aa6:	9006      	str	r0, [sp, #24]
 8007aa8:	9107      	str	r1, [sp, #28]
 8007aaa:	e7b6      	b.n	8007a1a <_dtoa_r+0x5a6>
 8007aac:	9e08      	ldr	r6, [sp, #32]
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	9806      	ldr	r0, [sp, #24]
 8007ab4:	9907      	ldr	r1, [sp, #28]
 8007ab6:	f7f9 f827 	bl	8000b08 <__aeabi_ddiv>
 8007aba:	f7fa fa05 	bl	8001ec8 <__aeabi_d2iz>
 8007abe:	0004      	movs	r4, r0
 8007ac0:	f7fa fa38 	bl	8001f34 <__aeabi_i2d>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	9b05      	ldr	r3, [sp, #20]
 8007ac8:	f7f9 fc28 	bl	800131c <__aeabi_dmul>
 8007acc:	0002      	movs	r2, r0
 8007ace:	000b      	movs	r3, r1
 8007ad0:	9806      	ldr	r0, [sp, #24]
 8007ad2:	9907      	ldr	r1, [sp, #28]
 8007ad4:	f7f9 fe94 	bl	8001800 <__aeabi_dsub>
 8007ad8:	0023      	movs	r3, r4
 8007ada:	3330      	adds	r3, #48	; 0x30
 8007adc:	7033      	strb	r3, [r6, #0]
 8007ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	1c75      	adds	r5, r6, #1
 8007ae4:	1aeb      	subs	r3, r5, r3
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d148      	bne.n	8007b7c <_dtoa_r+0x708>
 8007aea:	0002      	movs	r2, r0
 8007aec:	000b      	movs	r3, r1
 8007aee:	f7f8 fcef 	bl	80004d0 <__aeabi_dadd>
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	9006      	str	r0, [sp, #24]
 8007af8:	9107      	str	r1, [sp, #28]
 8007afa:	f7f8 fcb7 	bl	800046c <__aeabi_dcmpgt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d12a      	bne.n	8007b58 <_dtoa_r+0x6e4>
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	9b05      	ldr	r3, [sp, #20]
 8007b06:	9806      	ldr	r0, [sp, #24]
 8007b08:	9907      	ldr	r1, [sp, #28]
 8007b0a:	f7f8 fc95 	bl	8000438 <__aeabi_dcmpeq>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d001      	beq.n	8007b16 <_dtoa_r+0x6a2>
 8007b12:	07e3      	lsls	r3, r4, #31
 8007b14:	d420      	bmi.n	8007b58 <_dtoa_r+0x6e4>
 8007b16:	9903      	ldr	r1, [sp, #12]
 8007b18:	9802      	ldr	r0, [sp, #8]
 8007b1a:	f001 f82d 	bl	8008b78 <_Bfree>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	702b      	strb	r3, [r5, #0]
 8007b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b24:	3701      	adds	r7, #1
 8007b26:	601f      	str	r7, [r3, #0]
 8007b28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d100      	bne.n	8007b30 <_dtoa_r+0x6bc>
 8007b2e:	e4e6      	b.n	80074fe <_dtoa_r+0x8a>
 8007b30:	601d      	str	r5, [r3, #0]
 8007b32:	e4e4      	b.n	80074fe <_dtoa_r+0x8a>
 8007b34:	08009eb0 	.word	0x08009eb0
 8007b38:	3ff00000 	.word	0x3ff00000
 8007b3c:	40240000 	.word	0x40240000
 8007b40:	401c0000 	.word	0x401c0000
 8007b44:	fcc00000 	.word	0xfcc00000
 8007b48:	40140000 	.word	0x40140000
 8007b4c:	7cc00000 	.word	0x7cc00000
 8007b50:	08009e88 	.word	0x08009e88
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	003e      	movs	r6, r7
 8007b5a:	1e6b      	subs	r3, r5, #1
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	2a39      	cmp	r2, #57	; 0x39
 8007b60:	d106      	bne.n	8007b70 <_dtoa_r+0x6fc>
 8007b62:	9a08      	ldr	r2, [sp, #32]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d107      	bne.n	8007b78 <_dtoa_r+0x704>
 8007b68:	2330      	movs	r3, #48	; 0x30
 8007b6a:	7013      	strb	r3, [r2, #0]
 8007b6c:	0013      	movs	r3, r2
 8007b6e:	3601      	adds	r6, #1
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	3201      	adds	r2, #1
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e78c      	b.n	8007a92 <_dtoa_r+0x61e>
 8007b78:	001d      	movs	r5, r3
 8007b7a:	e7ee      	b.n	8007b5a <_dtoa_r+0x6e6>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4ba4      	ldr	r3, [pc, #656]	; (8007e10 <_dtoa_r+0x99c>)
 8007b80:	f7f9 fbcc 	bl	800131c <__aeabi_dmul>
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	9006      	str	r0, [sp, #24]
 8007b8a:	9107      	str	r1, [sp, #28]
 8007b8c:	002e      	movs	r6, r5
 8007b8e:	f7f8 fc53 	bl	8000438 <__aeabi_dcmpeq>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d08b      	beq.n	8007aae <_dtoa_r+0x63a>
 8007b96:	e7be      	b.n	8007b16 <_dtoa_r+0x6a2>
 8007b98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d100      	bne.n	8007ba0 <_dtoa_r+0x72c>
 8007b9e:	e0da      	b.n	8007d56 <_dtoa_r+0x8e2>
 8007ba0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ba2:	2a01      	cmp	r2, #1
 8007ba4:	dd00      	ble.n	8007ba8 <_dtoa_r+0x734>
 8007ba6:	e0bd      	b.n	8007d24 <_dtoa_r+0x8b0>
 8007ba8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d100      	bne.n	8007bb0 <_dtoa_r+0x73c>
 8007bae:	e0b5      	b.n	8007d1c <_dtoa_r+0x8a8>
 8007bb0:	4a98      	ldr	r2, [pc, #608]	; (8007e14 <_dtoa_r+0x9a0>)
 8007bb2:	189b      	adds	r3, r3, r2
 8007bb4:	9d04      	ldr	r5, [sp, #16]
 8007bb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bba:	2101      	movs	r1, #1
 8007bbc:	18d2      	adds	r2, r2, r3
 8007bbe:	920a      	str	r2, [sp, #40]	; 0x28
 8007bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bc2:	9802      	ldr	r0, [sp, #8]
 8007bc4:	18d3      	adds	r3, r2, r3
 8007bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc8:	f001 f8b4 	bl	8008d34 <__i2b>
 8007bcc:	0006      	movs	r6, r0
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	dd0e      	ble.n	8007bf0 <_dtoa_r+0x77c>
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd0b      	ble.n	8007bf0 <_dtoa_r+0x77c>
 8007bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bda:	0023      	movs	r3, r4
 8007bdc:	4294      	cmp	r4, r2
 8007bde:	dd00      	ble.n	8007be2 <_dtoa_r+0x76e>
 8007be0:	0013      	movs	r3, r2
 8007be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be4:	1ae4      	subs	r4, r4, r3
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	920a      	str	r2, [sp, #40]	; 0x28
 8007bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01f      	beq.n	8007c36 <_dtoa_r+0x7c2>
 8007bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d100      	bne.n	8007bfe <_dtoa_r+0x78a>
 8007bfc:	e0af      	b.n	8007d5e <_dtoa_r+0x8ea>
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	d011      	beq.n	8007c26 <_dtoa_r+0x7b2>
 8007c02:	0031      	movs	r1, r6
 8007c04:	002a      	movs	r2, r5
 8007c06:	9802      	ldr	r0, [sp, #8]
 8007c08:	f001 f92c 	bl	8008e64 <__pow5mult>
 8007c0c:	9a03      	ldr	r2, [sp, #12]
 8007c0e:	0001      	movs	r1, r0
 8007c10:	0006      	movs	r6, r0
 8007c12:	9802      	ldr	r0, [sp, #8]
 8007c14:	f001 f897 	bl	8008d46 <__multiply>
 8007c18:	9903      	ldr	r1, [sp, #12]
 8007c1a:	9010      	str	r0, [sp, #64]	; 0x40
 8007c1c:	9802      	ldr	r0, [sp, #8]
 8007c1e:	f000 ffab 	bl	8008b78 <_Bfree>
 8007c22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	9b04      	ldr	r3, [sp, #16]
 8007c28:	1b5a      	subs	r2, r3, r5
 8007c2a:	d004      	beq.n	8007c36 <_dtoa_r+0x7c2>
 8007c2c:	9903      	ldr	r1, [sp, #12]
 8007c2e:	9802      	ldr	r0, [sp, #8]
 8007c30:	f001 f918 	bl	8008e64 <__pow5mult>
 8007c34:	9003      	str	r0, [sp, #12]
 8007c36:	2101      	movs	r1, #1
 8007c38:	9802      	ldr	r0, [sp, #8]
 8007c3a:	f001 f87b 	bl	8008d34 <__i2b>
 8007c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c40:	9004      	str	r0, [sp, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d100      	bne.n	8007c48 <_dtoa_r+0x7d4>
 8007c46:	e1e3      	b.n	8008010 <_dtoa_r+0xb9c>
 8007c48:	001a      	movs	r2, r3
 8007c4a:	0001      	movs	r1, r0
 8007c4c:	9802      	ldr	r0, [sp, #8]
 8007c4e:	f001 f909 	bl	8008e64 <__pow5mult>
 8007c52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c54:	9004      	str	r0, [sp, #16]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	dd00      	ble.n	8007c5c <_dtoa_r+0x7e8>
 8007c5a:	e082      	b.n	8007d62 <_dtoa_r+0x8ee>
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	9b06      	ldr	r3, [sp, #24]
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	d10e      	bne.n	8007c82 <_dtoa_r+0x80e>
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	031b      	lsls	r3, r3, #12
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	d10a      	bne.n	8007c82 <_dtoa_r+0x80e>
 8007c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	4213      	tst	r3, r2
 8007c72:	d006      	beq.n	8007c82 <_dtoa_r+0x80e>
 8007c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c76:	3501      	adds	r5, #1
 8007c78:	3301      	adds	r3, #1
 8007c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7e:	3301      	adds	r3, #1
 8007c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c84:	2001      	movs	r0, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d16c      	bne.n	8007d64 <_dtoa_r+0x8f0>
 8007c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8c:	1818      	adds	r0, r3, r0
 8007c8e:	231f      	movs	r3, #31
 8007c90:	4018      	ands	r0, r3
 8007c92:	d07e      	beq.n	8007d92 <_dtoa_r+0x91e>
 8007c94:	3301      	adds	r3, #1
 8007c96:	1a1b      	subs	r3, r3, r0
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	dd70      	ble.n	8007d7e <_dtoa_r+0x90a>
 8007c9c:	231c      	movs	r3, #28
 8007c9e:	1a18      	subs	r0, r3, r0
 8007ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca2:	1824      	adds	r4, r4, r0
 8007ca4:	181b      	adds	r3, r3, r0
 8007ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007caa:	181b      	adds	r3, r3, r0
 8007cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dd05      	ble.n	8007cc0 <_dtoa_r+0x84c>
 8007cb4:	001a      	movs	r2, r3
 8007cb6:	9903      	ldr	r1, [sp, #12]
 8007cb8:	9802      	ldr	r0, [sp, #8]
 8007cba:	f001 f925 	bl	8008f08 <__lshift>
 8007cbe:	9003      	str	r0, [sp, #12]
 8007cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd05      	ble.n	8007cd2 <_dtoa_r+0x85e>
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	9904      	ldr	r1, [sp, #16]
 8007cca:	9802      	ldr	r0, [sp, #8]
 8007ccc:	f001 f91c 	bl	8008f08 <__lshift>
 8007cd0:	9004      	str	r0, [sp, #16]
 8007cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d05e      	beq.n	8007d96 <_dtoa_r+0x922>
 8007cd8:	9904      	ldr	r1, [sp, #16]
 8007cda:	9803      	ldr	r0, [sp, #12]
 8007cdc:	f001 f966 	bl	8008fac <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	da58      	bge.n	8007d96 <_dtoa_r+0x922>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	9903      	ldr	r1, [sp, #12]
 8007cea:	9802      	ldr	r0, [sp, #8]
 8007cec:	f000 ff5d 	bl	8008baa <__multadd>
 8007cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf2:	3f01      	subs	r7, #1
 8007cf4:	9003      	str	r0, [sp, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d100      	bne.n	8007cfc <_dtoa_r+0x888>
 8007cfa:	e190      	b.n	800801e <_dtoa_r+0xbaa>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	0031      	movs	r1, r6
 8007d00:	220a      	movs	r2, #10
 8007d02:	9802      	ldr	r0, [sp, #8]
 8007d04:	f000 ff51 	bl	8008baa <__multadd>
 8007d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d0a:	0006      	movs	r6, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd00      	ble.n	8007d12 <_dtoa_r+0x89e>
 8007d10:	e088      	b.n	8007e24 <_dtoa_r+0x9b0>
 8007d12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	dc00      	bgt.n	8007d1a <_dtoa_r+0x8a6>
 8007d18:	e084      	b.n	8007e24 <_dtoa_r+0x9b0>
 8007d1a:	e044      	b.n	8007da6 <_dtoa_r+0x932>
 8007d1c:	2336      	movs	r3, #54	; 0x36
 8007d1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	e747      	b.n	8007bb4 <_dtoa_r+0x740>
 8007d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d26:	1e5d      	subs	r5, r3, #1
 8007d28:	9b04      	ldr	r3, [sp, #16]
 8007d2a:	42ab      	cmp	r3, r5
 8007d2c:	db08      	blt.n	8007d40 <_dtoa_r+0x8cc>
 8007d2e:	1b5d      	subs	r5, r3, r5
 8007d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	da0c      	bge.n	8007d50 <_dtoa_r+0x8dc>
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3a:	1a9c      	subs	r4, r3, r2
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e73b      	b.n	8007bb8 <_dtoa_r+0x744>
 8007d40:	9b04      	ldr	r3, [sp, #16]
 8007d42:	9504      	str	r5, [sp, #16]
 8007d44:	1aea      	subs	r2, r5, r3
 8007d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d48:	2500      	movs	r5, #0
 8007d4a:	189b      	adds	r3, r3, r2
 8007d4c:	9311      	str	r3, [sp, #68]	; 0x44
 8007d4e:	e7ef      	b.n	8007d30 <_dtoa_r+0x8bc>
 8007d50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d54:	e730      	b.n	8007bb8 <_dtoa_r+0x744>
 8007d56:	9d04      	ldr	r5, [sp, #16]
 8007d58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007d5c:	e737      	b.n	8007bce <_dtoa_r+0x75a>
 8007d5e:	9a04      	ldr	r2, [sp, #16]
 8007d60:	e764      	b.n	8007c2c <_dtoa_r+0x7b8>
 8007d62:	2500      	movs	r5, #0
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	9a04      	ldr	r2, [sp, #16]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d6c:	3303      	adds	r3, #3
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	18d3      	adds	r3, r2, r3
 8007d72:	6858      	ldr	r0, [r3, #4]
 8007d74:	f000 ff95 	bl	8008ca2 <__hi0bits>
 8007d78:	2320      	movs	r3, #32
 8007d7a:	1a18      	subs	r0, r3, r0
 8007d7c:	e785      	b.n	8007c8a <_dtoa_r+0x816>
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d095      	beq.n	8007cae <_dtoa_r+0x83a>
 8007d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d84:	331c      	adds	r3, #28
 8007d86:	18d2      	adds	r2, r2, r3
 8007d88:	920a      	str	r2, [sp, #40]	; 0x28
 8007d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d8c:	18e4      	adds	r4, r4, r3
 8007d8e:	18d3      	adds	r3, r2, r3
 8007d90:	e78c      	b.n	8007cac <_dtoa_r+0x838>
 8007d92:	0003      	movs	r3, r0
 8007d94:	e7f5      	b.n	8007d82 <_dtoa_r+0x90e>
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc3d      	bgt.n	8007e18 <_dtoa_r+0x9a4>
 8007d9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	dd3a      	ble.n	8007e18 <_dtoa_r+0x9a4>
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	930c      	str	r3, [sp, #48]	; 0x30
 8007da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10c      	bne.n	8007dc6 <_dtoa_r+0x952>
 8007dac:	9904      	ldr	r1, [sp, #16]
 8007dae:	2205      	movs	r2, #5
 8007db0:	9802      	ldr	r0, [sp, #8]
 8007db2:	f000 fefa 	bl	8008baa <__multadd>
 8007db6:	9004      	str	r0, [sp, #16]
 8007db8:	0001      	movs	r1, r0
 8007dba:	9803      	ldr	r0, [sp, #12]
 8007dbc:	f001 f8f6 	bl	8008fac <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dd00      	ble.n	8007dc6 <_dtoa_r+0x952>
 8007dc4:	e5af      	b.n	8007926 <_dtoa_r+0x4b2>
 8007dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc8:	9d08      	ldr	r5, [sp, #32]
 8007dca:	43df      	mvns	r7, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd0:	9904      	ldr	r1, [sp, #16]
 8007dd2:	9802      	ldr	r0, [sp, #8]
 8007dd4:	f000 fed0 	bl	8008b78 <_Bfree>
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	d100      	bne.n	8007dde <_dtoa_r+0x96a>
 8007ddc:	e69b      	b.n	8007b16 <_dtoa_r+0x6a2>
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <_dtoa_r+0x97c>
 8007de4:	42b3      	cmp	r3, r6
 8007de6:	d003      	beq.n	8007df0 <_dtoa_r+0x97c>
 8007de8:	0019      	movs	r1, r3
 8007dea:	9802      	ldr	r0, [sp, #8]
 8007dec:	f000 fec4 	bl	8008b78 <_Bfree>
 8007df0:	0031      	movs	r1, r6
 8007df2:	9802      	ldr	r0, [sp, #8]
 8007df4:	f000 fec0 	bl	8008b78 <_Bfree>
 8007df8:	e68d      	b.n	8007b16 <_dtoa_r+0x6a2>
 8007dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dfc:	9304      	str	r3, [sp, #16]
 8007dfe:	001e      	movs	r6, r3
 8007e00:	e7e1      	b.n	8007dc6 <_dtoa_r+0x952>
 8007e02:	2300      	movs	r3, #0
 8007e04:	e7fa      	b.n	8007dfc <_dtoa_r+0x988>
 8007e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e08:	0037      	movs	r7, r6
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	001e      	movs	r6, r3
 8007e0e:	e58a      	b.n	8007926 <_dtoa_r+0x4b2>
 8007e10:	40240000 	.word	0x40240000
 8007e14:	00000433 	.word	0x00000433
 8007e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d100      	bne.n	8007e20 <_dtoa_r+0x9ac>
 8007e1e:	e0b2      	b.n	8007f86 <_dtoa_r+0xb12>
 8007e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e22:	930c      	str	r3, [sp, #48]	; 0x30
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	dd05      	ble.n	8007e34 <_dtoa_r+0x9c0>
 8007e28:	0031      	movs	r1, r6
 8007e2a:	0022      	movs	r2, r4
 8007e2c:	9802      	ldr	r0, [sp, #8]
 8007e2e:	f001 f86b 	bl	8008f08 <__lshift>
 8007e32:	0006      	movs	r6, r0
 8007e34:	0030      	movs	r0, r6
 8007e36:	2d00      	cmp	r5, #0
 8007e38:	d011      	beq.n	8007e5e <_dtoa_r+0x9ea>
 8007e3a:	6871      	ldr	r1, [r6, #4]
 8007e3c:	9802      	ldr	r0, [sp, #8]
 8007e3e:	f000 fe63 	bl	8008b08 <_Balloc>
 8007e42:	0031      	movs	r1, r6
 8007e44:	0004      	movs	r4, r0
 8007e46:	6933      	ldr	r3, [r6, #16]
 8007e48:	310c      	adds	r1, #12
 8007e4a:	1c9a      	adds	r2, r3, #2
 8007e4c:	0092      	lsls	r2, r2, #2
 8007e4e:	300c      	adds	r0, #12
 8007e50:	f000 fe51 	bl	8008af6 <memcpy>
 8007e54:	2201      	movs	r2, #1
 8007e56:	0021      	movs	r1, r4
 8007e58:	9802      	ldr	r0, [sp, #8]
 8007e5a:	f001 f855 	bl	8008f08 <__lshift>
 8007e5e:	9609      	str	r6, [sp, #36]	; 0x24
 8007e60:	0006      	movs	r6, r0
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	930a      	str	r3, [sp, #40]	; 0x28
 8007e66:	9904      	ldr	r1, [sp, #16]
 8007e68:	9803      	ldr	r0, [sp, #12]
 8007e6a:	f7ff fa7d 	bl	8007368 <quorem>
 8007e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e70:	900d      	str	r0, [sp, #52]	; 0x34
 8007e72:	0004      	movs	r4, r0
 8007e74:	9803      	ldr	r0, [sp, #12]
 8007e76:	f001 f899 	bl	8008fac <__mcmp>
 8007e7a:	0032      	movs	r2, r6
 8007e7c:	9010      	str	r0, [sp, #64]	; 0x40
 8007e7e:	9904      	ldr	r1, [sp, #16]
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	f001 f8ad 	bl	8008fe0 <__mdiff>
 8007e86:	2301      	movs	r3, #1
 8007e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e8a:	68c3      	ldr	r3, [r0, #12]
 8007e8c:	3430      	adds	r4, #48	; 0x30
 8007e8e:	0005      	movs	r5, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <_dtoa_r+0xa2a>
 8007e94:	0001      	movs	r1, r0
 8007e96:	9803      	ldr	r0, [sp, #12]
 8007e98:	f001 f888 	bl	8008fac <__mcmp>
 8007e9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e9e:	0029      	movs	r1, r5
 8007ea0:	9802      	ldr	r0, [sp, #8]
 8007ea2:	f000 fe69 	bl	8008b78 <_Bfree>
 8007ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	d10e      	bne.n	8007ecc <_dtoa_r+0xa58>
 8007eae:	9a06      	ldr	r2, [sp, #24]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4213      	tst	r3, r2
 8007eb4:	d10a      	bne.n	8007ecc <_dtoa_r+0xa58>
 8007eb6:	2c39      	cmp	r4, #57	; 0x39
 8007eb8:	d026      	beq.n	8007f08 <_dtoa_r+0xa94>
 8007eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd01      	ble.n	8007ec4 <_dtoa_r+0xa50>
 8007ec0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007ec2:	3431      	adds	r4, #49	; 0x31
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	1c5d      	adds	r5, r3, #1
 8007ec8:	701c      	strb	r4, [r3, #0]
 8007eca:	e781      	b.n	8007dd0 <_dtoa_r+0x95c>
 8007ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	db07      	blt.n	8007ee2 <_dtoa_r+0xa6e>
 8007ed2:	001d      	movs	r5, r3
 8007ed4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ed6:	431d      	orrs	r5, r3
 8007ed8:	d122      	bne.n	8007f20 <_dtoa_r+0xaac>
 8007eda:	2301      	movs	r3, #1
 8007edc:	9a06      	ldr	r2, [sp, #24]
 8007ede:	4213      	tst	r3, r2
 8007ee0:	d11e      	bne.n	8007f20 <_dtoa_r+0xaac>
 8007ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dded      	ble.n	8007ec4 <_dtoa_r+0xa50>
 8007ee8:	9903      	ldr	r1, [sp, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	9802      	ldr	r0, [sp, #8]
 8007eee:	f001 f80b 	bl	8008f08 <__lshift>
 8007ef2:	9904      	ldr	r1, [sp, #16]
 8007ef4:	9003      	str	r0, [sp, #12]
 8007ef6:	f001 f859 	bl	8008fac <__mcmp>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	dc02      	bgt.n	8007f04 <_dtoa_r+0xa90>
 8007efe:	d1e1      	bne.n	8007ec4 <_dtoa_r+0xa50>
 8007f00:	07e3      	lsls	r3, r4, #31
 8007f02:	d5df      	bpl.n	8007ec4 <_dtoa_r+0xa50>
 8007f04:	2c39      	cmp	r4, #57	; 0x39
 8007f06:	d1db      	bne.n	8007ec0 <_dtoa_r+0xa4c>
 8007f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0c:	1c5d      	adds	r5, r3, #1
 8007f0e:	2339      	movs	r3, #57	; 0x39
 8007f10:	7013      	strb	r3, [r2, #0]
 8007f12:	1e6b      	subs	r3, r5, #1
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	2a39      	cmp	r2, #57	; 0x39
 8007f18:	d067      	beq.n	8007fea <_dtoa_r+0xb76>
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e757      	b.n	8007dd0 <_dtoa_r+0x95c>
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	1c5d      	adds	r5, r3, #1
 8007f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd04      	ble.n	8007f34 <_dtoa_r+0xac0>
 8007f2a:	2c39      	cmp	r4, #57	; 0x39
 8007f2c:	d0ec      	beq.n	8007f08 <_dtoa_r+0xa94>
 8007f2e:	3401      	adds	r4, #1
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	e7c9      	b.n	8007ec8 <_dtoa_r+0xa54>
 8007f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f38:	701c      	strb	r4, [r3, #0]
 8007f3a:	9b08      	ldr	r3, [sp, #32]
 8007f3c:	1aeb      	subs	r3, r5, r3
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d03e      	beq.n	8007fc0 <_dtoa_r+0xb4c>
 8007f42:	2300      	movs	r3, #0
 8007f44:	220a      	movs	r2, #10
 8007f46:	9903      	ldr	r1, [sp, #12]
 8007f48:	9802      	ldr	r0, [sp, #8]
 8007f4a:	f000 fe2e 	bl	8008baa <__multadd>
 8007f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f50:	9003      	str	r0, [sp, #12]
 8007f52:	42b3      	cmp	r3, r6
 8007f54:	d109      	bne.n	8007f6a <_dtoa_r+0xaf6>
 8007f56:	2300      	movs	r3, #0
 8007f58:	220a      	movs	r2, #10
 8007f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f5c:	9802      	ldr	r0, [sp, #8]
 8007f5e:	f000 fe24 	bl	8008baa <__multadd>
 8007f62:	9009      	str	r0, [sp, #36]	; 0x24
 8007f64:	0006      	movs	r6, r0
 8007f66:	950a      	str	r5, [sp, #40]	; 0x28
 8007f68:	e77d      	b.n	8007e66 <_dtoa_r+0x9f2>
 8007f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	9802      	ldr	r0, [sp, #8]
 8007f72:	f000 fe1a 	bl	8008baa <__multadd>
 8007f76:	2300      	movs	r3, #0
 8007f78:	9009      	str	r0, [sp, #36]	; 0x24
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	0031      	movs	r1, r6
 8007f7e:	9802      	ldr	r0, [sp, #8]
 8007f80:	f000 fe13 	bl	8008baa <__multadd>
 8007f84:	e7ee      	b.n	8007f64 <_dtoa_r+0xaf0>
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	930c      	str	r3, [sp, #48]	; 0x30
 8007f8a:	9b08      	ldr	r3, [sp, #32]
 8007f8c:	9306      	str	r3, [sp, #24]
 8007f8e:	9904      	ldr	r1, [sp, #16]
 8007f90:	9803      	ldr	r0, [sp, #12]
 8007f92:	f7ff f9e9 	bl	8007368 <quorem>
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	3030      	adds	r0, #48	; 0x30
 8007f9a:	1c5d      	adds	r5, r3, #1
 8007f9c:	7018      	strb	r0, [r3, #0]
 8007f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fa0:	9b08      	ldr	r3, [sp, #32]
 8007fa2:	0004      	movs	r4, r0
 8007fa4:	1aeb      	subs	r3, r5, r3
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	dd08      	ble.n	8007fbc <_dtoa_r+0xb48>
 8007faa:	2300      	movs	r3, #0
 8007fac:	220a      	movs	r2, #10
 8007fae:	9903      	ldr	r1, [sp, #12]
 8007fb0:	9802      	ldr	r0, [sp, #8]
 8007fb2:	f000 fdfa 	bl	8008baa <__multadd>
 8007fb6:	9506      	str	r5, [sp, #24]
 8007fb8:	9003      	str	r0, [sp, #12]
 8007fba:	e7e8      	b.n	8007f8e <_dtoa_r+0xb1a>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc0:	9903      	ldr	r1, [sp, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	9802      	ldr	r0, [sp, #8]
 8007fc6:	f000 ff9f 	bl	8008f08 <__lshift>
 8007fca:	9904      	ldr	r1, [sp, #16]
 8007fcc:	9003      	str	r0, [sp, #12]
 8007fce:	f000 ffed 	bl	8008fac <__mcmp>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	dc9d      	bgt.n	8007f12 <_dtoa_r+0xa9e>
 8007fd6:	d101      	bne.n	8007fdc <_dtoa_r+0xb68>
 8007fd8:	07e3      	lsls	r3, r4, #31
 8007fda:	d49a      	bmi.n	8007f12 <_dtoa_r+0xa9e>
 8007fdc:	1e6b      	subs	r3, r5, #1
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	2a30      	cmp	r2, #48	; 0x30
 8007fe2:	d000      	beq.n	8007fe6 <_dtoa_r+0xb72>
 8007fe4:	e6f4      	b.n	8007dd0 <_dtoa_r+0x95c>
 8007fe6:	001d      	movs	r5, r3
 8007fe8:	e7f8      	b.n	8007fdc <_dtoa_r+0xb68>
 8007fea:	9a08      	ldr	r2, [sp, #32]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d103      	bne.n	8007ff8 <_dtoa_r+0xb84>
 8007ff0:	2331      	movs	r3, #49	; 0x31
 8007ff2:	3701      	adds	r7, #1
 8007ff4:	7013      	strb	r3, [r2, #0]
 8007ff6:	e6eb      	b.n	8007dd0 <_dtoa_r+0x95c>
 8007ff8:	001d      	movs	r5, r3
 8007ffa:	e78a      	b.n	8007f12 <_dtoa_r+0xa9e>
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <_dtoa_r+0xbb8>)
 8007ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <_dtoa_r+0xbbc>)
 8008004:	2a00      	cmp	r2, #0
 8008006:	d001      	beq.n	800800c <_dtoa_r+0xb98>
 8008008:	f7ff fa77 	bl	80074fa <_dtoa_r+0x86>
 800800c:	f7ff fa77 	bl	80074fe <_dtoa_r+0x8a>
 8008010:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008012:	2b01      	cmp	r3, #1
 8008014:	dc00      	bgt.n	8008018 <_dtoa_r+0xba4>
 8008016:	e621      	b.n	8007c5c <_dtoa_r+0x7e8>
 8008018:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800801a:	2001      	movs	r0, #1
 800801c:	e635      	b.n	8007c8a <_dtoa_r+0x816>
 800801e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008020:	2b00      	cmp	r3, #0
 8008022:	dcb2      	bgt.n	8007f8a <_dtoa_r+0xb16>
 8008024:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008026:	2b02      	cmp	r3, #2
 8008028:	ddaf      	ble.n	8007f8a <_dtoa_r+0xb16>
 800802a:	e6bc      	b.n	8007da6 <_dtoa_r+0x932>
 800802c:	08009e08 	.word	0x08009e08
 8008030:	08009e10 	.word	0x08009e10

08008034 <__sflush_r>:
 8008034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008036:	898a      	ldrh	r2, [r1, #12]
 8008038:	0005      	movs	r5, r0
 800803a:	000c      	movs	r4, r1
 800803c:	0713      	lsls	r3, r2, #28
 800803e:	d460      	bmi.n	8008102 <__sflush_r+0xce>
 8008040:	684b      	ldr	r3, [r1, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc04      	bgt.n	8008050 <__sflush_r+0x1c>
 8008046:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	dc01      	bgt.n	8008050 <__sflush_r+0x1c>
 800804c:	2000      	movs	r0, #0
 800804e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008050:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008052:	2f00      	cmp	r7, #0
 8008054:	d0fa      	beq.n	800804c <__sflush_r+0x18>
 8008056:	2300      	movs	r3, #0
 8008058:	682e      	ldr	r6, [r5, #0]
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	2380      	movs	r3, #128	; 0x80
 800805e:	015b      	lsls	r3, r3, #5
 8008060:	6a21      	ldr	r1, [r4, #32]
 8008062:	401a      	ands	r2, r3
 8008064:	d034      	beq.n	80080d0 <__sflush_r+0x9c>
 8008066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	075b      	lsls	r3, r3, #29
 800806c:	d506      	bpl.n	800807c <__sflush_r+0x48>
 800806e:	6863      	ldr	r3, [r4, #4]
 8008070:	1ac0      	subs	r0, r0, r3
 8008072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <__sflush_r+0x48>
 8008078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800807a:	1ac0      	subs	r0, r0, r3
 800807c:	0002      	movs	r2, r0
 800807e:	6a21      	ldr	r1, [r4, #32]
 8008080:	2300      	movs	r3, #0
 8008082:	0028      	movs	r0, r5
 8008084:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008086:	47b8      	blx	r7
 8008088:	89a1      	ldrh	r1, [r4, #12]
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d106      	bne.n	800809c <__sflush_r+0x68>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	2b1d      	cmp	r3, #29
 8008092:	d830      	bhi.n	80080f6 <__sflush_r+0xc2>
 8008094:	4a2b      	ldr	r2, [pc, #172]	; (8008144 <__sflush_r+0x110>)
 8008096:	40da      	lsrs	r2, r3
 8008098:	07d3      	lsls	r3, r2, #31
 800809a:	d52c      	bpl.n	80080f6 <__sflush_r+0xc2>
 800809c:	2300      	movs	r3, #0
 800809e:	6063      	str	r3, [r4, #4]
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	6023      	str	r3, [r4, #0]
 80080a4:	04cb      	lsls	r3, r1, #19
 80080a6:	d505      	bpl.n	80080b4 <__sflush_r+0x80>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <__sflush_r+0x7e>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d100      	bne.n	80080b4 <__sflush_r+0x80>
 80080b2:	6560      	str	r0, [r4, #84]	; 0x54
 80080b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b6:	602e      	str	r6, [r5, #0]
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d0c7      	beq.n	800804c <__sflush_r+0x18>
 80080bc:	0023      	movs	r3, r4
 80080be:	3344      	adds	r3, #68	; 0x44
 80080c0:	4299      	cmp	r1, r3
 80080c2:	d002      	beq.n	80080ca <__sflush_r+0x96>
 80080c4:	0028      	movs	r0, r5
 80080c6:	f001 f923 	bl	8009310 <_free_r>
 80080ca:	2000      	movs	r0, #0
 80080cc:	6360      	str	r0, [r4, #52]	; 0x34
 80080ce:	e7be      	b.n	800804e <__sflush_r+0x1a>
 80080d0:	2301      	movs	r3, #1
 80080d2:	0028      	movs	r0, r5
 80080d4:	47b8      	blx	r7
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	d1c6      	bne.n	8008068 <__sflush_r+0x34>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0c3      	beq.n	8008068 <__sflush_r+0x34>
 80080e0:	2b1d      	cmp	r3, #29
 80080e2:	d001      	beq.n	80080e8 <__sflush_r+0xb4>
 80080e4:	2b16      	cmp	r3, #22
 80080e6:	d101      	bne.n	80080ec <__sflush_r+0xb8>
 80080e8:	602e      	str	r6, [r5, #0]
 80080ea:	e7af      	b.n	800804c <__sflush_r+0x18>
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	89a2      	ldrh	r2, [r4, #12]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	e7ab      	b.n	800804e <__sflush_r+0x1a>
 80080f6:	2340      	movs	r3, #64	; 0x40
 80080f8:	430b      	orrs	r3, r1
 80080fa:	2001      	movs	r0, #1
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	4240      	negs	r0, r0
 8008100:	e7a5      	b.n	800804e <__sflush_r+0x1a>
 8008102:	690f      	ldr	r7, [r1, #16]
 8008104:	2f00      	cmp	r7, #0
 8008106:	d0a1      	beq.n	800804c <__sflush_r+0x18>
 8008108:	680b      	ldr	r3, [r1, #0]
 800810a:	600f      	str	r7, [r1, #0]
 800810c:	1bdb      	subs	r3, r3, r7
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	2300      	movs	r3, #0
 8008112:	0792      	lsls	r2, r2, #30
 8008114:	d100      	bne.n	8008118 <__sflush_r+0xe4>
 8008116:	694b      	ldr	r3, [r1, #20]
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc00      	bgt.n	8008122 <__sflush_r+0xee>
 8008120:	e794      	b.n	800804c <__sflush_r+0x18>
 8008122:	9b01      	ldr	r3, [sp, #4]
 8008124:	003a      	movs	r2, r7
 8008126:	6a21      	ldr	r1, [r4, #32]
 8008128:	0028      	movs	r0, r5
 800812a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800812c:	47b0      	blx	r6
 800812e:	2800      	cmp	r0, #0
 8008130:	dc03      	bgt.n	800813a <__sflush_r+0x106>
 8008132:	2340      	movs	r3, #64	; 0x40
 8008134:	89a2      	ldrh	r2, [r4, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	e7df      	b.n	80080fa <__sflush_r+0xc6>
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	183f      	adds	r7, r7, r0
 800813e:	1a1b      	subs	r3, r3, r0
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	e7ea      	b.n	800811a <__sflush_r+0xe6>
 8008144:	20400001 	.word	0x20400001

08008148 <_fflush_r>:
 8008148:	690b      	ldr	r3, [r1, #16]
 800814a:	b570      	push	{r4, r5, r6, lr}
 800814c:	0005      	movs	r5, r0
 800814e:	000c      	movs	r4, r1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <_fflush_r+0x10>
 8008154:	2000      	movs	r0, #0
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	2800      	cmp	r0, #0
 800815a:	d004      	beq.n	8008166 <_fflush_r+0x1e>
 800815c:	6983      	ldr	r3, [r0, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <_fflush_r+0x1e>
 8008162:	f000 f85f 	bl	8008224 <__sinit>
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <_fflush_r+0x4c>)
 8008168:	429c      	cmp	r4, r3
 800816a:	d109      	bne.n	8008180 <_fflush_r+0x38>
 800816c:	686c      	ldr	r4, [r5, #4]
 800816e:	220c      	movs	r2, #12
 8008170:	5ea3      	ldrsh	r3, [r4, r2]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0ee      	beq.n	8008154 <_fflush_r+0xc>
 8008176:	0021      	movs	r1, r4
 8008178:	0028      	movs	r0, r5
 800817a:	f7ff ff5b 	bl	8008034 <__sflush_r>
 800817e:	e7ea      	b.n	8008156 <_fflush_r+0xe>
 8008180:	4b05      	ldr	r3, [pc, #20]	; (8008198 <_fflush_r+0x50>)
 8008182:	429c      	cmp	r4, r3
 8008184:	d101      	bne.n	800818a <_fflush_r+0x42>
 8008186:	68ac      	ldr	r4, [r5, #8]
 8008188:	e7f1      	b.n	800816e <_fflush_r+0x26>
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <_fflush_r+0x54>)
 800818c:	429c      	cmp	r4, r3
 800818e:	d1ee      	bne.n	800816e <_fflush_r+0x26>
 8008190:	68ec      	ldr	r4, [r5, #12]
 8008192:	e7ec      	b.n	800816e <_fflush_r+0x26>
 8008194:	08009e38 	.word	0x08009e38
 8008198:	08009e58 	.word	0x08009e58
 800819c:	08009e18 	.word	0x08009e18

080081a0 <std>:
 80081a0:	2300      	movs	r3, #0
 80081a2:	b510      	push	{r4, lr}
 80081a4:	0004      	movs	r4, r0
 80081a6:	6003      	str	r3, [r0, #0]
 80081a8:	6043      	str	r3, [r0, #4]
 80081aa:	6083      	str	r3, [r0, #8]
 80081ac:	8181      	strh	r1, [r0, #12]
 80081ae:	6643      	str	r3, [r0, #100]	; 0x64
 80081b0:	81c2      	strh	r2, [r0, #14]
 80081b2:	6103      	str	r3, [r0, #16]
 80081b4:	6143      	str	r3, [r0, #20]
 80081b6:	6183      	str	r3, [r0, #24]
 80081b8:	0019      	movs	r1, r3
 80081ba:	2208      	movs	r2, #8
 80081bc:	305c      	adds	r0, #92	; 0x5c
 80081be:	f7fd f96f 	bl	80054a0 <memset>
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <std+0x38>)
 80081c4:	6224      	str	r4, [r4, #32]
 80081c6:	6263      	str	r3, [r4, #36]	; 0x24
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <std+0x3c>)
 80081ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <std+0x40>)
 80081ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <std+0x44>)
 80081d2:	6323      	str	r3, [r4, #48]	; 0x30
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	080099c1 	.word	0x080099c1
 80081dc:	080099e9 	.word	0x080099e9
 80081e0:	08009a21 	.word	0x08009a21
 80081e4:	08009a4d 	.word	0x08009a4d

080081e8 <_cleanup_r>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	4902      	ldr	r1, [pc, #8]	; (80081f4 <_cleanup_r+0xc>)
 80081ec:	f000 f88c 	bl	8008308 <_fwalk_reent>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	08008149 	.word	0x08008149

080081f8 <__sfmoreglue>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	2568      	movs	r5, #104	; 0x68
 80081fc:	1e4a      	subs	r2, r1, #1
 80081fe:	4355      	muls	r5, r2
 8008200:	000e      	movs	r6, r1
 8008202:	0029      	movs	r1, r5
 8008204:	3174      	adds	r1, #116	; 0x74
 8008206:	f001 f8cd 	bl	80093a4 <_malloc_r>
 800820a:	1e04      	subs	r4, r0, #0
 800820c:	d008      	beq.n	8008220 <__sfmoreglue+0x28>
 800820e:	2100      	movs	r1, #0
 8008210:	002a      	movs	r2, r5
 8008212:	6001      	str	r1, [r0, #0]
 8008214:	6046      	str	r6, [r0, #4]
 8008216:	300c      	adds	r0, #12
 8008218:	60a0      	str	r0, [r4, #8]
 800821a:	3268      	adds	r2, #104	; 0x68
 800821c:	f7fd f940 	bl	80054a0 <memset>
 8008220:	0020      	movs	r0, r4
 8008222:	bd70      	pop	{r4, r5, r6, pc}

08008224 <__sinit>:
 8008224:	6983      	ldr	r3, [r0, #24]
 8008226:	b513      	push	{r0, r1, r4, lr}
 8008228:	0004      	movs	r4, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <__sinit+0x5c>
 800822e:	6483      	str	r3, [r0, #72]	; 0x48
 8008230:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008232:	6503      	str	r3, [r0, #80]	; 0x50
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <__sinit+0x60>)
 8008236:	4a14      	ldr	r2, [pc, #80]	; (8008288 <__sinit+0x64>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6282      	str	r2, [r0, #40]	; 0x28
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	4298      	cmp	r0, r3
 8008240:	d101      	bne.n	8008246 <__sinit+0x22>
 8008242:	2301      	movs	r3, #1
 8008244:	6183      	str	r3, [r0, #24]
 8008246:	0020      	movs	r0, r4
 8008248:	f000 f820 	bl	800828c <__sfp>
 800824c:	6060      	str	r0, [r4, #4]
 800824e:	0020      	movs	r0, r4
 8008250:	f000 f81c 	bl	800828c <__sfp>
 8008254:	60a0      	str	r0, [r4, #8]
 8008256:	0020      	movs	r0, r4
 8008258:	f000 f818 	bl	800828c <__sfp>
 800825c:	2200      	movs	r2, #0
 800825e:	60e0      	str	r0, [r4, #12]
 8008260:	2104      	movs	r1, #4
 8008262:	6860      	ldr	r0, [r4, #4]
 8008264:	f7ff ff9c 	bl	80081a0 <std>
 8008268:	2201      	movs	r2, #1
 800826a:	2109      	movs	r1, #9
 800826c:	68a0      	ldr	r0, [r4, #8]
 800826e:	f7ff ff97 	bl	80081a0 <std>
 8008272:	2202      	movs	r2, #2
 8008274:	2112      	movs	r1, #18
 8008276:	68e0      	ldr	r0, [r4, #12]
 8008278:	f7ff ff92 	bl	80081a0 <std>
 800827c:	2301      	movs	r3, #1
 800827e:	61a3      	str	r3, [r4, #24]
 8008280:	bd13      	pop	{r0, r1, r4, pc}
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	08009d74 	.word	0x08009d74
 8008288:	080081e9 	.word	0x080081e9

0800828c <__sfp>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	4b1c      	ldr	r3, [pc, #112]	; (8008300 <__sfp+0x74>)
 8008290:	0007      	movs	r7, r0
 8008292:	681e      	ldr	r6, [r3, #0]
 8008294:	69b3      	ldr	r3, [r6, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <__sfp+0x14>
 800829a:	0030      	movs	r0, r6
 800829c:	f7ff ffc2 	bl	8008224 <__sinit>
 80082a0:	3648      	adds	r6, #72	; 0x48
 80082a2:	68b4      	ldr	r4, [r6, #8]
 80082a4:	6873      	ldr	r3, [r6, #4]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	d504      	bpl.n	80082b4 <__sfp+0x28>
 80082aa:	6833      	ldr	r3, [r6, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d007      	beq.n	80082c0 <__sfp+0x34>
 80082b0:	6836      	ldr	r6, [r6, #0]
 80082b2:	e7f6      	b.n	80082a2 <__sfp+0x16>
 80082b4:	220c      	movs	r2, #12
 80082b6:	5ea5      	ldrsh	r5, [r4, r2]
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	d00d      	beq.n	80082d8 <__sfp+0x4c>
 80082bc:	3468      	adds	r4, #104	; 0x68
 80082be:	e7f2      	b.n	80082a6 <__sfp+0x1a>
 80082c0:	2104      	movs	r1, #4
 80082c2:	0038      	movs	r0, r7
 80082c4:	f7ff ff98 	bl	80081f8 <__sfmoreglue>
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d1f0      	bne.n	80082b0 <__sfp+0x24>
 80082ce:	230c      	movs	r3, #12
 80082d0:	0004      	movs	r4, r0
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	0020      	movs	r0, r4
 80082d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d8:	0020      	movs	r0, r4
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <__sfp+0x78>)
 80082dc:	6665      	str	r5, [r4, #100]	; 0x64
 80082de:	6025      	str	r5, [r4, #0]
 80082e0:	6065      	str	r5, [r4, #4]
 80082e2:	60a5      	str	r5, [r4, #8]
 80082e4:	60e3      	str	r3, [r4, #12]
 80082e6:	6125      	str	r5, [r4, #16]
 80082e8:	6165      	str	r5, [r4, #20]
 80082ea:	61a5      	str	r5, [r4, #24]
 80082ec:	2208      	movs	r2, #8
 80082ee:	0029      	movs	r1, r5
 80082f0:	305c      	adds	r0, #92	; 0x5c
 80082f2:	f7fd f8d5 	bl	80054a0 <memset>
 80082f6:	6365      	str	r5, [r4, #52]	; 0x34
 80082f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80082fa:	64a5      	str	r5, [r4, #72]	; 0x48
 80082fc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80082fe:	e7e9      	b.n	80082d4 <__sfp+0x48>
 8008300:	08009d74 	.word	0x08009d74
 8008304:	ffff0001 	.word	0xffff0001

08008308 <_fwalk_reent>:
 8008308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800830a:	0004      	movs	r4, r0
 800830c:	0007      	movs	r7, r0
 800830e:	2600      	movs	r6, #0
 8008310:	9101      	str	r1, [sp, #4]
 8008312:	3448      	adds	r4, #72	; 0x48
 8008314:	2c00      	cmp	r4, #0
 8008316:	d101      	bne.n	800831c <_fwalk_reent+0x14>
 8008318:	0030      	movs	r0, r6
 800831a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	68a5      	ldr	r5, [r4, #8]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	d501      	bpl.n	800832e <_fwalk_reent+0x26>
 800832a:	6824      	ldr	r4, [r4, #0]
 800832c:	e7f2      	b.n	8008314 <_fwalk_reent+0xc>
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d908      	bls.n	8008346 <_fwalk_reent+0x3e>
 8008334:	220e      	movs	r2, #14
 8008336:	5eab      	ldrsh	r3, [r5, r2]
 8008338:	3301      	adds	r3, #1
 800833a:	d004      	beq.n	8008346 <_fwalk_reent+0x3e>
 800833c:	0029      	movs	r1, r5
 800833e:	0038      	movs	r0, r7
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	4798      	blx	r3
 8008344:	4306      	orrs	r6, r0
 8008346:	3568      	adds	r5, #104	; 0x68
 8008348:	e7eb      	b.n	8008322 <_fwalk_reent+0x1a>

0800834a <rshift>:
 800834a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834c:	0004      	movs	r4, r0
 800834e:	6905      	ldr	r5, [r0, #16]
 8008350:	3414      	adds	r4, #20
 8008352:	114b      	asrs	r3, r1, #5
 8008354:	0026      	movs	r6, r4
 8008356:	429d      	cmp	r5, r3
 8008358:	dd14      	ble.n	8008384 <rshift+0x3a>
 800835a:	221f      	movs	r2, #31
 800835c:	00ad      	lsls	r5, r5, #2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4011      	ands	r1, r2
 8008362:	1965      	adds	r5, r4, r5
 8008364:	18e3      	adds	r3, r4, r3
 8008366:	0022      	movs	r2, r4
 8008368:	2900      	cmp	r1, #0
 800836a:	d01e      	beq.n	80083aa <rshift+0x60>
 800836c:	cb04      	ldmia	r3!, {r2}
 800836e:	2720      	movs	r7, #32
 8008370:	40ca      	lsrs	r2, r1
 8008372:	46a4      	mov	ip, r4
 8008374:	1a7f      	subs	r7, r7, r1
 8008376:	4666      	mov	r6, ip
 8008378:	429d      	cmp	r5, r3
 800837a:	d80b      	bhi.n	8008394 <rshift+0x4a>
 800837c:	6032      	str	r2, [r6, #0]
 800837e:	2a00      	cmp	r2, #0
 8008380:	d000      	beq.n	8008384 <rshift+0x3a>
 8008382:	3604      	adds	r6, #4
 8008384:	1b33      	subs	r3, r6, r4
 8008386:	109b      	asrs	r3, r3, #2
 8008388:	6103      	str	r3, [r0, #16]
 800838a:	42a6      	cmp	r6, r4
 800838c:	d101      	bne.n	8008392 <rshift+0x48>
 800838e:	2300      	movs	r3, #0
 8008390:	6143      	str	r3, [r0, #20]
 8008392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008394:	681e      	ldr	r6, [r3, #0]
 8008396:	40be      	lsls	r6, r7
 8008398:	4332      	orrs	r2, r6
 800839a:	4666      	mov	r6, ip
 800839c:	c604      	stmia	r6!, {r2}
 800839e:	cb04      	ldmia	r3!, {r2}
 80083a0:	46b4      	mov	ip, r6
 80083a2:	40ca      	lsrs	r2, r1
 80083a4:	e7e7      	b.n	8008376 <rshift+0x2c>
 80083a6:	cb02      	ldmia	r3!, {r1}
 80083a8:	c202      	stmia	r2!, {r1}
 80083aa:	0016      	movs	r6, r2
 80083ac:	429d      	cmp	r5, r3
 80083ae:	d8fa      	bhi.n	80083a6 <rshift+0x5c>
 80083b0:	e7e8      	b.n	8008384 <rshift+0x3a>

080083b2 <__hexdig_fun>:
 80083b2:	0003      	movs	r3, r0
 80083b4:	3b30      	subs	r3, #48	; 0x30
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d803      	bhi.n	80083c2 <__hexdig_fun+0x10>
 80083ba:	3820      	subs	r0, #32
 80083bc:	b2c3      	uxtb	r3, r0
 80083be:	0018      	movs	r0, r3
 80083c0:	4770      	bx	lr
 80083c2:	0003      	movs	r3, r0
 80083c4:	3b61      	subs	r3, #97	; 0x61
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d801      	bhi.n	80083ce <__hexdig_fun+0x1c>
 80083ca:	3847      	subs	r0, #71	; 0x47
 80083cc:	e7f6      	b.n	80083bc <__hexdig_fun+0xa>
 80083ce:	0002      	movs	r2, r0
 80083d0:	3a41      	subs	r2, #65	; 0x41
 80083d2:	2300      	movs	r3, #0
 80083d4:	2a05      	cmp	r2, #5
 80083d6:	d8f2      	bhi.n	80083be <__hexdig_fun+0xc>
 80083d8:	3827      	subs	r0, #39	; 0x27
 80083da:	e7ef      	b.n	80083bc <__hexdig_fun+0xa>

080083dc <__gethex>:
 80083dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083de:	b08d      	sub	sp, #52	; 0x34
 80083e0:	9005      	str	r0, [sp, #20]
 80083e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80083e4:	9109      	str	r1, [sp, #36]	; 0x24
 80083e6:	9202      	str	r2, [sp, #8]
 80083e8:	930a      	str	r3, [sp, #40]	; 0x28
 80083ea:	f000 fae2 	bl	80089b2 <__localeconv_l>
 80083ee:	6803      	ldr	r3, [r0, #0]
 80083f0:	0018      	movs	r0, r3
 80083f2:	9307      	str	r3, [sp, #28]
 80083f4:	f7f7 fe88 	bl	8000108 <strlen>
 80083f8:	2202      	movs	r2, #2
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	4252      	negs	r2, r2
 80083fe:	181b      	adds	r3, r3, r0
 8008400:	3b01      	subs	r3, #1
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	9004      	str	r0, [sp, #16]
 8008406:	930b      	str	r3, [sp, #44]	; 0x2c
 8008408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840a:	6819      	ldr	r1, [r3, #0]
 800840c:	1c8b      	adds	r3, r1, #2
 800840e:	1a52      	subs	r2, r2, r1
 8008410:	18d1      	adds	r1, r2, r3
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	9108      	str	r1, [sp, #32]
 8008416:	9901      	ldr	r1, [sp, #4]
 8008418:	3301      	adds	r3, #1
 800841a:	7808      	ldrb	r0, [r1, #0]
 800841c:	2830      	cmp	r0, #48	; 0x30
 800841e:	d0f7      	beq.n	8008410 <__gethex+0x34>
 8008420:	f7ff ffc7 	bl	80083b2 <__hexdig_fun>
 8008424:	1e07      	subs	r7, r0, #0
 8008426:	d000      	beq.n	800842a <__gethex+0x4e>
 8008428:	e06f      	b.n	800850a <__gethex+0x12e>
 800842a:	9a04      	ldr	r2, [sp, #16]
 800842c:	9907      	ldr	r1, [sp, #28]
 800842e:	9801      	ldr	r0, [sp, #4]
 8008430:	f001 fb12 	bl	8009a58 <strncmp>
 8008434:	2800      	cmp	r0, #0
 8008436:	d000      	beq.n	800843a <__gethex+0x5e>
 8008438:	e06d      	b.n	8008516 <__gethex+0x13a>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	9a04      	ldr	r2, [sp, #16]
 800843e:	189c      	adds	r4, r3, r2
 8008440:	7820      	ldrb	r0, [r4, #0]
 8008442:	f7ff ffb6 	bl	80083b2 <__hexdig_fun>
 8008446:	2800      	cmp	r0, #0
 8008448:	d069      	beq.n	800851e <__gethex+0x142>
 800844a:	9401      	str	r4, [sp, #4]
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	7818      	ldrb	r0, [r3, #0]
 8008450:	2830      	cmp	r0, #48	; 0x30
 8008452:	d009      	beq.n	8008468 <__gethex+0x8c>
 8008454:	f7ff ffad 	bl	80083b2 <__hexdig_fun>
 8008458:	4243      	negs	r3, r0
 800845a:	4143      	adcs	r3, r0
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	2301      	movs	r3, #1
 8008460:	0026      	movs	r6, r4
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	9c01      	ldr	r4, [sp, #4]
 8008466:	e004      	b.n	8008472 <__gethex+0x96>
 8008468:	9b01      	ldr	r3, [sp, #4]
 800846a:	3301      	adds	r3, #1
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	e7ed      	b.n	800844c <__gethex+0x70>
 8008470:	3401      	adds	r4, #1
 8008472:	7820      	ldrb	r0, [r4, #0]
 8008474:	f7ff ff9d 	bl	80083b2 <__hexdig_fun>
 8008478:	2800      	cmp	r0, #0
 800847a:	d1f9      	bne.n	8008470 <__gethex+0x94>
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	9907      	ldr	r1, [sp, #28]
 8008480:	0020      	movs	r0, r4
 8008482:	f001 fae9 	bl	8009a58 <strncmp>
 8008486:	2800      	cmp	r0, #0
 8008488:	d109      	bne.n	800849e <__gethex+0xc2>
 800848a:	2e00      	cmp	r6, #0
 800848c:	d10a      	bne.n	80084a4 <__gethex+0xc8>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	18e4      	adds	r4, r4, r3
 8008492:	0026      	movs	r6, r4
 8008494:	7820      	ldrb	r0, [r4, #0]
 8008496:	f7ff ff8c 	bl	80083b2 <__hexdig_fun>
 800849a:	2800      	cmp	r0, #0
 800849c:	d139      	bne.n	8008512 <__gethex+0x136>
 800849e:	2700      	movs	r7, #0
 80084a0:	42be      	cmp	r6, r7
 80084a2:	d001      	beq.n	80084a8 <__gethex+0xcc>
 80084a4:	1b37      	subs	r7, r6, r4
 80084a6:	00bf      	lsls	r7, r7, #2
 80084a8:	7823      	ldrb	r3, [r4, #0]
 80084aa:	2b50      	cmp	r3, #80	; 0x50
 80084ac:	d001      	beq.n	80084b2 <__gethex+0xd6>
 80084ae:	2b70      	cmp	r3, #112	; 0x70
 80084b0:	d142      	bne.n	8008538 <__gethex+0x15c>
 80084b2:	7863      	ldrb	r3, [r4, #1]
 80084b4:	2b2b      	cmp	r3, #43	; 0x2b
 80084b6:	d034      	beq.n	8008522 <__gethex+0x146>
 80084b8:	2b2d      	cmp	r3, #45	; 0x2d
 80084ba:	d036      	beq.n	800852a <__gethex+0x14e>
 80084bc:	2300      	movs	r3, #0
 80084be:	1c66      	adds	r6, r4, #1
 80084c0:	9306      	str	r3, [sp, #24]
 80084c2:	7830      	ldrb	r0, [r6, #0]
 80084c4:	f7ff ff75 	bl	80083b2 <__hexdig_fun>
 80084c8:	1e43      	subs	r3, r0, #1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b18      	cmp	r3, #24
 80084ce:	d833      	bhi.n	8008538 <__gethex+0x15c>
 80084d0:	3810      	subs	r0, #16
 80084d2:	0005      	movs	r5, r0
 80084d4:	3601      	adds	r6, #1
 80084d6:	7830      	ldrb	r0, [r6, #0]
 80084d8:	f7ff ff6b 	bl	80083b2 <__hexdig_fun>
 80084dc:	1e43      	subs	r3, r0, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b18      	cmp	r3, #24
 80084e2:	d924      	bls.n	800852e <__gethex+0x152>
 80084e4:	9b06      	ldr	r3, [sp, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d000      	beq.n	80084ec <__gethex+0x110>
 80084ea:	426d      	negs	r5, r5
 80084ec:	197f      	adds	r7, r7, r5
 80084ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f0:	601e      	str	r6, [r3, #0]
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d021      	beq.n	800853c <__gethex+0x160>
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	2606      	movs	r6, #6
 80084fc:	425a      	negs	r2, r3
 80084fe:	4153      	adcs	r3, r2
 8008500:	425b      	negs	r3, r3
 8008502:	401e      	ands	r6, r3
 8008504:	0030      	movs	r0, r6
 8008506:	b00d      	add	sp, #52	; 0x34
 8008508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800850a:	2300      	movs	r3, #0
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	001e      	movs	r6, r3
 8008510:	e7a8      	b.n	8008464 <__gethex+0x88>
 8008512:	3401      	adds	r4, #1
 8008514:	e7be      	b.n	8008494 <__gethex+0xb8>
 8008516:	9c01      	ldr	r4, [sp, #4]
 8008518:	2301      	movs	r3, #1
 800851a:	9303      	str	r3, [sp, #12]
 800851c:	e7c4      	b.n	80084a8 <__gethex+0xcc>
 800851e:	0007      	movs	r7, r0
 8008520:	e7fa      	b.n	8008518 <__gethex+0x13c>
 8008522:	2300      	movs	r3, #0
 8008524:	9306      	str	r3, [sp, #24]
 8008526:	1ca6      	adds	r6, r4, #2
 8008528:	e7cb      	b.n	80084c2 <__gethex+0xe6>
 800852a:	2301      	movs	r3, #1
 800852c:	e7fa      	b.n	8008524 <__gethex+0x148>
 800852e:	230a      	movs	r3, #10
 8008530:	435d      	muls	r5, r3
 8008532:	182d      	adds	r5, r5, r0
 8008534:	3d10      	subs	r5, #16
 8008536:	e7cd      	b.n	80084d4 <__gethex+0xf8>
 8008538:	0026      	movs	r6, r4
 800853a:	e7d8      	b.n	80084ee <__gethex+0x112>
 800853c:	9b01      	ldr	r3, [sp, #4]
 800853e:	9903      	ldr	r1, [sp, #12]
 8008540:	1ae3      	subs	r3, r4, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b07      	cmp	r3, #7
 8008546:	dc47      	bgt.n	80085d8 <__gethex+0x1fc>
 8008548:	9805      	ldr	r0, [sp, #20]
 800854a:	f000 fadd 	bl	8008b08 <_Balloc>
 800854e:	0003      	movs	r3, r0
 8008550:	3314      	adds	r3, #20
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	9308      	str	r3, [sp, #32]
 8008556:	2300      	movs	r3, #0
 8008558:	0005      	movs	r5, r0
 800855a:	001e      	movs	r6, r3
 800855c:	9306      	str	r3, [sp, #24]
 800855e:	9b01      	ldr	r3, [sp, #4]
 8008560:	42a3      	cmp	r3, r4
 8008562:	d33c      	bcc.n	80085de <__gethex+0x202>
 8008564:	9c08      	ldr	r4, [sp, #32]
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	c440      	stmia	r4!, {r6}
 800856a:	1ae4      	subs	r4, r4, r3
 800856c:	10a4      	asrs	r4, r4, #2
 800856e:	612c      	str	r4, [r5, #16]
 8008570:	0030      	movs	r0, r6
 8008572:	f000 fb96 	bl	8008ca2 <__hi0bits>
 8008576:	9b02      	ldr	r3, [sp, #8]
 8008578:	0164      	lsls	r4, r4, #5
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	1a26      	subs	r6, r4, r0
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	429e      	cmp	r6, r3
 8008582:	dd5f      	ble.n	8008644 <__gethex+0x268>
 8008584:	1af6      	subs	r6, r6, r3
 8008586:	0031      	movs	r1, r6
 8008588:	0028      	movs	r0, r5
 800858a:	f000 fe90 	bl	80092ae <__any_on>
 800858e:	1e04      	subs	r4, r0, #0
 8008590:	d00f      	beq.n	80085b2 <__gethex+0x1d6>
 8008592:	2401      	movs	r4, #1
 8008594:	211f      	movs	r1, #31
 8008596:	0020      	movs	r0, r4
 8008598:	1e73      	subs	r3, r6, #1
 800859a:	4019      	ands	r1, r3
 800859c:	4088      	lsls	r0, r1
 800859e:	0001      	movs	r1, r0
 80085a0:	115a      	asrs	r2, r3, #5
 80085a2:	9803      	ldr	r0, [sp, #12]
 80085a4:	0092      	lsls	r2, r2, #2
 80085a6:	5812      	ldr	r2, [r2, r0]
 80085a8:	420a      	tst	r2, r1
 80085aa:	d002      	beq.n	80085b2 <__gethex+0x1d6>
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	dc41      	bgt.n	8008634 <__gethex+0x258>
 80085b0:	2402      	movs	r4, #2
 80085b2:	0031      	movs	r1, r6
 80085b4:	0028      	movs	r0, r5
 80085b6:	f7ff fec8 	bl	800834a <rshift>
 80085ba:	19bf      	adds	r7, r7, r6
 80085bc:	9b02      	ldr	r3, [sp, #8]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	42bb      	cmp	r3, r7
 80085c4:	da4e      	bge.n	8008664 <__gethex+0x288>
 80085c6:	0029      	movs	r1, r5
 80085c8:	9805      	ldr	r0, [sp, #20]
 80085ca:	f000 fad5 	bl	8008b78 <_Bfree>
 80085ce:	2300      	movs	r3, #0
 80085d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085d2:	26a3      	movs	r6, #163	; 0xa3
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e795      	b.n	8008504 <__gethex+0x128>
 80085d8:	3101      	adds	r1, #1
 80085da:	105b      	asrs	r3, r3, #1
 80085dc:	e7b2      	b.n	8008544 <__gethex+0x168>
 80085de:	1e63      	subs	r3, r4, #1
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
 80085e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d015      	beq.n	8008616 <__gethex+0x23a>
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d105      	bne.n	80085fc <__gethex+0x220>
 80085f0:	9b08      	ldr	r3, [sp, #32]
 80085f2:	601e      	str	r6, [r3, #0]
 80085f4:	2600      	movs	r6, #0
 80085f6:	3304      	adds	r3, #4
 80085f8:	9308      	str	r3, [sp, #32]
 80085fa:	9606      	str	r6, [sp, #24]
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	7818      	ldrb	r0, [r3, #0]
 8008600:	f7ff fed7 	bl	80083b2 <__hexdig_fun>
 8008604:	230f      	movs	r3, #15
 8008606:	4018      	ands	r0, r3
 8008608:	9b06      	ldr	r3, [sp, #24]
 800860a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800860c:	4098      	lsls	r0, r3
 800860e:	3304      	adds	r3, #4
 8008610:	4306      	orrs	r6, r0
 8008612:	9306      	str	r3, [sp, #24]
 8008614:	e7a3      	b.n	800855e <__gethex+0x182>
 8008616:	2301      	movs	r3, #1
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	1a9c      	subs	r4, r3, r2
 800861c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861e:	191c      	adds	r4, r3, r4
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	429c      	cmp	r4, r3
 8008624:	d3e1      	bcc.n	80085ea <__gethex+0x20e>
 8008626:	9907      	ldr	r1, [sp, #28]
 8008628:	0020      	movs	r0, r4
 800862a:	f001 fa15 	bl	8009a58 <strncmp>
 800862e:	2800      	cmp	r0, #0
 8008630:	d1db      	bne.n	80085ea <__gethex+0x20e>
 8008632:	e794      	b.n	800855e <__gethex+0x182>
 8008634:	1eb1      	subs	r1, r6, #2
 8008636:	0028      	movs	r0, r5
 8008638:	f000 fe39 	bl	80092ae <__any_on>
 800863c:	2800      	cmp	r0, #0
 800863e:	d0b7      	beq.n	80085b0 <__gethex+0x1d4>
 8008640:	2403      	movs	r4, #3
 8008642:	e7b6      	b.n	80085b2 <__gethex+0x1d6>
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	2400      	movs	r4, #0
 8008648:	429e      	cmp	r6, r3
 800864a:	dab7      	bge.n	80085bc <__gethex+0x1e0>
 800864c:	1b9e      	subs	r6, r3, r6
 800864e:	0029      	movs	r1, r5
 8008650:	0032      	movs	r2, r6
 8008652:	9805      	ldr	r0, [sp, #20]
 8008654:	f000 fc58 	bl	8008f08 <__lshift>
 8008658:	0003      	movs	r3, r0
 800865a:	3314      	adds	r3, #20
 800865c:	0005      	movs	r5, r0
 800865e:	1bbf      	subs	r7, r7, r6
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	e7ab      	b.n	80085bc <__gethex+0x1e0>
 8008664:	9b02      	ldr	r3, [sp, #8]
 8008666:	685e      	ldr	r6, [r3, #4]
 8008668:	42be      	cmp	r6, r7
 800866a:	dd6b      	ble.n	8008744 <__gethex+0x368>
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	1bf6      	subs	r6, r6, r7
 8008670:	42b3      	cmp	r3, r6
 8008672:	dc32      	bgt.n	80086da <__gethex+0x2fe>
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d026      	beq.n	80086ca <__gethex+0x2ee>
 800867c:	2b03      	cmp	r3, #3
 800867e:	d028      	beq.n	80086d2 <__gethex+0x2f6>
 8008680:	2b01      	cmp	r3, #1
 8008682:	d119      	bne.n	80086b8 <__gethex+0x2dc>
 8008684:	9b01      	ldr	r3, [sp, #4]
 8008686:	42b3      	cmp	r3, r6
 8008688:	d116      	bne.n	80086b8 <__gethex+0x2dc>
 800868a:	2b01      	cmp	r3, #1
 800868c:	dc0d      	bgt.n	80086aa <__gethex+0x2ce>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	2662      	movs	r6, #98	; 0x62
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	9a01      	ldr	r2, [sp, #4]
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	2301      	movs	r3, #1
 800869e:	9a03      	ldr	r2, [sp, #12]
 80086a0:	612b      	str	r3, [r5, #16]
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086a6:	601d      	str	r5, [r3, #0]
 80086a8:	e72c      	b.n	8008504 <__gethex+0x128>
 80086aa:	9901      	ldr	r1, [sp, #4]
 80086ac:	0028      	movs	r0, r5
 80086ae:	3901      	subs	r1, #1
 80086b0:	f000 fdfd 	bl	80092ae <__any_on>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d1ea      	bne.n	800868e <__gethex+0x2b2>
 80086b8:	0029      	movs	r1, r5
 80086ba:	9805      	ldr	r0, [sp, #20]
 80086bc:	f000 fa5c 	bl	8008b78 <_Bfree>
 80086c0:	2300      	movs	r3, #0
 80086c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086c4:	2650      	movs	r6, #80	; 0x50
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	e71c      	b.n	8008504 <__gethex+0x128>
 80086ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0de      	beq.n	800868e <__gethex+0x2b2>
 80086d0:	e7f2      	b.n	80086b8 <__gethex+0x2dc>
 80086d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1da      	bne.n	800868e <__gethex+0x2b2>
 80086d8:	e7ee      	b.n	80086b8 <__gethex+0x2dc>
 80086da:	1e77      	subs	r7, r6, #1
 80086dc:	2c00      	cmp	r4, #0
 80086de:	d12f      	bne.n	8008740 <__gethex+0x364>
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	d004      	beq.n	80086ee <__gethex+0x312>
 80086e4:	0039      	movs	r1, r7
 80086e6:	0028      	movs	r0, r5
 80086e8:	f000 fde1 	bl	80092ae <__any_on>
 80086ec:	0004      	movs	r4, r0
 80086ee:	231f      	movs	r3, #31
 80086f0:	117a      	asrs	r2, r7, #5
 80086f2:	401f      	ands	r7, r3
 80086f4:	3b1e      	subs	r3, #30
 80086f6:	40bb      	lsls	r3, r7
 80086f8:	9903      	ldr	r1, [sp, #12]
 80086fa:	0092      	lsls	r2, r2, #2
 80086fc:	5852      	ldr	r2, [r2, r1]
 80086fe:	421a      	tst	r2, r3
 8008700:	d001      	beq.n	8008706 <__gethex+0x32a>
 8008702:	2302      	movs	r3, #2
 8008704:	431c      	orrs	r4, r3
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	0031      	movs	r1, r6
 800870a:	1b9b      	subs	r3, r3, r6
 800870c:	2602      	movs	r6, #2
 800870e:	0028      	movs	r0, r5
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f7ff fe1a 	bl	800834a <rshift>
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	685f      	ldr	r7, [r3, #4]
 800871a:	2c00      	cmp	r4, #0
 800871c:	d040      	beq.n	80087a0 <__gethex+0x3c4>
 800871e:	9b02      	ldr	r3, [sp, #8]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d010      	beq.n	8008748 <__gethex+0x36c>
 8008726:	2b03      	cmp	r3, #3
 8008728:	d012      	beq.n	8008750 <__gethex+0x374>
 800872a:	2b01      	cmp	r3, #1
 800872c:	d106      	bne.n	800873c <__gethex+0x360>
 800872e:	07a2      	lsls	r2, r4, #30
 8008730:	d504      	bpl.n	800873c <__gethex+0x360>
 8008732:	9a03      	ldr	r2, [sp, #12]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	4314      	orrs	r4, r2
 8008738:	421c      	tst	r4, r3
 800873a:	d10c      	bne.n	8008756 <__gethex+0x37a>
 800873c:	2310      	movs	r3, #16
 800873e:	e02e      	b.n	800879e <__gethex+0x3c2>
 8008740:	2401      	movs	r4, #1
 8008742:	e7d4      	b.n	80086ee <__gethex+0x312>
 8008744:	2601      	movs	r6, #1
 8008746:	e7e8      	b.n	800871a <__gethex+0x33e>
 8008748:	2301      	movs	r3, #1
 800874a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f2      	beq.n	800873c <__gethex+0x360>
 8008756:	692c      	ldr	r4, [r5, #16]
 8008758:	00a3      	lsls	r3, r4, #2
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	002b      	movs	r3, r5
 800875e:	00a2      	lsls	r2, r4, #2
 8008760:	3314      	adds	r3, #20
 8008762:	1899      	adds	r1, r3, r2
 8008764:	2200      	movs	r2, #0
 8008766:	4694      	mov	ip, r2
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	1c50      	adds	r0, r2, #1
 800876c:	d01d      	beq.n	80087aa <__gethex+0x3ce>
 800876e:	3201      	adds	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	002b      	movs	r3, r5
 8008774:	3314      	adds	r3, #20
 8008776:	2e02      	cmp	r6, #2
 8008778:	d13a      	bne.n	80087f0 <__gethex+0x414>
 800877a:	9a02      	ldr	r2, [sp, #8]
 800877c:	9901      	ldr	r1, [sp, #4]
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	3a01      	subs	r2, #1
 8008782:	428a      	cmp	r2, r1
 8008784:	d10a      	bne.n	800879c <__gethex+0x3c0>
 8008786:	114a      	asrs	r2, r1, #5
 8008788:	211f      	movs	r1, #31
 800878a:	9801      	ldr	r0, [sp, #4]
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	4001      	ands	r1, r0
 8008790:	2001      	movs	r0, #1
 8008792:	0004      	movs	r4, r0
 8008794:	408c      	lsls	r4, r1
 8008796:	58d3      	ldr	r3, [r2, r3]
 8008798:	4223      	tst	r3, r4
 800879a:	d148      	bne.n	800882e <__gethex+0x452>
 800879c:	2320      	movs	r3, #32
 800879e:	431e      	orrs	r6, r3
 80087a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087a2:	601d      	str	r5, [r3, #0]
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	601f      	str	r7, [r3, #0]
 80087a8:	e6ac      	b.n	8008504 <__gethex+0x128>
 80087aa:	4662      	mov	r2, ip
 80087ac:	c304      	stmia	r3!, {r2}
 80087ae:	4299      	cmp	r1, r3
 80087b0:	d8da      	bhi.n	8008768 <__gethex+0x38c>
 80087b2:	68ab      	ldr	r3, [r5, #8]
 80087b4:	429c      	cmp	r4, r3
 80087b6:	db12      	blt.n	80087de <__gethex+0x402>
 80087b8:	686b      	ldr	r3, [r5, #4]
 80087ba:	9805      	ldr	r0, [sp, #20]
 80087bc:	1c59      	adds	r1, r3, #1
 80087be:	f000 f9a3 	bl	8008b08 <_Balloc>
 80087c2:	0029      	movs	r1, r5
 80087c4:	692b      	ldr	r3, [r5, #16]
 80087c6:	9003      	str	r0, [sp, #12]
 80087c8:	1c9a      	adds	r2, r3, #2
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	310c      	adds	r1, #12
 80087ce:	300c      	adds	r0, #12
 80087d0:	f000 f991 	bl	8008af6 <memcpy>
 80087d4:	0029      	movs	r1, r5
 80087d6:	9805      	ldr	r0, [sp, #20]
 80087d8:	f000 f9ce 	bl	8008b78 <_Bfree>
 80087dc:	9d03      	ldr	r5, [sp, #12]
 80087de:	692b      	ldr	r3, [r5, #16]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	612a      	str	r2, [r5, #16]
 80087e4:	2201      	movs	r2, #1
 80087e6:	3304      	adds	r3, #4
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	18eb      	adds	r3, r5, r3
 80087ec:	605a      	str	r2, [r3, #4]
 80087ee:	e7c0      	b.n	8008772 <__gethex+0x396>
 80087f0:	692a      	ldr	r2, [r5, #16]
 80087f2:	42a2      	cmp	r2, r4
 80087f4:	dd0a      	ble.n	800880c <__gethex+0x430>
 80087f6:	2101      	movs	r1, #1
 80087f8:	0028      	movs	r0, r5
 80087fa:	f7ff fda6 	bl	800834a <rshift>
 80087fe:	9b02      	ldr	r3, [sp, #8]
 8008800:	3701      	adds	r7, #1
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	2601      	movs	r6, #1
 8008806:	42bb      	cmp	r3, r7
 8008808:	dac8      	bge.n	800879c <__gethex+0x3c0>
 800880a:	e6dc      	b.n	80085c6 <__gethex+0x1ea>
 800880c:	241f      	movs	r4, #31
 800880e:	9a01      	ldr	r2, [sp, #4]
 8008810:	2601      	movs	r6, #1
 8008812:	4022      	ands	r2, r4
 8008814:	1e14      	subs	r4, r2, #0
 8008816:	d0c1      	beq.n	800879c <__gethex+0x3c0>
 8008818:	9a04      	ldr	r2, [sp, #16]
 800881a:	189b      	adds	r3, r3, r2
 800881c:	3b04      	subs	r3, #4
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f000 fa3f 	bl	8008ca2 <__hi0bits>
 8008824:	2120      	movs	r1, #32
 8008826:	1b0c      	subs	r4, r1, r4
 8008828:	42a0      	cmp	r0, r4
 800882a:	dbe4      	blt.n	80087f6 <__gethex+0x41a>
 800882c:	e7b6      	b.n	800879c <__gethex+0x3c0>
 800882e:	0006      	movs	r6, r0
 8008830:	e7b4      	b.n	800879c <__gethex+0x3c0>

08008832 <L_shift>:
 8008832:	2308      	movs	r3, #8
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	2520      	movs	r5, #32
 8008838:	1a9a      	subs	r2, r3, r2
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	1aad      	subs	r5, r5, r2
 800883e:	6843      	ldr	r3, [r0, #4]
 8008840:	6806      	ldr	r6, [r0, #0]
 8008842:	001c      	movs	r4, r3
 8008844:	40ac      	lsls	r4, r5
 8008846:	40d3      	lsrs	r3, r2
 8008848:	4334      	orrs	r4, r6
 800884a:	6004      	str	r4, [r0, #0]
 800884c:	6043      	str	r3, [r0, #4]
 800884e:	3004      	adds	r0, #4
 8008850:	4288      	cmp	r0, r1
 8008852:	d3f4      	bcc.n	800883e <L_shift+0xc>
 8008854:	bd70      	pop	{r4, r5, r6, pc}

08008856 <__match>:
 8008856:	b530      	push	{r4, r5, lr}
 8008858:	6803      	ldr	r3, [r0, #0]
 800885a:	780c      	ldrb	r4, [r1, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	2c00      	cmp	r4, #0
 8008860:	d102      	bne.n	8008868 <__match+0x12>
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	2001      	movs	r0, #1
 8008866:	bd30      	pop	{r4, r5, pc}
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	0015      	movs	r5, r2
 800886c:	3d41      	subs	r5, #65	; 0x41
 800886e:	2d19      	cmp	r5, #25
 8008870:	d800      	bhi.n	8008874 <__match+0x1e>
 8008872:	3220      	adds	r2, #32
 8008874:	3101      	adds	r1, #1
 8008876:	42a2      	cmp	r2, r4
 8008878:	d0ef      	beq.n	800885a <__match+0x4>
 800887a:	2000      	movs	r0, #0
 800887c:	e7f3      	b.n	8008866 <__match+0x10>

0800887e <__hexnan>:
 800887e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008880:	b08b      	sub	sp, #44	; 0x2c
 8008882:	9201      	str	r2, [sp, #4]
 8008884:	680a      	ldr	r2, [r1, #0]
 8008886:	9901      	ldr	r1, [sp, #4]
 8008888:	1153      	asrs	r3, r2, #5
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	18cb      	adds	r3, r1, r3
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	231f      	movs	r3, #31
 8008892:	401a      	ands	r2, r3
 8008894:	9008      	str	r0, [sp, #32]
 8008896:	9206      	str	r2, [sp, #24]
 8008898:	d002      	beq.n	80088a0 <__hexnan+0x22>
 800889a:	9b04      	ldr	r3, [sp, #16]
 800889c:	3304      	adds	r3, #4
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	9b04      	ldr	r3, [sp, #16]
 80088a2:	2500      	movs	r5, #0
 80088a4:	1f1e      	subs	r6, r3, #4
 80088a6:	0037      	movs	r7, r6
 80088a8:	0034      	movs	r4, r6
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	6035      	str	r5, [r6, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9507      	str	r5, [sp, #28]
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	9502      	str	r5, [sp, #8]
 80088b6:	9b05      	ldr	r3, [sp, #20]
 80088b8:	3301      	adds	r3, #1
 80088ba:	9309      	str	r3, [sp, #36]	; 0x24
 80088bc:	9b05      	ldr	r3, [sp, #20]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	9303      	str	r3, [sp, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d028      	beq.n	8008918 <__hexnan+0x9a>
 80088c6:	9803      	ldr	r0, [sp, #12]
 80088c8:	f7ff fd73 	bl	80083b2 <__hexdig_fun>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d145      	bne.n	800895c <__hexnan+0xde>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d819      	bhi.n	800890a <__hexnan+0x8c>
 80088d6:	9b02      	ldr	r3, [sp, #8]
 80088d8:	9a07      	ldr	r2, [sp, #28]
 80088da:	4293      	cmp	r3, r2
 80088dc:	dd12      	ble.n	8008904 <__hexnan+0x86>
 80088de:	42bc      	cmp	r4, r7
 80088e0:	d206      	bcs.n	80088f0 <__hexnan+0x72>
 80088e2:	2d07      	cmp	r5, #7
 80088e4:	dc04      	bgt.n	80088f0 <__hexnan+0x72>
 80088e6:	002a      	movs	r2, r5
 80088e8:	0039      	movs	r1, r7
 80088ea:	0020      	movs	r0, r4
 80088ec:	f7ff ffa1 	bl	8008832 <L_shift>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	2508      	movs	r5, #8
 80088f4:	429c      	cmp	r4, r3
 80088f6:	d905      	bls.n	8008904 <__hexnan+0x86>
 80088f8:	1f27      	subs	r7, r4, #4
 80088fa:	2500      	movs	r5, #0
 80088fc:	003c      	movs	r4, r7
 80088fe:	9b02      	ldr	r3, [sp, #8]
 8008900:	603d      	str	r5, [r7, #0]
 8008902:	9307      	str	r3, [sp, #28]
 8008904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	e7d5      	b.n	80088b6 <__hexnan+0x38>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	2b29      	cmp	r3, #41	; 0x29
 800890e:	d14a      	bne.n	80089a6 <__hexnan+0x128>
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	9a08      	ldr	r2, [sp, #32]
 8008914:	3302      	adds	r3, #2
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	9b02      	ldr	r3, [sp, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d043      	beq.n	80089a6 <__hexnan+0x128>
 800891e:	42bc      	cmp	r4, r7
 8008920:	d206      	bcs.n	8008930 <__hexnan+0xb2>
 8008922:	2d07      	cmp	r5, #7
 8008924:	dc04      	bgt.n	8008930 <__hexnan+0xb2>
 8008926:	002a      	movs	r2, r5
 8008928:	0039      	movs	r1, r7
 800892a:	0020      	movs	r0, r4
 800892c:	f7ff ff81 	bl	8008832 <L_shift>
 8008930:	9b01      	ldr	r3, [sp, #4]
 8008932:	429c      	cmp	r4, r3
 8008934:	d926      	bls.n	8008984 <__hexnan+0x106>
 8008936:	cc04      	ldmia	r4!, {r2}
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	3304      	adds	r3, #4
 800893c:	42a6      	cmp	r6, r4
 800893e:	d2fa      	bcs.n	8008936 <__hexnan+0xb8>
 8008940:	2200      	movs	r2, #0
 8008942:	c304      	stmia	r3!, {r2}
 8008944:	429e      	cmp	r6, r3
 8008946:	d2fc      	bcs.n	8008942 <__hexnan+0xc4>
 8008948:	6833      	ldr	r3, [r6, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d104      	bne.n	8008958 <__hexnan+0xda>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	429e      	cmp	r6, r3
 8008952:	d126      	bne.n	80089a2 <__hexnan+0x124>
 8008954:	2301      	movs	r3, #1
 8008956:	6033      	str	r3, [r6, #0]
 8008958:	2005      	movs	r0, #5
 800895a:	e025      	b.n	80089a8 <__hexnan+0x12a>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	3501      	adds	r5, #1
 8008960:	3301      	adds	r3, #1
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	2d08      	cmp	r5, #8
 8008966:	dd06      	ble.n	8008976 <__hexnan+0xf8>
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	429c      	cmp	r4, r3
 800896c:	d9ca      	bls.n	8008904 <__hexnan+0x86>
 800896e:	2300      	movs	r3, #0
 8008970:	2501      	movs	r5, #1
 8008972:	3c04      	subs	r4, #4
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	220f      	movs	r2, #15
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	4010      	ands	r0, r2
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	4318      	orrs	r0, r3
 8008980:	6020      	str	r0, [r4, #0]
 8008982:	e7bf      	b.n	8008904 <__hexnan+0x86>
 8008984:	9b06      	ldr	r3, [sp, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0de      	beq.n	8008948 <__hexnan+0xca>
 800898a:	2120      	movs	r1, #32
 800898c:	9a06      	ldr	r2, [sp, #24]
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	1a89      	subs	r1, r1, r2
 8008992:	2201      	movs	r2, #1
 8008994:	4252      	negs	r2, r2
 8008996:	40ca      	lsrs	r2, r1
 8008998:	3b04      	subs	r3, #4
 800899a:	6819      	ldr	r1, [r3, #0]
 800899c:	400a      	ands	r2, r1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e7d2      	b.n	8008948 <__hexnan+0xca>
 80089a2:	3e04      	subs	r6, #4
 80089a4:	e7d0      	b.n	8008948 <__hexnan+0xca>
 80089a6:	2004      	movs	r0, #4
 80089a8:	b00b      	add	sp, #44	; 0x2c
 80089aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ac <__locale_ctype_ptr_l>:
 80089ac:	30ec      	adds	r0, #236	; 0xec
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	4770      	bx	lr

080089b2 <__localeconv_l>:
 80089b2:	30f0      	adds	r0, #240	; 0xf0
 80089b4:	4770      	bx	lr
	...

080089b8 <_localeconv_r>:
 80089b8:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <_localeconv_r+0x10>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6a18      	ldr	r0, [r3, #32]
 80089be:	2800      	cmp	r0, #0
 80089c0:	d100      	bne.n	80089c4 <_localeconv_r+0xc>
 80089c2:	4802      	ldr	r0, [pc, #8]	; (80089cc <_localeconv_r+0x14>)
 80089c4:	30f0      	adds	r0, #240	; 0xf0
 80089c6:	4770      	bx	lr
 80089c8:	2000000c 	.word	0x2000000c
 80089cc:	20000070 	.word	0x20000070

080089d0 <__swhatbuf_r>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	000e      	movs	r6, r1
 80089d4:	001d      	movs	r5, r3
 80089d6:	230e      	movs	r3, #14
 80089d8:	5ec9      	ldrsh	r1, [r1, r3]
 80089da:	b096      	sub	sp, #88	; 0x58
 80089dc:	0014      	movs	r4, r2
 80089de:	2900      	cmp	r1, #0
 80089e0:	da07      	bge.n	80089f2 <__swhatbuf_r+0x22>
 80089e2:	2300      	movs	r3, #0
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	89b3      	ldrh	r3, [r6, #12]
 80089e8:	061b      	lsls	r3, r3, #24
 80089ea:	d411      	bmi.n	8008a10 <__swhatbuf_r+0x40>
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	e00f      	b.n	8008a12 <__swhatbuf_r+0x42>
 80089f2:	466a      	mov	r2, sp
 80089f4:	f001 f874 	bl	8009ae0 <_fstat_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dbf2      	blt.n	80089e2 <__swhatbuf_r+0x12>
 80089fc:	22f0      	movs	r2, #240	; 0xf0
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	0212      	lsls	r2, r2, #8
 8008a02:	4013      	ands	r3, r2
 8008a04:	4a05      	ldr	r2, [pc, #20]	; (8008a1c <__swhatbuf_r+0x4c>)
 8008a06:	189b      	adds	r3, r3, r2
 8008a08:	425a      	negs	r2, r3
 8008a0a:	4153      	adcs	r3, r2
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	e7ed      	b.n	80089ec <__swhatbuf_r+0x1c>
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	2000      	movs	r0, #0
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	b016      	add	sp, #88	; 0x58
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	ffffe000 	.word	0xffffe000

08008a20 <__smakebuf_r>:
 8008a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a22:	2602      	movs	r6, #2
 8008a24:	898b      	ldrh	r3, [r1, #12]
 8008a26:	0005      	movs	r5, r0
 8008a28:	000c      	movs	r4, r1
 8008a2a:	4233      	tst	r3, r6
 8008a2c:	d006      	beq.n	8008a3c <__smakebuf_r+0x1c>
 8008a2e:	0023      	movs	r3, r4
 8008a30:	3347      	adds	r3, #71	; 0x47
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	2301      	movs	r3, #1
 8008a38:	6163      	str	r3, [r4, #20]
 8008a3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008a3c:	ab01      	add	r3, sp, #4
 8008a3e:	466a      	mov	r2, sp
 8008a40:	f7ff ffc6 	bl	80089d0 <__swhatbuf_r>
 8008a44:	9900      	ldr	r1, [sp, #0]
 8008a46:	0007      	movs	r7, r0
 8008a48:	0028      	movs	r0, r5
 8008a4a:	f000 fcab 	bl	80093a4 <_malloc_r>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d108      	bne.n	8008a64 <__smakebuf_r+0x44>
 8008a52:	220c      	movs	r2, #12
 8008a54:	5ea3      	ldrsh	r3, [r4, r2]
 8008a56:	059a      	lsls	r2, r3, #22
 8008a58:	d4ef      	bmi.n	8008a3a <__smakebuf_r+0x1a>
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	4393      	bics	r3, r2
 8008a5e:	431e      	orrs	r6, r3
 8008a60:	81a6      	strh	r6, [r4, #12]
 8008a62:	e7e4      	b.n	8008a2e <__smakebuf_r+0xe>
 8008a64:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <__smakebuf_r+0x84>)
 8008a66:	62ab      	str	r3, [r5, #40]	; 0x28
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	89a2      	ldrh	r2, [r4, #12]
 8008a6c:	6020      	str	r0, [r4, #0]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	9b00      	ldr	r3, [sp, #0]
 8008a74:	6120      	str	r0, [r4, #16]
 8008a76:	6163      	str	r3, [r4, #20]
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <__smakebuf_r+0x7a>
 8008a7e:	230e      	movs	r3, #14
 8008a80:	5ee1      	ldrsh	r1, [r4, r3]
 8008a82:	0028      	movs	r0, r5
 8008a84:	f001 f83e 	bl	8009b04 <_isatty_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d006      	beq.n	8008a9a <__smakebuf_r+0x7a>
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	4393      	bics	r3, r2
 8008a92:	001a      	movs	r2, r3
 8008a94:	2301      	movs	r3, #1
 8008a96:	4313      	orrs	r3, r2
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	89a0      	ldrh	r0, [r4, #12]
 8008a9c:	4338      	orrs	r0, r7
 8008a9e:	81a0      	strh	r0, [r4, #12]
 8008aa0:	e7cb      	b.n	8008a3a <__smakebuf_r+0x1a>
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	080081e9 	.word	0x080081e9

08008aa8 <malloc>:
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	4b03      	ldr	r3, [pc, #12]	; (8008ab8 <malloc+0x10>)
 8008aac:	0001      	movs	r1, r0
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	f000 fc78 	bl	80093a4 <_malloc_r>
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	46c0      	nop			; (mov r8, r8)
 8008ab8:	2000000c 	.word	0x2000000c

08008abc <__ascii_mbtowc>:
 8008abc:	b082      	sub	sp, #8
 8008abe:	2900      	cmp	r1, #0
 8008ac0:	d100      	bne.n	8008ac4 <__ascii_mbtowc+0x8>
 8008ac2:	a901      	add	r1, sp, #4
 8008ac4:	1e10      	subs	r0, r2, #0
 8008ac6:	d006      	beq.n	8008ad6 <__ascii_mbtowc+0x1a>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d006      	beq.n	8008ada <__ascii_mbtowc+0x1e>
 8008acc:	7813      	ldrb	r3, [r2, #0]
 8008ace:	600b      	str	r3, [r1, #0]
 8008ad0:	7810      	ldrb	r0, [r2, #0]
 8008ad2:	1e43      	subs	r3, r0, #1
 8008ad4:	4198      	sbcs	r0, r3
 8008ad6:	b002      	add	sp, #8
 8008ad8:	4770      	bx	lr
 8008ada:	2002      	movs	r0, #2
 8008adc:	4240      	negs	r0, r0
 8008ade:	e7fa      	b.n	8008ad6 <__ascii_mbtowc+0x1a>

08008ae0 <memchr>:
 8008ae0:	b2c9      	uxtb	r1, r1
 8008ae2:	1882      	adds	r2, r0, r2
 8008ae4:	4290      	cmp	r0, r2
 8008ae6:	d101      	bne.n	8008aec <memchr+0xc>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	4770      	bx	lr
 8008aec:	7803      	ldrb	r3, [r0, #0]
 8008aee:	428b      	cmp	r3, r1
 8008af0:	d0fb      	beq.n	8008aea <memchr+0xa>
 8008af2:	3001      	adds	r0, #1
 8008af4:	e7f6      	b.n	8008ae4 <memchr+0x4>

08008af6 <memcpy>:
 8008af6:	2300      	movs	r3, #0
 8008af8:	b510      	push	{r4, lr}
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d100      	bne.n	8008b00 <memcpy+0xa>
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	5ccc      	ldrb	r4, [r1, r3]
 8008b02:	54c4      	strb	r4, [r0, r3]
 8008b04:	3301      	adds	r3, #1
 8008b06:	e7f8      	b.n	8008afa <memcpy+0x4>

08008b08 <_Balloc>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b0c:	0004      	movs	r4, r0
 8008b0e:	000d      	movs	r5, r1
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	d107      	bne.n	8008b24 <_Balloc+0x1c>
 8008b14:	2010      	movs	r0, #16
 8008b16:	f7ff ffc7 	bl	8008aa8 <malloc>
 8008b1a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b1c:	6046      	str	r6, [r0, #4]
 8008b1e:	6086      	str	r6, [r0, #8]
 8008b20:	6006      	str	r6, [r0, #0]
 8008b22:	60c6      	str	r6, [r0, #12]
 8008b24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b26:	68f3      	ldr	r3, [r6, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d013      	beq.n	8008b54 <_Balloc+0x4c>
 8008b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b2e:	00aa      	lsls	r2, r5, #2
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	189b      	adds	r3, r3, r2
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d118      	bne.n	8008b6c <_Balloc+0x64>
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	000e      	movs	r6, r1
 8008b3e:	40ae      	lsls	r6, r5
 8008b40:	1d72      	adds	r2, r6, #5
 8008b42:	0092      	lsls	r2, r2, #2
 8008b44:	0020      	movs	r0, r4
 8008b46:	f000 fbd4 	bl	80092f2 <_calloc_r>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d00c      	beq.n	8008b68 <_Balloc+0x60>
 8008b4e:	6045      	str	r5, [r0, #4]
 8008b50:	6086      	str	r6, [r0, #8]
 8008b52:	e00d      	b.n	8008b70 <_Balloc+0x68>
 8008b54:	2221      	movs	r2, #33	; 0x21
 8008b56:	2104      	movs	r1, #4
 8008b58:	0020      	movs	r0, r4
 8008b5a:	f000 fbca 	bl	80092f2 <_calloc_r>
 8008b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b60:	60f0      	str	r0, [r6, #12]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e1      	bne.n	8008b2c <_Balloc+0x24>
 8008b68:	2000      	movs	r0, #0
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	6802      	ldr	r2, [r0, #0]
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	6103      	str	r3, [r0, #16]
 8008b74:	60c3      	str	r3, [r0, #12]
 8008b76:	e7f8      	b.n	8008b6a <_Balloc+0x62>

08008b78 <_Bfree>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b7c:	0006      	movs	r6, r0
 8008b7e:	000d      	movs	r5, r1
 8008b80:	2c00      	cmp	r4, #0
 8008b82:	d107      	bne.n	8008b94 <_Bfree+0x1c>
 8008b84:	2010      	movs	r0, #16
 8008b86:	f7ff ff8f 	bl	8008aa8 <malloc>
 8008b8a:	6270      	str	r0, [r6, #36]	; 0x24
 8008b8c:	6044      	str	r4, [r0, #4]
 8008b8e:	6084      	str	r4, [r0, #8]
 8008b90:	6004      	str	r4, [r0, #0]
 8008b92:	60c4      	str	r4, [r0, #12]
 8008b94:	2d00      	cmp	r5, #0
 8008b96:	d007      	beq.n	8008ba8 <_Bfree+0x30>
 8008b98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b9a:	686a      	ldr	r2, [r5, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	189b      	adds	r3, r3, r2
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	601d      	str	r5, [r3, #0]
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}

08008baa <__multadd>:
 8008baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bac:	001e      	movs	r6, r3
 8008bae:	2314      	movs	r3, #20
 8008bb0:	469c      	mov	ip, r3
 8008bb2:	0007      	movs	r7, r0
 8008bb4:	000c      	movs	r4, r1
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	690d      	ldr	r5, [r1, #16]
 8008bba:	448c      	add	ip, r1
 8008bbc:	4663      	mov	r3, ip
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	b299      	uxth	r1, r3
 8008bc4:	4663      	mov	r3, ip
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4351      	muls	r1, r2
 8008bca:	0c1b      	lsrs	r3, r3, #16
 8008bcc:	4353      	muls	r3, r2
 8008bce:	1989      	adds	r1, r1, r6
 8008bd0:	0c0e      	lsrs	r6, r1, #16
 8008bd2:	199b      	adds	r3, r3, r6
 8008bd4:	b289      	uxth	r1, r1
 8008bd6:	0c1e      	lsrs	r6, r3, #16
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	185b      	adds	r3, r3, r1
 8008bdc:	4661      	mov	r1, ip
 8008bde:	c108      	stmia	r1!, {r3}
 8008be0:	468c      	mov	ip, r1
 8008be2:	4285      	cmp	r5, r0
 8008be4:	dcea      	bgt.n	8008bbc <__multadd+0x12>
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	d01b      	beq.n	8008c22 <__multadd+0x78>
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dc12      	bgt.n	8008c16 <__multadd+0x6c>
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	0038      	movs	r0, r7
 8008bf4:	1c59      	adds	r1, r3, #1
 8008bf6:	f7ff ff87 	bl	8008b08 <_Balloc>
 8008bfa:	0021      	movs	r1, r4
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	9001      	str	r0, [sp, #4]
 8008c00:	1c9a      	adds	r2, r3, #2
 8008c02:	0092      	lsls	r2, r2, #2
 8008c04:	310c      	adds	r1, #12
 8008c06:	300c      	adds	r0, #12
 8008c08:	f7ff ff75 	bl	8008af6 <memcpy>
 8008c0c:	0021      	movs	r1, r4
 8008c0e:	0038      	movs	r0, r7
 8008c10:	f7ff ffb2 	bl	8008b78 <_Bfree>
 8008c14:	9c01      	ldr	r4, [sp, #4]
 8008c16:	1d2b      	adds	r3, r5, #4
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	18e3      	adds	r3, r4, r3
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	605e      	str	r6, [r3, #4]
 8008c20:	6125      	str	r5, [r4, #16]
 8008c22:	0020      	movs	r0, r4
 8008c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008c26 <__s2b>:
 8008c26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c28:	0006      	movs	r6, r0
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	000c      	movs	r4, r1
 8008c2e:	3008      	adds	r0, #8
 8008c30:	2109      	movs	r1, #9
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	0015      	movs	r5, r2
 8008c36:	f7f7 fb03 	bl	8000240 <__divsi3>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	db1f      	blt.n	8008c82 <__s2b+0x5c>
 8008c42:	0030      	movs	r0, r6
 8008c44:	f7ff ff60 	bl	8008b08 <_Balloc>
 8008c48:	9b08      	ldr	r3, [sp, #32]
 8008c4a:	6143      	str	r3, [r0, #20]
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	6103      	str	r3, [r0, #16]
 8008c50:	2d09      	cmp	r5, #9
 8008c52:	dd19      	ble.n	8008c88 <__s2b+0x62>
 8008c54:	0023      	movs	r3, r4
 8008c56:	3309      	adds	r3, #9
 8008c58:	001f      	movs	r7, r3
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	1964      	adds	r4, r4, r5
 8008c5e:	783b      	ldrb	r3, [r7, #0]
 8008c60:	0001      	movs	r1, r0
 8008c62:	3b30      	subs	r3, #48	; 0x30
 8008c64:	220a      	movs	r2, #10
 8008c66:	0030      	movs	r0, r6
 8008c68:	3701      	adds	r7, #1
 8008c6a:	f7ff ff9e 	bl	8008baa <__multadd>
 8008c6e:	42a7      	cmp	r7, r4
 8008c70:	d1f5      	bne.n	8008c5e <__s2b+0x38>
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	195c      	adds	r4, r3, r5
 8008c76:	3c08      	subs	r4, #8
 8008c78:	002f      	movs	r7, r5
 8008c7a:	9b01      	ldr	r3, [sp, #4]
 8008c7c:	429f      	cmp	r7, r3
 8008c7e:	db06      	blt.n	8008c8e <__s2b+0x68>
 8008c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	3101      	adds	r1, #1
 8008c86:	e7da      	b.n	8008c3e <__s2b+0x18>
 8008c88:	340a      	adds	r4, #10
 8008c8a:	2509      	movs	r5, #9
 8008c8c:	e7f4      	b.n	8008c78 <__s2b+0x52>
 8008c8e:	1b63      	subs	r3, r4, r5
 8008c90:	5ddb      	ldrb	r3, [r3, r7]
 8008c92:	0001      	movs	r1, r0
 8008c94:	3b30      	subs	r3, #48	; 0x30
 8008c96:	220a      	movs	r2, #10
 8008c98:	0030      	movs	r0, r6
 8008c9a:	f7ff ff86 	bl	8008baa <__multadd>
 8008c9e:	3701      	adds	r7, #1
 8008ca0:	e7eb      	b.n	8008c7a <__s2b+0x54>

08008ca2 <__hi0bits>:
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	0c02      	lsrs	r2, r0, #16
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	4282      	cmp	r2, r0
 8008caa:	d101      	bne.n	8008cb0 <__hi0bits+0xe>
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	3010      	adds	r0, #16
 8008cb0:	0e1a      	lsrs	r2, r3, #24
 8008cb2:	d101      	bne.n	8008cb8 <__hi0bits+0x16>
 8008cb4:	3008      	adds	r0, #8
 8008cb6:	021b      	lsls	r3, r3, #8
 8008cb8:	0f1a      	lsrs	r2, r3, #28
 8008cba:	d101      	bne.n	8008cc0 <__hi0bits+0x1e>
 8008cbc:	3004      	adds	r0, #4
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	0f9a      	lsrs	r2, r3, #30
 8008cc2:	d101      	bne.n	8008cc8 <__hi0bits+0x26>
 8008cc4:	3002      	adds	r0, #2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	db03      	blt.n	8008cd4 <__hi0bits+0x32>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	d400      	bmi.n	8008cd4 <__hi0bits+0x32>
 8008cd2:	2020      	movs	r0, #32
 8008cd4:	4770      	bx	lr

08008cd6 <__lo0bits>:
 8008cd6:	2207      	movs	r2, #7
 8008cd8:	6803      	ldr	r3, [r0, #0]
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	0001      	movs	r1, r0
 8008cde:	401a      	ands	r2, r3
 8008ce0:	d00d      	beq.n	8008cfe <__lo0bits+0x28>
 8008ce2:	2401      	movs	r4, #1
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	4223      	tst	r3, r4
 8008ce8:	d105      	bne.n	8008cf6 <__lo0bits+0x20>
 8008cea:	3002      	adds	r0, #2
 8008cec:	4203      	tst	r3, r0
 8008cee:	d003      	beq.n	8008cf8 <__lo0bits+0x22>
 8008cf0:	40e3      	lsrs	r3, r4
 8008cf2:	0020      	movs	r0, r4
 8008cf4:	600b      	str	r3, [r1, #0]
 8008cf6:	bd10      	pop	{r4, pc}
 8008cf8:	089b      	lsrs	r3, r3, #2
 8008cfa:	600b      	str	r3, [r1, #0]
 8008cfc:	e7fb      	b.n	8008cf6 <__lo0bits+0x20>
 8008cfe:	b29c      	uxth	r4, r3
 8008d00:	0010      	movs	r0, r2
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d101      	bne.n	8008d0a <__lo0bits+0x34>
 8008d06:	2010      	movs	r0, #16
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	d101      	bne.n	8008d14 <__lo0bits+0x3e>
 8008d10:	3008      	adds	r0, #8
 8008d12:	0a1b      	lsrs	r3, r3, #8
 8008d14:	071a      	lsls	r2, r3, #28
 8008d16:	d101      	bne.n	8008d1c <__lo0bits+0x46>
 8008d18:	3004      	adds	r0, #4
 8008d1a:	091b      	lsrs	r3, r3, #4
 8008d1c:	079a      	lsls	r2, r3, #30
 8008d1e:	d101      	bne.n	8008d24 <__lo0bits+0x4e>
 8008d20:	3002      	adds	r0, #2
 8008d22:	089b      	lsrs	r3, r3, #2
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	d4e8      	bmi.n	8008cfa <__lo0bits+0x24>
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	d001      	beq.n	8008d30 <__lo0bits+0x5a>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	e7e4      	b.n	8008cfa <__lo0bits+0x24>
 8008d30:	2020      	movs	r0, #32
 8008d32:	e7e0      	b.n	8008cf6 <__lo0bits+0x20>

08008d34 <__i2b>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	000c      	movs	r4, r1
 8008d38:	2101      	movs	r1, #1
 8008d3a:	f7ff fee5 	bl	8008b08 <_Balloc>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	6144      	str	r4, [r0, #20]
 8008d42:	6103      	str	r3, [r0, #16]
 8008d44:	bd10      	pop	{r4, pc}

08008d46 <__multiply>:
 8008d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d48:	690b      	ldr	r3, [r1, #16]
 8008d4a:	0014      	movs	r4, r2
 8008d4c:	6912      	ldr	r2, [r2, #16]
 8008d4e:	b089      	sub	sp, #36	; 0x24
 8008d50:	000d      	movs	r5, r1
 8008d52:	4293      	cmp	r3, r2
 8008d54:	da01      	bge.n	8008d5a <__multiply+0x14>
 8008d56:	0025      	movs	r5, r4
 8008d58:	000c      	movs	r4, r1
 8008d5a:	692f      	ldr	r7, [r5, #16]
 8008d5c:	6926      	ldr	r6, [r4, #16]
 8008d5e:	6869      	ldr	r1, [r5, #4]
 8008d60:	19bb      	adds	r3, r7, r6
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	68ab      	ldr	r3, [r5, #8]
 8008d66:	19ba      	adds	r2, r7, r6
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	da00      	bge.n	8008d6e <__multiply+0x28>
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	f7ff fecb 	bl	8008b08 <_Balloc>
 8008d72:	0002      	movs	r2, r0
 8008d74:	19bb      	adds	r3, r7, r6
 8008d76:	3214      	adds	r2, #20
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	18d3      	adds	r3, r2, r3
 8008d7c:	469c      	mov	ip, r3
 8008d7e:	2100      	movs	r1, #0
 8008d80:	0013      	movs	r3, r2
 8008d82:	9004      	str	r0, [sp, #16]
 8008d84:	4563      	cmp	r3, ip
 8008d86:	d31d      	bcc.n	8008dc4 <__multiply+0x7e>
 8008d88:	3514      	adds	r5, #20
 8008d8a:	00bf      	lsls	r7, r7, #2
 8008d8c:	19eb      	adds	r3, r5, r7
 8008d8e:	3414      	adds	r4, #20
 8008d90:	00b6      	lsls	r6, r6, #2
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	19a3      	adds	r3, r4, r6
 8008d96:	9503      	str	r5, [sp, #12]
 8008d98:	9401      	str	r4, [sp, #4]
 8008d9a:	9307      	str	r3, [sp, #28]
 8008d9c:	9b07      	ldr	r3, [sp, #28]
 8008d9e:	9901      	ldr	r1, [sp, #4]
 8008da0:	4299      	cmp	r1, r3
 8008da2:	d311      	bcc.n	8008dc8 <__multiply+0x82>
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dd06      	ble.n	8008db8 <__multiply+0x72>
 8008daa:	2304      	movs	r3, #4
 8008dac:	425b      	negs	r3, r3
 8008dae:	449c      	add	ip, r3
 8008db0:	4663      	mov	r3, ip
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d051      	beq.n	8008e5c <__multiply+0x116>
 8008db8:	9b04      	ldr	r3, [sp, #16]
 8008dba:	9a02      	ldr	r2, [sp, #8]
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	611a      	str	r2, [r3, #16]
 8008dc0:	b009      	add	sp, #36	; 0x24
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc4:	c302      	stmia	r3!, {r1}
 8008dc6:	e7dd      	b.n	8008d84 <__multiply+0x3e>
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	b298      	uxth	r0, r3
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d01c      	beq.n	8008e0c <__multiply+0xc6>
 8008dd2:	0015      	movs	r5, r2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	9f03      	ldr	r7, [sp, #12]
 8008dd8:	cf02      	ldmia	r7!, {r1}
 8008dda:	682c      	ldr	r4, [r5, #0]
 8008ddc:	b28b      	uxth	r3, r1
 8008dde:	4343      	muls	r3, r0
 8008de0:	0c09      	lsrs	r1, r1, #16
 8008de2:	4341      	muls	r1, r0
 8008de4:	b2a4      	uxth	r4, r4
 8008de6:	191b      	adds	r3, r3, r4
 8008de8:	199b      	adds	r3, r3, r6
 8008dea:	000e      	movs	r6, r1
 8008dec:	6829      	ldr	r1, [r5, #0]
 8008dee:	9506      	str	r5, [sp, #24]
 8008df0:	0c09      	lsrs	r1, r1, #16
 8008df2:	1871      	adds	r1, r6, r1
 8008df4:	0c1e      	lsrs	r6, r3, #16
 8008df6:	1989      	adds	r1, r1, r6
 8008df8:	0c0e      	lsrs	r6, r1, #16
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	0409      	lsls	r1, r1, #16
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	c508      	stmia	r5!, {r3}
 8008e02:	9b05      	ldr	r3, [sp, #20]
 8008e04:	42bb      	cmp	r3, r7
 8008e06:	d8e7      	bhi.n	8008dd8 <__multiply+0x92>
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	605e      	str	r6, [r3, #4]
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	0c1d      	lsrs	r5, r3, #16
 8008e12:	d01e      	beq.n	8008e52 <__multiply+0x10c>
 8008e14:	0010      	movs	r0, r2
 8008e16:	2700      	movs	r7, #0
 8008e18:	6813      	ldr	r3, [r2, #0]
 8008e1a:	9e03      	ldr	r6, [sp, #12]
 8008e1c:	6831      	ldr	r1, [r6, #0]
 8008e1e:	6804      	ldr	r4, [r0, #0]
 8008e20:	b289      	uxth	r1, r1
 8008e22:	4369      	muls	r1, r5
 8008e24:	0c24      	lsrs	r4, r4, #16
 8008e26:	1909      	adds	r1, r1, r4
 8008e28:	19c9      	adds	r1, r1, r7
 8008e2a:	040f      	lsls	r7, r1, #16
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	433b      	orrs	r3, r7
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	ce80      	ldmia	r6!, {r7}
 8008e34:	6843      	ldr	r3, [r0, #4]
 8008e36:	0c3f      	lsrs	r7, r7, #16
 8008e38:	436f      	muls	r7, r5
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	18fb      	adds	r3, r7, r3
 8008e3e:	0c09      	lsrs	r1, r1, #16
 8008e40:	185b      	adds	r3, r3, r1
 8008e42:	9905      	ldr	r1, [sp, #20]
 8008e44:	9006      	str	r0, [sp, #24]
 8008e46:	0c1f      	lsrs	r7, r3, #16
 8008e48:	3004      	adds	r0, #4
 8008e4a:	42b1      	cmp	r1, r6
 8008e4c:	d8e6      	bhi.n	8008e1c <__multiply+0xd6>
 8008e4e:	9906      	ldr	r1, [sp, #24]
 8008e50:	604b      	str	r3, [r1, #4]
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	3204      	adds	r2, #4
 8008e56:	3304      	adds	r3, #4
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	e79f      	b.n	8008d9c <__multiply+0x56>
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	e79f      	b.n	8008da4 <__multiply+0x5e>

08008e64 <__pow5mult>:
 8008e64:	2303      	movs	r3, #3
 8008e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e68:	4013      	ands	r3, r2
 8008e6a:	0005      	movs	r5, r0
 8008e6c:	000e      	movs	r6, r1
 8008e6e:	0014      	movs	r4, r2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <__pow5mult+0x22>
 8008e74:	4922      	ldr	r1, [pc, #136]	; (8008f00 <__pow5mult+0x9c>)
 8008e76:	3b01      	subs	r3, #1
 8008e78:	009a      	lsls	r2, r3, #2
 8008e7a:	5852      	ldr	r2, [r2, r1]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	0031      	movs	r1, r6
 8008e80:	f7ff fe93 	bl	8008baa <__multadd>
 8008e84:	0006      	movs	r6, r0
 8008e86:	10a3      	asrs	r3, r4, #2
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	d036      	beq.n	8008efa <__pow5mult+0x96>
 8008e8c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	d107      	bne.n	8008ea2 <__pow5mult+0x3e>
 8008e92:	2010      	movs	r0, #16
 8008e94:	f7ff fe08 	bl	8008aa8 <malloc>
 8008e98:	6268      	str	r0, [r5, #36]	; 0x24
 8008e9a:	6044      	str	r4, [r0, #4]
 8008e9c:	6084      	str	r4, [r0, #8]
 8008e9e:	6004      	str	r4, [r0, #0]
 8008ea0:	60c4      	str	r4, [r0, #12]
 8008ea2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008ea4:	68bc      	ldr	r4, [r7, #8]
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d107      	bne.n	8008eba <__pow5mult+0x56>
 8008eaa:	4916      	ldr	r1, [pc, #88]	; (8008f04 <__pow5mult+0xa0>)
 8008eac:	0028      	movs	r0, r5
 8008eae:	f7ff ff41 	bl	8008d34 <__i2b>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	0004      	movs	r4, r0
 8008eb6:	60b8      	str	r0, [r7, #8]
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	4213      	tst	r3, r2
 8008ec0:	d00a      	beq.n	8008ed8 <__pow5mult+0x74>
 8008ec2:	0031      	movs	r1, r6
 8008ec4:	0022      	movs	r2, r4
 8008ec6:	0028      	movs	r0, r5
 8008ec8:	f7ff ff3d 	bl	8008d46 <__multiply>
 8008ecc:	0007      	movs	r7, r0
 8008ece:	0031      	movs	r1, r6
 8008ed0:	0028      	movs	r0, r5
 8008ed2:	f7ff fe51 	bl	8008b78 <_Bfree>
 8008ed6:	003e      	movs	r6, r7
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	105b      	asrs	r3, r3, #1
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	d00c      	beq.n	8008efa <__pow5mult+0x96>
 8008ee0:	6820      	ldr	r0, [r4, #0]
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d107      	bne.n	8008ef6 <__pow5mult+0x92>
 8008ee6:	0022      	movs	r2, r4
 8008ee8:	0021      	movs	r1, r4
 8008eea:	0028      	movs	r0, r5
 8008eec:	f7ff ff2b 	bl	8008d46 <__multiply>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	6020      	str	r0, [r4, #0]
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	0004      	movs	r4, r0
 8008ef8:	e7df      	b.n	8008eba <__pow5mult+0x56>
 8008efa:	0030      	movs	r0, r6
 8008efc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	08009f78 	.word	0x08009f78
 8008f04:	00000271 	.word	0x00000271

08008f08 <__lshift>:
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0a:	000d      	movs	r5, r1
 8008f0c:	0017      	movs	r7, r2
 8008f0e:	692b      	ldr	r3, [r5, #16]
 8008f10:	1154      	asrs	r4, r2, #5
 8008f12:	b085      	sub	sp, #20
 8008f14:	18e3      	adds	r3, r4, r3
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	6849      	ldr	r1, [r1, #4]
 8008f1e:	68ab      	ldr	r3, [r5, #8]
 8008f20:	9002      	str	r0, [sp, #8]
 8008f22:	9a00      	ldr	r2, [sp, #0]
 8008f24:	4293      	cmp	r3, r2
 8008f26:	db35      	blt.n	8008f94 <__lshift+0x8c>
 8008f28:	9802      	ldr	r0, [sp, #8]
 8008f2a:	f7ff fded 	bl	8008b08 <_Balloc>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	0002      	movs	r2, r0
 8008f32:	0006      	movs	r6, r0
 8008f34:	0019      	movs	r1, r3
 8008f36:	3214      	adds	r2, #20
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	db2e      	blt.n	8008f9a <__lshift+0x92>
 8008f3c:	43e3      	mvns	r3, r4
 8008f3e:	17db      	asrs	r3, r3, #31
 8008f40:	401c      	ands	r4, r3
 8008f42:	002b      	movs	r3, r5
 8008f44:	00a4      	lsls	r4, r4, #2
 8008f46:	1914      	adds	r4, r2, r4
 8008f48:	692a      	ldr	r2, [r5, #16]
 8008f4a:	3314      	adds	r3, #20
 8008f4c:	0092      	lsls	r2, r2, #2
 8008f4e:	189a      	adds	r2, r3, r2
 8008f50:	4694      	mov	ip, r2
 8008f52:	221f      	movs	r2, #31
 8008f54:	4017      	ands	r7, r2
 8008f56:	d024      	beq.n	8008fa2 <__lshift+0x9a>
 8008f58:	3201      	adds	r2, #1
 8008f5a:	1bd2      	subs	r2, r2, r7
 8008f5c:	9203      	str	r2, [sp, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	6819      	ldr	r1, [r3, #0]
 8008f62:	0020      	movs	r0, r4
 8008f64:	40b9      	lsls	r1, r7
 8008f66:	430a      	orrs	r2, r1
 8008f68:	c404      	stmia	r4!, {r2}
 8008f6a:	cb04      	ldmia	r3!, {r2}
 8008f6c:	9903      	ldr	r1, [sp, #12]
 8008f6e:	40ca      	lsrs	r2, r1
 8008f70:	459c      	cmp	ip, r3
 8008f72:	d8f5      	bhi.n	8008f60 <__lshift+0x58>
 8008f74:	6042      	str	r2, [r0, #4]
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d002      	beq.n	8008f80 <__lshift+0x78>
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	9802      	ldr	r0, [sp, #8]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	6133      	str	r3, [r6, #16]
 8008f88:	0029      	movs	r1, r5
 8008f8a:	f7ff fdf5 	bl	8008b78 <_Bfree>
 8008f8e:	0030      	movs	r0, r6
 8008f90:	b005      	add	sp, #20
 8008f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f94:	3101      	adds	r1, #1
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	e7c3      	b.n	8008f22 <__lshift+0x1a>
 8008f9a:	0098      	lsls	r0, r3, #2
 8008f9c:	5011      	str	r1, [r2, r0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	e7ca      	b.n	8008f38 <__lshift+0x30>
 8008fa2:	cb04      	ldmia	r3!, {r2}
 8008fa4:	c404      	stmia	r4!, {r2}
 8008fa6:	459c      	cmp	ip, r3
 8008fa8:	d8fb      	bhi.n	8008fa2 <__lshift+0x9a>
 8008faa:	e7e9      	b.n	8008f80 <__lshift+0x78>

08008fac <__mcmp>:
 8008fac:	690a      	ldr	r2, [r1, #16]
 8008fae:	6903      	ldr	r3, [r0, #16]
 8008fb0:	b530      	push	{r4, r5, lr}
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	d10d      	bne.n	8008fd2 <__mcmp+0x26>
 8008fb6:	0092      	lsls	r2, r2, #2
 8008fb8:	3014      	adds	r0, #20
 8008fba:	3114      	adds	r1, #20
 8008fbc:	1884      	adds	r4, r0, r2
 8008fbe:	1889      	adds	r1, r1, r2
 8008fc0:	3c04      	subs	r4, #4
 8008fc2:	3904      	subs	r1, #4
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	680a      	ldr	r2, [r1, #0]
 8008fc8:	4295      	cmp	r5, r2
 8008fca:	d004      	beq.n	8008fd6 <__mcmp+0x2a>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	4295      	cmp	r5, r2
 8008fd0:	d304      	bcc.n	8008fdc <__mcmp+0x30>
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	bd30      	pop	{r4, r5, pc}
 8008fd6:	42a0      	cmp	r0, r4
 8008fd8:	d3f2      	bcc.n	8008fc0 <__mcmp+0x14>
 8008fda:	e7fa      	b.n	8008fd2 <__mcmp+0x26>
 8008fdc:	425b      	negs	r3, r3
 8008fde:	e7f8      	b.n	8008fd2 <__mcmp+0x26>

08008fe0 <__mdiff>:
 8008fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fe2:	000d      	movs	r5, r1
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	0007      	movs	r7, r0
 8008fe8:	0011      	movs	r1, r2
 8008fea:	0028      	movs	r0, r5
 8008fec:	0014      	movs	r4, r2
 8008fee:	f7ff ffdd 	bl	8008fac <__mcmp>
 8008ff2:	1e06      	subs	r6, r0, #0
 8008ff4:	d108      	bne.n	8009008 <__mdiff+0x28>
 8008ff6:	0001      	movs	r1, r0
 8008ff8:	0038      	movs	r0, r7
 8008ffa:	f7ff fd85 	bl	8008b08 <_Balloc>
 8008ffe:	2301      	movs	r3, #1
 8009000:	6146      	str	r6, [r0, #20]
 8009002:	6103      	str	r3, [r0, #16]
 8009004:	b005      	add	sp, #20
 8009006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009008:	2301      	movs	r3, #1
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	2800      	cmp	r0, #0
 800900e:	db04      	blt.n	800901a <__mdiff+0x3a>
 8009010:	0023      	movs	r3, r4
 8009012:	002c      	movs	r4, r5
 8009014:	001d      	movs	r5, r3
 8009016:	2300      	movs	r3, #0
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	6861      	ldr	r1, [r4, #4]
 800901c:	0038      	movs	r0, r7
 800901e:	f7ff fd73 	bl	8008b08 <_Balloc>
 8009022:	002f      	movs	r7, r5
 8009024:	2200      	movs	r2, #0
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	6926      	ldr	r6, [r4, #16]
 800902a:	60c3      	str	r3, [r0, #12]
 800902c:	3414      	adds	r4, #20
 800902e:	00b3      	lsls	r3, r6, #2
 8009030:	18e3      	adds	r3, r4, r3
 8009032:	9302      	str	r3, [sp, #8]
 8009034:	692b      	ldr	r3, [r5, #16]
 8009036:	3714      	adds	r7, #20
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	0003      	movs	r3, r0
 8009040:	4694      	mov	ip, r2
 8009042:	3314      	adds	r3, #20
 8009044:	cc20      	ldmia	r4!, {r5}
 8009046:	cf04      	ldmia	r7!, {r2}
 8009048:	9201      	str	r2, [sp, #4]
 800904a:	b2aa      	uxth	r2, r5
 800904c:	4494      	add	ip, r2
 800904e:	466a      	mov	r2, sp
 8009050:	4661      	mov	r1, ip
 8009052:	8892      	ldrh	r2, [r2, #4]
 8009054:	0c2d      	lsrs	r5, r5, #16
 8009056:	1a8a      	subs	r2, r1, r2
 8009058:	9901      	ldr	r1, [sp, #4]
 800905a:	0c09      	lsrs	r1, r1, #16
 800905c:	1a69      	subs	r1, r5, r1
 800905e:	1415      	asrs	r5, r2, #16
 8009060:	1949      	adds	r1, r1, r5
 8009062:	140d      	asrs	r5, r1, #16
 8009064:	b292      	uxth	r2, r2
 8009066:	0409      	lsls	r1, r1, #16
 8009068:	430a      	orrs	r2, r1
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	9a03      	ldr	r2, [sp, #12]
 800906e:	46ac      	mov	ip, r5
 8009070:	3304      	adds	r3, #4
 8009072:	42ba      	cmp	r2, r7
 8009074:	d8e6      	bhi.n	8009044 <__mdiff+0x64>
 8009076:	9902      	ldr	r1, [sp, #8]
 8009078:	001a      	movs	r2, r3
 800907a:	428c      	cmp	r4, r1
 800907c:	d305      	bcc.n	800908a <__mdiff+0xaa>
 800907e:	3a04      	subs	r2, #4
 8009080:	6813      	ldr	r3, [r2, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <__mdiff+0xc4>
 8009086:	6106      	str	r6, [r0, #16]
 8009088:	e7bc      	b.n	8009004 <__mdiff+0x24>
 800908a:	cc04      	ldmia	r4!, {r2}
 800908c:	b291      	uxth	r1, r2
 800908e:	4461      	add	r1, ip
 8009090:	140d      	asrs	r5, r1, #16
 8009092:	0c12      	lsrs	r2, r2, #16
 8009094:	1952      	adds	r2, r2, r5
 8009096:	1415      	asrs	r5, r2, #16
 8009098:	b289      	uxth	r1, r1
 800909a:	0412      	lsls	r2, r2, #16
 800909c:	430a      	orrs	r2, r1
 800909e:	46ac      	mov	ip, r5
 80090a0:	c304      	stmia	r3!, {r2}
 80090a2:	e7e8      	b.n	8009076 <__mdiff+0x96>
 80090a4:	3e01      	subs	r6, #1
 80090a6:	e7ea      	b.n	800907e <__mdiff+0x9e>

080090a8 <__ulp>:
 80090a8:	000b      	movs	r3, r1
 80090aa:	4910      	ldr	r1, [pc, #64]	; (80090ec <__ulp+0x44>)
 80090ac:	b510      	push	{r4, lr}
 80090ae:	4019      	ands	r1, r3
 80090b0:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <__ulp+0x48>)
 80090b2:	18c9      	adds	r1, r1, r3
 80090b4:	2900      	cmp	r1, #0
 80090b6:	dd04      	ble.n	80090c2 <__ulp+0x1a>
 80090b8:	2200      	movs	r2, #0
 80090ba:	000b      	movs	r3, r1
 80090bc:	0010      	movs	r0, r2
 80090be:	0019      	movs	r1, r3
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	4249      	negs	r1, r1
 80090c4:	1509      	asrs	r1, r1, #20
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	2913      	cmp	r1, #19
 80090cc:	dc04      	bgt.n	80090d8 <__ulp+0x30>
 80090ce:	2080      	movs	r0, #128	; 0x80
 80090d0:	0300      	lsls	r0, r0, #12
 80090d2:	4108      	asrs	r0, r1
 80090d4:	0003      	movs	r3, r0
 80090d6:	e7f1      	b.n	80090bc <__ulp+0x14>
 80090d8:	3914      	subs	r1, #20
 80090da:	2001      	movs	r0, #1
 80090dc:	291e      	cmp	r1, #30
 80090de:	dc02      	bgt.n	80090e6 <__ulp+0x3e>
 80090e0:	241f      	movs	r4, #31
 80090e2:	1a61      	subs	r1, r4, r1
 80090e4:	4088      	lsls	r0, r1
 80090e6:	0002      	movs	r2, r0
 80090e8:	e7e8      	b.n	80090bc <__ulp+0x14>
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	7ff00000 	.word	0x7ff00000
 80090f0:	fcc00000 	.word	0xfcc00000

080090f4 <__b2d>:
 80090f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f6:	0006      	movs	r6, r0
 80090f8:	6903      	ldr	r3, [r0, #16]
 80090fa:	3614      	adds	r6, #20
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	18f3      	adds	r3, r6, r3
 8009100:	1f1d      	subs	r5, r3, #4
 8009102:	682c      	ldr	r4, [r5, #0]
 8009104:	000f      	movs	r7, r1
 8009106:	0020      	movs	r0, r4
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	f7ff fdca 	bl	8008ca2 <__hi0bits>
 800910e:	2320      	movs	r3, #32
 8009110:	1a1b      	subs	r3, r3, r0
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	491c      	ldr	r1, [pc, #112]	; (8009188 <__b2d+0x94>)
 8009116:	280a      	cmp	r0, #10
 8009118:	dc16      	bgt.n	8009148 <__b2d+0x54>
 800911a:	230b      	movs	r3, #11
 800911c:	0027      	movs	r7, r4
 800911e:	1a1b      	subs	r3, r3, r0
 8009120:	40df      	lsrs	r7, r3
 8009122:	4339      	orrs	r1, r7
 8009124:	469c      	mov	ip, r3
 8009126:	000b      	movs	r3, r1
 8009128:	2100      	movs	r1, #0
 800912a:	42ae      	cmp	r6, r5
 800912c:	d202      	bcs.n	8009134 <__b2d+0x40>
 800912e:	9901      	ldr	r1, [sp, #4]
 8009130:	3908      	subs	r1, #8
 8009132:	6809      	ldr	r1, [r1, #0]
 8009134:	3015      	adds	r0, #21
 8009136:	4084      	lsls	r4, r0
 8009138:	4660      	mov	r0, ip
 800913a:	40c1      	lsrs	r1, r0
 800913c:	430c      	orrs	r4, r1
 800913e:	0022      	movs	r2, r4
 8009140:	0010      	movs	r0, r2
 8009142:	0019      	movs	r1, r3
 8009144:	b003      	add	sp, #12
 8009146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009148:	2700      	movs	r7, #0
 800914a:	42ae      	cmp	r6, r5
 800914c:	d202      	bcs.n	8009154 <__b2d+0x60>
 800914e:	9d01      	ldr	r5, [sp, #4]
 8009150:	3d08      	subs	r5, #8
 8009152:	682f      	ldr	r7, [r5, #0]
 8009154:	380b      	subs	r0, #11
 8009156:	4684      	mov	ip, r0
 8009158:	1e03      	subs	r3, r0, #0
 800915a:	d012      	beq.n	8009182 <__b2d+0x8e>
 800915c:	409c      	lsls	r4, r3
 800915e:	2020      	movs	r0, #32
 8009160:	4321      	orrs	r1, r4
 8009162:	003c      	movs	r4, r7
 8009164:	1ac0      	subs	r0, r0, r3
 8009166:	40c4      	lsrs	r4, r0
 8009168:	4321      	orrs	r1, r4
 800916a:	000b      	movs	r3, r1
 800916c:	2100      	movs	r1, #0
 800916e:	42b5      	cmp	r5, r6
 8009170:	d901      	bls.n	8009176 <__b2d+0x82>
 8009172:	3d04      	subs	r5, #4
 8009174:	6829      	ldr	r1, [r5, #0]
 8009176:	4664      	mov	r4, ip
 8009178:	40c1      	lsrs	r1, r0
 800917a:	40a7      	lsls	r7, r4
 800917c:	430f      	orrs	r7, r1
 800917e:	003a      	movs	r2, r7
 8009180:	e7de      	b.n	8009140 <__b2d+0x4c>
 8009182:	4321      	orrs	r1, r4
 8009184:	000b      	movs	r3, r1
 8009186:	e7fa      	b.n	800917e <__b2d+0x8a>
 8009188:	3ff00000 	.word	0x3ff00000

0800918c <__d2b>:
 800918c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800918e:	001d      	movs	r5, r3
 8009190:	2101      	movs	r1, #1
 8009192:	0014      	movs	r4, r2
 8009194:	9f08      	ldr	r7, [sp, #32]
 8009196:	f7ff fcb7 	bl	8008b08 <_Balloc>
 800919a:	032b      	lsls	r3, r5, #12
 800919c:	006d      	lsls	r5, r5, #1
 800919e:	0006      	movs	r6, r0
 80091a0:	0b1b      	lsrs	r3, r3, #12
 80091a2:	0d6d      	lsrs	r5, r5, #21
 80091a4:	d124      	bne.n	80091f0 <__d2b+0x64>
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	2c00      	cmp	r4, #0
 80091aa:	d027      	beq.n	80091fc <__d2b+0x70>
 80091ac:	4668      	mov	r0, sp
 80091ae:	9400      	str	r4, [sp, #0]
 80091b0:	f7ff fd91 	bl	8008cd6 <__lo0bits>
 80091b4:	9c00      	ldr	r4, [sp, #0]
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d01e      	beq.n	80091f8 <__d2b+0x6c>
 80091ba:	9b01      	ldr	r3, [sp, #4]
 80091bc:	2120      	movs	r1, #32
 80091be:	001a      	movs	r2, r3
 80091c0:	1a09      	subs	r1, r1, r0
 80091c2:	408a      	lsls	r2, r1
 80091c4:	40c3      	lsrs	r3, r0
 80091c6:	4322      	orrs	r2, r4
 80091c8:	6172      	str	r2, [r6, #20]
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	9c01      	ldr	r4, [sp, #4]
 80091ce:	61b4      	str	r4, [r6, #24]
 80091d0:	1e63      	subs	r3, r4, #1
 80091d2:	419c      	sbcs	r4, r3
 80091d4:	3401      	adds	r4, #1
 80091d6:	6134      	str	r4, [r6, #16]
 80091d8:	2d00      	cmp	r5, #0
 80091da:	d018      	beq.n	800920e <__d2b+0x82>
 80091dc:	4b12      	ldr	r3, [pc, #72]	; (8009228 <__d2b+0x9c>)
 80091de:	18ed      	adds	r5, r5, r3
 80091e0:	2335      	movs	r3, #53	; 0x35
 80091e2:	182d      	adds	r5, r5, r0
 80091e4:	603d      	str	r5, [r7, #0]
 80091e6:	1a18      	subs	r0, r3, r0
 80091e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ea:	6018      	str	r0, [r3, #0]
 80091ec:	0030      	movs	r0, r6
 80091ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091f0:	2280      	movs	r2, #128	; 0x80
 80091f2:	0352      	lsls	r2, r2, #13
 80091f4:	4313      	orrs	r3, r2
 80091f6:	e7d6      	b.n	80091a6 <__d2b+0x1a>
 80091f8:	6174      	str	r4, [r6, #20]
 80091fa:	e7e7      	b.n	80091cc <__d2b+0x40>
 80091fc:	a801      	add	r0, sp, #4
 80091fe:	f7ff fd6a 	bl	8008cd6 <__lo0bits>
 8009202:	2401      	movs	r4, #1
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	6134      	str	r4, [r6, #16]
 8009208:	6173      	str	r3, [r6, #20]
 800920a:	3020      	adds	r0, #32
 800920c:	e7e4      	b.n	80091d8 <__d2b+0x4c>
 800920e:	4b07      	ldr	r3, [pc, #28]	; (800922c <__d2b+0xa0>)
 8009210:	18c0      	adds	r0, r0, r3
 8009212:	4b07      	ldr	r3, [pc, #28]	; (8009230 <__d2b+0xa4>)
 8009214:	6038      	str	r0, [r7, #0]
 8009216:	18e3      	adds	r3, r4, r3
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	18f3      	adds	r3, r6, r3
 800921c:	6958      	ldr	r0, [r3, #20]
 800921e:	f7ff fd40 	bl	8008ca2 <__hi0bits>
 8009222:	0164      	lsls	r4, r4, #5
 8009224:	1a20      	subs	r0, r4, r0
 8009226:	e7df      	b.n	80091e8 <__d2b+0x5c>
 8009228:	fffffbcd 	.word	0xfffffbcd
 800922c:	fffffbce 	.word	0xfffffbce
 8009230:	3fffffff 	.word	0x3fffffff

08009234 <__ratio>:
 8009234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009236:	b085      	sub	sp, #20
 8009238:	000f      	movs	r7, r1
 800923a:	a902      	add	r1, sp, #8
 800923c:	0006      	movs	r6, r0
 800923e:	f7ff ff59 	bl	80090f4 <__b2d>
 8009242:	0004      	movs	r4, r0
 8009244:	000d      	movs	r5, r1
 8009246:	0038      	movs	r0, r7
 8009248:	a903      	add	r1, sp, #12
 800924a:	9400      	str	r4, [sp, #0]
 800924c:	9501      	str	r5, [sp, #4]
 800924e:	f7ff ff51 	bl	80090f4 <__b2d>
 8009252:	6936      	ldr	r6, [r6, #16]
 8009254:	693f      	ldr	r7, [r7, #16]
 8009256:	0002      	movs	r2, r0
 8009258:	1bf7      	subs	r7, r6, r7
 800925a:	017e      	lsls	r6, r7, #5
 800925c:	46b4      	mov	ip, r6
 800925e:	9f03      	ldr	r7, [sp, #12]
 8009260:	9e02      	ldr	r6, [sp, #8]
 8009262:	000b      	movs	r3, r1
 8009264:	1bf6      	subs	r6, r6, r7
 8009266:	4466      	add	r6, ip
 8009268:	0537      	lsls	r7, r6, #20
 800926a:	2e00      	cmp	r6, #0
 800926c:	dd07      	ble.n	800927e <__ratio+0x4a>
 800926e:	1979      	adds	r1, r7, r5
 8009270:	9101      	str	r1, [sp, #4]
 8009272:	9800      	ldr	r0, [sp, #0]
 8009274:	9901      	ldr	r1, [sp, #4]
 8009276:	f7f7 fc47 	bl	8000b08 <__aeabi_ddiv>
 800927a:	b005      	add	sp, #20
 800927c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927e:	1bcb      	subs	r3, r1, r7
 8009280:	e7f7      	b.n	8009272 <__ratio+0x3e>

08009282 <__copybits>:
 8009282:	0013      	movs	r3, r2
 8009284:	3901      	subs	r1, #1
 8009286:	b510      	push	{r4, lr}
 8009288:	1149      	asrs	r1, r1, #5
 800928a:	6912      	ldr	r2, [r2, #16]
 800928c:	3101      	adds	r1, #1
 800928e:	0089      	lsls	r1, r1, #2
 8009290:	3314      	adds	r3, #20
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	1841      	adds	r1, r0, r1
 8009296:	189a      	adds	r2, r3, r2
 8009298:	429a      	cmp	r2, r3
 800929a:	d803      	bhi.n	80092a4 <__copybits+0x22>
 800929c:	2300      	movs	r3, #0
 800929e:	4281      	cmp	r1, r0
 80092a0:	d803      	bhi.n	80092aa <__copybits+0x28>
 80092a2:	bd10      	pop	{r4, pc}
 80092a4:	cb10      	ldmia	r3!, {r4}
 80092a6:	c010      	stmia	r0!, {r4}
 80092a8:	e7f6      	b.n	8009298 <__copybits+0x16>
 80092aa:	c008      	stmia	r0!, {r3}
 80092ac:	e7f7      	b.n	800929e <__copybits+0x1c>

080092ae <__any_on>:
 80092ae:	0002      	movs	r2, r0
 80092b0:	6900      	ldr	r0, [r0, #16]
 80092b2:	b510      	push	{r4, lr}
 80092b4:	3214      	adds	r2, #20
 80092b6:	114b      	asrs	r3, r1, #5
 80092b8:	4298      	cmp	r0, r3
 80092ba:	db12      	blt.n	80092e2 <__any_on+0x34>
 80092bc:	dd0b      	ble.n	80092d6 <__any_on+0x28>
 80092be:	201f      	movs	r0, #31
 80092c0:	4001      	ands	r1, r0
 80092c2:	d008      	beq.n	80092d6 <__any_on+0x28>
 80092c4:	0098      	lsls	r0, r3, #2
 80092c6:	5884      	ldr	r4, [r0, r2]
 80092c8:	0020      	movs	r0, r4
 80092ca:	40c8      	lsrs	r0, r1
 80092cc:	4088      	lsls	r0, r1
 80092ce:	0001      	movs	r1, r0
 80092d0:	2001      	movs	r0, #1
 80092d2:	428c      	cmp	r4, r1
 80092d4:	d104      	bne.n	80092e0 <__any_on+0x32>
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	18d3      	adds	r3, r2, r3
 80092da:	4293      	cmp	r3, r2
 80092dc:	d803      	bhi.n	80092e6 <__any_on+0x38>
 80092de:	2000      	movs	r0, #0
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	0003      	movs	r3, r0
 80092e4:	e7f7      	b.n	80092d6 <__any_on+0x28>
 80092e6:	3b04      	subs	r3, #4
 80092e8:	6819      	ldr	r1, [r3, #0]
 80092ea:	2900      	cmp	r1, #0
 80092ec:	d0f5      	beq.n	80092da <__any_on+0x2c>
 80092ee:	2001      	movs	r0, #1
 80092f0:	e7f6      	b.n	80092e0 <__any_on+0x32>

080092f2 <_calloc_r>:
 80092f2:	434a      	muls	r2, r1
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	0011      	movs	r1, r2
 80092f8:	0014      	movs	r4, r2
 80092fa:	f000 f853 	bl	80093a4 <_malloc_r>
 80092fe:	1e05      	subs	r5, r0, #0
 8009300:	d003      	beq.n	800930a <_calloc_r+0x18>
 8009302:	0022      	movs	r2, r4
 8009304:	2100      	movs	r1, #0
 8009306:	f7fc f8cb 	bl	80054a0 <memset>
 800930a:	0028      	movs	r0, r5
 800930c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009310 <_free_r>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	0005      	movs	r5, r0
 8009314:	2900      	cmp	r1, #0
 8009316:	d010      	beq.n	800933a <_free_r+0x2a>
 8009318:	1f0c      	subs	r4, r1, #4
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	da00      	bge.n	8009322 <_free_r+0x12>
 8009320:	18e4      	adds	r4, r4, r3
 8009322:	0028      	movs	r0, r5
 8009324:	f000 fc27 	bl	8009b76 <__malloc_lock>
 8009328:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <_free_r+0x90>)
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d105      	bne.n	800933c <_free_r+0x2c>
 8009330:	6063      	str	r3, [r4, #4]
 8009332:	6014      	str	r4, [r2, #0]
 8009334:	0028      	movs	r0, r5
 8009336:	f000 fc1f 	bl	8009b78 <__malloc_unlock>
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	42a3      	cmp	r3, r4
 800933e:	d909      	bls.n	8009354 <_free_r+0x44>
 8009340:	6821      	ldr	r1, [r4, #0]
 8009342:	1860      	adds	r0, r4, r1
 8009344:	4283      	cmp	r3, r0
 8009346:	d1f3      	bne.n	8009330 <_free_r+0x20>
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	1841      	adds	r1, r0, r1
 800934e:	6021      	str	r1, [r4, #0]
 8009350:	e7ee      	b.n	8009330 <_free_r+0x20>
 8009352:	0013      	movs	r3, r2
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	2a00      	cmp	r2, #0
 8009358:	d001      	beq.n	800935e <_free_r+0x4e>
 800935a:	42a2      	cmp	r2, r4
 800935c:	d9f9      	bls.n	8009352 <_free_r+0x42>
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	1858      	adds	r0, r3, r1
 8009362:	42a0      	cmp	r0, r4
 8009364:	d10b      	bne.n	800937e <_free_r+0x6e>
 8009366:	6820      	ldr	r0, [r4, #0]
 8009368:	1809      	adds	r1, r1, r0
 800936a:	1858      	adds	r0, r3, r1
 800936c:	6019      	str	r1, [r3, #0]
 800936e:	4282      	cmp	r2, r0
 8009370:	d1e0      	bne.n	8009334 <_free_r+0x24>
 8009372:	6810      	ldr	r0, [r2, #0]
 8009374:	6852      	ldr	r2, [r2, #4]
 8009376:	1841      	adds	r1, r0, r1
 8009378:	6019      	str	r1, [r3, #0]
 800937a:	605a      	str	r2, [r3, #4]
 800937c:	e7da      	b.n	8009334 <_free_r+0x24>
 800937e:	42a0      	cmp	r0, r4
 8009380:	d902      	bls.n	8009388 <_free_r+0x78>
 8009382:	230c      	movs	r3, #12
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	e7d5      	b.n	8009334 <_free_r+0x24>
 8009388:	6821      	ldr	r1, [r4, #0]
 800938a:	1860      	adds	r0, r4, r1
 800938c:	4282      	cmp	r2, r0
 800938e:	d103      	bne.n	8009398 <_free_r+0x88>
 8009390:	6810      	ldr	r0, [r2, #0]
 8009392:	6852      	ldr	r2, [r2, #4]
 8009394:	1841      	adds	r1, r0, r1
 8009396:	6021      	str	r1, [r4, #0]
 8009398:	6062      	str	r2, [r4, #4]
 800939a:	605c      	str	r4, [r3, #4]
 800939c:	e7ca      	b.n	8009334 <_free_r+0x24>
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	200001fc 	.word	0x200001fc

080093a4 <_malloc_r>:
 80093a4:	2303      	movs	r3, #3
 80093a6:	b570      	push	{r4, r5, r6, lr}
 80093a8:	1ccd      	adds	r5, r1, #3
 80093aa:	439d      	bics	r5, r3
 80093ac:	3508      	adds	r5, #8
 80093ae:	0006      	movs	r6, r0
 80093b0:	2d0c      	cmp	r5, #12
 80093b2:	d21e      	bcs.n	80093f2 <_malloc_r+0x4e>
 80093b4:	250c      	movs	r5, #12
 80093b6:	42a9      	cmp	r1, r5
 80093b8:	d81d      	bhi.n	80093f6 <_malloc_r+0x52>
 80093ba:	0030      	movs	r0, r6
 80093bc:	f000 fbdb 	bl	8009b76 <__malloc_lock>
 80093c0:	4a25      	ldr	r2, [pc, #148]	; (8009458 <_malloc_r+0xb4>)
 80093c2:	6814      	ldr	r4, [r2, #0]
 80093c4:	0021      	movs	r1, r4
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d119      	bne.n	80093fe <_malloc_r+0x5a>
 80093ca:	4c24      	ldr	r4, [pc, #144]	; (800945c <_malloc_r+0xb8>)
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d103      	bne.n	80093da <_malloc_r+0x36>
 80093d2:	0030      	movs	r0, r6
 80093d4:	f000 fae2 	bl	800999c <_sbrk_r>
 80093d8:	6020      	str	r0, [r4, #0]
 80093da:	0029      	movs	r1, r5
 80093dc:	0030      	movs	r0, r6
 80093de:	f000 fadd 	bl	800999c <_sbrk_r>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	d12b      	bne.n	800943e <_malloc_r+0x9a>
 80093e6:	230c      	movs	r3, #12
 80093e8:	0030      	movs	r0, r6
 80093ea:	6033      	str	r3, [r6, #0]
 80093ec:	f000 fbc4 	bl	8009b78 <__malloc_unlock>
 80093f0:	e003      	b.n	80093fa <_malloc_r+0x56>
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	dadf      	bge.n	80093b6 <_malloc_r+0x12>
 80093f6:	230c      	movs	r3, #12
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	2000      	movs	r0, #0
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	680b      	ldr	r3, [r1, #0]
 8009400:	1b5b      	subs	r3, r3, r5
 8009402:	d419      	bmi.n	8009438 <_malloc_r+0x94>
 8009404:	2b0b      	cmp	r3, #11
 8009406:	d903      	bls.n	8009410 <_malloc_r+0x6c>
 8009408:	600b      	str	r3, [r1, #0]
 800940a:	18cc      	adds	r4, r1, r3
 800940c:	6025      	str	r5, [r4, #0]
 800940e:	e003      	b.n	8009418 <_malloc_r+0x74>
 8009410:	684b      	ldr	r3, [r1, #4]
 8009412:	428c      	cmp	r4, r1
 8009414:	d10d      	bne.n	8009432 <_malloc_r+0x8e>
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	0030      	movs	r0, r6
 800941a:	f000 fbad 	bl	8009b78 <__malloc_unlock>
 800941e:	0020      	movs	r0, r4
 8009420:	2207      	movs	r2, #7
 8009422:	300b      	adds	r0, #11
 8009424:	1d23      	adds	r3, r4, #4
 8009426:	4390      	bics	r0, r2
 8009428:	1ac3      	subs	r3, r0, r3
 800942a:	d0e7      	beq.n	80093fc <_malloc_r+0x58>
 800942c:	425a      	negs	r2, r3
 800942e:	50e2      	str	r2, [r4, r3]
 8009430:	e7e4      	b.n	80093fc <_malloc_r+0x58>
 8009432:	6063      	str	r3, [r4, #4]
 8009434:	000c      	movs	r4, r1
 8009436:	e7ef      	b.n	8009418 <_malloc_r+0x74>
 8009438:	000c      	movs	r4, r1
 800943a:	6849      	ldr	r1, [r1, #4]
 800943c:	e7c3      	b.n	80093c6 <_malloc_r+0x22>
 800943e:	2303      	movs	r3, #3
 8009440:	1cc4      	adds	r4, r0, #3
 8009442:	439c      	bics	r4, r3
 8009444:	42a0      	cmp	r0, r4
 8009446:	d0e1      	beq.n	800940c <_malloc_r+0x68>
 8009448:	1a21      	subs	r1, r4, r0
 800944a:	0030      	movs	r0, r6
 800944c:	f000 faa6 	bl	800999c <_sbrk_r>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d1db      	bne.n	800940c <_malloc_r+0x68>
 8009454:	e7c7      	b.n	80093e6 <_malloc_r+0x42>
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	200001fc 	.word	0x200001fc
 800945c:	20000200 	.word	0x20000200

08009460 <__ssputs_r>:
 8009460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009462:	688e      	ldr	r6, [r1, #8]
 8009464:	b085      	sub	sp, #20
 8009466:	0007      	movs	r7, r0
 8009468:	000c      	movs	r4, r1
 800946a:	9203      	str	r2, [sp, #12]
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	429e      	cmp	r6, r3
 8009470:	d83c      	bhi.n	80094ec <__ssputs_r+0x8c>
 8009472:	2390      	movs	r3, #144	; 0x90
 8009474:	898a      	ldrh	r2, [r1, #12]
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	421a      	tst	r2, r3
 800947a:	d034      	beq.n	80094e6 <__ssputs_r+0x86>
 800947c:	2503      	movs	r5, #3
 800947e:	6909      	ldr	r1, [r1, #16]
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	1a5b      	subs	r3, r3, r1
 8009484:	9302      	str	r3, [sp, #8]
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	9802      	ldr	r0, [sp, #8]
 800948a:	435d      	muls	r5, r3
 800948c:	0feb      	lsrs	r3, r5, #31
 800948e:	195d      	adds	r5, r3, r5
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	106d      	asrs	r5, r5, #1
 8009494:	3301      	adds	r3, #1
 8009496:	181b      	adds	r3, r3, r0
 8009498:	42ab      	cmp	r3, r5
 800949a:	d900      	bls.n	800949e <__ssputs_r+0x3e>
 800949c:	001d      	movs	r5, r3
 800949e:	0553      	lsls	r3, r2, #21
 80094a0:	d532      	bpl.n	8009508 <__ssputs_r+0xa8>
 80094a2:	0029      	movs	r1, r5
 80094a4:	0038      	movs	r0, r7
 80094a6:	f7ff ff7d 	bl	80093a4 <_malloc_r>
 80094aa:	1e06      	subs	r6, r0, #0
 80094ac:	d109      	bne.n	80094c2 <__ssputs_r+0x62>
 80094ae:	230c      	movs	r3, #12
 80094b0:	603b      	str	r3, [r7, #0]
 80094b2:	2340      	movs	r3, #64	; 0x40
 80094b4:	2001      	movs	r0, #1
 80094b6:	89a2      	ldrh	r2, [r4, #12]
 80094b8:	4240      	negs	r0, r0
 80094ba:	4313      	orrs	r3, r2
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	b005      	add	sp, #20
 80094c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c2:	9a02      	ldr	r2, [sp, #8]
 80094c4:	6921      	ldr	r1, [r4, #16]
 80094c6:	f7ff fb16 	bl	8008af6 <memcpy>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	4a14      	ldr	r2, [pc, #80]	; (8009520 <__ssputs_r+0xc0>)
 80094ce:	401a      	ands	r2, r3
 80094d0:	2380      	movs	r3, #128	; 0x80
 80094d2:	4313      	orrs	r3, r2
 80094d4:	81a3      	strh	r3, [r4, #12]
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	6126      	str	r6, [r4, #16]
 80094da:	18f6      	adds	r6, r6, r3
 80094dc:	6026      	str	r6, [r4, #0]
 80094de:	6165      	str	r5, [r4, #20]
 80094e0:	9e01      	ldr	r6, [sp, #4]
 80094e2:	1aed      	subs	r5, r5, r3
 80094e4:	60a5      	str	r5, [r4, #8]
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	429e      	cmp	r6, r3
 80094ea:	d900      	bls.n	80094ee <__ssputs_r+0x8e>
 80094ec:	9e01      	ldr	r6, [sp, #4]
 80094ee:	0032      	movs	r2, r6
 80094f0:	9903      	ldr	r1, [sp, #12]
 80094f2:	6820      	ldr	r0, [r4, #0]
 80094f4:	f000 fb2c 	bl	8009b50 <memmove>
 80094f8:	68a3      	ldr	r3, [r4, #8]
 80094fa:	2000      	movs	r0, #0
 80094fc:	1b9b      	subs	r3, r3, r6
 80094fe:	60a3      	str	r3, [r4, #8]
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	199e      	adds	r6, r3, r6
 8009504:	6026      	str	r6, [r4, #0]
 8009506:	e7da      	b.n	80094be <__ssputs_r+0x5e>
 8009508:	002a      	movs	r2, r5
 800950a:	0038      	movs	r0, r7
 800950c:	f000 fb35 	bl	8009b7a <_realloc_r>
 8009510:	1e06      	subs	r6, r0, #0
 8009512:	d1e0      	bne.n	80094d6 <__ssputs_r+0x76>
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	0038      	movs	r0, r7
 8009518:	f7ff fefa 	bl	8009310 <_free_r>
 800951c:	e7c7      	b.n	80094ae <__ssputs_r+0x4e>
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	fffffb7f 	.word	0xfffffb7f

08009524 <_svfiprintf_r>:
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	b0a1      	sub	sp, #132	; 0x84
 8009528:	9003      	str	r0, [sp, #12]
 800952a:	001d      	movs	r5, r3
 800952c:	898b      	ldrh	r3, [r1, #12]
 800952e:	000f      	movs	r7, r1
 8009530:	0016      	movs	r6, r2
 8009532:	061b      	lsls	r3, r3, #24
 8009534:	d511      	bpl.n	800955a <_svfiprintf_r+0x36>
 8009536:	690b      	ldr	r3, [r1, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10e      	bne.n	800955a <_svfiprintf_r+0x36>
 800953c:	2140      	movs	r1, #64	; 0x40
 800953e:	f7ff ff31 	bl	80093a4 <_malloc_r>
 8009542:	6038      	str	r0, [r7, #0]
 8009544:	6138      	str	r0, [r7, #16]
 8009546:	2800      	cmp	r0, #0
 8009548:	d105      	bne.n	8009556 <_svfiprintf_r+0x32>
 800954a:	230c      	movs	r3, #12
 800954c:	9a03      	ldr	r2, [sp, #12]
 800954e:	3801      	subs	r0, #1
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	b021      	add	sp, #132	; 0x84
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	2300      	movs	r3, #0
 800955c:	ac08      	add	r4, sp, #32
 800955e:	6163      	str	r3, [r4, #20]
 8009560:	3320      	adds	r3, #32
 8009562:	7663      	strb	r3, [r4, #25]
 8009564:	3310      	adds	r3, #16
 8009566:	76a3      	strb	r3, [r4, #26]
 8009568:	9507      	str	r5, [sp, #28]
 800956a:	0035      	movs	r5, r6
 800956c:	782b      	ldrb	r3, [r5, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <_svfiprintf_r+0x52>
 8009572:	2b25      	cmp	r3, #37	; 0x25
 8009574:	d146      	bne.n	8009604 <_svfiprintf_r+0xe0>
 8009576:	1bab      	subs	r3, r5, r6
 8009578:	9305      	str	r3, [sp, #20]
 800957a:	d00c      	beq.n	8009596 <_svfiprintf_r+0x72>
 800957c:	0032      	movs	r2, r6
 800957e:	0039      	movs	r1, r7
 8009580:	9803      	ldr	r0, [sp, #12]
 8009582:	f7ff ff6d 	bl	8009460 <__ssputs_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d100      	bne.n	800958c <_svfiprintf_r+0x68>
 800958a:	e0ae      	b.n	80096ea <_svfiprintf_r+0x1c6>
 800958c:	6962      	ldr	r2, [r4, #20]
 800958e:	9b05      	ldr	r3, [sp, #20]
 8009590:	4694      	mov	ip, r2
 8009592:	4463      	add	r3, ip
 8009594:	6163      	str	r3, [r4, #20]
 8009596:	782b      	ldrb	r3, [r5, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d100      	bne.n	800959e <_svfiprintf_r+0x7a>
 800959c:	e0a5      	b.n	80096ea <_svfiprintf_r+0x1c6>
 800959e:	2201      	movs	r2, #1
 80095a0:	2300      	movs	r3, #0
 80095a2:	4252      	negs	r2, r2
 80095a4:	6062      	str	r2, [r4, #4]
 80095a6:	a904      	add	r1, sp, #16
 80095a8:	3254      	adds	r2, #84	; 0x54
 80095aa:	1852      	adds	r2, r2, r1
 80095ac:	1c6e      	adds	r6, r5, #1
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	60e3      	str	r3, [r4, #12]
 80095b2:	60a3      	str	r3, [r4, #8]
 80095b4:	7013      	strb	r3, [r2, #0]
 80095b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80095b8:	7831      	ldrb	r1, [r6, #0]
 80095ba:	2205      	movs	r2, #5
 80095bc:	4853      	ldr	r0, [pc, #332]	; (800970c <_svfiprintf_r+0x1e8>)
 80095be:	f7ff fa8f 	bl	8008ae0 <memchr>
 80095c2:	1c75      	adds	r5, r6, #1
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d11f      	bne.n	8009608 <_svfiprintf_r+0xe4>
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	06d3      	lsls	r3, r2, #27
 80095cc:	d504      	bpl.n	80095d8 <_svfiprintf_r+0xb4>
 80095ce:	2353      	movs	r3, #83	; 0x53
 80095d0:	a904      	add	r1, sp, #16
 80095d2:	185b      	adds	r3, r3, r1
 80095d4:	2120      	movs	r1, #32
 80095d6:	7019      	strb	r1, [r3, #0]
 80095d8:	0713      	lsls	r3, r2, #28
 80095da:	d504      	bpl.n	80095e6 <_svfiprintf_r+0xc2>
 80095dc:	2353      	movs	r3, #83	; 0x53
 80095de:	a904      	add	r1, sp, #16
 80095e0:	185b      	adds	r3, r3, r1
 80095e2:	212b      	movs	r1, #43	; 0x2b
 80095e4:	7019      	strb	r1, [r3, #0]
 80095e6:	7833      	ldrb	r3, [r6, #0]
 80095e8:	2b2a      	cmp	r3, #42	; 0x2a
 80095ea:	d016      	beq.n	800961a <_svfiprintf_r+0xf6>
 80095ec:	0035      	movs	r5, r6
 80095ee:	2100      	movs	r1, #0
 80095f0:	200a      	movs	r0, #10
 80095f2:	68e3      	ldr	r3, [r4, #12]
 80095f4:	782a      	ldrb	r2, [r5, #0]
 80095f6:	1c6e      	adds	r6, r5, #1
 80095f8:	3a30      	subs	r2, #48	; 0x30
 80095fa:	2a09      	cmp	r2, #9
 80095fc:	d94e      	bls.n	800969c <_svfiprintf_r+0x178>
 80095fe:	2900      	cmp	r1, #0
 8009600:	d018      	beq.n	8009634 <_svfiprintf_r+0x110>
 8009602:	e010      	b.n	8009626 <_svfiprintf_r+0x102>
 8009604:	3501      	adds	r5, #1
 8009606:	e7b1      	b.n	800956c <_svfiprintf_r+0x48>
 8009608:	4b40      	ldr	r3, [pc, #256]	; (800970c <_svfiprintf_r+0x1e8>)
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	1ac0      	subs	r0, r0, r3
 800960e:	2301      	movs	r3, #1
 8009610:	4083      	lsls	r3, r0
 8009612:	4313      	orrs	r3, r2
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	002e      	movs	r6, r5
 8009618:	e7ce      	b.n	80095b8 <_svfiprintf_r+0x94>
 800961a:	9b07      	ldr	r3, [sp, #28]
 800961c:	1d19      	adds	r1, r3, #4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	9107      	str	r1, [sp, #28]
 8009622:	2b00      	cmp	r3, #0
 8009624:	db01      	blt.n	800962a <_svfiprintf_r+0x106>
 8009626:	930b      	str	r3, [sp, #44]	; 0x2c
 8009628:	e004      	b.n	8009634 <_svfiprintf_r+0x110>
 800962a:	425b      	negs	r3, r3
 800962c:	60e3      	str	r3, [r4, #12]
 800962e:	2302      	movs	r3, #2
 8009630:	4313      	orrs	r3, r2
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	782b      	ldrb	r3, [r5, #0]
 8009636:	2b2e      	cmp	r3, #46	; 0x2e
 8009638:	d10a      	bne.n	8009650 <_svfiprintf_r+0x12c>
 800963a:	786b      	ldrb	r3, [r5, #1]
 800963c:	2b2a      	cmp	r3, #42	; 0x2a
 800963e:	d135      	bne.n	80096ac <_svfiprintf_r+0x188>
 8009640:	9b07      	ldr	r3, [sp, #28]
 8009642:	3502      	adds	r5, #2
 8009644:	1d1a      	adds	r2, r3, #4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	9207      	str	r2, [sp, #28]
 800964a:	2b00      	cmp	r3, #0
 800964c:	db2b      	blt.n	80096a6 <_svfiprintf_r+0x182>
 800964e:	9309      	str	r3, [sp, #36]	; 0x24
 8009650:	4e2f      	ldr	r6, [pc, #188]	; (8009710 <_svfiprintf_r+0x1ec>)
 8009652:	7829      	ldrb	r1, [r5, #0]
 8009654:	2203      	movs	r2, #3
 8009656:	0030      	movs	r0, r6
 8009658:	f7ff fa42 	bl	8008ae0 <memchr>
 800965c:	2800      	cmp	r0, #0
 800965e:	d006      	beq.n	800966e <_svfiprintf_r+0x14a>
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	1b80      	subs	r0, r0, r6
 8009664:	4083      	lsls	r3, r0
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	3501      	adds	r5, #1
 800966a:	4313      	orrs	r3, r2
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	7829      	ldrb	r1, [r5, #0]
 8009670:	2206      	movs	r2, #6
 8009672:	4828      	ldr	r0, [pc, #160]	; (8009714 <_svfiprintf_r+0x1f0>)
 8009674:	1c6e      	adds	r6, r5, #1
 8009676:	7621      	strb	r1, [r4, #24]
 8009678:	f7ff fa32 	bl	8008ae0 <memchr>
 800967c:	2800      	cmp	r0, #0
 800967e:	d03c      	beq.n	80096fa <_svfiprintf_r+0x1d6>
 8009680:	4b25      	ldr	r3, [pc, #148]	; (8009718 <_svfiprintf_r+0x1f4>)
 8009682:	2b00      	cmp	r3, #0
 8009684:	d125      	bne.n	80096d2 <_svfiprintf_r+0x1ae>
 8009686:	2207      	movs	r2, #7
 8009688:	9b07      	ldr	r3, [sp, #28]
 800968a:	3307      	adds	r3, #7
 800968c:	4393      	bics	r3, r2
 800968e:	3308      	adds	r3, #8
 8009690:	9307      	str	r3, [sp, #28]
 8009692:	6963      	ldr	r3, [r4, #20]
 8009694:	9a04      	ldr	r2, [sp, #16]
 8009696:	189b      	adds	r3, r3, r2
 8009698:	6163      	str	r3, [r4, #20]
 800969a:	e766      	b.n	800956a <_svfiprintf_r+0x46>
 800969c:	4343      	muls	r3, r0
 800969e:	2101      	movs	r1, #1
 80096a0:	189b      	adds	r3, r3, r2
 80096a2:	0035      	movs	r5, r6
 80096a4:	e7a6      	b.n	80095f4 <_svfiprintf_r+0xd0>
 80096a6:	2301      	movs	r3, #1
 80096a8:	425b      	negs	r3, r3
 80096aa:	e7d0      	b.n	800964e <_svfiprintf_r+0x12a>
 80096ac:	2300      	movs	r3, #0
 80096ae:	200a      	movs	r0, #10
 80096b0:	001a      	movs	r2, r3
 80096b2:	3501      	adds	r5, #1
 80096b4:	6063      	str	r3, [r4, #4]
 80096b6:	7829      	ldrb	r1, [r5, #0]
 80096b8:	1c6e      	adds	r6, r5, #1
 80096ba:	3930      	subs	r1, #48	; 0x30
 80096bc:	2909      	cmp	r1, #9
 80096be:	d903      	bls.n	80096c8 <_svfiprintf_r+0x1a4>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0c5      	beq.n	8009650 <_svfiprintf_r+0x12c>
 80096c4:	9209      	str	r2, [sp, #36]	; 0x24
 80096c6:	e7c3      	b.n	8009650 <_svfiprintf_r+0x12c>
 80096c8:	4342      	muls	r2, r0
 80096ca:	2301      	movs	r3, #1
 80096cc:	1852      	adds	r2, r2, r1
 80096ce:	0035      	movs	r5, r6
 80096d0:	e7f1      	b.n	80096b6 <_svfiprintf_r+0x192>
 80096d2:	ab07      	add	r3, sp, #28
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	003a      	movs	r2, r7
 80096d8:	4b10      	ldr	r3, [pc, #64]	; (800971c <_svfiprintf_r+0x1f8>)
 80096da:	0021      	movs	r1, r4
 80096dc:	9803      	ldr	r0, [sp, #12]
 80096de:	f7fb ff83 	bl	80055e8 <_printf_float>
 80096e2:	9004      	str	r0, [sp, #16]
 80096e4:	9b04      	ldr	r3, [sp, #16]
 80096e6:	3301      	adds	r3, #1
 80096e8:	d1d3      	bne.n	8009692 <_svfiprintf_r+0x16e>
 80096ea:	89bb      	ldrh	r3, [r7, #12]
 80096ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80096ee:	065b      	lsls	r3, r3, #25
 80096f0:	d400      	bmi.n	80096f4 <_svfiprintf_r+0x1d0>
 80096f2:	e72e      	b.n	8009552 <_svfiprintf_r+0x2e>
 80096f4:	2001      	movs	r0, #1
 80096f6:	4240      	negs	r0, r0
 80096f8:	e72b      	b.n	8009552 <_svfiprintf_r+0x2e>
 80096fa:	ab07      	add	r3, sp, #28
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	003a      	movs	r2, r7
 8009700:	4b06      	ldr	r3, [pc, #24]	; (800971c <_svfiprintf_r+0x1f8>)
 8009702:	0021      	movs	r1, r4
 8009704:	9803      	ldr	r0, [sp, #12]
 8009706:	f7fc fa29 	bl	8005b5c <_printf_i>
 800970a:	e7ea      	b.n	80096e2 <_svfiprintf_r+0x1be>
 800970c:	08009f84 	.word	0x08009f84
 8009710:	08009f8a 	.word	0x08009f8a
 8009714:	08009f8e 	.word	0x08009f8e
 8009718:	080055e9 	.word	0x080055e9
 800971c:	08009461 	.word	0x08009461

08009720 <__sfputc_r>:
 8009720:	6893      	ldr	r3, [r2, #8]
 8009722:	b510      	push	{r4, lr}
 8009724:	3b01      	subs	r3, #1
 8009726:	6093      	str	r3, [r2, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	da04      	bge.n	8009736 <__sfputc_r+0x16>
 800972c:	6994      	ldr	r4, [r2, #24]
 800972e:	42a3      	cmp	r3, r4
 8009730:	db07      	blt.n	8009742 <__sfputc_r+0x22>
 8009732:	290a      	cmp	r1, #10
 8009734:	d005      	beq.n	8009742 <__sfputc_r+0x22>
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	1c58      	adds	r0, r3, #1
 800973a:	6010      	str	r0, [r2, #0]
 800973c:	7019      	strb	r1, [r3, #0]
 800973e:	0008      	movs	r0, r1
 8009740:	bd10      	pop	{r4, pc}
 8009742:	f7fd fd45 	bl	80071d0 <__swbuf_r>
 8009746:	0001      	movs	r1, r0
 8009748:	e7f9      	b.n	800973e <__sfputc_r+0x1e>

0800974a <__sfputs_r>:
 800974a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974c:	0006      	movs	r6, r0
 800974e:	000f      	movs	r7, r1
 8009750:	0014      	movs	r4, r2
 8009752:	18d5      	adds	r5, r2, r3
 8009754:	42ac      	cmp	r4, r5
 8009756:	d101      	bne.n	800975c <__sfputs_r+0x12>
 8009758:	2000      	movs	r0, #0
 800975a:	e007      	b.n	800976c <__sfputs_r+0x22>
 800975c:	7821      	ldrb	r1, [r4, #0]
 800975e:	003a      	movs	r2, r7
 8009760:	0030      	movs	r0, r6
 8009762:	f7ff ffdd 	bl	8009720 <__sfputc_r>
 8009766:	3401      	adds	r4, #1
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d1f3      	bne.n	8009754 <__sfputs_r+0xa>
 800976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009770 <_vfiprintf_r>:
 8009770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009772:	b0a1      	sub	sp, #132	; 0x84
 8009774:	9003      	str	r0, [sp, #12]
 8009776:	000f      	movs	r7, r1
 8009778:	0016      	movs	r6, r2
 800977a:	001d      	movs	r5, r3
 800977c:	2800      	cmp	r0, #0
 800977e:	d005      	beq.n	800978c <_vfiprintf_r+0x1c>
 8009780:	6983      	ldr	r3, [r0, #24]
 8009782:	9305      	str	r3, [sp, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <_vfiprintf_r+0x1c>
 8009788:	f7fe fd4c 	bl	8008224 <__sinit>
 800978c:	4b7b      	ldr	r3, [pc, #492]	; (800997c <_vfiprintf_r+0x20c>)
 800978e:	429f      	cmp	r7, r3
 8009790:	d15c      	bne.n	800984c <_vfiprintf_r+0xdc>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	685f      	ldr	r7, [r3, #4]
 8009796:	89bb      	ldrh	r3, [r7, #12]
 8009798:	071b      	lsls	r3, r3, #28
 800979a:	d563      	bpl.n	8009864 <_vfiprintf_r+0xf4>
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d060      	beq.n	8009864 <_vfiprintf_r+0xf4>
 80097a2:	2300      	movs	r3, #0
 80097a4:	ac08      	add	r4, sp, #32
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	3320      	adds	r3, #32
 80097aa:	7663      	strb	r3, [r4, #25]
 80097ac:	3310      	adds	r3, #16
 80097ae:	76a3      	strb	r3, [r4, #26]
 80097b0:	9507      	str	r5, [sp, #28]
 80097b2:	0035      	movs	r5, r6
 80097b4:	782b      	ldrb	r3, [r5, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <_vfiprintf_r+0x4e>
 80097ba:	2b25      	cmp	r3, #37	; 0x25
 80097bc:	d15c      	bne.n	8009878 <_vfiprintf_r+0x108>
 80097be:	1bab      	subs	r3, r5, r6
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	d00c      	beq.n	80097de <_vfiprintf_r+0x6e>
 80097c4:	0032      	movs	r2, r6
 80097c6:	0039      	movs	r1, r7
 80097c8:	9803      	ldr	r0, [sp, #12]
 80097ca:	f7ff ffbe 	bl	800974a <__sfputs_r>
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d100      	bne.n	80097d4 <_vfiprintf_r+0x64>
 80097d2:	e0c4      	b.n	800995e <_vfiprintf_r+0x1ee>
 80097d4:	6962      	ldr	r2, [r4, #20]
 80097d6:	9b05      	ldr	r3, [sp, #20]
 80097d8:	4694      	mov	ip, r2
 80097da:	4463      	add	r3, ip
 80097dc:	6163      	str	r3, [r4, #20]
 80097de:	782b      	ldrb	r3, [r5, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d100      	bne.n	80097e6 <_vfiprintf_r+0x76>
 80097e4:	e0bb      	b.n	800995e <_vfiprintf_r+0x1ee>
 80097e6:	2201      	movs	r2, #1
 80097e8:	2300      	movs	r3, #0
 80097ea:	4252      	negs	r2, r2
 80097ec:	6062      	str	r2, [r4, #4]
 80097ee:	a904      	add	r1, sp, #16
 80097f0:	3254      	adds	r2, #84	; 0x54
 80097f2:	1852      	adds	r2, r2, r1
 80097f4:	1c6e      	adds	r6, r5, #1
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	60e3      	str	r3, [r4, #12]
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	7013      	strb	r3, [r2, #0]
 80097fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8009800:	7831      	ldrb	r1, [r6, #0]
 8009802:	2205      	movs	r2, #5
 8009804:	485e      	ldr	r0, [pc, #376]	; (8009980 <_vfiprintf_r+0x210>)
 8009806:	f7ff f96b 	bl	8008ae0 <memchr>
 800980a:	1c75      	adds	r5, r6, #1
 800980c:	2800      	cmp	r0, #0
 800980e:	d135      	bne.n	800987c <_vfiprintf_r+0x10c>
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	06d3      	lsls	r3, r2, #27
 8009814:	d504      	bpl.n	8009820 <_vfiprintf_r+0xb0>
 8009816:	2353      	movs	r3, #83	; 0x53
 8009818:	a904      	add	r1, sp, #16
 800981a:	185b      	adds	r3, r3, r1
 800981c:	2120      	movs	r1, #32
 800981e:	7019      	strb	r1, [r3, #0]
 8009820:	0713      	lsls	r3, r2, #28
 8009822:	d504      	bpl.n	800982e <_vfiprintf_r+0xbe>
 8009824:	2353      	movs	r3, #83	; 0x53
 8009826:	a904      	add	r1, sp, #16
 8009828:	185b      	adds	r3, r3, r1
 800982a:	212b      	movs	r1, #43	; 0x2b
 800982c:	7019      	strb	r1, [r3, #0]
 800982e:	7833      	ldrb	r3, [r6, #0]
 8009830:	2b2a      	cmp	r3, #42	; 0x2a
 8009832:	d02c      	beq.n	800988e <_vfiprintf_r+0x11e>
 8009834:	0035      	movs	r5, r6
 8009836:	2100      	movs	r1, #0
 8009838:	200a      	movs	r0, #10
 800983a:	68e3      	ldr	r3, [r4, #12]
 800983c:	782a      	ldrb	r2, [r5, #0]
 800983e:	1c6e      	adds	r6, r5, #1
 8009840:	3a30      	subs	r2, #48	; 0x30
 8009842:	2a09      	cmp	r2, #9
 8009844:	d964      	bls.n	8009910 <_vfiprintf_r+0x1a0>
 8009846:	2900      	cmp	r1, #0
 8009848:	d02e      	beq.n	80098a8 <_vfiprintf_r+0x138>
 800984a:	e026      	b.n	800989a <_vfiprintf_r+0x12a>
 800984c:	4b4d      	ldr	r3, [pc, #308]	; (8009984 <_vfiprintf_r+0x214>)
 800984e:	429f      	cmp	r7, r3
 8009850:	d102      	bne.n	8009858 <_vfiprintf_r+0xe8>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	689f      	ldr	r7, [r3, #8]
 8009856:	e79e      	b.n	8009796 <_vfiprintf_r+0x26>
 8009858:	4b4b      	ldr	r3, [pc, #300]	; (8009988 <_vfiprintf_r+0x218>)
 800985a:	429f      	cmp	r7, r3
 800985c:	d19b      	bne.n	8009796 <_vfiprintf_r+0x26>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	68df      	ldr	r7, [r3, #12]
 8009862:	e798      	b.n	8009796 <_vfiprintf_r+0x26>
 8009864:	0039      	movs	r1, r7
 8009866:	9803      	ldr	r0, [sp, #12]
 8009868:	f7fd fd08 	bl	800727c <__swsetup_r>
 800986c:	2800      	cmp	r0, #0
 800986e:	d098      	beq.n	80097a2 <_vfiprintf_r+0x32>
 8009870:	2001      	movs	r0, #1
 8009872:	4240      	negs	r0, r0
 8009874:	b021      	add	sp, #132	; 0x84
 8009876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009878:	3501      	adds	r5, #1
 800987a:	e79b      	b.n	80097b4 <_vfiprintf_r+0x44>
 800987c:	4b40      	ldr	r3, [pc, #256]	; (8009980 <_vfiprintf_r+0x210>)
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	2301      	movs	r3, #1
 8009884:	4083      	lsls	r3, r0
 8009886:	4313      	orrs	r3, r2
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	002e      	movs	r6, r5
 800988c:	e7b8      	b.n	8009800 <_vfiprintf_r+0x90>
 800988e:	9b07      	ldr	r3, [sp, #28]
 8009890:	1d19      	adds	r1, r3, #4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	9107      	str	r1, [sp, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	db01      	blt.n	800989e <_vfiprintf_r+0x12e>
 800989a:	930b      	str	r3, [sp, #44]	; 0x2c
 800989c:	e004      	b.n	80098a8 <_vfiprintf_r+0x138>
 800989e:	425b      	negs	r3, r3
 80098a0:	60e3      	str	r3, [r4, #12]
 80098a2:	2302      	movs	r3, #2
 80098a4:	4313      	orrs	r3, r2
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	782b      	ldrb	r3, [r5, #0]
 80098aa:	2b2e      	cmp	r3, #46	; 0x2e
 80098ac:	d10a      	bne.n	80098c4 <_vfiprintf_r+0x154>
 80098ae:	786b      	ldrb	r3, [r5, #1]
 80098b0:	2b2a      	cmp	r3, #42	; 0x2a
 80098b2:	d135      	bne.n	8009920 <_vfiprintf_r+0x1b0>
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	3502      	adds	r5, #2
 80098b8:	1d1a      	adds	r2, r3, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	9207      	str	r2, [sp, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	db2b      	blt.n	800991a <_vfiprintf_r+0x1aa>
 80098c2:	9309      	str	r3, [sp, #36]	; 0x24
 80098c4:	4e31      	ldr	r6, [pc, #196]	; (800998c <_vfiprintf_r+0x21c>)
 80098c6:	7829      	ldrb	r1, [r5, #0]
 80098c8:	2203      	movs	r2, #3
 80098ca:	0030      	movs	r0, r6
 80098cc:	f7ff f908 	bl	8008ae0 <memchr>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d006      	beq.n	80098e2 <_vfiprintf_r+0x172>
 80098d4:	2340      	movs	r3, #64	; 0x40
 80098d6:	1b80      	subs	r0, r0, r6
 80098d8:	4083      	lsls	r3, r0
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	3501      	adds	r5, #1
 80098de:	4313      	orrs	r3, r2
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	7829      	ldrb	r1, [r5, #0]
 80098e4:	2206      	movs	r2, #6
 80098e6:	482a      	ldr	r0, [pc, #168]	; (8009990 <_vfiprintf_r+0x220>)
 80098e8:	1c6e      	adds	r6, r5, #1
 80098ea:	7621      	strb	r1, [r4, #24]
 80098ec:	f7ff f8f8 	bl	8008ae0 <memchr>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d03a      	beq.n	800996a <_vfiprintf_r+0x1fa>
 80098f4:	4b27      	ldr	r3, [pc, #156]	; (8009994 <_vfiprintf_r+0x224>)
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d125      	bne.n	8009946 <_vfiprintf_r+0x1d6>
 80098fa:	2207      	movs	r2, #7
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	3307      	adds	r3, #7
 8009900:	4393      	bics	r3, r2
 8009902:	3308      	adds	r3, #8
 8009904:	9307      	str	r3, [sp, #28]
 8009906:	6963      	ldr	r3, [r4, #20]
 8009908:	9a04      	ldr	r2, [sp, #16]
 800990a:	189b      	adds	r3, r3, r2
 800990c:	6163      	str	r3, [r4, #20]
 800990e:	e750      	b.n	80097b2 <_vfiprintf_r+0x42>
 8009910:	4343      	muls	r3, r0
 8009912:	2101      	movs	r1, #1
 8009914:	189b      	adds	r3, r3, r2
 8009916:	0035      	movs	r5, r6
 8009918:	e790      	b.n	800983c <_vfiprintf_r+0xcc>
 800991a:	2301      	movs	r3, #1
 800991c:	425b      	negs	r3, r3
 800991e:	e7d0      	b.n	80098c2 <_vfiprintf_r+0x152>
 8009920:	2300      	movs	r3, #0
 8009922:	200a      	movs	r0, #10
 8009924:	001a      	movs	r2, r3
 8009926:	3501      	adds	r5, #1
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	7829      	ldrb	r1, [r5, #0]
 800992c:	1c6e      	adds	r6, r5, #1
 800992e:	3930      	subs	r1, #48	; 0x30
 8009930:	2909      	cmp	r1, #9
 8009932:	d903      	bls.n	800993c <_vfiprintf_r+0x1cc>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0c5      	beq.n	80098c4 <_vfiprintf_r+0x154>
 8009938:	9209      	str	r2, [sp, #36]	; 0x24
 800993a:	e7c3      	b.n	80098c4 <_vfiprintf_r+0x154>
 800993c:	4342      	muls	r2, r0
 800993e:	2301      	movs	r3, #1
 8009940:	1852      	adds	r2, r2, r1
 8009942:	0035      	movs	r5, r6
 8009944:	e7f1      	b.n	800992a <_vfiprintf_r+0x1ba>
 8009946:	ab07      	add	r3, sp, #28
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	003a      	movs	r2, r7
 800994c:	4b12      	ldr	r3, [pc, #72]	; (8009998 <_vfiprintf_r+0x228>)
 800994e:	0021      	movs	r1, r4
 8009950:	9803      	ldr	r0, [sp, #12]
 8009952:	f7fb fe49 	bl	80055e8 <_printf_float>
 8009956:	9004      	str	r0, [sp, #16]
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	3301      	adds	r3, #1
 800995c:	d1d3      	bne.n	8009906 <_vfiprintf_r+0x196>
 800995e:	89bb      	ldrh	r3, [r7, #12]
 8009960:	065b      	lsls	r3, r3, #25
 8009962:	d500      	bpl.n	8009966 <_vfiprintf_r+0x1f6>
 8009964:	e784      	b.n	8009870 <_vfiprintf_r+0x100>
 8009966:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009968:	e784      	b.n	8009874 <_vfiprintf_r+0x104>
 800996a:	ab07      	add	r3, sp, #28
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	003a      	movs	r2, r7
 8009970:	4b09      	ldr	r3, [pc, #36]	; (8009998 <_vfiprintf_r+0x228>)
 8009972:	0021      	movs	r1, r4
 8009974:	9803      	ldr	r0, [sp, #12]
 8009976:	f7fc f8f1 	bl	8005b5c <_printf_i>
 800997a:	e7ec      	b.n	8009956 <_vfiprintf_r+0x1e6>
 800997c:	08009e38 	.word	0x08009e38
 8009980:	08009f84 	.word	0x08009f84
 8009984:	08009e58 	.word	0x08009e58
 8009988:	08009e18 	.word	0x08009e18
 800998c:	08009f8a 	.word	0x08009f8a
 8009990:	08009f8e 	.word	0x08009f8e
 8009994:	080055e9 	.word	0x080055e9
 8009998:	0800974b 	.word	0x0800974b

0800999c <_sbrk_r>:
 800999c:	2300      	movs	r3, #0
 800999e:	b570      	push	{r4, r5, r6, lr}
 80099a0:	4c06      	ldr	r4, [pc, #24]	; (80099bc <_sbrk_r+0x20>)
 80099a2:	0005      	movs	r5, r0
 80099a4:	0008      	movs	r0, r1
 80099a6:	6023      	str	r3, [r4, #0]
 80099a8:	f7f8 ff72 	bl	8002890 <_sbrk>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d103      	bne.n	80099b8 <_sbrk_r+0x1c>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d000      	beq.n	80099b8 <_sbrk_r+0x1c>
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	46c0      	nop			; (mov r8, r8)
 80099bc:	20000368 	.word	0x20000368

080099c0 <__sread>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	000c      	movs	r4, r1
 80099c4:	250e      	movs	r5, #14
 80099c6:	5f49      	ldrsh	r1, [r1, r5]
 80099c8:	f000 f8fe 	bl	8009bc8 <_read_r>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	db03      	blt.n	80099d8 <__sread+0x18>
 80099d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80099d2:	181b      	adds	r3, r3, r0
 80099d4:	6563      	str	r3, [r4, #84]	; 0x54
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	4a02      	ldr	r2, [pc, #8]	; (80099e4 <__sread+0x24>)
 80099dc:	4013      	ands	r3, r2
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	e7f9      	b.n	80099d6 <__sread+0x16>
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	ffffefff 	.word	0xffffefff

080099e8 <__swrite>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	001f      	movs	r7, r3
 80099ec:	898b      	ldrh	r3, [r1, #12]
 80099ee:	0005      	movs	r5, r0
 80099f0:	000c      	movs	r4, r1
 80099f2:	0016      	movs	r6, r2
 80099f4:	05db      	lsls	r3, r3, #23
 80099f6:	d505      	bpl.n	8009a04 <__swrite+0x1c>
 80099f8:	230e      	movs	r3, #14
 80099fa:	5ec9      	ldrsh	r1, [r1, r3]
 80099fc:	2200      	movs	r2, #0
 80099fe:	2302      	movs	r3, #2
 8009a00:	f000 f892 	bl	8009b28 <_lseek_r>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <__swrite+0x34>)
 8009a08:	0028      	movs	r0, r5
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	0032      	movs	r2, r6
 8009a10:	230e      	movs	r3, #14
 8009a12:	5ee1      	ldrsh	r1, [r4, r3]
 8009a14:	003b      	movs	r3, r7
 8009a16:	f000 f83d 	bl	8009a94 <_write_r>
 8009a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1c:	ffffefff 	.word	0xffffefff

08009a20 <__sseek>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	000c      	movs	r4, r1
 8009a24:	250e      	movs	r5, #14
 8009a26:	5f49      	ldrsh	r1, [r1, r5]
 8009a28:	f000 f87e 	bl	8009b28 <_lseek_r>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	1c42      	adds	r2, r0, #1
 8009a30:	d103      	bne.n	8009a3a <__sseek+0x1a>
 8009a32:	4a05      	ldr	r2, [pc, #20]	; (8009a48 <__sseek+0x28>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	2280      	movs	r2, #128	; 0x80
 8009a3c:	0152      	lsls	r2, r2, #5
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	81a3      	strh	r3, [r4, #12]
 8009a42:	6560      	str	r0, [r4, #84]	; 0x54
 8009a44:	e7f8      	b.n	8009a38 <__sseek+0x18>
 8009a46:	46c0      	nop			; (mov r8, r8)
 8009a48:	ffffefff 	.word	0xffffefff

08009a4c <__sclose>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	230e      	movs	r3, #14
 8009a50:	5ec9      	ldrsh	r1, [r1, r3]
 8009a52:	f000 f833 	bl	8009abc <_close_r>
 8009a56:	bd10      	pop	{r4, pc}

08009a58 <strncmp>:
 8009a58:	2300      	movs	r3, #0
 8009a5a:	b530      	push	{r4, r5, lr}
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d00a      	beq.n	8009a76 <strncmp+0x1e>
 8009a60:	3a01      	subs	r2, #1
 8009a62:	5cc4      	ldrb	r4, [r0, r3]
 8009a64:	5ccd      	ldrb	r5, [r1, r3]
 8009a66:	42ac      	cmp	r4, r5
 8009a68:	d104      	bne.n	8009a74 <strncmp+0x1c>
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d002      	beq.n	8009a74 <strncmp+0x1c>
 8009a6e:	3301      	adds	r3, #1
 8009a70:	2c00      	cmp	r4, #0
 8009a72:	d1f6      	bne.n	8009a62 <strncmp+0xa>
 8009a74:	1b63      	subs	r3, r4, r5
 8009a76:	0018      	movs	r0, r3
 8009a78:	bd30      	pop	{r4, r5, pc}

08009a7a <__ascii_wctomb>:
 8009a7a:	1e0b      	subs	r3, r1, #0
 8009a7c:	d004      	beq.n	8009a88 <__ascii_wctomb+0xe>
 8009a7e:	2aff      	cmp	r2, #255	; 0xff
 8009a80:	d904      	bls.n	8009a8c <__ascii_wctomb+0x12>
 8009a82:	238a      	movs	r3, #138	; 0x8a
 8009a84:	6003      	str	r3, [r0, #0]
 8009a86:	3b8b      	subs	r3, #139	; 0x8b
 8009a88:	0018      	movs	r0, r3
 8009a8a:	4770      	bx	lr
 8009a8c:	700a      	strb	r2, [r1, #0]
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e7fa      	b.n	8009a88 <__ascii_wctomb+0xe>
	...

08009a94 <_write_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	0005      	movs	r5, r0
 8009a98:	0008      	movs	r0, r1
 8009a9a:	0011      	movs	r1, r2
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4c06      	ldr	r4, [pc, #24]	; (8009ab8 <_write_r+0x24>)
 8009aa0:	6022      	str	r2, [r4, #0]
 8009aa2:	001a      	movs	r2, r3
 8009aa4:	f7f8 fe10 	bl	80026c8 <_write>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d103      	bne.n	8009ab4 <_write_r+0x20>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d000      	beq.n	8009ab4 <_write_r+0x20>
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	20000368 	.word	0x20000368

08009abc <_close_r>:
 8009abc:	2300      	movs	r3, #0
 8009abe:	b570      	push	{r4, r5, r6, lr}
 8009ac0:	4c06      	ldr	r4, [pc, #24]	; (8009adc <_close_r+0x20>)
 8009ac2:	0005      	movs	r5, r0
 8009ac4:	0008      	movs	r0, r1
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	f7f8 fe2c 	bl	8002724 <_close>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d103      	bne.n	8009ad8 <_close_r+0x1c>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d000      	beq.n	8009ad8 <_close_r+0x1c>
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	bd70      	pop	{r4, r5, r6, pc}
 8009ada:	46c0      	nop			; (mov r8, r8)
 8009adc:	20000368 	.word	0x20000368

08009ae0 <_fstat_r>:
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	b570      	push	{r4, r5, r6, lr}
 8009ae4:	4c06      	ldr	r4, [pc, #24]	; (8009b00 <_fstat_r+0x20>)
 8009ae6:	0005      	movs	r5, r0
 8009ae8:	0008      	movs	r0, r1
 8009aea:	0011      	movs	r1, r2
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	f7f8 fe6b 	bl	80027c8 <_fstat>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d103      	bne.n	8009afe <_fstat_r+0x1e>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d000      	beq.n	8009afe <_fstat_r+0x1e>
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	20000368 	.word	0x20000368

08009b04 <_isatty_r>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	b570      	push	{r4, r5, r6, lr}
 8009b08:	4c06      	ldr	r4, [pc, #24]	; (8009b24 <_isatty_r+0x20>)
 8009b0a:	0005      	movs	r5, r0
 8009b0c:	0008      	movs	r0, r1
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	f7f8 fdc4 	bl	800269c <_isatty>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d103      	bne.n	8009b20 <_isatty_r+0x1c>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d000      	beq.n	8009b20 <_isatty_r+0x1c>
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	20000368 	.word	0x20000368

08009b28 <_lseek_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	0005      	movs	r5, r0
 8009b2c:	0008      	movs	r0, r1
 8009b2e:	0011      	movs	r1, r2
 8009b30:	2200      	movs	r2, #0
 8009b32:	4c06      	ldr	r4, [pc, #24]	; (8009b4c <_lseek_r+0x24>)
 8009b34:	6022      	str	r2, [r4, #0]
 8009b36:	001a      	movs	r2, r3
 8009b38:	f7f8 fe0b 	bl	8002752 <_lseek>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d103      	bne.n	8009b48 <_lseek_r+0x20>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d000      	beq.n	8009b48 <_lseek_r+0x20>
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	20000368 	.word	0x20000368

08009b50 <memmove>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4288      	cmp	r0, r1
 8009b54:	d902      	bls.n	8009b5c <memmove+0xc>
 8009b56:	188b      	adds	r3, r1, r2
 8009b58:	4298      	cmp	r0, r3
 8009b5a:	d303      	bcc.n	8009b64 <memmove+0x14>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e007      	b.n	8009b70 <memmove+0x20>
 8009b60:	5c8b      	ldrb	r3, [r1, r2]
 8009b62:	5483      	strb	r3, [r0, r2]
 8009b64:	3a01      	subs	r2, #1
 8009b66:	d2fb      	bcs.n	8009b60 <memmove+0x10>
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	5ccc      	ldrb	r4, [r1, r3]
 8009b6c:	54c4      	strb	r4, [r0, r3]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d1fa      	bne.n	8009b6a <memmove+0x1a>
 8009b74:	e7f8      	b.n	8009b68 <memmove+0x18>

08009b76 <__malloc_lock>:
 8009b76:	4770      	bx	lr

08009b78 <__malloc_unlock>:
 8009b78:	4770      	bx	lr

08009b7a <_realloc_r>:
 8009b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7c:	0007      	movs	r7, r0
 8009b7e:	000d      	movs	r5, r1
 8009b80:	0016      	movs	r6, r2
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d105      	bne.n	8009b92 <_realloc_r+0x18>
 8009b86:	0011      	movs	r1, r2
 8009b88:	f7ff fc0c 	bl	80093a4 <_malloc_r>
 8009b8c:	0004      	movs	r4, r0
 8009b8e:	0020      	movs	r0, r4
 8009b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	d103      	bne.n	8009b9e <_realloc_r+0x24>
 8009b96:	f7ff fbbb 	bl	8009310 <_free_r>
 8009b9a:	0034      	movs	r4, r6
 8009b9c:	e7f7      	b.n	8009b8e <_realloc_r+0x14>
 8009b9e:	f000 f827 	bl	8009bf0 <_malloc_usable_size_r>
 8009ba2:	002c      	movs	r4, r5
 8009ba4:	42b0      	cmp	r0, r6
 8009ba6:	d2f2      	bcs.n	8009b8e <_realloc_r+0x14>
 8009ba8:	0031      	movs	r1, r6
 8009baa:	0038      	movs	r0, r7
 8009bac:	f7ff fbfa 	bl	80093a4 <_malloc_r>
 8009bb0:	1e04      	subs	r4, r0, #0
 8009bb2:	d0ec      	beq.n	8009b8e <_realloc_r+0x14>
 8009bb4:	0029      	movs	r1, r5
 8009bb6:	0032      	movs	r2, r6
 8009bb8:	f7fe ff9d 	bl	8008af6 <memcpy>
 8009bbc:	0029      	movs	r1, r5
 8009bbe:	0038      	movs	r0, r7
 8009bc0:	f7ff fba6 	bl	8009310 <_free_r>
 8009bc4:	e7e3      	b.n	8009b8e <_realloc_r+0x14>
	...

08009bc8 <_read_r>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	0005      	movs	r5, r0
 8009bcc:	0008      	movs	r0, r1
 8009bce:	0011      	movs	r1, r2
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4c06      	ldr	r4, [pc, #24]	; (8009bec <_read_r+0x24>)
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	001a      	movs	r2, r3
 8009bd8:	f7f8 fdcc 	bl	8002774 <_read>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d103      	bne.n	8009be8 <_read_r+0x20>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d000      	beq.n	8009be8 <_read_r+0x20>
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	20000368 	.word	0x20000368

08009bf0 <_malloc_usable_size_r>:
 8009bf0:	1f0b      	subs	r3, r1, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	1f18      	subs	r0, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	da01      	bge.n	8009bfe <_malloc_usable_size_r+0xe>
 8009bfa:	580b      	ldr	r3, [r1, r0]
 8009bfc:	18c0      	adds	r0, r0, r3
 8009bfe:	4770      	bx	lr

08009c00 <_init>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr

08009c0c <_fini>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr
