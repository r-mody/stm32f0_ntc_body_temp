
NTC_Body_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009ab8  08009ab8  00019ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f10  08009f10  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009f10  08009f10  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f10  08009f10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001dc  0800a0f4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800a0f4  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d21e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002419  00000000  00000000  0002d422  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002f840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  000303e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b540  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbb3  00000000  00000000  0004c398  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095342  00000000  00000000  00058f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee28d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000ee308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009aa0 	.word	0x08009aa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009aa0 	.word	0x08009aa0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff0f 	bl	800124c <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe67 	bl	800110c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff01 	bl	800124c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fef7 	bl	800124c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe89 	bl	8001184 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe7f 	bl	8001184 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f7ff ffef 	bl	8000480 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f001 fd0d 	bl	8001ec8 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 f9a2 	bl	8001800 <__aeabi_dsub>
 80004bc:	f001 fd04 	bl	8001ec8 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_dadd>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	464f      	mov	r7, r9
 80004d4:	4646      	mov	r6, r8
 80004d6:	46d6      	mov	lr, sl
 80004d8:	000c      	movs	r4, r1
 80004da:	0309      	lsls	r1, r1, #12
 80004dc:	b5c0      	push	{r6, r7, lr}
 80004de:	0a49      	lsrs	r1, r1, #9
 80004e0:	0f47      	lsrs	r7, r0, #29
 80004e2:	005e      	lsls	r6, r3, #1
 80004e4:	4339      	orrs	r1, r7
 80004e6:	031f      	lsls	r7, r3, #12
 80004e8:	0fdb      	lsrs	r3, r3, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0065      	lsls	r5, r4, #1
 80004ee:	0a7b      	lsrs	r3, r7, #9
 80004f0:	0f57      	lsrs	r7, r2, #29
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0d6d      	lsrs	r5, r5, #21
 80004f6:	0fe4      	lsrs	r4, r4, #31
 80004f8:	0d76      	lsrs	r6, r6, #21
 80004fa:	46a1      	mov	r9, r4
 80004fc:	00c0      	lsls	r0, r0, #3
 80004fe:	46b8      	mov	r8, r7
 8000500:	00d2      	lsls	r2, r2, #3
 8000502:	1bab      	subs	r3, r5, r6
 8000504:	4564      	cmp	r4, ip
 8000506:	d07b      	beq.n	8000600 <__aeabi_dadd+0x130>
 8000508:	2b00      	cmp	r3, #0
 800050a:	dd5f      	ble.n	80005cc <__aeabi_dadd+0xfc>
 800050c:	2e00      	cmp	r6, #0
 800050e:	d000      	beq.n	8000512 <__aeabi_dadd+0x42>
 8000510:	e0a4      	b.n	800065c <__aeabi_dadd+0x18c>
 8000512:	003e      	movs	r6, r7
 8000514:	4316      	orrs	r6, r2
 8000516:	d100      	bne.n	800051a <__aeabi_dadd+0x4a>
 8000518:	e112      	b.n	8000740 <__aeabi_dadd+0x270>
 800051a:	1e5e      	subs	r6, r3, #1
 800051c:	2e00      	cmp	r6, #0
 800051e:	d000      	beq.n	8000522 <__aeabi_dadd+0x52>
 8000520:	e19e      	b.n	8000860 <__aeabi_dadd+0x390>
 8000522:	1a87      	subs	r7, r0, r2
 8000524:	4643      	mov	r3, r8
 8000526:	42b8      	cmp	r0, r7
 8000528:	4180      	sbcs	r0, r0
 800052a:	2501      	movs	r5, #1
 800052c:	1ac9      	subs	r1, r1, r3
 800052e:	4240      	negs	r0, r0
 8000530:	1a09      	subs	r1, r1, r0
 8000532:	020b      	lsls	r3, r1, #8
 8000534:	d400      	bmi.n	8000538 <__aeabi_dadd+0x68>
 8000536:	e131      	b.n	800079c <__aeabi_dadd+0x2cc>
 8000538:	0249      	lsls	r1, r1, #9
 800053a:	0a4e      	lsrs	r6, r1, #9
 800053c:	2e00      	cmp	r6, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x72>
 8000540:	e16e      	b.n	8000820 <__aeabi_dadd+0x350>
 8000542:	0030      	movs	r0, r6
 8000544:	f001 fde6 	bl	8002114 <__clzsi2>
 8000548:	0003      	movs	r3, r0
 800054a:	3b08      	subs	r3, #8
 800054c:	2b1f      	cmp	r3, #31
 800054e:	dd00      	ble.n	8000552 <__aeabi_dadd+0x82>
 8000550:	e161      	b.n	8000816 <__aeabi_dadd+0x346>
 8000552:	2220      	movs	r2, #32
 8000554:	0039      	movs	r1, r7
 8000556:	1ad2      	subs	r2, r2, r3
 8000558:	409e      	lsls	r6, r3
 800055a:	40d1      	lsrs	r1, r2
 800055c:	409f      	lsls	r7, r3
 800055e:	430e      	orrs	r6, r1
 8000560:	429d      	cmp	r5, r3
 8000562:	dd00      	ble.n	8000566 <__aeabi_dadd+0x96>
 8000564:	e151      	b.n	800080a <__aeabi_dadd+0x33a>
 8000566:	1b5d      	subs	r5, r3, r5
 8000568:	1c6b      	adds	r3, r5, #1
 800056a:	2b1f      	cmp	r3, #31
 800056c:	dd00      	ble.n	8000570 <__aeabi_dadd+0xa0>
 800056e:	e17c      	b.n	800086a <__aeabi_dadd+0x39a>
 8000570:	2120      	movs	r1, #32
 8000572:	1ac9      	subs	r1, r1, r3
 8000574:	003d      	movs	r5, r7
 8000576:	0030      	movs	r0, r6
 8000578:	408f      	lsls	r7, r1
 800057a:	4088      	lsls	r0, r1
 800057c:	40dd      	lsrs	r5, r3
 800057e:	1e79      	subs	r1, r7, #1
 8000580:	418f      	sbcs	r7, r1
 8000582:	0031      	movs	r1, r6
 8000584:	2207      	movs	r2, #7
 8000586:	4328      	orrs	r0, r5
 8000588:	40d9      	lsrs	r1, r3
 800058a:	2500      	movs	r5, #0
 800058c:	4307      	orrs	r7, r0
 800058e:	403a      	ands	r2, r7
 8000590:	2a00      	cmp	r2, #0
 8000592:	d009      	beq.n	80005a8 <__aeabi_dadd+0xd8>
 8000594:	230f      	movs	r3, #15
 8000596:	403b      	ands	r3, r7
 8000598:	2b04      	cmp	r3, #4
 800059a:	d005      	beq.n	80005a8 <__aeabi_dadd+0xd8>
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	42bb      	cmp	r3, r7
 80005a0:	41bf      	sbcs	r7, r7
 80005a2:	427f      	negs	r7, r7
 80005a4:	19c9      	adds	r1, r1, r7
 80005a6:	001f      	movs	r7, r3
 80005a8:	020b      	lsls	r3, r1, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0xde>
 80005ac:	e226      	b.n	80009fc <__aeabi_dadd+0x52c>
 80005ae:	1c6a      	adds	r2, r5, #1
 80005b0:	4bc6      	ldr	r3, [pc, #792]	; (80008cc <__aeabi_dadd+0x3fc>)
 80005b2:	0555      	lsls	r5, r2, #21
 80005b4:	0d6d      	lsrs	r5, r5, #21
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0xec>
 80005ba:	e106      	b.n	80007ca <__aeabi_dadd+0x2fa>
 80005bc:	4ac4      	ldr	r2, [pc, #784]	; (80008d0 <__aeabi_dadd+0x400>)
 80005be:	08ff      	lsrs	r7, r7, #3
 80005c0:	400a      	ands	r2, r1
 80005c2:	0753      	lsls	r3, r2, #29
 80005c4:	0252      	lsls	r2, r2, #9
 80005c6:	433b      	orrs	r3, r7
 80005c8:	0b12      	lsrs	r2, r2, #12
 80005ca:	e08e      	b.n	80006ea <__aeabi_dadd+0x21a>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d000      	beq.n	80005d2 <__aeabi_dadd+0x102>
 80005d0:	e0b8      	b.n	8000744 <__aeabi_dadd+0x274>
 80005d2:	1c6b      	adds	r3, r5, #1
 80005d4:	055b      	lsls	r3, r3, #21
 80005d6:	0d5b      	lsrs	r3, r3, #21
 80005d8:	2b01      	cmp	r3, #1
 80005da:	dc00      	bgt.n	80005de <__aeabi_dadd+0x10e>
 80005dc:	e130      	b.n	8000840 <__aeabi_dadd+0x370>
 80005de:	1a87      	subs	r7, r0, r2
 80005e0:	4643      	mov	r3, r8
 80005e2:	42b8      	cmp	r0, r7
 80005e4:	41b6      	sbcs	r6, r6
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	4276      	negs	r6, r6
 80005ea:	1b9e      	subs	r6, r3, r6
 80005ec:	0233      	lsls	r3, r6, #8
 80005ee:	d500      	bpl.n	80005f2 <__aeabi_dadd+0x122>
 80005f0:	e14c      	b.n	800088c <__aeabi_dadd+0x3bc>
 80005f2:	003b      	movs	r3, r7
 80005f4:	4333      	orrs	r3, r6
 80005f6:	d1a1      	bne.n	800053c <__aeabi_dadd+0x6c>
 80005f8:	2200      	movs	r2, #0
 80005fa:	2400      	movs	r4, #0
 80005fc:	2500      	movs	r5, #0
 80005fe:	e070      	b.n	80006e2 <__aeabi_dadd+0x212>
 8000600:	2b00      	cmp	r3, #0
 8000602:	dc00      	bgt.n	8000606 <__aeabi_dadd+0x136>
 8000604:	e0e5      	b.n	80007d2 <__aeabi_dadd+0x302>
 8000606:	2e00      	cmp	r6, #0
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x13c>
 800060a:	e083      	b.n	8000714 <__aeabi_dadd+0x244>
 800060c:	4eaf      	ldr	r6, [pc, #700]	; (80008cc <__aeabi_dadd+0x3fc>)
 800060e:	42b5      	cmp	r5, r6
 8000610:	d060      	beq.n	80006d4 <__aeabi_dadd+0x204>
 8000612:	2680      	movs	r6, #128	; 0x80
 8000614:	0436      	lsls	r6, r6, #16
 8000616:	4337      	orrs	r7, r6
 8000618:	46b8      	mov	r8, r7
 800061a:	2b38      	cmp	r3, #56	; 0x38
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x150>
 800061e:	e13e      	b.n	800089e <__aeabi_dadd+0x3ce>
 8000620:	4643      	mov	r3, r8
 8000622:	4313      	orrs	r3, r2
 8000624:	001f      	movs	r7, r3
 8000626:	1e7a      	subs	r2, r7, #1
 8000628:	4197      	sbcs	r7, r2
 800062a:	183f      	adds	r7, r7, r0
 800062c:	4287      	cmp	r7, r0
 800062e:	4180      	sbcs	r0, r0
 8000630:	4240      	negs	r0, r0
 8000632:	1809      	adds	r1, r1, r0
 8000634:	020b      	lsls	r3, r1, #8
 8000636:	d400      	bmi.n	800063a <__aeabi_dadd+0x16a>
 8000638:	e0b0      	b.n	800079c <__aeabi_dadd+0x2cc>
 800063a:	4ba4      	ldr	r3, [pc, #656]	; (80008cc <__aeabi_dadd+0x3fc>)
 800063c:	3501      	adds	r5, #1
 800063e:	429d      	cmp	r5, r3
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x174>
 8000642:	e0c3      	b.n	80007cc <__aeabi_dadd+0x2fc>
 8000644:	4aa2      	ldr	r2, [pc, #648]	; (80008d0 <__aeabi_dadd+0x400>)
 8000646:	087b      	lsrs	r3, r7, #1
 8000648:	400a      	ands	r2, r1
 800064a:	2101      	movs	r1, #1
 800064c:	400f      	ands	r7, r1
 800064e:	431f      	orrs	r7, r3
 8000650:	0851      	lsrs	r1, r2, #1
 8000652:	07d3      	lsls	r3, r2, #31
 8000654:	2207      	movs	r2, #7
 8000656:	431f      	orrs	r7, r3
 8000658:	403a      	ands	r2, r7
 800065a:	e799      	b.n	8000590 <__aeabi_dadd+0xc0>
 800065c:	4e9b      	ldr	r6, [pc, #620]	; (80008cc <__aeabi_dadd+0x3fc>)
 800065e:	42b5      	cmp	r5, r6
 8000660:	d038      	beq.n	80006d4 <__aeabi_dadd+0x204>
 8000662:	2680      	movs	r6, #128	; 0x80
 8000664:	0436      	lsls	r6, r6, #16
 8000666:	4337      	orrs	r7, r6
 8000668:	46b8      	mov	r8, r7
 800066a:	2b38      	cmp	r3, #56	; 0x38
 800066c:	dd00      	ble.n	8000670 <__aeabi_dadd+0x1a0>
 800066e:	e0dc      	b.n	800082a <__aeabi_dadd+0x35a>
 8000670:	2b1f      	cmp	r3, #31
 8000672:	dc00      	bgt.n	8000676 <__aeabi_dadd+0x1a6>
 8000674:	e130      	b.n	80008d8 <__aeabi_dadd+0x408>
 8000676:	001e      	movs	r6, r3
 8000678:	4647      	mov	r7, r8
 800067a:	3e20      	subs	r6, #32
 800067c:	40f7      	lsrs	r7, r6
 800067e:	46bc      	mov	ip, r7
 8000680:	2b20      	cmp	r3, #32
 8000682:	d004      	beq.n	800068e <__aeabi_dadd+0x1be>
 8000684:	2640      	movs	r6, #64	; 0x40
 8000686:	1af3      	subs	r3, r6, r3
 8000688:	4646      	mov	r6, r8
 800068a:	409e      	lsls	r6, r3
 800068c:	4332      	orrs	r2, r6
 800068e:	0017      	movs	r7, r2
 8000690:	4663      	mov	r3, ip
 8000692:	1e7a      	subs	r2, r7, #1
 8000694:	4197      	sbcs	r7, r2
 8000696:	431f      	orrs	r7, r3
 8000698:	e0cc      	b.n	8000834 <__aeabi_dadd+0x364>
 800069a:	2b00      	cmp	r3, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x1d0>
 800069e:	e204      	b.n	8000aaa <__aeabi_dadd+0x5da>
 80006a0:	4643      	mov	r3, r8
 80006a2:	4313      	orrs	r3, r2
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x1d8>
 80006a6:	e159      	b.n	800095c <__aeabi_dadd+0x48c>
 80006a8:	074b      	lsls	r3, r1, #29
 80006aa:	08c0      	lsrs	r0, r0, #3
 80006ac:	4318      	orrs	r0, r3
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	08c9      	lsrs	r1, r1, #3
 80006b2:	031b      	lsls	r3, r3, #12
 80006b4:	4219      	tst	r1, r3
 80006b6:	d008      	beq.n	80006ca <__aeabi_dadd+0x1fa>
 80006b8:	4645      	mov	r5, r8
 80006ba:	08ed      	lsrs	r5, r5, #3
 80006bc:	421d      	tst	r5, r3
 80006be:	d104      	bne.n	80006ca <__aeabi_dadd+0x1fa>
 80006c0:	4643      	mov	r3, r8
 80006c2:	08d0      	lsrs	r0, r2, #3
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	4308      	orrs	r0, r1
 80006c8:	0029      	movs	r1, r5
 80006ca:	0f42      	lsrs	r2, r0, #29
 80006cc:	00c9      	lsls	r1, r1, #3
 80006ce:	4d7f      	ldr	r5, [pc, #508]	; (80008cc <__aeabi_dadd+0x3fc>)
 80006d0:	4311      	orrs	r1, r2
 80006d2:	00c0      	lsls	r0, r0, #3
 80006d4:	074b      	lsls	r3, r1, #29
 80006d6:	08ca      	lsrs	r2, r1, #3
 80006d8:	497c      	ldr	r1, [pc, #496]	; (80008cc <__aeabi_dadd+0x3fc>)
 80006da:	08c0      	lsrs	r0, r0, #3
 80006dc:	4303      	orrs	r3, r0
 80006de:	428d      	cmp	r5, r1
 80006e0:	d068      	beq.n	80007b4 <__aeabi_dadd+0x2e4>
 80006e2:	0312      	lsls	r2, r2, #12
 80006e4:	056d      	lsls	r5, r5, #21
 80006e6:	0b12      	lsrs	r2, r2, #12
 80006e8:	0d6d      	lsrs	r5, r5, #21
 80006ea:	2100      	movs	r1, #0
 80006ec:	0312      	lsls	r2, r2, #12
 80006ee:	0018      	movs	r0, r3
 80006f0:	0b13      	lsrs	r3, r2, #12
 80006f2:	0d0a      	lsrs	r2, r1, #20
 80006f4:	0512      	lsls	r2, r2, #20
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4b76      	ldr	r3, [pc, #472]	; (80008d4 <__aeabi_dadd+0x404>)
 80006fa:	052d      	lsls	r5, r5, #20
 80006fc:	4013      	ands	r3, r2
 80006fe:	432b      	orrs	r3, r5
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	07e4      	lsls	r4, r4, #31
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	4323      	orrs	r3, r4
 8000708:	0019      	movs	r1, r3
 800070a:	bc1c      	pop	{r2, r3, r4}
 800070c:	4690      	mov	r8, r2
 800070e:	4699      	mov	r9, r3
 8000710:	46a2      	mov	sl, r4
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	003e      	movs	r6, r7
 8000716:	4316      	orrs	r6, r2
 8000718:	d012      	beq.n	8000740 <__aeabi_dadd+0x270>
 800071a:	1e5e      	subs	r6, r3, #1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x252>
 8000720:	e100      	b.n	8000924 <__aeabi_dadd+0x454>
 8000722:	1887      	adds	r7, r0, r2
 8000724:	4287      	cmp	r7, r0
 8000726:	4180      	sbcs	r0, r0
 8000728:	4441      	add	r1, r8
 800072a:	4240      	negs	r0, r0
 800072c:	1809      	adds	r1, r1, r0
 800072e:	2501      	movs	r5, #1
 8000730:	020b      	lsls	r3, r1, #8
 8000732:	d533      	bpl.n	800079c <__aeabi_dadd+0x2cc>
 8000734:	2502      	movs	r5, #2
 8000736:	e785      	b.n	8000644 <__aeabi_dadd+0x174>
 8000738:	4664      	mov	r4, ip
 800073a:	0033      	movs	r3, r6
 800073c:	4641      	mov	r1, r8
 800073e:	0010      	movs	r0, r2
 8000740:	001d      	movs	r5, r3
 8000742:	e7c7      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000744:	2d00      	cmp	r5, #0
 8000746:	d000      	beq.n	800074a <__aeabi_dadd+0x27a>
 8000748:	e0da      	b.n	8000900 <__aeabi_dadd+0x430>
 800074a:	000c      	movs	r4, r1
 800074c:	4304      	orrs	r4, r0
 800074e:	d0f3      	beq.n	8000738 <__aeabi_dadd+0x268>
 8000750:	1c5c      	adds	r4, r3, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x286>
 8000754:	e19f      	b.n	8000a96 <__aeabi_dadd+0x5c6>
 8000756:	4c5d      	ldr	r4, [pc, #372]	; (80008cc <__aeabi_dadd+0x3fc>)
 8000758:	42a6      	cmp	r6, r4
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x28e>
 800075c:	e12f      	b.n	80009be <__aeabi_dadd+0x4ee>
 800075e:	43db      	mvns	r3, r3
 8000760:	2b38      	cmp	r3, #56	; 0x38
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0x296>
 8000764:	e166      	b.n	8000a34 <__aeabi_dadd+0x564>
 8000766:	2b1f      	cmp	r3, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0x29c>
 800076a:	e183      	b.n	8000a74 <__aeabi_dadd+0x5a4>
 800076c:	2420      	movs	r4, #32
 800076e:	0005      	movs	r5, r0
 8000770:	1ae4      	subs	r4, r4, r3
 8000772:	000f      	movs	r7, r1
 8000774:	40dd      	lsrs	r5, r3
 8000776:	40d9      	lsrs	r1, r3
 8000778:	40a0      	lsls	r0, r4
 800077a:	4643      	mov	r3, r8
 800077c:	40a7      	lsls	r7, r4
 800077e:	1a5b      	subs	r3, r3, r1
 8000780:	1e44      	subs	r4, r0, #1
 8000782:	41a0      	sbcs	r0, r4
 8000784:	4698      	mov	r8, r3
 8000786:	432f      	orrs	r7, r5
 8000788:	4338      	orrs	r0, r7
 800078a:	1a17      	subs	r7, r2, r0
 800078c:	42ba      	cmp	r2, r7
 800078e:	4192      	sbcs	r2, r2
 8000790:	4643      	mov	r3, r8
 8000792:	4252      	negs	r2, r2
 8000794:	1a99      	subs	r1, r3, r2
 8000796:	4664      	mov	r4, ip
 8000798:	0035      	movs	r5, r6
 800079a:	e6ca      	b.n	8000532 <__aeabi_dadd+0x62>
 800079c:	2207      	movs	r2, #7
 800079e:	403a      	ands	r2, r7
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_dadd+0x2d6>
 80007a4:	e6f6      	b.n	8000594 <__aeabi_dadd+0xc4>
 80007a6:	074b      	lsls	r3, r1, #29
 80007a8:	08ca      	lsrs	r2, r1, #3
 80007aa:	4948      	ldr	r1, [pc, #288]	; (80008cc <__aeabi_dadd+0x3fc>)
 80007ac:	08ff      	lsrs	r7, r7, #3
 80007ae:	433b      	orrs	r3, r7
 80007b0:	428d      	cmp	r5, r1
 80007b2:	d196      	bne.n	80006e2 <__aeabi_dadd+0x212>
 80007b4:	0019      	movs	r1, r3
 80007b6:	4311      	orrs	r1, r2
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x2ec>
 80007ba:	e19e      	b.n	8000afa <__aeabi_dadd+0x62a>
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0309      	lsls	r1, r1, #12
 80007c0:	430a      	orrs	r2, r1
 80007c2:	0312      	lsls	r2, r2, #12
 80007c4:	0b12      	lsrs	r2, r2, #12
 80007c6:	4d41      	ldr	r5, [pc, #260]	; (80008cc <__aeabi_dadd+0x3fc>)
 80007c8:	e78f      	b.n	80006ea <__aeabi_dadd+0x21a>
 80007ca:	0015      	movs	r5, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	2300      	movs	r3, #0
 80007d0:	e78b      	b.n	80006ea <__aeabi_dadd+0x21a>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x308>
 80007d6:	e0c7      	b.n	8000968 <__aeabi_dadd+0x498>
 80007d8:	1c6b      	adds	r3, r5, #1
 80007da:	055f      	lsls	r7, r3, #21
 80007dc:	0d7f      	lsrs	r7, r7, #21
 80007de:	2f01      	cmp	r7, #1
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x314>
 80007e2:	e0f1      	b.n	80009c8 <__aeabi_dadd+0x4f8>
 80007e4:	4d39      	ldr	r5, [pc, #228]	; (80008cc <__aeabi_dadd+0x3fc>)
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x31c>
 80007ea:	e0b9      	b.n	8000960 <__aeabi_dadd+0x490>
 80007ec:	1885      	adds	r5, r0, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	4285      	cmp	r5, r0
 80007f2:	4189      	sbcs	r1, r1
 80007f4:	4442      	add	r2, r8
 80007f6:	4249      	negs	r1, r1
 80007f8:	1851      	adds	r1, r2, r1
 80007fa:	2207      	movs	r2, #7
 80007fc:	07cf      	lsls	r7, r1, #31
 80007fe:	086d      	lsrs	r5, r5, #1
 8000800:	432f      	orrs	r7, r5
 8000802:	0849      	lsrs	r1, r1, #1
 8000804:	403a      	ands	r2, r7
 8000806:	001d      	movs	r5, r3
 8000808:	e6c2      	b.n	8000590 <__aeabi_dadd+0xc0>
 800080a:	2207      	movs	r2, #7
 800080c:	4930      	ldr	r1, [pc, #192]	; (80008d0 <__aeabi_dadd+0x400>)
 800080e:	1aed      	subs	r5, r5, r3
 8000810:	4031      	ands	r1, r6
 8000812:	403a      	ands	r2, r7
 8000814:	e6bc      	b.n	8000590 <__aeabi_dadd+0xc0>
 8000816:	003e      	movs	r6, r7
 8000818:	3828      	subs	r0, #40	; 0x28
 800081a:	4086      	lsls	r6, r0
 800081c:	2700      	movs	r7, #0
 800081e:	e69f      	b.n	8000560 <__aeabi_dadd+0x90>
 8000820:	0038      	movs	r0, r7
 8000822:	f001 fc77 	bl	8002114 <__clzsi2>
 8000826:	3020      	adds	r0, #32
 8000828:	e68e      	b.n	8000548 <__aeabi_dadd+0x78>
 800082a:	4643      	mov	r3, r8
 800082c:	4313      	orrs	r3, r2
 800082e:	001f      	movs	r7, r3
 8000830:	1e7a      	subs	r2, r7, #1
 8000832:	4197      	sbcs	r7, r2
 8000834:	1bc7      	subs	r7, r0, r7
 8000836:	42b8      	cmp	r0, r7
 8000838:	4180      	sbcs	r0, r0
 800083a:	4240      	negs	r0, r0
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	e678      	b.n	8000532 <__aeabi_dadd+0x62>
 8000840:	000e      	movs	r6, r1
 8000842:	003b      	movs	r3, r7
 8000844:	4306      	orrs	r6, r0
 8000846:	4313      	orrs	r3, r2
 8000848:	2d00      	cmp	r5, #0
 800084a:	d161      	bne.n	8000910 <__aeabi_dadd+0x440>
 800084c:	2e00      	cmp	r6, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x382>
 8000850:	e0f4      	b.n	8000a3c <__aeabi_dadd+0x56c>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x388>
 8000856:	e11b      	b.n	8000a90 <__aeabi_dadd+0x5c0>
 8000858:	4664      	mov	r4, ip
 800085a:	0039      	movs	r1, r7
 800085c:	0010      	movs	r0, r2
 800085e:	e739      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000860:	4f1a      	ldr	r7, [pc, #104]	; (80008cc <__aeabi_dadd+0x3fc>)
 8000862:	42bb      	cmp	r3, r7
 8000864:	d07a      	beq.n	800095c <__aeabi_dadd+0x48c>
 8000866:	0033      	movs	r3, r6
 8000868:	e6ff      	b.n	800066a <__aeabi_dadd+0x19a>
 800086a:	0030      	movs	r0, r6
 800086c:	3d1f      	subs	r5, #31
 800086e:	40e8      	lsrs	r0, r5
 8000870:	2b20      	cmp	r3, #32
 8000872:	d003      	beq.n	800087c <__aeabi_dadd+0x3ac>
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	409e      	lsls	r6, r3
 800087a:	4337      	orrs	r7, r6
 800087c:	1e7b      	subs	r3, r7, #1
 800087e:	419f      	sbcs	r7, r3
 8000880:	2207      	movs	r2, #7
 8000882:	4307      	orrs	r7, r0
 8000884:	403a      	ands	r2, r7
 8000886:	2100      	movs	r1, #0
 8000888:	2500      	movs	r5, #0
 800088a:	e789      	b.n	80007a0 <__aeabi_dadd+0x2d0>
 800088c:	1a17      	subs	r7, r2, r0
 800088e:	4643      	mov	r3, r8
 8000890:	42ba      	cmp	r2, r7
 8000892:	41b6      	sbcs	r6, r6
 8000894:	1a59      	subs	r1, r3, r1
 8000896:	4276      	negs	r6, r6
 8000898:	1b8e      	subs	r6, r1, r6
 800089a:	4664      	mov	r4, ip
 800089c:	e64e      	b.n	800053c <__aeabi_dadd+0x6c>
 800089e:	2b1f      	cmp	r3, #31
 80008a0:	dd00      	ble.n	80008a4 <__aeabi_dadd+0x3d4>
 80008a2:	e0ad      	b.n	8000a00 <__aeabi_dadd+0x530>
 80008a4:	2620      	movs	r6, #32
 80008a6:	4647      	mov	r7, r8
 80008a8:	1af6      	subs	r6, r6, r3
 80008aa:	40b7      	lsls	r7, r6
 80008ac:	46b9      	mov	r9, r7
 80008ae:	0017      	movs	r7, r2
 80008b0:	46b2      	mov	sl, r6
 80008b2:	40df      	lsrs	r7, r3
 80008b4:	464e      	mov	r6, r9
 80008b6:	433e      	orrs	r6, r7
 80008b8:	0037      	movs	r7, r6
 80008ba:	4656      	mov	r6, sl
 80008bc:	40b2      	lsls	r2, r6
 80008be:	1e56      	subs	r6, r2, #1
 80008c0:	41b2      	sbcs	r2, r6
 80008c2:	4317      	orrs	r7, r2
 80008c4:	4642      	mov	r2, r8
 80008c6:	40da      	lsrs	r2, r3
 80008c8:	1889      	adds	r1, r1, r2
 80008ca:	e6ae      	b.n	800062a <__aeabi_dadd+0x15a>
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	ff7fffff 	.word	0xff7fffff
 80008d4:	800fffff 	.word	0x800fffff
 80008d8:	2620      	movs	r6, #32
 80008da:	4647      	mov	r7, r8
 80008dc:	1af6      	subs	r6, r6, r3
 80008de:	40b7      	lsls	r7, r6
 80008e0:	46b9      	mov	r9, r7
 80008e2:	0017      	movs	r7, r2
 80008e4:	46b2      	mov	sl, r6
 80008e6:	40df      	lsrs	r7, r3
 80008e8:	464e      	mov	r6, r9
 80008ea:	433e      	orrs	r6, r7
 80008ec:	0037      	movs	r7, r6
 80008ee:	4656      	mov	r6, sl
 80008f0:	40b2      	lsls	r2, r6
 80008f2:	1e56      	subs	r6, r2, #1
 80008f4:	41b2      	sbcs	r2, r6
 80008f6:	4317      	orrs	r7, r2
 80008f8:	4642      	mov	r2, r8
 80008fa:	40da      	lsrs	r2, r3
 80008fc:	1a89      	subs	r1, r1, r2
 80008fe:	e799      	b.n	8000834 <__aeabi_dadd+0x364>
 8000900:	4c7f      	ldr	r4, [pc, #508]	; (8000b00 <__aeabi_dadd+0x630>)
 8000902:	42a6      	cmp	r6, r4
 8000904:	d05b      	beq.n	80009be <__aeabi_dadd+0x4ee>
 8000906:	2480      	movs	r4, #128	; 0x80
 8000908:	0424      	lsls	r4, r4, #16
 800090a:	425b      	negs	r3, r3
 800090c:	4321      	orrs	r1, r4
 800090e:	e727      	b.n	8000760 <__aeabi_dadd+0x290>
 8000910:	2e00      	cmp	r6, #0
 8000912:	d10c      	bne.n	800092e <__aeabi_dadd+0x45e>
 8000914:	2b00      	cmp	r3, #0
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x44a>
 8000918:	e0cb      	b.n	8000ab2 <__aeabi_dadd+0x5e2>
 800091a:	4664      	mov	r4, ip
 800091c:	0039      	movs	r1, r7
 800091e:	0010      	movs	r0, r2
 8000920:	4d77      	ldr	r5, [pc, #476]	; (8000b00 <__aeabi_dadd+0x630>)
 8000922:	e6d7      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000924:	4f76      	ldr	r7, [pc, #472]	; (8000b00 <__aeabi_dadd+0x630>)
 8000926:	42bb      	cmp	r3, r7
 8000928:	d018      	beq.n	800095c <__aeabi_dadd+0x48c>
 800092a:	0033      	movs	r3, r6
 800092c:	e675      	b.n	800061a <__aeabi_dadd+0x14a>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d014      	beq.n	800095c <__aeabi_dadd+0x48c>
 8000932:	074b      	lsls	r3, r1, #29
 8000934:	08c0      	lsrs	r0, r0, #3
 8000936:	4318      	orrs	r0, r3
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	08c9      	lsrs	r1, r1, #3
 800093c:	031b      	lsls	r3, r3, #12
 800093e:	4219      	tst	r1, r3
 8000940:	d007      	beq.n	8000952 <__aeabi_dadd+0x482>
 8000942:	08fc      	lsrs	r4, r7, #3
 8000944:	421c      	tst	r4, r3
 8000946:	d104      	bne.n	8000952 <__aeabi_dadd+0x482>
 8000948:	0779      	lsls	r1, r7, #29
 800094a:	08d0      	lsrs	r0, r2, #3
 800094c:	4308      	orrs	r0, r1
 800094e:	46e1      	mov	r9, ip
 8000950:	0021      	movs	r1, r4
 8000952:	464c      	mov	r4, r9
 8000954:	0f42      	lsrs	r2, r0, #29
 8000956:	00c9      	lsls	r1, r1, #3
 8000958:	4311      	orrs	r1, r2
 800095a:	00c0      	lsls	r0, r0, #3
 800095c:	4d68      	ldr	r5, [pc, #416]	; (8000b00 <__aeabi_dadd+0x630>)
 800095e:	e6b9      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000960:	001d      	movs	r5, r3
 8000962:	2200      	movs	r2, #0
 8000964:	2300      	movs	r3, #0
 8000966:	e6c0      	b.n	80006ea <__aeabi_dadd+0x21a>
 8000968:	2d00      	cmp	r5, #0
 800096a:	d15b      	bne.n	8000a24 <__aeabi_dadd+0x554>
 800096c:	000d      	movs	r5, r1
 800096e:	4305      	orrs	r5, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x4a4>
 8000972:	e6e2      	b.n	800073a <__aeabi_dadd+0x26a>
 8000974:	1c5d      	adds	r5, r3, #1
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x4aa>
 8000978:	e0b0      	b.n	8000adc <__aeabi_dadd+0x60c>
 800097a:	4d61      	ldr	r5, [pc, #388]	; (8000b00 <__aeabi_dadd+0x630>)
 800097c:	42ae      	cmp	r6, r5
 800097e:	d01f      	beq.n	80009c0 <__aeabi_dadd+0x4f0>
 8000980:	43db      	mvns	r3, r3
 8000982:	2b38      	cmp	r3, #56	; 0x38
 8000984:	dc71      	bgt.n	8000a6a <__aeabi_dadd+0x59a>
 8000986:	2b1f      	cmp	r3, #31
 8000988:	dd00      	ble.n	800098c <__aeabi_dadd+0x4bc>
 800098a:	e096      	b.n	8000aba <__aeabi_dadd+0x5ea>
 800098c:	2520      	movs	r5, #32
 800098e:	000f      	movs	r7, r1
 8000990:	1aed      	subs	r5, r5, r3
 8000992:	40af      	lsls	r7, r5
 8000994:	46b9      	mov	r9, r7
 8000996:	0007      	movs	r7, r0
 8000998:	46aa      	mov	sl, r5
 800099a:	40df      	lsrs	r7, r3
 800099c:	464d      	mov	r5, r9
 800099e:	433d      	orrs	r5, r7
 80009a0:	002f      	movs	r7, r5
 80009a2:	4655      	mov	r5, sl
 80009a4:	40a8      	lsls	r0, r5
 80009a6:	40d9      	lsrs	r1, r3
 80009a8:	1e45      	subs	r5, r0, #1
 80009aa:	41a8      	sbcs	r0, r5
 80009ac:	4488      	add	r8, r1
 80009ae:	4307      	orrs	r7, r0
 80009b0:	18bf      	adds	r7, r7, r2
 80009b2:	4297      	cmp	r7, r2
 80009b4:	4192      	sbcs	r2, r2
 80009b6:	4251      	negs	r1, r2
 80009b8:	4441      	add	r1, r8
 80009ba:	0035      	movs	r5, r6
 80009bc:	e63a      	b.n	8000634 <__aeabi_dadd+0x164>
 80009be:	4664      	mov	r4, ip
 80009c0:	0035      	movs	r5, r6
 80009c2:	4641      	mov	r1, r8
 80009c4:	0010      	movs	r0, r2
 80009c6:	e685      	b.n	80006d4 <__aeabi_dadd+0x204>
 80009c8:	000b      	movs	r3, r1
 80009ca:	4303      	orrs	r3, r0
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x502>
 80009d0:	e663      	b.n	800069a <__aeabi_dadd+0x1ca>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f5      	beq.n	80009c2 <__aeabi_dadd+0x4f2>
 80009d6:	4643      	mov	r3, r8
 80009d8:	4313      	orrs	r3, r2
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x50e>
 80009dc:	e67a      	b.n	80006d4 <__aeabi_dadd+0x204>
 80009de:	1887      	adds	r7, r0, r2
 80009e0:	4287      	cmp	r7, r0
 80009e2:	4180      	sbcs	r0, r0
 80009e4:	2207      	movs	r2, #7
 80009e6:	4441      	add	r1, r8
 80009e8:	4240      	negs	r0, r0
 80009ea:	1809      	adds	r1, r1, r0
 80009ec:	403a      	ands	r2, r7
 80009ee:	020b      	lsls	r3, r1, #8
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_dadd+0x524>
 80009f2:	e6d5      	b.n	80007a0 <__aeabi_dadd+0x2d0>
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <__aeabi_dadd+0x634>)
 80009f6:	3501      	adds	r5, #1
 80009f8:	4019      	ands	r1, r3
 80009fa:	e5c9      	b.n	8000590 <__aeabi_dadd+0xc0>
 80009fc:	0038      	movs	r0, r7
 80009fe:	e669      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000a00:	001e      	movs	r6, r3
 8000a02:	4647      	mov	r7, r8
 8000a04:	3e20      	subs	r6, #32
 8000a06:	40f7      	lsrs	r7, r6
 8000a08:	46bc      	mov	ip, r7
 8000a0a:	2b20      	cmp	r3, #32
 8000a0c:	d004      	beq.n	8000a18 <__aeabi_dadd+0x548>
 8000a0e:	2640      	movs	r6, #64	; 0x40
 8000a10:	1af3      	subs	r3, r6, r3
 8000a12:	4646      	mov	r6, r8
 8000a14:	409e      	lsls	r6, r3
 8000a16:	4332      	orrs	r2, r6
 8000a18:	0017      	movs	r7, r2
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	1e7a      	subs	r2, r7, #1
 8000a1e:	4197      	sbcs	r7, r2
 8000a20:	431f      	orrs	r7, r3
 8000a22:	e602      	b.n	800062a <__aeabi_dadd+0x15a>
 8000a24:	4d36      	ldr	r5, [pc, #216]	; (8000b00 <__aeabi_dadd+0x630>)
 8000a26:	42ae      	cmp	r6, r5
 8000a28:	d0ca      	beq.n	80009c0 <__aeabi_dadd+0x4f0>
 8000a2a:	2580      	movs	r5, #128	; 0x80
 8000a2c:	042d      	lsls	r5, r5, #16
 8000a2e:	425b      	negs	r3, r3
 8000a30:	4329      	orrs	r1, r5
 8000a32:	e7a6      	b.n	8000982 <__aeabi_dadd+0x4b2>
 8000a34:	4308      	orrs	r0, r1
 8000a36:	1e41      	subs	r1, r0, #1
 8000a38:	4188      	sbcs	r0, r1
 8000a3a:	e6a6      	b.n	800078a <__aeabi_dadd+0x2ba>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x572>
 8000a40:	e648      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000a42:	1a87      	subs	r7, r0, r2
 8000a44:	4643      	mov	r3, r8
 8000a46:	42b8      	cmp	r0, r7
 8000a48:	41b6      	sbcs	r6, r6
 8000a4a:	1acb      	subs	r3, r1, r3
 8000a4c:	4276      	negs	r6, r6
 8000a4e:	1b9e      	subs	r6, r3, r6
 8000a50:	0233      	lsls	r3, r6, #8
 8000a52:	d54b      	bpl.n	8000aec <__aeabi_dadd+0x61c>
 8000a54:	1a17      	subs	r7, r2, r0
 8000a56:	4643      	mov	r3, r8
 8000a58:	42ba      	cmp	r2, r7
 8000a5a:	4192      	sbcs	r2, r2
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	4252      	negs	r2, r2
 8000a60:	1a89      	subs	r1, r1, r2
 8000a62:	2207      	movs	r2, #7
 8000a64:	4664      	mov	r4, ip
 8000a66:	403a      	ands	r2, r7
 8000a68:	e592      	b.n	8000590 <__aeabi_dadd+0xc0>
 8000a6a:	4301      	orrs	r1, r0
 8000a6c:	000f      	movs	r7, r1
 8000a6e:	1e79      	subs	r1, r7, #1
 8000a70:	418f      	sbcs	r7, r1
 8000a72:	e79d      	b.n	80009b0 <__aeabi_dadd+0x4e0>
 8000a74:	001c      	movs	r4, r3
 8000a76:	000f      	movs	r7, r1
 8000a78:	3c20      	subs	r4, #32
 8000a7a:	40e7      	lsrs	r7, r4
 8000a7c:	2b20      	cmp	r3, #32
 8000a7e:	d003      	beq.n	8000a88 <__aeabi_dadd+0x5b8>
 8000a80:	2440      	movs	r4, #64	; 0x40
 8000a82:	1ae3      	subs	r3, r4, r3
 8000a84:	4099      	lsls	r1, r3
 8000a86:	4308      	orrs	r0, r1
 8000a88:	1e41      	subs	r1, r0, #1
 8000a8a:	4188      	sbcs	r0, r1
 8000a8c:	4338      	orrs	r0, r7
 8000a8e:	e67c      	b.n	800078a <__aeabi_dadd+0x2ba>
 8000a90:	2200      	movs	r2, #0
 8000a92:	2400      	movs	r4, #0
 8000a94:	e625      	b.n	80006e2 <__aeabi_dadd+0x212>
 8000a96:	1a17      	subs	r7, r2, r0
 8000a98:	4643      	mov	r3, r8
 8000a9a:	42ba      	cmp	r2, r7
 8000a9c:	4192      	sbcs	r2, r2
 8000a9e:	1a59      	subs	r1, r3, r1
 8000aa0:	4252      	negs	r2, r2
 8000aa2:	1a89      	subs	r1, r1, r2
 8000aa4:	4664      	mov	r4, ip
 8000aa6:	0035      	movs	r5, r6
 8000aa8:	e543      	b.n	8000532 <__aeabi_dadd+0x62>
 8000aaa:	4641      	mov	r1, r8
 8000aac:	0010      	movs	r0, r2
 8000aae:	4d14      	ldr	r5, [pc, #80]	; (8000b00 <__aeabi_dadd+0x630>)
 8000ab0:	e610      	b.n	80006d4 <__aeabi_dadd+0x204>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	0312      	lsls	r2, r2, #12
 8000ab8:	e680      	b.n	80007bc <__aeabi_dadd+0x2ec>
 8000aba:	001d      	movs	r5, r3
 8000abc:	000f      	movs	r7, r1
 8000abe:	3d20      	subs	r5, #32
 8000ac0:	40ef      	lsrs	r7, r5
 8000ac2:	46bc      	mov	ip, r7
 8000ac4:	2b20      	cmp	r3, #32
 8000ac6:	d003      	beq.n	8000ad0 <__aeabi_dadd+0x600>
 8000ac8:	2540      	movs	r5, #64	; 0x40
 8000aca:	1aeb      	subs	r3, r5, r3
 8000acc:	4099      	lsls	r1, r3
 8000ace:	4308      	orrs	r0, r1
 8000ad0:	0007      	movs	r7, r0
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	1e78      	subs	r0, r7, #1
 8000ad6:	4187      	sbcs	r7, r0
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e769      	b.n	80009b0 <__aeabi_dadd+0x4e0>
 8000adc:	1887      	adds	r7, r0, r2
 8000ade:	4297      	cmp	r7, r2
 8000ae0:	419b      	sbcs	r3, r3
 8000ae2:	4441      	add	r1, r8
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	18c9      	adds	r1, r1, r3
 8000ae8:	0035      	movs	r5, r6
 8000aea:	e5a3      	b.n	8000634 <__aeabi_dadd+0x164>
 8000aec:	003b      	movs	r3, r7
 8000aee:	4333      	orrs	r3, r6
 8000af0:	d0ce      	beq.n	8000a90 <__aeabi_dadd+0x5c0>
 8000af2:	2207      	movs	r2, #7
 8000af4:	0031      	movs	r1, r6
 8000af6:	403a      	ands	r2, r7
 8000af8:	e652      	b.n	80007a0 <__aeabi_dadd+0x2d0>
 8000afa:	2300      	movs	r3, #0
 8000afc:	001a      	movs	r2, r3
 8000afe:	e5f4      	b.n	80006ea <__aeabi_dadd+0x21a>
 8000b00:	000007ff 	.word	0x000007ff
 8000b04:	ff7fffff 	.word	0xff7fffff

08000b08 <__aeabi_ddiv>:
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	4657      	mov	r7, sl
 8000b0c:	46de      	mov	lr, fp
 8000b0e:	464e      	mov	r6, r9
 8000b10:	4645      	mov	r5, r8
 8000b12:	b5e0      	push	{r5, r6, r7, lr}
 8000b14:	4683      	mov	fp, r0
 8000b16:	0007      	movs	r7, r0
 8000b18:	030e      	lsls	r6, r1, #12
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	4692      	mov	sl, r2
 8000b20:	001c      	movs	r4, r3
 8000b22:	0b36      	lsrs	r6, r6, #12
 8000b24:	0d40      	lsrs	r0, r0, #21
 8000b26:	0fcd      	lsrs	r5, r1, #31
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_ddiv+0x26>
 8000b2c:	e09d      	b.n	8000c6a <__aeabi_ddiv+0x162>
 8000b2e:	4b95      	ldr	r3, [pc, #596]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000b30:	4298      	cmp	r0, r3
 8000b32:	d039      	beq.n	8000ba8 <__aeabi_ddiv+0xa0>
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	00f6      	lsls	r6, r6, #3
 8000b38:	041b      	lsls	r3, r3, #16
 8000b3a:	431e      	orrs	r6, r3
 8000b3c:	4a92      	ldr	r2, [pc, #584]	; (8000d88 <__aeabi_ddiv+0x280>)
 8000b3e:	0f7b      	lsrs	r3, r7, #29
 8000b40:	4333      	orrs	r3, r6
 8000b42:	4699      	mov	r9, r3
 8000b44:	4694      	mov	ip, r2
 8000b46:	0003      	movs	r3, r0
 8000b48:	4463      	add	r3, ip
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2600      	movs	r6, #0
 8000b50:	00ff      	lsls	r7, r7, #3
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	0323      	lsls	r3, r4, #12
 8000b56:	0b1b      	lsrs	r3, r3, #12
 8000b58:	4698      	mov	r8, r3
 8000b5a:	0063      	lsls	r3, r4, #1
 8000b5c:	0fe4      	lsrs	r4, r4, #31
 8000b5e:	4652      	mov	r2, sl
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	9401      	str	r4, [sp, #4]
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x60>
 8000b66:	e0b3      	b.n	8000cd0 <__aeabi_ddiv+0x1c8>
 8000b68:	4986      	ldr	r1, [pc, #536]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_ddiv+0x68>
 8000b6e:	e09e      	b.n	8000cae <__aeabi_ddiv+0x1a6>
 8000b70:	4642      	mov	r2, r8
 8000b72:	00d1      	lsls	r1, r2, #3
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0412      	lsls	r2, r2, #16
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	4651      	mov	r1, sl
 8000b7c:	0f49      	lsrs	r1, r1, #29
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	468b      	mov	fp, r1
 8000b82:	4981      	ldr	r1, [pc, #516]	; (8000d88 <__aeabi_ddiv+0x280>)
 8000b84:	4652      	mov	r2, sl
 8000b86:	468c      	mov	ip, r1
 8000b88:	9900      	ldr	r1, [sp, #0]
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1acb      	subs	r3, r1, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	002b      	movs	r3, r5
 8000b96:	4063      	eors	r3, r4
 8000b98:	469a      	mov	sl, r3
 8000b9a:	2e0f      	cmp	r6, #15
 8000b9c:	d900      	bls.n	8000ba0 <__aeabi_ddiv+0x98>
 8000b9e:	e105      	b.n	8000dac <__aeabi_ddiv+0x2a4>
 8000ba0:	4b7a      	ldr	r3, [pc, #488]	; (8000d8c <__aeabi_ddiv+0x284>)
 8000ba2:	00b6      	lsls	r6, r6, #2
 8000ba4:	599b      	ldr	r3, [r3, r6]
 8000ba6:	469f      	mov	pc, r3
 8000ba8:	465b      	mov	r3, fp
 8000baa:	4333      	orrs	r3, r6
 8000bac:	4699      	mov	r9, r3
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_ddiv+0xaa>
 8000bb0:	e0b8      	b.n	8000d24 <__aeabi_ddiv+0x21c>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2608      	movs	r6, #8
 8000bb6:	2700      	movs	r7, #0
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	e7ca      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000bbe:	46cb      	mov	fp, r9
 8000bc0:	003a      	movs	r2, r7
 8000bc2:	9902      	ldr	r1, [sp, #8]
 8000bc4:	9501      	str	r5, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
 8000bc8:	469a      	mov	sl, r3
 8000bca:	2902      	cmp	r1, #2
 8000bcc:	d027      	beq.n	8000c1e <__aeabi_ddiv+0x116>
 8000bce:	2903      	cmp	r1, #3
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0xcc>
 8000bd2:	e280      	b.n	80010d6 <__aeabi_ddiv+0x5ce>
 8000bd4:	2901      	cmp	r1, #1
 8000bd6:	d044      	beq.n	8000c62 <__aeabi_ddiv+0x15a>
 8000bd8:	496d      	ldr	r1, [pc, #436]	; (8000d90 <__aeabi_ddiv+0x288>)
 8000bda:	9b00      	ldr	r3, [sp, #0]
 8000bdc:	468c      	mov	ip, r1
 8000bde:	4463      	add	r3, ip
 8000be0:	001c      	movs	r4, r3
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	dd38      	ble.n	8000c58 <__aeabi_ddiv+0x150>
 8000be6:	0753      	lsls	r3, r2, #29
 8000be8:	d000      	beq.n	8000bec <__aeabi_ddiv+0xe4>
 8000bea:	e213      	b.n	8001014 <__aeabi_ddiv+0x50c>
 8000bec:	08d2      	lsrs	r2, r2, #3
 8000bee:	465b      	mov	r3, fp
 8000bf0:	01db      	lsls	r3, r3, #7
 8000bf2:	d509      	bpl.n	8000c08 <__aeabi_ddiv+0x100>
 8000bf4:	4659      	mov	r1, fp
 8000bf6:	4b67      	ldr	r3, [pc, #412]	; (8000d94 <__aeabi_ddiv+0x28c>)
 8000bf8:	4019      	ands	r1, r3
 8000bfa:	468b      	mov	fp, r1
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	00c9      	lsls	r1, r1, #3
 8000c00:	468c      	mov	ip, r1
 8000c02:	9b00      	ldr	r3, [sp, #0]
 8000c04:	4463      	add	r3, ip
 8000c06:	001c      	movs	r4, r3
 8000c08:	4b63      	ldr	r3, [pc, #396]	; (8000d98 <__aeabi_ddiv+0x290>)
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	dc07      	bgt.n	8000c1e <__aeabi_ddiv+0x116>
 8000c0e:	465b      	mov	r3, fp
 8000c10:	0564      	lsls	r4, r4, #21
 8000c12:	075f      	lsls	r7, r3, #29
 8000c14:	025b      	lsls	r3, r3, #9
 8000c16:	4317      	orrs	r7, r2
 8000c18:	0b1b      	lsrs	r3, r3, #12
 8000c1a:	0d62      	lsrs	r2, r4, #21
 8000c1c:	e002      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2700      	movs	r7, #0
 8000c22:	4a58      	ldr	r2, [pc, #352]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	031b      	lsls	r3, r3, #12
 8000c28:	0b1c      	lsrs	r4, r3, #12
 8000c2a:	0d0b      	lsrs	r3, r1, #20
 8000c2c:	051b      	lsls	r3, r3, #20
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	0514      	lsls	r4, r2, #20
 8000c32:	4a5a      	ldr	r2, [pc, #360]	; (8000d9c <__aeabi_ddiv+0x294>)
 8000c34:	0038      	movs	r0, r7
 8000c36:	4013      	ands	r3, r2
 8000c38:	431c      	orrs	r4, r3
 8000c3a:	4653      	mov	r3, sl
 8000c3c:	0064      	lsls	r4, r4, #1
 8000c3e:	07db      	lsls	r3, r3, #31
 8000c40:	0864      	lsrs	r4, r4, #1
 8000c42:	431c      	orrs	r4, r3
 8000c44:	0021      	movs	r1, r4
 8000c46:	b005      	add	sp, #20
 8000c48:	bc3c      	pop	{r2, r3, r4, r5}
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	4699      	mov	r9, r3
 8000c4e:	46a2      	mov	sl, r4
 8000c50:	46ab      	mov	fp, r5
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c54:	2201      	movs	r2, #1
 8000c56:	4252      	negs	r2, r2
 8000c58:	2301      	movs	r3, #1
 8000c5a:	1b1b      	subs	r3, r3, r4
 8000c5c:	2b38      	cmp	r3, #56	; 0x38
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_ddiv+0x15a>
 8000c60:	e1ad      	b.n	8000fbe <__aeabi_ddiv+0x4b6>
 8000c62:	2200      	movs	r2, #0
 8000c64:	2300      	movs	r3, #0
 8000c66:	2700      	movs	r7, #0
 8000c68:	e7dc      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000c6a:	465b      	mov	r3, fp
 8000c6c:	4333      	orrs	r3, r6
 8000c6e:	4699      	mov	r9, r3
 8000c70:	d05e      	beq.n	8000d30 <__aeabi_ddiv+0x228>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x170>
 8000c76:	e18a      	b.n	8000f8e <__aeabi_ddiv+0x486>
 8000c78:	0030      	movs	r0, r6
 8000c7a:	f001 fa4b 	bl	8002114 <__clzsi2>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	3b0b      	subs	r3, #11
 8000c82:	2b1c      	cmp	r3, #28
 8000c84:	dd00      	ble.n	8000c88 <__aeabi_ddiv+0x180>
 8000c86:	e17b      	b.n	8000f80 <__aeabi_ddiv+0x478>
 8000c88:	221d      	movs	r2, #29
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	465a      	mov	r2, fp
 8000c8e:	0001      	movs	r1, r0
 8000c90:	40da      	lsrs	r2, r3
 8000c92:	3908      	subs	r1, #8
 8000c94:	408e      	lsls	r6, r1
 8000c96:	0013      	movs	r3, r2
 8000c98:	465f      	mov	r7, fp
 8000c9a:	4333      	orrs	r3, r6
 8000c9c:	4699      	mov	r9, r3
 8000c9e:	408f      	lsls	r7, r1
 8000ca0:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <__aeabi_ddiv+0x298>)
 8000ca2:	2600      	movs	r6, #0
 8000ca4:	1a1b      	subs	r3, r3, r0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	e752      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000cae:	4641      	mov	r1, r8
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	493b      	ldr	r1, [pc, #236]	; (8000da4 <__aeabi_ddiv+0x29c>)
 8000cb6:	469b      	mov	fp, r3
 8000cb8:	468c      	mov	ip, r1
 8000cba:	9b00      	ldr	r3, [sp, #0]
 8000cbc:	4463      	add	r3, ip
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	465b      	mov	r3, fp
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d13b      	bne.n	8000d3e <__aeabi_ddiv+0x236>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	431e      	orrs	r6, r3
 8000ccc:	2102      	movs	r1, #2
 8000cce:	e761      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	469b      	mov	fp, r3
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_ddiv+0x240>
 8000cd8:	4643      	mov	r3, r8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_ddiv+0x1d8>
 8000cde:	e162      	b.n	8000fa6 <__aeabi_ddiv+0x49e>
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	f001 fa17 	bl	8002114 <__clzsi2>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	3b0b      	subs	r3, #11
 8000cea:	2b1c      	cmp	r3, #28
 8000cec:	dd00      	ble.n	8000cf0 <__aeabi_ddiv+0x1e8>
 8000cee:	e153      	b.n	8000f98 <__aeabi_ddiv+0x490>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	4641      	mov	r1, r8
 8000cf4:	3a08      	subs	r2, #8
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	4688      	mov	r8, r1
 8000cfa:	211d      	movs	r1, #29
 8000cfc:	1acb      	subs	r3, r1, r3
 8000cfe:	4651      	mov	r1, sl
 8000d00:	40d9      	lsrs	r1, r3
 8000d02:	000b      	movs	r3, r1
 8000d04:	4641      	mov	r1, r8
 8000d06:	430b      	orrs	r3, r1
 8000d08:	469b      	mov	fp, r3
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	001a      	movs	r2, r3
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	4925      	ldr	r1, [pc, #148]	; (8000da8 <__aeabi_ddiv+0x2a0>)
 8000d14:	469c      	mov	ip, r3
 8000d16:	4460      	add	r0, ip
 8000d18:	0003      	movs	r3, r0
 8000d1a:	468c      	mov	ip, r1
 8000d1c:	4463      	add	r3, ip
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e737      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000d24:	2303      	movs	r3, #3
 8000d26:	46b1      	mov	r9, r6
 8000d28:	9000      	str	r0, [sp, #0]
 8000d2a:	260c      	movs	r6, #12
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	e711      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	2604      	movs	r6, #4
 8000d38:	2700      	movs	r7, #0
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	e70a      	b.n	8000b54 <__aeabi_ddiv+0x4c>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	46c3      	mov	fp, r8
 8000d42:	431e      	orrs	r6, r3
 8000d44:	2103      	movs	r1, #3
 8000d46:	e725      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000d48:	3301      	adds	r3, #1
 8000d4a:	431e      	orrs	r6, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	e720      	b.n	8000b94 <__aeabi_ddiv+0x8c>
 8000d52:	2300      	movs	r3, #0
 8000d54:	469a      	mov	sl, r3
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	2700      	movs	r7, #0
 8000d5a:	031b      	lsls	r3, r3, #12
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000d5e:	e761      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	4649      	mov	r1, r9
 8000d64:	031b      	lsls	r3, r3, #12
 8000d66:	4219      	tst	r1, r3
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x264>
 8000d6a:	e0e2      	b.n	8000f32 <__aeabi_ddiv+0x42a>
 8000d6c:	4659      	mov	r1, fp
 8000d6e:	4219      	tst	r1, r3
 8000d70:	d000      	beq.n	8000d74 <__aeabi_ddiv+0x26c>
 8000d72:	e0de      	b.n	8000f32 <__aeabi_ddiv+0x42a>
 8000d74:	430b      	orrs	r3, r1
 8000d76:	031b      	lsls	r3, r3, #12
 8000d78:	0017      	movs	r7, r2
 8000d7a:	0b1b      	lsrs	r3, r3, #12
 8000d7c:	46a2      	mov	sl, r4
 8000d7e:	4a01      	ldr	r2, [pc, #4]	; (8000d84 <__aeabi_ddiv+0x27c>)
 8000d80:	e750      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	000007ff 	.word	0x000007ff
 8000d88:	fffffc01 	.word	0xfffffc01
 8000d8c:	08009b58 	.word	0x08009b58
 8000d90:	000003ff 	.word	0x000003ff
 8000d94:	feffffff 	.word	0xfeffffff
 8000d98:	000007fe 	.word	0x000007fe
 8000d9c:	800fffff 	.word	0x800fffff
 8000da0:	fffffc0d 	.word	0xfffffc0d
 8000da4:	fffff801 	.word	0xfffff801
 8000da8:	000003f3 	.word	0x000003f3
 8000dac:	45d9      	cmp	r9, fp
 8000dae:	d900      	bls.n	8000db2 <__aeabi_ddiv+0x2aa>
 8000db0:	e0cb      	b.n	8000f4a <__aeabi_ddiv+0x442>
 8000db2:	d100      	bne.n	8000db6 <__aeabi_ddiv+0x2ae>
 8000db4:	e0c6      	b.n	8000f44 <__aeabi_ddiv+0x43c>
 8000db6:	003c      	movs	r4, r7
 8000db8:	4648      	mov	r0, r9
 8000dba:	2700      	movs	r7, #0
 8000dbc:	9b00      	ldr	r3, [sp, #0]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	0e16      	lsrs	r6, r2, #24
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	0213      	lsls	r3, r2, #8
 8000dcc:	4698      	mov	r8, r3
 8000dce:	0433      	lsls	r3, r6, #16
 8000dd0:	0c1b      	lsrs	r3, r3, #16
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	0c31      	lsrs	r1, r6, #16
 8000dd6:	9101      	str	r1, [sp, #4]
 8000dd8:	f7ff fa2e 	bl	8000238 <__aeabi_uidivmod>
 8000ddc:	464a      	mov	r2, r9
 8000dde:	4342      	muls	r2, r0
 8000de0:	040b      	lsls	r3, r1, #16
 8000de2:	0c21      	lsrs	r1, r4, #16
 8000de4:	0005      	movs	r5, r0
 8000de6:	4319      	orrs	r1, r3
 8000de8:	428a      	cmp	r2, r1
 8000dea:	d907      	bls.n	8000dfc <__aeabi_ddiv+0x2f4>
 8000dec:	1989      	adds	r1, r1, r6
 8000dee:	3d01      	subs	r5, #1
 8000df0:	428e      	cmp	r6, r1
 8000df2:	d803      	bhi.n	8000dfc <__aeabi_ddiv+0x2f4>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	d901      	bls.n	8000dfc <__aeabi_ddiv+0x2f4>
 8000df8:	1e85      	subs	r5, r0, #2
 8000dfa:	1989      	adds	r1, r1, r6
 8000dfc:	1a88      	subs	r0, r1, r2
 8000dfe:	9901      	ldr	r1, [sp, #4]
 8000e00:	f7ff fa1a 	bl	8000238 <__aeabi_uidivmod>
 8000e04:	0409      	lsls	r1, r1, #16
 8000e06:	468c      	mov	ip, r1
 8000e08:	464a      	mov	r2, r9
 8000e0a:	0421      	lsls	r1, r4, #16
 8000e0c:	4664      	mov	r4, ip
 8000e0e:	4342      	muls	r2, r0
 8000e10:	0c09      	lsrs	r1, r1, #16
 8000e12:	0003      	movs	r3, r0
 8000e14:	4321      	orrs	r1, r4
 8000e16:	428a      	cmp	r2, r1
 8000e18:	d904      	bls.n	8000e24 <__aeabi_ddiv+0x31c>
 8000e1a:	1989      	adds	r1, r1, r6
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	428e      	cmp	r6, r1
 8000e20:	d800      	bhi.n	8000e24 <__aeabi_ddiv+0x31c>
 8000e22:	e0f1      	b.n	8001008 <__aeabi_ddiv+0x500>
 8000e24:	042d      	lsls	r5, r5, #16
 8000e26:	431d      	orrs	r5, r3
 8000e28:	46ab      	mov	fp, r5
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	1a89      	subs	r1, r1, r2
 8000e2e:	4642      	mov	r2, r8
 8000e30:	0c28      	lsrs	r0, r5, #16
 8000e32:	0412      	lsls	r2, r2, #16
 8000e34:	0c1d      	lsrs	r5, r3, #16
 8000e36:	465b      	mov	r3, fp
 8000e38:	0c14      	lsrs	r4, r2, #16
 8000e3a:	0022      	movs	r2, r4
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	435a      	muls	r2, r3
 8000e42:	9403      	str	r4, [sp, #12]
 8000e44:	436b      	muls	r3, r5
 8000e46:	4344      	muls	r4, r0
 8000e48:	9502      	str	r5, [sp, #8]
 8000e4a:	4368      	muls	r0, r5
 8000e4c:	191b      	adds	r3, r3, r4
 8000e4e:	0c15      	lsrs	r5, r2, #16
 8000e50:	18eb      	adds	r3, r5, r3
 8000e52:	429c      	cmp	r4, r3
 8000e54:	d903      	bls.n	8000e5e <__aeabi_ddiv+0x356>
 8000e56:	2480      	movs	r4, #128	; 0x80
 8000e58:	0264      	lsls	r4, r4, #9
 8000e5a:	46a4      	mov	ip, r4
 8000e5c:	4460      	add	r0, ip
 8000e5e:	0c1c      	lsrs	r4, r3, #16
 8000e60:	0415      	lsls	r5, r2, #16
 8000e62:	041b      	lsls	r3, r3, #16
 8000e64:	0c2d      	lsrs	r5, r5, #16
 8000e66:	1820      	adds	r0, r4, r0
 8000e68:	195d      	adds	r5, r3, r5
 8000e6a:	4281      	cmp	r1, r0
 8000e6c:	d377      	bcc.n	8000f5e <__aeabi_ddiv+0x456>
 8000e6e:	d073      	beq.n	8000f58 <__aeabi_ddiv+0x450>
 8000e70:	1a0c      	subs	r4, r1, r0
 8000e72:	4aa2      	ldr	r2, [pc, #648]	; (80010fc <__aeabi_ddiv+0x5f4>)
 8000e74:	1b7d      	subs	r5, r7, r5
 8000e76:	42af      	cmp	r7, r5
 8000e78:	41bf      	sbcs	r7, r7
 8000e7a:	4694      	mov	ip, r2
 8000e7c:	9b00      	ldr	r3, [sp, #0]
 8000e7e:	427f      	negs	r7, r7
 8000e80:	4463      	add	r3, ip
 8000e82:	1be0      	subs	r0, r4, r7
 8000e84:	001c      	movs	r4, r3
 8000e86:	4286      	cmp	r6, r0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_ddiv+0x384>
 8000e8a:	e0db      	b.n	8001044 <__aeabi_ddiv+0x53c>
 8000e8c:	9901      	ldr	r1, [sp, #4]
 8000e8e:	f7ff f9d3 	bl	8000238 <__aeabi_uidivmod>
 8000e92:	464a      	mov	r2, r9
 8000e94:	4342      	muls	r2, r0
 8000e96:	040b      	lsls	r3, r1, #16
 8000e98:	0c29      	lsrs	r1, r5, #16
 8000e9a:	0007      	movs	r7, r0
 8000e9c:	4319      	orrs	r1, r3
 8000e9e:	428a      	cmp	r2, r1
 8000ea0:	d907      	bls.n	8000eb2 <__aeabi_ddiv+0x3aa>
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	3f01      	subs	r7, #1
 8000ea6:	428e      	cmp	r6, r1
 8000ea8:	d803      	bhi.n	8000eb2 <__aeabi_ddiv+0x3aa>
 8000eaa:	428a      	cmp	r2, r1
 8000eac:	d901      	bls.n	8000eb2 <__aeabi_ddiv+0x3aa>
 8000eae:	1e87      	subs	r7, r0, #2
 8000eb0:	1989      	adds	r1, r1, r6
 8000eb2:	1a88      	subs	r0, r1, r2
 8000eb4:	9901      	ldr	r1, [sp, #4]
 8000eb6:	f7ff f9bf 	bl	8000238 <__aeabi_uidivmod>
 8000eba:	0409      	lsls	r1, r1, #16
 8000ebc:	464a      	mov	r2, r9
 8000ebe:	4689      	mov	r9, r1
 8000ec0:	0429      	lsls	r1, r5, #16
 8000ec2:	464d      	mov	r5, r9
 8000ec4:	4342      	muls	r2, r0
 8000ec6:	0c09      	lsrs	r1, r1, #16
 8000ec8:	0003      	movs	r3, r0
 8000eca:	4329      	orrs	r1, r5
 8000ecc:	428a      	cmp	r2, r1
 8000ece:	d907      	bls.n	8000ee0 <__aeabi_ddiv+0x3d8>
 8000ed0:	1989      	adds	r1, r1, r6
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	428e      	cmp	r6, r1
 8000ed6:	d803      	bhi.n	8000ee0 <__aeabi_ddiv+0x3d8>
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d901      	bls.n	8000ee0 <__aeabi_ddiv+0x3d8>
 8000edc:	1e83      	subs	r3, r0, #2
 8000ede:	1989      	adds	r1, r1, r6
 8000ee0:	043f      	lsls	r7, r7, #16
 8000ee2:	1a89      	subs	r1, r1, r2
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	9f03      	ldr	r7, [sp, #12]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	0038      	movs	r0, r7
 8000eec:	0413      	lsls	r3, r2, #16
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	4358      	muls	r0, r3
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	9802      	ldr	r0, [sp, #8]
 8000ef6:	0c15      	lsrs	r5, r2, #16
 8000ef8:	436f      	muls	r7, r5
 8000efa:	4343      	muls	r3, r0
 8000efc:	4345      	muls	r5, r0
 8000efe:	4648      	mov	r0, r9
 8000f00:	0c00      	lsrs	r0, r0, #16
 8000f02:	4684      	mov	ip, r0
 8000f04:	19db      	adds	r3, r3, r7
 8000f06:	4463      	add	r3, ip
 8000f08:	429f      	cmp	r7, r3
 8000f0a:	d903      	bls.n	8000f14 <__aeabi_ddiv+0x40c>
 8000f0c:	2080      	movs	r0, #128	; 0x80
 8000f0e:	0240      	lsls	r0, r0, #9
 8000f10:	4684      	mov	ip, r0
 8000f12:	4465      	add	r5, ip
 8000f14:	4648      	mov	r0, r9
 8000f16:	0c1f      	lsrs	r7, r3, #16
 8000f18:	0400      	lsls	r0, r0, #16
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	0c00      	lsrs	r0, r0, #16
 8000f1e:	197d      	adds	r5, r7, r5
 8000f20:	1818      	adds	r0, r3, r0
 8000f22:	42a9      	cmp	r1, r5
 8000f24:	d200      	bcs.n	8000f28 <__aeabi_ddiv+0x420>
 8000f26:	e084      	b.n	8001032 <__aeabi_ddiv+0x52a>
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x424>
 8000f2a:	e07f      	b.n	800102c <__aeabi_ddiv+0x524>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	e657      	b.n	8000be2 <__aeabi_ddiv+0xda>
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	464a      	mov	r2, r9
 8000f36:	031b      	lsls	r3, r3, #12
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	0b1b      	lsrs	r3, r3, #12
 8000f3e:	46aa      	mov	sl, r5
 8000f40:	4a6f      	ldr	r2, [pc, #444]	; (8001100 <__aeabi_ddiv+0x5f8>)
 8000f42:	e66f      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8000f44:	42ba      	cmp	r2, r7
 8000f46:	d900      	bls.n	8000f4a <__aeabi_ddiv+0x442>
 8000f48:	e735      	b.n	8000db6 <__aeabi_ddiv+0x2ae>
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	07dc      	lsls	r4, r3, #31
 8000f4e:	0858      	lsrs	r0, r3, #1
 8000f50:	087b      	lsrs	r3, r7, #1
 8000f52:	431c      	orrs	r4, r3
 8000f54:	07ff      	lsls	r7, r7, #31
 8000f56:	e734      	b.n	8000dc2 <__aeabi_ddiv+0x2ba>
 8000f58:	2400      	movs	r4, #0
 8000f5a:	42af      	cmp	r7, r5
 8000f5c:	d289      	bcs.n	8000e72 <__aeabi_ddiv+0x36a>
 8000f5e:	4447      	add	r7, r8
 8000f60:	4547      	cmp	r7, r8
 8000f62:	41a4      	sbcs	r4, r4
 8000f64:	465b      	mov	r3, fp
 8000f66:	4264      	negs	r4, r4
 8000f68:	19a4      	adds	r4, r4, r6
 8000f6a:	1864      	adds	r4, r4, r1
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	42a6      	cmp	r6, r4
 8000f70:	d21e      	bcs.n	8000fb0 <__aeabi_ddiv+0x4a8>
 8000f72:	42a0      	cmp	r0, r4
 8000f74:	d86d      	bhi.n	8001052 <__aeabi_ddiv+0x54a>
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x472>
 8000f78:	e0b6      	b.n	80010e8 <__aeabi_ddiv+0x5e0>
 8000f7a:	1a24      	subs	r4, r4, r0
 8000f7c:	469b      	mov	fp, r3
 8000f7e:	e778      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 8000f80:	0003      	movs	r3, r0
 8000f82:	465a      	mov	r2, fp
 8000f84:	3b28      	subs	r3, #40	; 0x28
 8000f86:	409a      	lsls	r2, r3
 8000f88:	2700      	movs	r7, #0
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	e688      	b.n	8000ca0 <__aeabi_ddiv+0x198>
 8000f8e:	4658      	mov	r0, fp
 8000f90:	f001 f8c0 	bl	8002114 <__clzsi2>
 8000f94:	3020      	adds	r0, #32
 8000f96:	e672      	b.n	8000c7e <__aeabi_ddiv+0x176>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	4652      	mov	r2, sl
 8000f9c:	3b28      	subs	r3, #40	; 0x28
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	e6b4      	b.n	8000d10 <__aeabi_ddiv+0x208>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	f001 f8b4 	bl	8002114 <__clzsi2>
 8000fac:	3020      	adds	r0, #32
 8000fae:	e69a      	b.n	8000ce6 <__aeabi_ddiv+0x1de>
 8000fb0:	42a6      	cmp	r6, r4
 8000fb2:	d1e2      	bne.n	8000f7a <__aeabi_ddiv+0x472>
 8000fb4:	45b8      	cmp	r8, r7
 8000fb6:	d9dc      	bls.n	8000f72 <__aeabi_ddiv+0x46a>
 8000fb8:	1a34      	subs	r4, r6, r0
 8000fba:	469b      	mov	fp, r3
 8000fbc:	e759      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 8000fbe:	2b1f      	cmp	r3, #31
 8000fc0:	dc65      	bgt.n	800108e <__aeabi_ddiv+0x586>
 8000fc2:	4c50      	ldr	r4, [pc, #320]	; (8001104 <__aeabi_ddiv+0x5fc>)
 8000fc4:	9900      	ldr	r1, [sp, #0]
 8000fc6:	46a4      	mov	ip, r4
 8000fc8:	465c      	mov	r4, fp
 8000fca:	4461      	add	r1, ip
 8000fcc:	0008      	movs	r0, r1
 8000fce:	408c      	lsls	r4, r1
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	4082      	lsls	r2, r0
 8000fd4:	40d9      	lsrs	r1, r3
 8000fd6:	1e50      	subs	r0, r2, #1
 8000fd8:	4182      	sbcs	r2, r0
 8000fda:	430c      	orrs	r4, r1
 8000fdc:	4314      	orrs	r4, r2
 8000fde:	465a      	mov	r2, fp
 8000fe0:	40da      	lsrs	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d009      	beq.n	8000ffc <__aeabi_ddiv+0x4f4>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d005      	beq.n	8000ffc <__aeabi_ddiv+0x4f4>
 8000ff0:	0022      	movs	r2, r4
 8000ff2:	1d14      	adds	r4, r2, #4
 8000ff4:	4294      	cmp	r4, r2
 8000ff6:	4189      	sbcs	r1, r1
 8000ff8:	4249      	negs	r1, r1
 8000ffa:	185b      	adds	r3, r3, r1
 8000ffc:	021a      	lsls	r2, r3, #8
 8000ffe:	d562      	bpl.n	80010c6 <__aeabi_ddiv+0x5be>
 8001000:	2201      	movs	r2, #1
 8001002:	2300      	movs	r3, #0
 8001004:	2700      	movs	r7, #0
 8001006:	e60d      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 8001008:	428a      	cmp	r2, r1
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x506>
 800100c:	e70a      	b.n	8000e24 <__aeabi_ddiv+0x31c>
 800100e:	1e83      	subs	r3, r0, #2
 8001010:	1989      	adds	r1, r1, r6
 8001012:	e707      	b.n	8000e24 <__aeabi_ddiv+0x31c>
 8001014:	230f      	movs	r3, #15
 8001016:	4013      	ands	r3, r2
 8001018:	2b04      	cmp	r3, #4
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x516>
 800101c:	e5e6      	b.n	8000bec <__aeabi_ddiv+0xe4>
 800101e:	1d17      	adds	r7, r2, #4
 8001020:	4297      	cmp	r7, r2
 8001022:	4192      	sbcs	r2, r2
 8001024:	4253      	negs	r3, r2
 8001026:	449b      	add	fp, r3
 8001028:	08fa      	lsrs	r2, r7, #3
 800102a:	e5e0      	b.n	8000bee <__aeabi_ddiv+0xe6>
 800102c:	2800      	cmp	r0, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_ddiv+0x52a>
 8001030:	e5d7      	b.n	8000be2 <__aeabi_ddiv+0xda>
 8001032:	1871      	adds	r1, r6, r1
 8001034:	1e53      	subs	r3, r2, #1
 8001036:	42b1      	cmp	r1, r6
 8001038:	d327      	bcc.n	800108a <__aeabi_ddiv+0x582>
 800103a:	42a9      	cmp	r1, r5
 800103c:	d315      	bcc.n	800106a <__aeabi_ddiv+0x562>
 800103e:	d058      	beq.n	80010f2 <__aeabi_ddiv+0x5ea>
 8001040:	001a      	movs	r2, r3
 8001042:	e773      	b.n	8000f2c <__aeabi_ddiv+0x424>
 8001044:	2b00      	cmp	r3, #0
 8001046:	dc00      	bgt.n	800104a <__aeabi_ddiv+0x542>
 8001048:	e604      	b.n	8000c54 <__aeabi_ddiv+0x14c>
 800104a:	2301      	movs	r3, #1
 800104c:	2200      	movs	r2, #0
 800104e:	449b      	add	fp, r3
 8001050:	e5cd      	b.n	8000bee <__aeabi_ddiv+0xe6>
 8001052:	2302      	movs	r3, #2
 8001054:	4447      	add	r7, r8
 8001056:	4547      	cmp	r7, r8
 8001058:	4189      	sbcs	r1, r1
 800105a:	425b      	negs	r3, r3
 800105c:	469c      	mov	ip, r3
 800105e:	4249      	negs	r1, r1
 8001060:	1989      	adds	r1, r1, r6
 8001062:	190c      	adds	r4, r1, r4
 8001064:	44e3      	add	fp, ip
 8001066:	1a24      	subs	r4, r4, r0
 8001068:	e703      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 800106a:	4643      	mov	r3, r8
 800106c:	005f      	lsls	r7, r3, #1
 800106e:	4547      	cmp	r7, r8
 8001070:	419b      	sbcs	r3, r3
 8001072:	46b8      	mov	r8, r7
 8001074:	425b      	negs	r3, r3
 8001076:	199e      	adds	r6, r3, r6
 8001078:	3a02      	subs	r2, #2
 800107a:	1989      	adds	r1, r1, r6
 800107c:	42a9      	cmp	r1, r5
 800107e:	d000      	beq.n	8001082 <__aeabi_ddiv+0x57a>
 8001080:	e754      	b.n	8000f2c <__aeabi_ddiv+0x424>
 8001082:	4540      	cmp	r0, r8
 8001084:	d000      	beq.n	8001088 <__aeabi_ddiv+0x580>
 8001086:	e751      	b.n	8000f2c <__aeabi_ddiv+0x424>
 8001088:	e5ab      	b.n	8000be2 <__aeabi_ddiv+0xda>
 800108a:	001a      	movs	r2, r3
 800108c:	e7f6      	b.n	800107c <__aeabi_ddiv+0x574>
 800108e:	211f      	movs	r1, #31
 8001090:	465f      	mov	r7, fp
 8001092:	4249      	negs	r1, r1
 8001094:	1b0c      	subs	r4, r1, r4
 8001096:	40e7      	lsrs	r7, r4
 8001098:	2b20      	cmp	r3, #32
 800109a:	d007      	beq.n	80010ac <__aeabi_ddiv+0x5a4>
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <__aeabi_ddiv+0x600>)
 800109e:	9b00      	ldr	r3, [sp, #0]
 80010a0:	468c      	mov	ip, r1
 80010a2:	4463      	add	r3, ip
 80010a4:	0018      	movs	r0, r3
 80010a6:	465b      	mov	r3, fp
 80010a8:	4083      	lsls	r3, r0
 80010aa:	431a      	orrs	r2, r3
 80010ac:	1e50      	subs	r0, r2, #1
 80010ae:	4182      	sbcs	r2, r0
 80010b0:	433a      	orrs	r2, r7
 80010b2:	2707      	movs	r7, #7
 80010b4:	2300      	movs	r3, #0
 80010b6:	4017      	ands	r7, r2
 80010b8:	d009      	beq.n	80010ce <__aeabi_ddiv+0x5c6>
 80010ba:	210f      	movs	r1, #15
 80010bc:	2300      	movs	r3, #0
 80010be:	4011      	ands	r1, r2
 80010c0:	0014      	movs	r4, r2
 80010c2:	2904      	cmp	r1, #4
 80010c4:	d195      	bne.n	8000ff2 <__aeabi_ddiv+0x4ea>
 80010c6:	0022      	movs	r2, r4
 80010c8:	075f      	lsls	r7, r3, #29
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	0b1b      	lsrs	r3, r3, #12
 80010ce:	08d2      	lsrs	r2, r2, #3
 80010d0:	4317      	orrs	r7, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	e5a6      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4659      	mov	r1, fp
 80010da:	031b      	lsls	r3, r3, #12
 80010dc:	430b      	orrs	r3, r1
 80010de:	031b      	lsls	r3, r3, #12
 80010e0:	0017      	movs	r7, r2
 80010e2:	0b1b      	lsrs	r3, r3, #12
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <__aeabi_ddiv+0x5f8>)
 80010e6:	e59d      	b.n	8000c24 <__aeabi_ddiv+0x11c>
 80010e8:	42bd      	cmp	r5, r7
 80010ea:	d8b2      	bhi.n	8001052 <__aeabi_ddiv+0x54a>
 80010ec:	469b      	mov	fp, r3
 80010ee:	2400      	movs	r4, #0
 80010f0:	e6bf      	b.n	8000e72 <__aeabi_ddiv+0x36a>
 80010f2:	4580      	cmp	r8, r0
 80010f4:	d3b9      	bcc.n	800106a <__aeabi_ddiv+0x562>
 80010f6:	001a      	movs	r2, r3
 80010f8:	e7c3      	b.n	8001082 <__aeabi_ddiv+0x57a>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000003ff 	.word	0x000003ff
 8001100:	000007ff 	.word	0x000007ff
 8001104:	0000041e 	.word	0x0000041e
 8001108:	0000043e 	.word	0x0000043e

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464f      	mov	r7, r9
 8001110:	4646      	mov	r6, r8
 8001112:	46d6      	mov	lr, sl
 8001114:	4684      	mov	ip, r0
 8001116:	b5c0      	push	{r6, r7, lr}
 8001118:	4680      	mov	r8, r0
 800111a:	4e19      	ldr	r6, [pc, #100]	; (8001180 <__eqdf2+0x74>)
 800111c:	0318      	lsls	r0, r3, #12
 800111e:	030f      	lsls	r7, r1, #12
 8001120:	004d      	lsls	r5, r1, #1
 8001122:	0b00      	lsrs	r0, r0, #12
 8001124:	005c      	lsls	r4, r3, #1
 8001126:	4682      	mov	sl, r0
 8001128:	0b3f      	lsrs	r7, r7, #12
 800112a:	0d6d      	lsrs	r5, r5, #21
 800112c:	0fc9      	lsrs	r1, r1, #31
 800112e:	4691      	mov	r9, r2
 8001130:	0d64      	lsrs	r4, r4, #21
 8001132:	0fdb      	lsrs	r3, r3, #31
 8001134:	2001      	movs	r0, #1
 8001136:	42b5      	cmp	r5, r6
 8001138:	d00a      	beq.n	8001150 <__eqdf2+0x44>
 800113a:	42b4      	cmp	r4, r6
 800113c:	d003      	beq.n	8001146 <__eqdf2+0x3a>
 800113e:	42a5      	cmp	r5, r4
 8001140:	d101      	bne.n	8001146 <__eqdf2+0x3a>
 8001142:	4557      	cmp	r7, sl
 8001144:	d00c      	beq.n	8001160 <__eqdf2+0x54>
 8001146:	bc1c      	pop	{r2, r3, r4}
 8001148:	4690      	mov	r8, r2
 800114a:	4699      	mov	r9, r3
 800114c:	46a2      	mov	sl, r4
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	4666      	mov	r6, ip
 8001152:	433e      	orrs	r6, r7
 8001154:	d1f7      	bne.n	8001146 <__eqdf2+0x3a>
 8001156:	42ac      	cmp	r4, r5
 8001158:	d1f5      	bne.n	8001146 <__eqdf2+0x3a>
 800115a:	4654      	mov	r4, sl
 800115c:	4314      	orrs	r4, r2
 800115e:	d1f2      	bne.n	8001146 <__eqdf2+0x3a>
 8001160:	2001      	movs	r0, #1
 8001162:	45c8      	cmp	r8, r9
 8001164:	d1ef      	bne.n	8001146 <__eqdf2+0x3a>
 8001166:	4299      	cmp	r1, r3
 8001168:	d007      	beq.n	800117a <__eqdf2+0x6e>
 800116a:	2d00      	cmp	r5, #0
 800116c:	d1eb      	bne.n	8001146 <__eqdf2+0x3a>
 800116e:	4663      	mov	r3, ip
 8001170:	431f      	orrs	r7, r3
 8001172:	0038      	movs	r0, r7
 8001174:	1e47      	subs	r7, r0, #1
 8001176:	41b8      	sbcs	r0, r7
 8001178:	e7e5      	b.n	8001146 <__eqdf2+0x3a>
 800117a:	2000      	movs	r0, #0
 800117c:	e7e3      	b.n	8001146 <__eqdf2+0x3a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	464f      	mov	r7, r9
 8001188:	4646      	mov	r6, r8
 800118a:	46d6      	mov	lr, sl
 800118c:	004d      	lsls	r5, r1, #1
 800118e:	b5c0      	push	{r6, r7, lr}
 8001190:	030e      	lsls	r6, r1, #12
 8001192:	0fc9      	lsrs	r1, r1, #31
 8001194:	468a      	mov	sl, r1
 8001196:	492c      	ldr	r1, [pc, #176]	; (8001248 <__gedf2+0xc4>)
 8001198:	031f      	lsls	r7, r3, #12
 800119a:	005c      	lsls	r4, r3, #1
 800119c:	4680      	mov	r8, r0
 800119e:	0b36      	lsrs	r6, r6, #12
 80011a0:	0d6d      	lsrs	r5, r5, #21
 80011a2:	4691      	mov	r9, r2
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d64      	lsrs	r4, r4, #21
 80011a8:	0fdb      	lsrs	r3, r3, #31
 80011aa:	428d      	cmp	r5, r1
 80011ac:	d01e      	beq.n	80011ec <__gedf2+0x68>
 80011ae:	428c      	cmp	r4, r1
 80011b0:	d016      	beq.n	80011e0 <__gedf2+0x5c>
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d11e      	bne.n	80011f4 <__gedf2+0x70>
 80011b6:	4330      	orrs	r0, r6
 80011b8:	4684      	mov	ip, r0
 80011ba:	2c00      	cmp	r4, #0
 80011bc:	d101      	bne.n	80011c2 <__gedf2+0x3e>
 80011be:	433a      	orrs	r2, r7
 80011c0:	d023      	beq.n	800120a <__gedf2+0x86>
 80011c2:	4662      	mov	r2, ip
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d01a      	beq.n	80011fe <__gedf2+0x7a>
 80011c8:	459a      	cmp	sl, r3
 80011ca:	d029      	beq.n	8001220 <__gedf2+0x9c>
 80011cc:	4651      	mov	r1, sl
 80011ce:	2002      	movs	r0, #2
 80011d0:	3901      	subs	r1, #1
 80011d2:	4008      	ands	r0, r1
 80011d4:	3801      	subs	r0, #1
 80011d6:	bc1c      	pop	{r2, r3, r4}
 80011d8:	4690      	mov	r8, r2
 80011da:	4699      	mov	r9, r3
 80011dc:	46a2      	mov	sl, r4
 80011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e0:	0039      	movs	r1, r7
 80011e2:	4311      	orrs	r1, r2
 80011e4:	d0e5      	beq.n	80011b2 <__gedf2+0x2e>
 80011e6:	2002      	movs	r0, #2
 80011e8:	4240      	negs	r0, r0
 80011ea:	e7f4      	b.n	80011d6 <__gedf2+0x52>
 80011ec:	4330      	orrs	r0, r6
 80011ee:	d1fa      	bne.n	80011e6 <__gedf2+0x62>
 80011f0:	42ac      	cmp	r4, r5
 80011f2:	d00f      	beq.n	8001214 <__gedf2+0x90>
 80011f4:	2c00      	cmp	r4, #0
 80011f6:	d10f      	bne.n	8001218 <__gedf2+0x94>
 80011f8:	433a      	orrs	r2, r7
 80011fa:	d0e7      	beq.n	80011cc <__gedf2+0x48>
 80011fc:	e00c      	b.n	8001218 <__gedf2+0x94>
 80011fe:	2201      	movs	r2, #1
 8001200:	3b01      	subs	r3, #1
 8001202:	4393      	bics	r3, r2
 8001204:	0018      	movs	r0, r3
 8001206:	3001      	adds	r0, #1
 8001208:	e7e5      	b.n	80011d6 <__gedf2+0x52>
 800120a:	4663      	mov	r3, ip
 800120c:	2000      	movs	r0, #0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0e1      	beq.n	80011d6 <__gedf2+0x52>
 8001212:	e7db      	b.n	80011cc <__gedf2+0x48>
 8001214:	433a      	orrs	r2, r7
 8001216:	d1e6      	bne.n	80011e6 <__gedf2+0x62>
 8001218:	459a      	cmp	sl, r3
 800121a:	d1d7      	bne.n	80011cc <__gedf2+0x48>
 800121c:	42a5      	cmp	r5, r4
 800121e:	dcd5      	bgt.n	80011cc <__gedf2+0x48>
 8001220:	42a5      	cmp	r5, r4
 8001222:	db05      	blt.n	8001230 <__gedf2+0xac>
 8001224:	42be      	cmp	r6, r7
 8001226:	d8d1      	bhi.n	80011cc <__gedf2+0x48>
 8001228:	d008      	beq.n	800123c <__gedf2+0xb8>
 800122a:	2000      	movs	r0, #0
 800122c:	42be      	cmp	r6, r7
 800122e:	d2d2      	bcs.n	80011d6 <__gedf2+0x52>
 8001230:	4650      	mov	r0, sl
 8001232:	2301      	movs	r3, #1
 8001234:	3801      	subs	r0, #1
 8001236:	4398      	bics	r0, r3
 8001238:	3001      	adds	r0, #1
 800123a:	e7cc      	b.n	80011d6 <__gedf2+0x52>
 800123c:	45c8      	cmp	r8, r9
 800123e:	d8c5      	bhi.n	80011cc <__gedf2+0x48>
 8001240:	2000      	movs	r0, #0
 8001242:	45c8      	cmp	r8, r9
 8001244:	d3f4      	bcc.n	8001230 <__gedf2+0xac>
 8001246:	e7c6      	b.n	80011d6 <__gedf2+0x52>
 8001248:	000007ff 	.word	0x000007ff

0800124c <__ledf2>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	464f      	mov	r7, r9
 8001250:	4646      	mov	r6, r8
 8001252:	46d6      	mov	lr, sl
 8001254:	004d      	lsls	r5, r1, #1
 8001256:	b5c0      	push	{r6, r7, lr}
 8001258:	030e      	lsls	r6, r1, #12
 800125a:	0fc9      	lsrs	r1, r1, #31
 800125c:	468a      	mov	sl, r1
 800125e:	492e      	ldr	r1, [pc, #184]	; (8001318 <__ledf2+0xcc>)
 8001260:	031f      	lsls	r7, r3, #12
 8001262:	005c      	lsls	r4, r3, #1
 8001264:	4680      	mov	r8, r0
 8001266:	0b36      	lsrs	r6, r6, #12
 8001268:	0d6d      	lsrs	r5, r5, #21
 800126a:	4691      	mov	r9, r2
 800126c:	0b3f      	lsrs	r7, r7, #12
 800126e:	0d64      	lsrs	r4, r4, #21
 8001270:	0fdb      	lsrs	r3, r3, #31
 8001272:	428d      	cmp	r5, r1
 8001274:	d018      	beq.n	80012a8 <__ledf2+0x5c>
 8001276:	428c      	cmp	r4, r1
 8001278:	d011      	beq.n	800129e <__ledf2+0x52>
 800127a:	2d00      	cmp	r5, #0
 800127c:	d118      	bne.n	80012b0 <__ledf2+0x64>
 800127e:	4330      	orrs	r0, r6
 8001280:	4684      	mov	ip, r0
 8001282:	2c00      	cmp	r4, #0
 8001284:	d11e      	bne.n	80012c4 <__ledf2+0x78>
 8001286:	433a      	orrs	r2, r7
 8001288:	d11c      	bne.n	80012c4 <__ledf2+0x78>
 800128a:	4663      	mov	r3, ip
 800128c:	2000      	movs	r0, #0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d030      	beq.n	80012f4 <__ledf2+0xa8>
 8001292:	4651      	mov	r1, sl
 8001294:	2002      	movs	r0, #2
 8001296:	3901      	subs	r1, #1
 8001298:	4008      	ands	r0, r1
 800129a:	3801      	subs	r0, #1
 800129c:	e02a      	b.n	80012f4 <__ledf2+0xa8>
 800129e:	0039      	movs	r1, r7
 80012a0:	4311      	orrs	r1, r2
 80012a2:	d0ea      	beq.n	800127a <__ledf2+0x2e>
 80012a4:	2002      	movs	r0, #2
 80012a6:	e025      	b.n	80012f4 <__ledf2+0xa8>
 80012a8:	4330      	orrs	r0, r6
 80012aa:	d1fb      	bne.n	80012a4 <__ledf2+0x58>
 80012ac:	42ac      	cmp	r4, r5
 80012ae:	d026      	beq.n	80012fe <__ledf2+0xb2>
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d126      	bne.n	8001302 <__ledf2+0xb6>
 80012b4:	433a      	orrs	r2, r7
 80012b6:	d124      	bne.n	8001302 <__ledf2+0xb6>
 80012b8:	4651      	mov	r1, sl
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	e017      	b.n	80012f4 <__ledf2+0xa8>
 80012c4:	4662      	mov	r2, ip
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d00f      	beq.n	80012ea <__ledf2+0x9e>
 80012ca:	459a      	cmp	sl, r3
 80012cc:	d1e1      	bne.n	8001292 <__ledf2+0x46>
 80012ce:	42a5      	cmp	r5, r4
 80012d0:	db05      	blt.n	80012de <__ledf2+0x92>
 80012d2:	42be      	cmp	r6, r7
 80012d4:	d8dd      	bhi.n	8001292 <__ledf2+0x46>
 80012d6:	d019      	beq.n	800130c <__ledf2+0xc0>
 80012d8:	2000      	movs	r0, #0
 80012da:	42be      	cmp	r6, r7
 80012dc:	d20a      	bcs.n	80012f4 <__ledf2+0xa8>
 80012de:	4650      	mov	r0, sl
 80012e0:	2301      	movs	r3, #1
 80012e2:	3801      	subs	r0, #1
 80012e4:	4398      	bics	r0, r3
 80012e6:	3001      	adds	r0, #1
 80012e8:	e004      	b.n	80012f4 <__ledf2+0xa8>
 80012ea:	2201      	movs	r2, #1
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4393      	bics	r3, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	3001      	adds	r0, #1
 80012f4:	bc1c      	pop	{r2, r3, r4}
 80012f6:	4690      	mov	r8, r2
 80012f8:	4699      	mov	r9, r3
 80012fa:	46a2      	mov	sl, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	433a      	orrs	r2, r7
 8001300:	d1d0      	bne.n	80012a4 <__ledf2+0x58>
 8001302:	459a      	cmp	sl, r3
 8001304:	d1c5      	bne.n	8001292 <__ledf2+0x46>
 8001306:	42a5      	cmp	r5, r4
 8001308:	dcc3      	bgt.n	8001292 <__ledf2+0x46>
 800130a:	e7e0      	b.n	80012ce <__ledf2+0x82>
 800130c:	45c8      	cmp	r8, r9
 800130e:	d8c0      	bhi.n	8001292 <__ledf2+0x46>
 8001310:	2000      	movs	r0, #0
 8001312:	45c8      	cmp	r8, r9
 8001314:	d3e3      	bcc.n	80012de <__ledf2+0x92>
 8001316:	e7ed      	b.n	80012f4 <__ledf2+0xa8>
 8001318:	000007ff 	.word	0x000007ff

0800131c <__aeabi_dmul>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	4657      	mov	r7, sl
 8001320:	46de      	mov	lr, fp
 8001322:	464e      	mov	r6, r9
 8001324:	4645      	mov	r5, r8
 8001326:	b5e0      	push	{r5, r6, r7, lr}
 8001328:	4683      	mov	fp, r0
 800132a:	0006      	movs	r6, r0
 800132c:	030f      	lsls	r7, r1, #12
 800132e:	0048      	lsls	r0, r1, #1
 8001330:	b087      	sub	sp, #28
 8001332:	4692      	mov	sl, r2
 8001334:	001d      	movs	r5, r3
 8001336:	0b3f      	lsrs	r7, r7, #12
 8001338:	0d40      	lsrs	r0, r0, #21
 800133a:	0fcc      	lsrs	r4, r1, #31
 800133c:	2800      	cmp	r0, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_dmul+0x26>
 8001340:	e06f      	b.n	8001422 <__aeabi_dmul+0x106>
 8001342:	4bde      	ldr	r3, [pc, #888]	; (80016bc <__aeabi_dmul+0x3a0>)
 8001344:	4298      	cmp	r0, r3
 8001346:	d038      	beq.n	80013ba <__aeabi_dmul+0x9e>
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	00ff      	lsls	r7, r7, #3
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	431f      	orrs	r7, r3
 8001350:	0f73      	lsrs	r3, r6, #29
 8001352:	433b      	orrs	r3, r7
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	4bda      	ldr	r3, [pc, #872]	; (80016c0 <__aeabi_dmul+0x3a4>)
 8001358:	2700      	movs	r7, #0
 800135a:	4699      	mov	r9, r3
 800135c:	2300      	movs	r3, #0
 800135e:	469b      	mov	fp, r3
 8001360:	00f6      	lsls	r6, r6, #3
 8001362:	4481      	add	r9, r0
 8001364:	032b      	lsls	r3, r5, #12
 8001366:	0069      	lsls	r1, r5, #1
 8001368:	0b1b      	lsrs	r3, r3, #12
 800136a:	4652      	mov	r2, sl
 800136c:	4698      	mov	r8, r3
 800136e:	0d49      	lsrs	r1, r1, #21
 8001370:	0fed      	lsrs	r5, r5, #31
 8001372:	2900      	cmp	r1, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_dmul+0x5c>
 8001376:	e085      	b.n	8001484 <__aeabi_dmul+0x168>
 8001378:	4bd0      	ldr	r3, [pc, #832]	; (80016bc <__aeabi_dmul+0x3a0>)
 800137a:	4299      	cmp	r1, r3
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0x64>
 800137e:	e073      	b.n	8001468 <__aeabi_dmul+0x14c>
 8001380:	4643      	mov	r3, r8
 8001382:	00da      	lsls	r2, r3, #3
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	4313      	orrs	r3, r2
 800138a:	4652      	mov	r2, sl
 800138c:	48cc      	ldr	r0, [pc, #816]	; (80016c0 <__aeabi_dmul+0x3a4>)
 800138e:	0f52      	lsrs	r2, r2, #29
 8001390:	4684      	mov	ip, r0
 8001392:	4313      	orrs	r3, r2
 8001394:	4652      	mov	r2, sl
 8001396:	2000      	movs	r0, #0
 8001398:	4461      	add	r1, ip
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	4489      	add	r9, r1
 800139e:	0021      	movs	r1, r4
 80013a0:	4069      	eors	r1, r5
 80013a2:	9100      	str	r1, [sp, #0]
 80013a4:	468c      	mov	ip, r1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4449      	add	r1, r9
 80013aa:	468a      	mov	sl, r1
 80013ac:	2f0f      	cmp	r7, #15
 80013ae:	d900      	bls.n	80013b2 <__aeabi_dmul+0x96>
 80013b0:	e090      	b.n	80014d4 <__aeabi_dmul+0x1b8>
 80013b2:	49c4      	ldr	r1, [pc, #784]	; (80016c4 <__aeabi_dmul+0x3a8>)
 80013b4:	00bf      	lsls	r7, r7, #2
 80013b6:	59cf      	ldr	r7, [r1, r7]
 80013b8:	46bf      	mov	pc, r7
 80013ba:	465b      	mov	r3, fp
 80013bc:	433b      	orrs	r3, r7
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dmul+0xa8>
 80013c2:	e16a      	b.n	800169a <__aeabi_dmul+0x37e>
 80013c4:	2302      	movs	r3, #2
 80013c6:	2708      	movs	r7, #8
 80013c8:	2600      	movs	r6, #0
 80013ca:	4681      	mov	r9, r0
 80013cc:	469b      	mov	fp, r3
 80013ce:	e7c9      	b.n	8001364 <__aeabi_dmul+0x48>
 80013d0:	0032      	movs	r2, r6
 80013d2:	4658      	mov	r0, fp
 80013d4:	9b01      	ldr	r3, [sp, #4]
 80013d6:	4661      	mov	r1, ip
 80013d8:	9100      	str	r1, [sp, #0]
 80013da:	2802      	cmp	r0, #2
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dmul+0xc4>
 80013de:	e075      	b.n	80014cc <__aeabi_dmul+0x1b0>
 80013e0:	2803      	cmp	r0, #3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dmul+0xca>
 80013e4:	e1fe      	b.n	80017e4 <__aeabi_dmul+0x4c8>
 80013e6:	2801      	cmp	r0, #1
 80013e8:	d000      	beq.n	80013ec <__aeabi_dmul+0xd0>
 80013ea:	e12c      	b.n	8001646 <__aeabi_dmul+0x32a>
 80013ec:	2300      	movs	r3, #0
 80013ee:	2700      	movs	r7, #0
 80013f0:	2600      	movs	r6, #0
 80013f2:	2500      	movs	r5, #0
 80013f4:	033f      	lsls	r7, r7, #12
 80013f6:	0d2a      	lsrs	r2, r5, #20
 80013f8:	0b3f      	lsrs	r7, r7, #12
 80013fa:	48b3      	ldr	r0, [pc, #716]	; (80016c8 <__aeabi_dmul+0x3ac>)
 80013fc:	0512      	lsls	r2, r2, #20
 80013fe:	433a      	orrs	r2, r7
 8001400:	4002      	ands	r2, r0
 8001402:	051b      	lsls	r3, r3, #20
 8001404:	4313      	orrs	r3, r2
 8001406:	9a00      	ldr	r2, [sp, #0]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	07d1      	lsls	r1, r2, #31
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	430b      	orrs	r3, r1
 8001410:	0030      	movs	r0, r6
 8001412:	0019      	movs	r1, r3
 8001414:	b007      	add	sp, #28
 8001416:	bc3c      	pop	{r2, r3, r4, r5}
 8001418:	4690      	mov	r8, r2
 800141a:	4699      	mov	r9, r3
 800141c:	46a2      	mov	sl, r4
 800141e:	46ab      	mov	fp, r5
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001422:	465b      	mov	r3, fp
 8001424:	433b      	orrs	r3, r7
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	d100      	bne.n	800142c <__aeabi_dmul+0x110>
 800142a:	e12f      	b.n	800168c <__aeabi_dmul+0x370>
 800142c:	2f00      	cmp	r7, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x116>
 8001430:	e1a5      	b.n	800177e <__aeabi_dmul+0x462>
 8001432:	0038      	movs	r0, r7
 8001434:	f000 fe6e 	bl	8002114 <__clzsi2>
 8001438:	0003      	movs	r3, r0
 800143a:	3b0b      	subs	r3, #11
 800143c:	2b1c      	cmp	r3, #28
 800143e:	dd00      	ble.n	8001442 <__aeabi_dmul+0x126>
 8001440:	e196      	b.n	8001770 <__aeabi_dmul+0x454>
 8001442:	221d      	movs	r2, #29
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	465a      	mov	r2, fp
 8001448:	0001      	movs	r1, r0
 800144a:	40da      	lsrs	r2, r3
 800144c:	465e      	mov	r6, fp
 800144e:	3908      	subs	r1, #8
 8001450:	408f      	lsls	r7, r1
 8001452:	0013      	movs	r3, r2
 8001454:	408e      	lsls	r6, r1
 8001456:	433b      	orrs	r3, r7
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	4b9c      	ldr	r3, [pc, #624]	; (80016cc <__aeabi_dmul+0x3b0>)
 800145c:	2700      	movs	r7, #0
 800145e:	1a1b      	subs	r3, r3, r0
 8001460:	4699      	mov	r9, r3
 8001462:	2300      	movs	r3, #0
 8001464:	469b      	mov	fp, r3
 8001466:	e77d      	b.n	8001364 <__aeabi_dmul+0x48>
 8001468:	4641      	mov	r1, r8
 800146a:	4653      	mov	r3, sl
 800146c:	430b      	orrs	r3, r1
 800146e:	4993      	ldr	r1, [pc, #588]	; (80016bc <__aeabi_dmul+0x3a0>)
 8001470:	468c      	mov	ip, r1
 8001472:	44e1      	add	r9, ip
 8001474:	2b00      	cmp	r3, #0
 8001476:	d000      	beq.n	800147a <__aeabi_dmul+0x15e>
 8001478:	e11a      	b.n	80016b0 <__aeabi_dmul+0x394>
 800147a:	2202      	movs	r2, #2
 800147c:	2002      	movs	r0, #2
 800147e:	4317      	orrs	r7, r2
 8001480:	2200      	movs	r2, #0
 8001482:	e78c      	b.n	800139e <__aeabi_dmul+0x82>
 8001484:	4313      	orrs	r3, r2
 8001486:	d100      	bne.n	800148a <__aeabi_dmul+0x16e>
 8001488:	e10d      	b.n	80016a6 <__aeabi_dmul+0x38a>
 800148a:	4643      	mov	r3, r8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x176>
 8001490:	e181      	b.n	8001796 <__aeabi_dmul+0x47a>
 8001492:	4640      	mov	r0, r8
 8001494:	f000 fe3e 	bl	8002114 <__clzsi2>
 8001498:	0002      	movs	r2, r0
 800149a:	3a0b      	subs	r2, #11
 800149c:	2a1c      	cmp	r2, #28
 800149e:	dd00      	ble.n	80014a2 <__aeabi_dmul+0x186>
 80014a0:	e172      	b.n	8001788 <__aeabi_dmul+0x46c>
 80014a2:	0001      	movs	r1, r0
 80014a4:	4643      	mov	r3, r8
 80014a6:	3908      	subs	r1, #8
 80014a8:	408b      	lsls	r3, r1
 80014aa:	4698      	mov	r8, r3
 80014ac:	231d      	movs	r3, #29
 80014ae:	1a9a      	subs	r2, r3, r2
 80014b0:	4653      	mov	r3, sl
 80014b2:	40d3      	lsrs	r3, r2
 80014b4:	001a      	movs	r2, r3
 80014b6:	4643      	mov	r3, r8
 80014b8:	4313      	orrs	r3, r2
 80014ba:	4652      	mov	r2, sl
 80014bc:	408a      	lsls	r2, r1
 80014be:	4649      	mov	r1, r9
 80014c0:	1a08      	subs	r0, r1, r0
 80014c2:	4982      	ldr	r1, [pc, #520]	; (80016cc <__aeabi_dmul+0x3b0>)
 80014c4:	4689      	mov	r9, r1
 80014c6:	4481      	add	r9, r0
 80014c8:	2000      	movs	r0, #0
 80014ca:	e768      	b.n	800139e <__aeabi_dmul+0x82>
 80014cc:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <__aeabi_dmul+0x3a0>)
 80014ce:	2700      	movs	r7, #0
 80014d0:	2600      	movs	r6, #0
 80014d2:	e78e      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80014d4:	0c14      	lsrs	r4, r2, #16
 80014d6:	0412      	lsls	r2, r2, #16
 80014d8:	0c12      	lsrs	r2, r2, #16
 80014da:	0011      	movs	r1, r2
 80014dc:	0c37      	lsrs	r7, r6, #16
 80014de:	0436      	lsls	r6, r6, #16
 80014e0:	0c35      	lsrs	r5, r6, #16
 80014e2:	4379      	muls	r1, r7
 80014e4:	0028      	movs	r0, r5
 80014e6:	468c      	mov	ip, r1
 80014e8:	002e      	movs	r6, r5
 80014ea:	4360      	muls	r0, r4
 80014ec:	4460      	add	r0, ip
 80014ee:	4683      	mov	fp, r0
 80014f0:	4356      	muls	r6, r2
 80014f2:	0021      	movs	r1, r4
 80014f4:	0c30      	lsrs	r0, r6, #16
 80014f6:	4680      	mov	r8, r0
 80014f8:	4658      	mov	r0, fp
 80014fa:	4379      	muls	r1, r7
 80014fc:	4440      	add	r0, r8
 80014fe:	9102      	str	r1, [sp, #8]
 8001500:	4584      	cmp	ip, r0
 8001502:	d906      	bls.n	8001512 <__aeabi_dmul+0x1f6>
 8001504:	4688      	mov	r8, r1
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0249      	lsls	r1, r1, #9
 800150a:	468c      	mov	ip, r1
 800150c:	44e0      	add	r8, ip
 800150e:	4641      	mov	r1, r8
 8001510:	9102      	str	r1, [sp, #8]
 8001512:	0436      	lsls	r6, r6, #16
 8001514:	0c01      	lsrs	r1, r0, #16
 8001516:	0c36      	lsrs	r6, r6, #16
 8001518:	0400      	lsls	r0, r0, #16
 800151a:	468b      	mov	fp, r1
 800151c:	1981      	adds	r1, r0, r6
 800151e:	0c1e      	lsrs	r6, r3, #16
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	0c1b      	lsrs	r3, r3, #16
 8001524:	9103      	str	r1, [sp, #12]
 8001526:	0019      	movs	r1, r3
 8001528:	4379      	muls	r1, r7
 800152a:	468c      	mov	ip, r1
 800152c:	0028      	movs	r0, r5
 800152e:	4375      	muls	r5, r6
 8001530:	4465      	add	r5, ip
 8001532:	46a8      	mov	r8, r5
 8001534:	4358      	muls	r0, r3
 8001536:	0c05      	lsrs	r5, r0, #16
 8001538:	4445      	add	r5, r8
 800153a:	4377      	muls	r7, r6
 800153c:	42a9      	cmp	r1, r5
 800153e:	d903      	bls.n	8001548 <__aeabi_dmul+0x22c>
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0249      	lsls	r1, r1, #9
 8001544:	468c      	mov	ip, r1
 8001546:	4467      	add	r7, ip
 8001548:	0c29      	lsrs	r1, r5, #16
 800154a:	468c      	mov	ip, r1
 800154c:	0039      	movs	r1, r7
 800154e:	0400      	lsls	r0, r0, #16
 8001550:	0c00      	lsrs	r0, r0, #16
 8001552:	042d      	lsls	r5, r5, #16
 8001554:	182d      	adds	r5, r5, r0
 8001556:	4461      	add	r1, ip
 8001558:	44ab      	add	fp, r5
 800155a:	9105      	str	r1, [sp, #20]
 800155c:	4659      	mov	r1, fp
 800155e:	9104      	str	r1, [sp, #16]
 8001560:	9901      	ldr	r1, [sp, #4]
 8001562:	040f      	lsls	r7, r1, #16
 8001564:	0c3f      	lsrs	r7, r7, #16
 8001566:	0c08      	lsrs	r0, r1, #16
 8001568:	0039      	movs	r1, r7
 800156a:	4351      	muls	r1, r2
 800156c:	4342      	muls	r2, r0
 800156e:	4690      	mov	r8, r2
 8001570:	0002      	movs	r2, r0
 8001572:	468c      	mov	ip, r1
 8001574:	0c09      	lsrs	r1, r1, #16
 8001576:	468b      	mov	fp, r1
 8001578:	4362      	muls	r2, r4
 800157a:	437c      	muls	r4, r7
 800157c:	4444      	add	r4, r8
 800157e:	445c      	add	r4, fp
 8001580:	45a0      	cmp	r8, r4
 8001582:	d903      	bls.n	800158c <__aeabi_dmul+0x270>
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	0249      	lsls	r1, r1, #9
 8001588:	4688      	mov	r8, r1
 800158a:	4442      	add	r2, r8
 800158c:	0c21      	lsrs	r1, r4, #16
 800158e:	4688      	mov	r8, r1
 8001590:	4661      	mov	r1, ip
 8001592:	0409      	lsls	r1, r1, #16
 8001594:	0c09      	lsrs	r1, r1, #16
 8001596:	468c      	mov	ip, r1
 8001598:	0039      	movs	r1, r7
 800159a:	4359      	muls	r1, r3
 800159c:	4343      	muls	r3, r0
 800159e:	4370      	muls	r0, r6
 80015a0:	437e      	muls	r6, r7
 80015a2:	0c0f      	lsrs	r7, r1, #16
 80015a4:	18f6      	adds	r6, r6, r3
 80015a6:	0424      	lsls	r4, r4, #16
 80015a8:	19be      	adds	r6, r7, r6
 80015aa:	4464      	add	r4, ip
 80015ac:	4442      	add	r2, r8
 80015ae:	468c      	mov	ip, r1
 80015b0:	42b3      	cmp	r3, r6
 80015b2:	d903      	bls.n	80015bc <__aeabi_dmul+0x2a0>
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	4698      	mov	r8, r3
 80015ba:	4440      	add	r0, r8
 80015bc:	9b02      	ldr	r3, [sp, #8]
 80015be:	4661      	mov	r1, ip
 80015c0:	4698      	mov	r8, r3
 80015c2:	9b04      	ldr	r3, [sp, #16]
 80015c4:	0437      	lsls	r7, r6, #16
 80015c6:	4443      	add	r3, r8
 80015c8:	469b      	mov	fp, r3
 80015ca:	45ab      	cmp	fp, r5
 80015cc:	41ad      	sbcs	r5, r5
 80015ce:	426b      	negs	r3, r5
 80015d0:	040d      	lsls	r5, r1, #16
 80015d2:	9905      	ldr	r1, [sp, #20]
 80015d4:	0c2d      	lsrs	r5, r5, #16
 80015d6:	468c      	mov	ip, r1
 80015d8:	197f      	adds	r7, r7, r5
 80015da:	4467      	add	r7, ip
 80015dc:	18fd      	adds	r5, r7, r3
 80015de:	46a8      	mov	r8, r5
 80015e0:	465d      	mov	r5, fp
 80015e2:	192d      	adds	r5, r5, r4
 80015e4:	42a5      	cmp	r5, r4
 80015e6:	41a4      	sbcs	r4, r4
 80015e8:	4693      	mov	fp, r2
 80015ea:	4264      	negs	r4, r4
 80015ec:	46a4      	mov	ip, r4
 80015ee:	44c3      	add	fp, r8
 80015f0:	44dc      	add	ip, fp
 80015f2:	428f      	cmp	r7, r1
 80015f4:	41bf      	sbcs	r7, r7
 80015f6:	4598      	cmp	r8, r3
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4593      	cmp	fp, r2
 80015fc:	4192      	sbcs	r2, r2
 80015fe:	45a4      	cmp	ip, r4
 8001600:	41a4      	sbcs	r4, r4
 8001602:	425b      	negs	r3, r3
 8001604:	427f      	negs	r7, r7
 8001606:	431f      	orrs	r7, r3
 8001608:	0c36      	lsrs	r6, r6, #16
 800160a:	4252      	negs	r2, r2
 800160c:	4264      	negs	r4, r4
 800160e:	19bf      	adds	r7, r7, r6
 8001610:	4322      	orrs	r2, r4
 8001612:	18bf      	adds	r7, r7, r2
 8001614:	4662      	mov	r2, ip
 8001616:	1838      	adds	r0, r7, r0
 8001618:	0243      	lsls	r3, r0, #9
 800161a:	0dd2      	lsrs	r2, r2, #23
 800161c:	9903      	ldr	r1, [sp, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	026a      	lsls	r2, r5, #9
 8001622:	430a      	orrs	r2, r1
 8001624:	1e50      	subs	r0, r2, #1
 8001626:	4182      	sbcs	r2, r0
 8001628:	4661      	mov	r1, ip
 800162a:	0ded      	lsrs	r5, r5, #23
 800162c:	432a      	orrs	r2, r5
 800162e:	024e      	lsls	r6, r1, #9
 8001630:	4332      	orrs	r2, r6
 8001632:	01d9      	lsls	r1, r3, #7
 8001634:	d400      	bmi.n	8001638 <__aeabi_dmul+0x31c>
 8001636:	e0b3      	b.n	80017a0 <__aeabi_dmul+0x484>
 8001638:	2601      	movs	r6, #1
 800163a:	0850      	lsrs	r0, r2, #1
 800163c:	4032      	ands	r2, r6
 800163e:	4302      	orrs	r2, r0
 8001640:	07de      	lsls	r6, r3, #31
 8001642:	4332      	orrs	r2, r6
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	4c22      	ldr	r4, [pc, #136]	; (80016d0 <__aeabi_dmul+0x3b4>)
 8001648:	4454      	add	r4, sl
 800164a:	2c00      	cmp	r4, #0
 800164c:	dd62      	ble.n	8001714 <__aeabi_dmul+0x3f8>
 800164e:	0751      	lsls	r1, r2, #29
 8001650:	d009      	beq.n	8001666 <__aeabi_dmul+0x34a>
 8001652:	200f      	movs	r0, #15
 8001654:	4010      	ands	r0, r2
 8001656:	2804      	cmp	r0, #4
 8001658:	d005      	beq.n	8001666 <__aeabi_dmul+0x34a>
 800165a:	1d10      	adds	r0, r2, #4
 800165c:	4290      	cmp	r0, r2
 800165e:	4192      	sbcs	r2, r2
 8001660:	4252      	negs	r2, r2
 8001662:	189b      	adds	r3, r3, r2
 8001664:	0002      	movs	r2, r0
 8001666:	01d9      	lsls	r1, r3, #7
 8001668:	d504      	bpl.n	8001674 <__aeabi_dmul+0x358>
 800166a:	2480      	movs	r4, #128	; 0x80
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <__aeabi_dmul+0x3b8>)
 800166e:	00e4      	lsls	r4, r4, #3
 8001670:	4003      	ands	r3, r0
 8001672:	4454      	add	r4, sl
 8001674:	4818      	ldr	r0, [pc, #96]	; (80016d8 <__aeabi_dmul+0x3bc>)
 8001676:	4284      	cmp	r4, r0
 8001678:	dd00      	ble.n	800167c <__aeabi_dmul+0x360>
 800167a:	e727      	b.n	80014cc <__aeabi_dmul+0x1b0>
 800167c:	075e      	lsls	r6, r3, #29
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	08d2      	lsrs	r2, r2, #3
 8001682:	0b1f      	lsrs	r7, r3, #12
 8001684:	0563      	lsls	r3, r4, #21
 8001686:	4316      	orrs	r6, r2
 8001688:	0d5b      	lsrs	r3, r3, #21
 800168a:	e6b2      	b.n	80013f2 <__aeabi_dmul+0xd6>
 800168c:	2300      	movs	r3, #0
 800168e:	4699      	mov	r9, r3
 8001690:	3301      	adds	r3, #1
 8001692:	2704      	movs	r7, #4
 8001694:	2600      	movs	r6, #0
 8001696:	469b      	mov	fp, r3
 8001698:	e664      	b.n	8001364 <__aeabi_dmul+0x48>
 800169a:	2303      	movs	r3, #3
 800169c:	9701      	str	r7, [sp, #4]
 800169e:	4681      	mov	r9, r0
 80016a0:	270c      	movs	r7, #12
 80016a2:	469b      	mov	fp, r3
 80016a4:	e65e      	b.n	8001364 <__aeabi_dmul+0x48>
 80016a6:	2201      	movs	r2, #1
 80016a8:	2001      	movs	r0, #1
 80016aa:	4317      	orrs	r7, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	e676      	b.n	800139e <__aeabi_dmul+0x82>
 80016b0:	2303      	movs	r3, #3
 80016b2:	2003      	movs	r0, #3
 80016b4:	431f      	orrs	r7, r3
 80016b6:	4643      	mov	r3, r8
 80016b8:	e671      	b.n	800139e <__aeabi_dmul+0x82>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	08009b98 	.word	0x08009b98
 80016c8:	800fffff 	.word	0x800fffff
 80016cc:	fffffc0d 	.word	0xfffffc0d
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	2300      	movs	r3, #0
 80016de:	2780      	movs	r7, #128	; 0x80
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	033f      	lsls	r7, r7, #12
 80016e4:	2600      	movs	r6, #0
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <__aeabi_dmul+0x4d8>)
 80016e8:	e683      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80016ea:	9b01      	ldr	r3, [sp, #4]
 80016ec:	0032      	movs	r2, r6
 80016ee:	46a4      	mov	ip, r4
 80016f0:	4658      	mov	r0, fp
 80016f2:	e670      	b.n	80013d6 <__aeabi_dmul+0xba>
 80016f4:	46ac      	mov	ip, r5
 80016f6:	e66e      	b.n	80013d6 <__aeabi_dmul+0xba>
 80016f8:	2780      	movs	r7, #128	; 0x80
 80016fa:	9901      	ldr	r1, [sp, #4]
 80016fc:	033f      	lsls	r7, r7, #12
 80016fe:	4239      	tst	r1, r7
 8001700:	d02d      	beq.n	800175e <__aeabi_dmul+0x442>
 8001702:	423b      	tst	r3, r7
 8001704:	d12b      	bne.n	800175e <__aeabi_dmul+0x442>
 8001706:	431f      	orrs	r7, r3
 8001708:	033f      	lsls	r7, r7, #12
 800170a:	0b3f      	lsrs	r7, r7, #12
 800170c:	9500      	str	r5, [sp, #0]
 800170e:	0016      	movs	r6, r2
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <__aeabi_dmul+0x4d8>)
 8001712:	e66e      	b.n	80013f2 <__aeabi_dmul+0xd6>
 8001714:	2501      	movs	r5, #1
 8001716:	1b2d      	subs	r5, r5, r4
 8001718:	2d38      	cmp	r5, #56	; 0x38
 800171a:	dd00      	ble.n	800171e <__aeabi_dmul+0x402>
 800171c:	e666      	b.n	80013ec <__aeabi_dmul+0xd0>
 800171e:	2d1f      	cmp	r5, #31
 8001720:	dc40      	bgt.n	80017a4 <__aeabi_dmul+0x488>
 8001722:	4835      	ldr	r0, [pc, #212]	; (80017f8 <__aeabi_dmul+0x4dc>)
 8001724:	001c      	movs	r4, r3
 8001726:	4450      	add	r0, sl
 8001728:	0016      	movs	r6, r2
 800172a:	4082      	lsls	r2, r0
 800172c:	4084      	lsls	r4, r0
 800172e:	40ee      	lsrs	r6, r5
 8001730:	1e50      	subs	r0, r2, #1
 8001732:	4182      	sbcs	r2, r0
 8001734:	4334      	orrs	r4, r6
 8001736:	4314      	orrs	r4, r2
 8001738:	40eb      	lsrs	r3, r5
 800173a:	0762      	lsls	r2, r4, #29
 800173c:	d009      	beq.n	8001752 <__aeabi_dmul+0x436>
 800173e:	220f      	movs	r2, #15
 8001740:	4022      	ands	r2, r4
 8001742:	2a04      	cmp	r2, #4
 8001744:	d005      	beq.n	8001752 <__aeabi_dmul+0x436>
 8001746:	0022      	movs	r2, r4
 8001748:	1d14      	adds	r4, r2, #4
 800174a:	4294      	cmp	r4, r2
 800174c:	4180      	sbcs	r0, r0
 800174e:	4240      	negs	r0, r0
 8001750:	181b      	adds	r3, r3, r0
 8001752:	021a      	lsls	r2, r3, #8
 8001754:	d53e      	bpl.n	80017d4 <__aeabi_dmul+0x4b8>
 8001756:	2301      	movs	r3, #1
 8001758:	2700      	movs	r7, #0
 800175a:	2600      	movs	r6, #0
 800175c:	e649      	b.n	80013f2 <__aeabi_dmul+0xd6>
 800175e:	2780      	movs	r7, #128	; 0x80
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	431f      	orrs	r7, r3
 8001766:	033f      	lsls	r7, r7, #12
 8001768:	0b3f      	lsrs	r7, r7, #12
 800176a:	9400      	str	r4, [sp, #0]
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <__aeabi_dmul+0x4d8>)
 800176e:	e640      	b.n	80013f2 <__aeabi_dmul+0xd6>
 8001770:	0003      	movs	r3, r0
 8001772:	465a      	mov	r2, fp
 8001774:	3b28      	subs	r3, #40	; 0x28
 8001776:	409a      	lsls	r2, r3
 8001778:	2600      	movs	r6, #0
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	e66d      	b.n	800145a <__aeabi_dmul+0x13e>
 800177e:	4658      	mov	r0, fp
 8001780:	f000 fcc8 	bl	8002114 <__clzsi2>
 8001784:	3020      	adds	r0, #32
 8001786:	e657      	b.n	8001438 <__aeabi_dmul+0x11c>
 8001788:	0003      	movs	r3, r0
 800178a:	4652      	mov	r2, sl
 800178c:	3b28      	subs	r3, #40	; 0x28
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	e693      	b.n	80014be <__aeabi_dmul+0x1a2>
 8001796:	4650      	mov	r0, sl
 8001798:	f000 fcbc 	bl	8002114 <__clzsi2>
 800179c:	3020      	adds	r0, #32
 800179e:	e67b      	b.n	8001498 <__aeabi_dmul+0x17c>
 80017a0:	46ca      	mov	sl, r9
 80017a2:	e750      	b.n	8001646 <__aeabi_dmul+0x32a>
 80017a4:	201f      	movs	r0, #31
 80017a6:	001e      	movs	r6, r3
 80017a8:	4240      	negs	r0, r0
 80017aa:	1b04      	subs	r4, r0, r4
 80017ac:	40e6      	lsrs	r6, r4
 80017ae:	2d20      	cmp	r5, #32
 80017b0:	d003      	beq.n	80017ba <__aeabi_dmul+0x49e>
 80017b2:	4c12      	ldr	r4, [pc, #72]	; (80017fc <__aeabi_dmul+0x4e0>)
 80017b4:	4454      	add	r4, sl
 80017b6:	40a3      	lsls	r3, r4
 80017b8:	431a      	orrs	r2, r3
 80017ba:	1e50      	subs	r0, r2, #1
 80017bc:	4182      	sbcs	r2, r0
 80017be:	4332      	orrs	r2, r6
 80017c0:	2607      	movs	r6, #7
 80017c2:	2700      	movs	r7, #0
 80017c4:	4016      	ands	r6, r2
 80017c6:	d009      	beq.n	80017dc <__aeabi_dmul+0x4c0>
 80017c8:	200f      	movs	r0, #15
 80017ca:	2300      	movs	r3, #0
 80017cc:	4010      	ands	r0, r2
 80017ce:	0014      	movs	r4, r2
 80017d0:	2804      	cmp	r0, #4
 80017d2:	d1b9      	bne.n	8001748 <__aeabi_dmul+0x42c>
 80017d4:	0022      	movs	r2, r4
 80017d6:	075e      	lsls	r6, r3, #29
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	0b1f      	lsrs	r7, r3, #12
 80017dc:	08d2      	lsrs	r2, r2, #3
 80017de:	4316      	orrs	r6, r2
 80017e0:	2300      	movs	r3, #0
 80017e2:	e606      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80017e4:	2780      	movs	r7, #128	; 0x80
 80017e6:	033f      	lsls	r7, r7, #12
 80017e8:	431f      	orrs	r7, r3
 80017ea:	033f      	lsls	r7, r7, #12
 80017ec:	0b3f      	lsrs	r7, r7, #12
 80017ee:	0016      	movs	r6, r2
 80017f0:	4b00      	ldr	r3, [pc, #0]	; (80017f4 <__aeabi_dmul+0x4d8>)
 80017f2:	e5fe      	b.n	80013f2 <__aeabi_dmul+0xd6>
 80017f4:	000007ff 	.word	0x000007ff
 80017f8:	0000041e 	.word	0x0000041e
 80017fc:	0000043e 	.word	0x0000043e

08001800 <__aeabi_dsub>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4657      	mov	r7, sl
 8001804:	464e      	mov	r6, r9
 8001806:	4645      	mov	r5, r8
 8001808:	46de      	mov	lr, fp
 800180a:	000c      	movs	r4, r1
 800180c:	0309      	lsls	r1, r1, #12
 800180e:	b5e0      	push	{r5, r6, r7, lr}
 8001810:	0a49      	lsrs	r1, r1, #9
 8001812:	0f46      	lsrs	r6, r0, #29
 8001814:	005f      	lsls	r7, r3, #1
 8001816:	4331      	orrs	r1, r6
 8001818:	031e      	lsls	r6, r3, #12
 800181a:	0fdb      	lsrs	r3, r3, #31
 800181c:	0a76      	lsrs	r6, r6, #9
 800181e:	469b      	mov	fp, r3
 8001820:	0f53      	lsrs	r3, r2, #29
 8001822:	4333      	orrs	r3, r6
 8001824:	4ec8      	ldr	r6, [pc, #800]	; (8001b48 <__aeabi_dsub+0x348>)
 8001826:	0065      	lsls	r5, r4, #1
 8001828:	00c0      	lsls	r0, r0, #3
 800182a:	0fe4      	lsrs	r4, r4, #31
 800182c:	00d2      	lsls	r2, r2, #3
 800182e:	0d6d      	lsrs	r5, r5, #21
 8001830:	46a2      	mov	sl, r4
 8001832:	4681      	mov	r9, r0
 8001834:	0d7f      	lsrs	r7, r7, #21
 8001836:	469c      	mov	ip, r3
 8001838:	4690      	mov	r8, r2
 800183a:	42b7      	cmp	r7, r6
 800183c:	d100      	bne.n	8001840 <__aeabi_dsub+0x40>
 800183e:	e0b9      	b.n	80019b4 <__aeabi_dsub+0x1b4>
 8001840:	465b      	mov	r3, fp
 8001842:	2601      	movs	r6, #1
 8001844:	4073      	eors	r3, r6
 8001846:	469b      	mov	fp, r3
 8001848:	1bee      	subs	r6, r5, r7
 800184a:	45a3      	cmp	fp, r4
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x50>
 800184e:	e083      	b.n	8001958 <__aeabi_dsub+0x158>
 8001850:	2e00      	cmp	r6, #0
 8001852:	dd63      	ble.n	800191c <__aeabi_dsub+0x11c>
 8001854:	2f00      	cmp	r7, #0
 8001856:	d000      	beq.n	800185a <__aeabi_dsub+0x5a>
 8001858:	e0b1      	b.n	80019be <__aeabi_dsub+0x1be>
 800185a:	4663      	mov	r3, ip
 800185c:	4313      	orrs	r3, r2
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x62>
 8001860:	e123      	b.n	8001aaa <__aeabi_dsub+0x2aa>
 8001862:	1e73      	subs	r3, r6, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d000      	beq.n	800186a <__aeabi_dsub+0x6a>
 8001868:	e1ba      	b.n	8001be0 <__aeabi_dsub+0x3e0>
 800186a:	1a86      	subs	r6, r0, r2
 800186c:	4663      	mov	r3, ip
 800186e:	42b0      	cmp	r0, r6
 8001870:	4180      	sbcs	r0, r0
 8001872:	2501      	movs	r5, #1
 8001874:	1ac9      	subs	r1, r1, r3
 8001876:	4240      	negs	r0, r0
 8001878:	1a09      	subs	r1, r1, r0
 800187a:	020b      	lsls	r3, r1, #8
 800187c:	d400      	bmi.n	8001880 <__aeabi_dsub+0x80>
 800187e:	e147      	b.n	8001b10 <__aeabi_dsub+0x310>
 8001880:	0249      	lsls	r1, r1, #9
 8001882:	0a4b      	lsrs	r3, r1, #9
 8001884:	4698      	mov	r8, r3
 8001886:	4643      	mov	r3, r8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d100      	bne.n	800188e <__aeabi_dsub+0x8e>
 800188c:	e189      	b.n	8001ba2 <__aeabi_dsub+0x3a2>
 800188e:	4640      	mov	r0, r8
 8001890:	f000 fc40 	bl	8002114 <__clzsi2>
 8001894:	0003      	movs	r3, r0
 8001896:	3b08      	subs	r3, #8
 8001898:	2b1f      	cmp	r3, #31
 800189a:	dd00      	ble.n	800189e <__aeabi_dsub+0x9e>
 800189c:	e17c      	b.n	8001b98 <__aeabi_dsub+0x398>
 800189e:	2220      	movs	r2, #32
 80018a0:	0030      	movs	r0, r6
 80018a2:	1ad2      	subs	r2, r2, r3
 80018a4:	4641      	mov	r1, r8
 80018a6:	40d0      	lsrs	r0, r2
 80018a8:	4099      	lsls	r1, r3
 80018aa:	0002      	movs	r2, r0
 80018ac:	409e      	lsls	r6, r3
 80018ae:	430a      	orrs	r2, r1
 80018b0:	429d      	cmp	r5, r3
 80018b2:	dd00      	ble.n	80018b6 <__aeabi_dsub+0xb6>
 80018b4:	e16a      	b.n	8001b8c <__aeabi_dsub+0x38c>
 80018b6:	1b5d      	subs	r5, r3, r5
 80018b8:	1c6b      	adds	r3, r5, #1
 80018ba:	2b1f      	cmp	r3, #31
 80018bc:	dd00      	ble.n	80018c0 <__aeabi_dsub+0xc0>
 80018be:	e194      	b.n	8001bea <__aeabi_dsub+0x3ea>
 80018c0:	2120      	movs	r1, #32
 80018c2:	0010      	movs	r0, r2
 80018c4:	0035      	movs	r5, r6
 80018c6:	1ac9      	subs	r1, r1, r3
 80018c8:	408e      	lsls	r6, r1
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	4088      	lsls	r0, r1
 80018ce:	40dd      	lsrs	r5, r3
 80018d0:	1e71      	subs	r1, r6, #1
 80018d2:	418e      	sbcs	r6, r1
 80018d4:	0011      	movs	r1, r2
 80018d6:	2207      	movs	r2, #7
 80018d8:	4328      	orrs	r0, r5
 80018da:	2500      	movs	r5, #0
 80018dc:	4306      	orrs	r6, r0
 80018de:	4032      	ands	r2, r6
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d009      	beq.n	80018f8 <__aeabi_dsub+0xf8>
 80018e4:	230f      	movs	r3, #15
 80018e6:	4033      	ands	r3, r6
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <__aeabi_dsub+0xf8>
 80018ec:	1d33      	adds	r3, r6, #4
 80018ee:	42b3      	cmp	r3, r6
 80018f0:	41b6      	sbcs	r6, r6
 80018f2:	4276      	negs	r6, r6
 80018f4:	1989      	adds	r1, r1, r6
 80018f6:	001e      	movs	r6, r3
 80018f8:	020b      	lsls	r3, r1, #8
 80018fa:	d400      	bmi.n	80018fe <__aeabi_dsub+0xfe>
 80018fc:	e23d      	b.n	8001d7a <__aeabi_dsub+0x57a>
 80018fe:	1c6a      	adds	r2, r5, #1
 8001900:	4b91      	ldr	r3, [pc, #580]	; (8001b48 <__aeabi_dsub+0x348>)
 8001902:	0555      	lsls	r5, r2, #21
 8001904:	0d6d      	lsrs	r5, r5, #21
 8001906:	429a      	cmp	r2, r3
 8001908:	d100      	bne.n	800190c <__aeabi_dsub+0x10c>
 800190a:	e119      	b.n	8001b40 <__aeabi_dsub+0x340>
 800190c:	4a8f      	ldr	r2, [pc, #572]	; (8001b4c <__aeabi_dsub+0x34c>)
 800190e:	08f6      	lsrs	r6, r6, #3
 8001910:	400a      	ands	r2, r1
 8001912:	0757      	lsls	r7, r2, #29
 8001914:	0252      	lsls	r2, r2, #9
 8001916:	4337      	orrs	r7, r6
 8001918:	0b12      	lsrs	r2, r2, #12
 800191a:	e09b      	b.n	8001a54 <__aeabi_dsub+0x254>
 800191c:	2e00      	cmp	r6, #0
 800191e:	d000      	beq.n	8001922 <__aeabi_dsub+0x122>
 8001920:	e0c5      	b.n	8001aae <__aeabi_dsub+0x2ae>
 8001922:	1c6e      	adds	r6, r5, #1
 8001924:	0576      	lsls	r6, r6, #21
 8001926:	0d76      	lsrs	r6, r6, #21
 8001928:	2e01      	cmp	r6, #1
 800192a:	dc00      	bgt.n	800192e <__aeabi_dsub+0x12e>
 800192c:	e148      	b.n	8001bc0 <__aeabi_dsub+0x3c0>
 800192e:	4667      	mov	r7, ip
 8001930:	1a86      	subs	r6, r0, r2
 8001932:	1bcb      	subs	r3, r1, r7
 8001934:	42b0      	cmp	r0, r6
 8001936:	41bf      	sbcs	r7, r7
 8001938:	427f      	negs	r7, r7
 800193a:	46b8      	mov	r8, r7
 800193c:	001f      	movs	r7, r3
 800193e:	4643      	mov	r3, r8
 8001940:	1aff      	subs	r7, r7, r3
 8001942:	003b      	movs	r3, r7
 8001944:	46b8      	mov	r8, r7
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	d500      	bpl.n	800194c <__aeabi_dsub+0x14c>
 800194a:	e15f      	b.n	8001c0c <__aeabi_dsub+0x40c>
 800194c:	4337      	orrs	r7, r6
 800194e:	d19a      	bne.n	8001886 <__aeabi_dsub+0x86>
 8001950:	2200      	movs	r2, #0
 8001952:	2400      	movs	r4, #0
 8001954:	2500      	movs	r5, #0
 8001956:	e079      	b.n	8001a4c <__aeabi_dsub+0x24c>
 8001958:	2e00      	cmp	r6, #0
 800195a:	dc00      	bgt.n	800195e <__aeabi_dsub+0x15e>
 800195c:	e0fa      	b.n	8001b54 <__aeabi_dsub+0x354>
 800195e:	2f00      	cmp	r7, #0
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x164>
 8001962:	e08d      	b.n	8001a80 <__aeabi_dsub+0x280>
 8001964:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <__aeabi_dsub+0x348>)
 8001966:	429d      	cmp	r5, r3
 8001968:	d067      	beq.n	8001a3a <__aeabi_dsub+0x23a>
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	4667      	mov	r7, ip
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	431f      	orrs	r7, r3
 8001972:	46bc      	mov	ip, r7
 8001974:	2e38      	cmp	r6, #56	; 0x38
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x17a>
 8001978:	e152      	b.n	8001c20 <__aeabi_dsub+0x420>
 800197a:	4663      	mov	r3, ip
 800197c:	4313      	orrs	r3, r2
 800197e:	1e5a      	subs	r2, r3, #1
 8001980:	4193      	sbcs	r3, r2
 8001982:	181e      	adds	r6, r3, r0
 8001984:	4286      	cmp	r6, r0
 8001986:	4180      	sbcs	r0, r0
 8001988:	4240      	negs	r0, r0
 800198a:	1809      	adds	r1, r1, r0
 800198c:	020b      	lsls	r3, r1, #8
 800198e:	d400      	bmi.n	8001992 <__aeabi_dsub+0x192>
 8001990:	e0be      	b.n	8001b10 <__aeabi_dsub+0x310>
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <__aeabi_dsub+0x348>)
 8001994:	3501      	adds	r5, #1
 8001996:	429d      	cmp	r5, r3
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x19c>
 800199a:	e0d2      	b.n	8001b42 <__aeabi_dsub+0x342>
 800199c:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <__aeabi_dsub+0x34c>)
 800199e:	0873      	lsrs	r3, r6, #1
 80019a0:	400a      	ands	r2, r1
 80019a2:	2101      	movs	r1, #1
 80019a4:	400e      	ands	r6, r1
 80019a6:	431e      	orrs	r6, r3
 80019a8:	0851      	lsrs	r1, r2, #1
 80019aa:	07d3      	lsls	r3, r2, #31
 80019ac:	2207      	movs	r2, #7
 80019ae:	431e      	orrs	r6, r3
 80019b0:	4032      	ands	r2, r6
 80019b2:	e795      	b.n	80018e0 <__aeabi_dsub+0xe0>
 80019b4:	001e      	movs	r6, r3
 80019b6:	4316      	orrs	r6, r2
 80019b8:	d000      	beq.n	80019bc <__aeabi_dsub+0x1bc>
 80019ba:	e745      	b.n	8001848 <__aeabi_dsub+0x48>
 80019bc:	e740      	b.n	8001840 <__aeabi_dsub+0x40>
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <__aeabi_dsub+0x348>)
 80019c0:	429d      	cmp	r5, r3
 80019c2:	d03a      	beq.n	8001a3a <__aeabi_dsub+0x23a>
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	4667      	mov	r7, ip
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431f      	orrs	r7, r3
 80019cc:	46bc      	mov	ip, r7
 80019ce:	2e38      	cmp	r6, #56	; 0x38
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_dsub+0x1d4>
 80019d2:	e0eb      	b.n	8001bac <__aeabi_dsub+0x3ac>
 80019d4:	2e1f      	cmp	r6, #31
 80019d6:	dc00      	bgt.n	80019da <__aeabi_dsub+0x1da>
 80019d8:	e13a      	b.n	8001c50 <__aeabi_dsub+0x450>
 80019da:	0033      	movs	r3, r6
 80019dc:	4667      	mov	r7, ip
 80019de:	3b20      	subs	r3, #32
 80019e0:	40df      	lsrs	r7, r3
 80019e2:	003b      	movs	r3, r7
 80019e4:	2e20      	cmp	r6, #32
 80019e6:	d005      	beq.n	80019f4 <__aeabi_dsub+0x1f4>
 80019e8:	2740      	movs	r7, #64	; 0x40
 80019ea:	1bbf      	subs	r7, r7, r6
 80019ec:	4666      	mov	r6, ip
 80019ee:	40be      	lsls	r6, r7
 80019f0:	4332      	orrs	r2, r6
 80019f2:	4690      	mov	r8, r2
 80019f4:	4646      	mov	r6, r8
 80019f6:	1e72      	subs	r2, r6, #1
 80019f8:	4196      	sbcs	r6, r2
 80019fa:	4333      	orrs	r3, r6
 80019fc:	e0da      	b.n	8001bb4 <__aeabi_dsub+0x3b4>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x204>
 8001a02:	e214      	b.n	8001e2e <__aeabi_dsub+0x62e>
 8001a04:	4663      	mov	r3, ip
 8001a06:	4313      	orrs	r3, r2
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x20c>
 8001a0a:	e168      	b.n	8001cde <__aeabi_dsub+0x4de>
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	074e      	lsls	r6, r1, #29
 8001a10:	08c0      	lsrs	r0, r0, #3
 8001a12:	08c9      	lsrs	r1, r1, #3
 8001a14:	031b      	lsls	r3, r3, #12
 8001a16:	4306      	orrs	r6, r0
 8001a18:	4219      	tst	r1, r3
 8001a1a:	d008      	beq.n	8001a2e <__aeabi_dsub+0x22e>
 8001a1c:	4660      	mov	r0, ip
 8001a1e:	08c0      	lsrs	r0, r0, #3
 8001a20:	4218      	tst	r0, r3
 8001a22:	d104      	bne.n	8001a2e <__aeabi_dsub+0x22e>
 8001a24:	4663      	mov	r3, ip
 8001a26:	0001      	movs	r1, r0
 8001a28:	08d2      	lsrs	r2, r2, #3
 8001a2a:	075e      	lsls	r6, r3, #29
 8001a2c:	4316      	orrs	r6, r2
 8001a2e:	00f3      	lsls	r3, r6, #3
 8001a30:	4699      	mov	r9, r3
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	0f72      	lsrs	r2, r6, #29
 8001a36:	4d44      	ldr	r5, [pc, #272]	; (8001b48 <__aeabi_dsub+0x348>)
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	08de      	lsrs	r6, r3, #3
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <__aeabi_dsub+0x348>)
 8001a40:	074f      	lsls	r7, r1, #29
 8001a42:	4337      	orrs	r7, r6
 8001a44:	08ca      	lsrs	r2, r1, #3
 8001a46:	429d      	cmp	r5, r3
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x24c>
 8001a4a:	e06e      	b.n	8001b2a <__aeabi_dsub+0x32a>
 8001a4c:	0312      	lsls	r2, r2, #12
 8001a4e:	056d      	lsls	r5, r5, #21
 8001a50:	0b12      	lsrs	r2, r2, #12
 8001a52:	0d6d      	lsrs	r5, r5, #21
 8001a54:	2100      	movs	r1, #0
 8001a56:	0312      	lsls	r2, r2, #12
 8001a58:	0b13      	lsrs	r3, r2, #12
 8001a5a:	0d0a      	lsrs	r2, r1, #20
 8001a5c:	0512      	lsls	r2, r2, #20
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <__aeabi_dsub+0x350>)
 8001a62:	052d      	lsls	r5, r5, #20
 8001a64:	4013      	ands	r3, r2
 8001a66:	432b      	orrs	r3, r5
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	07e4      	lsls	r4, r4, #31
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	0038      	movs	r0, r7
 8001a72:	0019      	movs	r1, r3
 8001a74:	bc3c      	pop	{r2, r3, r4, r5}
 8001a76:	4690      	mov	r8, r2
 8001a78:	4699      	mov	r9, r3
 8001a7a:	46a2      	mov	sl, r4
 8001a7c:	46ab      	mov	fp, r5
 8001a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a80:	4663      	mov	r3, ip
 8001a82:	4313      	orrs	r3, r2
 8001a84:	d011      	beq.n	8001aaa <__aeabi_dsub+0x2aa>
 8001a86:	1e73      	subs	r3, r6, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d000      	beq.n	8001a8e <__aeabi_dsub+0x28e>
 8001a8c:	e107      	b.n	8001c9e <__aeabi_dsub+0x49e>
 8001a8e:	1886      	adds	r6, r0, r2
 8001a90:	4286      	cmp	r6, r0
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	4461      	add	r1, ip
 8001a96:	4240      	negs	r0, r0
 8001a98:	1809      	adds	r1, r1, r0
 8001a9a:	2501      	movs	r5, #1
 8001a9c:	020b      	lsls	r3, r1, #8
 8001a9e:	d537      	bpl.n	8001b10 <__aeabi_dsub+0x310>
 8001aa0:	2502      	movs	r5, #2
 8001aa2:	e77b      	b.n	800199c <__aeabi_dsub+0x19c>
 8001aa4:	003e      	movs	r6, r7
 8001aa6:	4661      	mov	r1, ip
 8001aa8:	4691      	mov	r9, r2
 8001aaa:	0035      	movs	r5, r6
 8001aac:	e7c5      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001aae:	465c      	mov	r4, fp
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dsub+0x2b6>
 8001ab4:	e0e1      	b.n	8001c7a <__aeabi_dsub+0x47a>
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	4303      	orrs	r3, r0
 8001aba:	d0f3      	beq.n	8001aa4 <__aeabi_dsub+0x2a4>
 8001abc:	1c73      	adds	r3, r6, #1
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x2c2>
 8001ac0:	e1ac      	b.n	8001e1c <__aeabi_dsub+0x61c>
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <__aeabi_dsub+0x348>)
 8001ac4:	429f      	cmp	r7, r3
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x2ca>
 8001ac8:	e13a      	b.n	8001d40 <__aeabi_dsub+0x540>
 8001aca:	43f3      	mvns	r3, r6
 8001acc:	2b38      	cmp	r3, #56	; 0x38
 8001ace:	dd00      	ble.n	8001ad2 <__aeabi_dsub+0x2d2>
 8001ad0:	e16f      	b.n	8001db2 <__aeabi_dsub+0x5b2>
 8001ad2:	2b1f      	cmp	r3, #31
 8001ad4:	dd00      	ble.n	8001ad8 <__aeabi_dsub+0x2d8>
 8001ad6:	e18c      	b.n	8001df2 <__aeabi_dsub+0x5f2>
 8001ad8:	2520      	movs	r5, #32
 8001ada:	000e      	movs	r6, r1
 8001adc:	1aed      	subs	r5, r5, r3
 8001ade:	40ae      	lsls	r6, r5
 8001ae0:	46b0      	mov	r8, r6
 8001ae2:	0006      	movs	r6, r0
 8001ae4:	46aa      	mov	sl, r5
 8001ae6:	40de      	lsrs	r6, r3
 8001ae8:	4645      	mov	r5, r8
 8001aea:	4335      	orrs	r5, r6
 8001aec:	002e      	movs	r6, r5
 8001aee:	4655      	mov	r5, sl
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	40a8      	lsls	r0, r5
 8001af4:	4663      	mov	r3, ip
 8001af6:	1e45      	subs	r5, r0, #1
 8001af8:	41a8      	sbcs	r0, r5
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	469c      	mov	ip, r3
 8001afe:	4330      	orrs	r0, r6
 8001b00:	1a16      	subs	r6, r2, r0
 8001b02:	42b2      	cmp	r2, r6
 8001b04:	4192      	sbcs	r2, r2
 8001b06:	4663      	mov	r3, ip
 8001b08:	4252      	negs	r2, r2
 8001b0a:	1a99      	subs	r1, r3, r2
 8001b0c:	003d      	movs	r5, r7
 8001b0e:	e6b4      	b.n	800187a <__aeabi_dsub+0x7a>
 8001b10:	2207      	movs	r2, #7
 8001b12:	4032      	ands	r2, r6
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dsub+0x31a>
 8001b18:	e6e4      	b.n	80018e4 <__aeabi_dsub+0xe4>
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <__aeabi_dsub+0x348>)
 8001b1c:	08f6      	lsrs	r6, r6, #3
 8001b1e:	074f      	lsls	r7, r1, #29
 8001b20:	4337      	orrs	r7, r6
 8001b22:	08ca      	lsrs	r2, r1, #3
 8001b24:	429d      	cmp	r5, r3
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x32a>
 8001b28:	e790      	b.n	8001a4c <__aeabi_dsub+0x24c>
 8001b2a:	003b      	movs	r3, r7
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x332>
 8001b30:	e1a6      	b.n	8001e80 <__aeabi_dsub+0x680>
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	431a      	orrs	r2, r3
 8001b38:	0312      	lsls	r2, r2, #12
 8001b3a:	0b12      	lsrs	r2, r2, #12
 8001b3c:	4d02      	ldr	r5, [pc, #8]	; (8001b48 <__aeabi_dsub+0x348>)
 8001b3e:	e789      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001b40:	0015      	movs	r5, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	2700      	movs	r7, #0
 8001b46:	e785      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	800fffff 	.word	0x800fffff
 8001b54:	2e00      	cmp	r6, #0
 8001b56:	d000      	beq.n	8001b5a <__aeabi_dsub+0x35a>
 8001b58:	e0c7      	b.n	8001cea <__aeabi_dsub+0x4ea>
 8001b5a:	1c6b      	adds	r3, r5, #1
 8001b5c:	055e      	lsls	r6, r3, #21
 8001b5e:	0d76      	lsrs	r6, r6, #21
 8001b60:	2e01      	cmp	r6, #1
 8001b62:	dc00      	bgt.n	8001b66 <__aeabi_dsub+0x366>
 8001b64:	e0f0      	b.n	8001d48 <__aeabi_dsub+0x548>
 8001b66:	4dc8      	ldr	r5, [pc, #800]	; (8001e88 <__aeabi_dsub+0x688>)
 8001b68:	42ab      	cmp	r3, r5
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0x36e>
 8001b6c:	e0b9      	b.n	8001ce2 <__aeabi_dsub+0x4e2>
 8001b6e:	1885      	adds	r5, r0, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	4285      	cmp	r5, r0
 8001b74:	4189      	sbcs	r1, r1
 8001b76:	4462      	add	r2, ip
 8001b78:	4249      	negs	r1, r1
 8001b7a:	1851      	adds	r1, r2, r1
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	07ce      	lsls	r6, r1, #31
 8001b80:	086d      	lsrs	r5, r5, #1
 8001b82:	432e      	orrs	r6, r5
 8001b84:	0849      	lsrs	r1, r1, #1
 8001b86:	4032      	ands	r2, r6
 8001b88:	001d      	movs	r5, r3
 8001b8a:	e6a9      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001b8c:	49bf      	ldr	r1, [pc, #764]	; (8001e8c <__aeabi_dsub+0x68c>)
 8001b8e:	1aed      	subs	r5, r5, r3
 8001b90:	4011      	ands	r1, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	4032      	ands	r2, r6
 8001b96:	e6a3      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001b98:	0032      	movs	r2, r6
 8001b9a:	3828      	subs	r0, #40	; 0x28
 8001b9c:	4082      	lsls	r2, r0
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	e686      	b.n	80018b0 <__aeabi_dsub+0xb0>
 8001ba2:	0030      	movs	r0, r6
 8001ba4:	f000 fab6 	bl	8002114 <__clzsi2>
 8001ba8:	3020      	adds	r0, #32
 8001baa:	e673      	b.n	8001894 <__aeabi_dsub+0x94>
 8001bac:	4663      	mov	r3, ip
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	4193      	sbcs	r3, r2
 8001bb4:	1ac6      	subs	r6, r0, r3
 8001bb6:	42b0      	cmp	r0, r6
 8001bb8:	4180      	sbcs	r0, r0
 8001bba:	4240      	negs	r0, r0
 8001bbc:	1a09      	subs	r1, r1, r0
 8001bbe:	e65c      	b.n	800187a <__aeabi_dsub+0x7a>
 8001bc0:	000e      	movs	r6, r1
 8001bc2:	4667      	mov	r7, ip
 8001bc4:	4306      	orrs	r6, r0
 8001bc6:	4317      	orrs	r7, r2
 8001bc8:	2d00      	cmp	r5, #0
 8001bca:	d15e      	bne.n	8001c8a <__aeabi_dsub+0x48a>
 8001bcc:	2e00      	cmp	r6, #0
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_dsub+0x3d2>
 8001bd0:	e0f3      	b.n	8001dba <__aeabi_dsub+0x5ba>
 8001bd2:	2f00      	cmp	r7, #0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x3d8>
 8001bd6:	e11e      	b.n	8001e16 <__aeabi_dsub+0x616>
 8001bd8:	465c      	mov	r4, fp
 8001bda:	4661      	mov	r1, ip
 8001bdc:	4691      	mov	r9, r2
 8001bde:	e72c      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001be0:	4fa9      	ldr	r7, [pc, #676]	; (8001e88 <__aeabi_dsub+0x688>)
 8001be2:	42be      	cmp	r6, r7
 8001be4:	d07b      	beq.n	8001cde <__aeabi_dsub+0x4de>
 8001be6:	001e      	movs	r6, r3
 8001be8:	e6f1      	b.n	80019ce <__aeabi_dsub+0x1ce>
 8001bea:	0010      	movs	r0, r2
 8001bec:	3d1f      	subs	r5, #31
 8001bee:	40e8      	lsrs	r0, r5
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d003      	beq.n	8001bfc <__aeabi_dsub+0x3fc>
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	1acb      	subs	r3, r1, r3
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	4316      	orrs	r6, r2
 8001bfc:	1e73      	subs	r3, r6, #1
 8001bfe:	419e      	sbcs	r6, r3
 8001c00:	2207      	movs	r2, #7
 8001c02:	4306      	orrs	r6, r0
 8001c04:	4032      	ands	r2, r6
 8001c06:	2100      	movs	r1, #0
 8001c08:	2500      	movs	r5, #0
 8001c0a:	e783      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001c0c:	1a16      	subs	r6, r2, r0
 8001c0e:	4663      	mov	r3, ip
 8001c10:	42b2      	cmp	r2, r6
 8001c12:	4180      	sbcs	r0, r0
 8001c14:	1a59      	subs	r1, r3, r1
 8001c16:	4240      	negs	r0, r0
 8001c18:	1a0b      	subs	r3, r1, r0
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	465c      	mov	r4, fp
 8001c1e:	e632      	b.n	8001886 <__aeabi_dsub+0x86>
 8001c20:	2e1f      	cmp	r6, #31
 8001c22:	dd00      	ble.n	8001c26 <__aeabi_dsub+0x426>
 8001c24:	e0ab      	b.n	8001d7e <__aeabi_dsub+0x57e>
 8001c26:	2720      	movs	r7, #32
 8001c28:	1bbb      	subs	r3, r7, r6
 8001c2a:	469a      	mov	sl, r3
 8001c2c:	4663      	mov	r3, ip
 8001c2e:	4657      	mov	r7, sl
 8001c30:	40bb      	lsls	r3, r7
 8001c32:	4699      	mov	r9, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	464f      	mov	r7, r9
 8001c38:	40f3      	lsrs	r3, r6
 8001c3a:	431f      	orrs	r7, r3
 8001c3c:	003b      	movs	r3, r7
 8001c3e:	4657      	mov	r7, sl
 8001c40:	40ba      	lsls	r2, r7
 8001c42:	1e57      	subs	r7, r2, #1
 8001c44:	41ba      	sbcs	r2, r7
 8001c46:	4313      	orrs	r3, r2
 8001c48:	4662      	mov	r2, ip
 8001c4a:	40f2      	lsrs	r2, r6
 8001c4c:	1889      	adds	r1, r1, r2
 8001c4e:	e698      	b.n	8001982 <__aeabi_dsub+0x182>
 8001c50:	2720      	movs	r7, #32
 8001c52:	1bbb      	subs	r3, r7, r6
 8001c54:	469a      	mov	sl, r3
 8001c56:	4663      	mov	r3, ip
 8001c58:	4657      	mov	r7, sl
 8001c5a:	40bb      	lsls	r3, r7
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	464f      	mov	r7, r9
 8001c62:	40f3      	lsrs	r3, r6
 8001c64:	431f      	orrs	r7, r3
 8001c66:	003b      	movs	r3, r7
 8001c68:	4657      	mov	r7, sl
 8001c6a:	40ba      	lsls	r2, r7
 8001c6c:	1e57      	subs	r7, r2, #1
 8001c6e:	41ba      	sbcs	r2, r7
 8001c70:	4313      	orrs	r3, r2
 8001c72:	4662      	mov	r2, ip
 8001c74:	40f2      	lsrs	r2, r6
 8001c76:	1a89      	subs	r1, r1, r2
 8001c78:	e79c      	b.n	8001bb4 <__aeabi_dsub+0x3b4>
 8001c7a:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <__aeabi_dsub+0x688>)
 8001c7c:	429f      	cmp	r7, r3
 8001c7e:	d05f      	beq.n	8001d40 <__aeabi_dsub+0x540>
 8001c80:	2580      	movs	r5, #128	; 0x80
 8001c82:	042d      	lsls	r5, r5, #16
 8001c84:	4273      	negs	r3, r6
 8001c86:	4329      	orrs	r1, r5
 8001c88:	e720      	b.n	8001acc <__aeabi_dsub+0x2cc>
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d10c      	bne.n	8001ca8 <__aeabi_dsub+0x4a8>
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x494>
 8001c92:	e0d0      	b.n	8001e36 <__aeabi_dsub+0x636>
 8001c94:	465c      	mov	r4, fp
 8001c96:	4661      	mov	r1, ip
 8001c98:	4691      	mov	r9, r2
 8001c9a:	4d7b      	ldr	r5, [pc, #492]	; (8001e88 <__aeabi_dsub+0x688>)
 8001c9c:	e6cd      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001c9e:	4f7a      	ldr	r7, [pc, #488]	; (8001e88 <__aeabi_dsub+0x688>)
 8001ca0:	42be      	cmp	r6, r7
 8001ca2:	d01c      	beq.n	8001cde <__aeabi_dsub+0x4de>
 8001ca4:	001e      	movs	r6, r3
 8001ca6:	e665      	b.n	8001974 <__aeabi_dsub+0x174>
 8001ca8:	2f00      	cmp	r7, #0
 8001caa:	d018      	beq.n	8001cde <__aeabi_dsub+0x4de>
 8001cac:	08c0      	lsrs	r0, r0, #3
 8001cae:	074e      	lsls	r6, r1, #29
 8001cb0:	4306      	orrs	r6, r0
 8001cb2:	2080      	movs	r0, #128	; 0x80
 8001cb4:	08c9      	lsrs	r1, r1, #3
 8001cb6:	0300      	lsls	r0, r0, #12
 8001cb8:	4201      	tst	r1, r0
 8001cba:	d008      	beq.n	8001cce <__aeabi_dsub+0x4ce>
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	08dc      	lsrs	r4, r3, #3
 8001cc0:	4204      	tst	r4, r0
 8001cc2:	d104      	bne.n	8001cce <__aeabi_dsub+0x4ce>
 8001cc4:	0021      	movs	r1, r4
 8001cc6:	46da      	mov	sl, fp
 8001cc8:	08d2      	lsrs	r2, r2, #3
 8001cca:	075e      	lsls	r6, r3, #29
 8001ccc:	4316      	orrs	r6, r2
 8001cce:	00f3      	lsls	r3, r6, #3
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	2401      	movs	r4, #1
 8001cd4:	4653      	mov	r3, sl
 8001cd6:	00c9      	lsls	r1, r1, #3
 8001cd8:	0f72      	lsrs	r2, r6, #29
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	401c      	ands	r4, r3
 8001cde:	4d6a      	ldr	r5, [pc, #424]	; (8001e88 <__aeabi_dsub+0x688>)
 8001ce0:	e6ab      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001ce2:	001d      	movs	r5, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2700      	movs	r7, #0
 8001ce8:	e6b4      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d159      	bne.n	8001da2 <__aeabi_dsub+0x5a2>
 8001cee:	000b      	movs	r3, r1
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x4f6>
 8001cf4:	e6d6      	b.n	8001aa4 <__aeabi_dsub+0x2a4>
 8001cf6:	1c73      	adds	r3, r6, #1
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x4fc>
 8001cfa:	e0b2      	b.n	8001e62 <__aeabi_dsub+0x662>
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <__aeabi_dsub+0x688>)
 8001cfe:	429f      	cmp	r7, r3
 8001d00:	d01e      	beq.n	8001d40 <__aeabi_dsub+0x540>
 8001d02:	43f3      	mvns	r3, r6
 8001d04:	2b38      	cmp	r3, #56	; 0x38
 8001d06:	dc6f      	bgt.n	8001de8 <__aeabi_dsub+0x5e8>
 8001d08:	2b1f      	cmp	r3, #31
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dsub+0x50e>
 8001d0c:	e097      	b.n	8001e3e <__aeabi_dsub+0x63e>
 8001d0e:	2520      	movs	r5, #32
 8001d10:	000e      	movs	r6, r1
 8001d12:	1aed      	subs	r5, r5, r3
 8001d14:	40ae      	lsls	r6, r5
 8001d16:	46b0      	mov	r8, r6
 8001d18:	0006      	movs	r6, r0
 8001d1a:	46aa      	mov	sl, r5
 8001d1c:	40de      	lsrs	r6, r3
 8001d1e:	4645      	mov	r5, r8
 8001d20:	4335      	orrs	r5, r6
 8001d22:	002e      	movs	r6, r5
 8001d24:	4655      	mov	r5, sl
 8001d26:	40a8      	lsls	r0, r5
 8001d28:	40d9      	lsrs	r1, r3
 8001d2a:	1e45      	subs	r5, r0, #1
 8001d2c:	41a8      	sbcs	r0, r5
 8001d2e:	448c      	add	ip, r1
 8001d30:	4306      	orrs	r6, r0
 8001d32:	18b6      	adds	r6, r6, r2
 8001d34:	4296      	cmp	r6, r2
 8001d36:	4192      	sbcs	r2, r2
 8001d38:	4251      	negs	r1, r2
 8001d3a:	4461      	add	r1, ip
 8001d3c:	003d      	movs	r5, r7
 8001d3e:	e625      	b.n	800198c <__aeabi_dsub+0x18c>
 8001d40:	003d      	movs	r5, r7
 8001d42:	4661      	mov	r1, ip
 8001d44:	4691      	mov	r9, r2
 8001d46:	e678      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001d48:	000b      	movs	r3, r1
 8001d4a:	4303      	orrs	r3, r0
 8001d4c:	2d00      	cmp	r5, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x552>
 8001d50:	e655      	b.n	80019fe <__aeabi_dsub+0x1fe>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f5      	beq.n	8001d42 <__aeabi_dsub+0x542>
 8001d56:	4663      	mov	r3, ip
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x55e>
 8001d5c:	e66d      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001d5e:	1886      	adds	r6, r0, r2
 8001d60:	4286      	cmp	r6, r0
 8001d62:	4180      	sbcs	r0, r0
 8001d64:	4461      	add	r1, ip
 8001d66:	4240      	negs	r0, r0
 8001d68:	1809      	adds	r1, r1, r0
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	020b      	lsls	r3, r1, #8
 8001d6e:	d400      	bmi.n	8001d72 <__aeabi_dsub+0x572>
 8001d70:	e6d0      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <__aeabi_dsub+0x68c>)
 8001d74:	3501      	adds	r5, #1
 8001d76:	4019      	ands	r1, r3
 8001d78:	e5b2      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001d7a:	46b1      	mov	r9, r6
 8001d7c:	e65d      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001d7e:	0033      	movs	r3, r6
 8001d80:	4667      	mov	r7, ip
 8001d82:	3b20      	subs	r3, #32
 8001d84:	40df      	lsrs	r7, r3
 8001d86:	003b      	movs	r3, r7
 8001d88:	2e20      	cmp	r6, #32
 8001d8a:	d005      	beq.n	8001d98 <__aeabi_dsub+0x598>
 8001d8c:	2740      	movs	r7, #64	; 0x40
 8001d8e:	1bbf      	subs	r7, r7, r6
 8001d90:	4666      	mov	r6, ip
 8001d92:	40be      	lsls	r6, r7
 8001d94:	4332      	orrs	r2, r6
 8001d96:	4690      	mov	r8, r2
 8001d98:	4646      	mov	r6, r8
 8001d9a:	1e72      	subs	r2, r6, #1
 8001d9c:	4196      	sbcs	r6, r2
 8001d9e:	4333      	orrs	r3, r6
 8001da0:	e5ef      	b.n	8001982 <__aeabi_dsub+0x182>
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <__aeabi_dsub+0x688>)
 8001da4:	429f      	cmp	r7, r3
 8001da6:	d0cb      	beq.n	8001d40 <__aeabi_dsub+0x540>
 8001da8:	2580      	movs	r5, #128	; 0x80
 8001daa:	042d      	lsls	r5, r5, #16
 8001dac:	4273      	negs	r3, r6
 8001dae:	4329      	orrs	r1, r5
 8001db0:	e7a8      	b.n	8001d04 <__aeabi_dsub+0x504>
 8001db2:	4308      	orrs	r0, r1
 8001db4:	1e41      	subs	r1, r0, #1
 8001db6:	4188      	sbcs	r0, r1
 8001db8:	e6a2      	b.n	8001b00 <__aeabi_dsub+0x300>
 8001dba:	2f00      	cmp	r7, #0
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x5c0>
 8001dbe:	e63c      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001dc0:	4663      	mov	r3, ip
 8001dc2:	1a86      	subs	r6, r0, r2
 8001dc4:	1acf      	subs	r7, r1, r3
 8001dc6:	42b0      	cmp	r0, r6
 8001dc8:	419b      	sbcs	r3, r3
 8001dca:	425b      	negs	r3, r3
 8001dcc:	1afb      	subs	r3, r7, r3
 8001dce:	4698      	mov	r8, r3
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	d54e      	bpl.n	8001e72 <__aeabi_dsub+0x672>
 8001dd4:	1a16      	subs	r6, r2, r0
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	42b2      	cmp	r2, r6
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	1a59      	subs	r1, r3, r1
 8001dde:	4252      	negs	r2, r2
 8001de0:	1a89      	subs	r1, r1, r2
 8001de2:	465c      	mov	r4, fp
 8001de4:	2200      	movs	r2, #0
 8001de6:	e57b      	b.n	80018e0 <__aeabi_dsub+0xe0>
 8001de8:	4301      	orrs	r1, r0
 8001dea:	000e      	movs	r6, r1
 8001dec:	1e71      	subs	r1, r6, #1
 8001dee:	418e      	sbcs	r6, r1
 8001df0:	e79f      	b.n	8001d32 <__aeabi_dsub+0x532>
 8001df2:	001d      	movs	r5, r3
 8001df4:	000e      	movs	r6, r1
 8001df6:	3d20      	subs	r5, #32
 8001df8:	40ee      	lsrs	r6, r5
 8001dfa:	46b0      	mov	r8, r6
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d004      	beq.n	8001e0a <__aeabi_dsub+0x60a>
 8001e00:	2540      	movs	r5, #64	; 0x40
 8001e02:	1aeb      	subs	r3, r5, r3
 8001e04:	4099      	lsls	r1, r3
 8001e06:	4308      	orrs	r0, r1
 8001e08:	4681      	mov	r9, r0
 8001e0a:	4648      	mov	r0, r9
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	1e41      	subs	r1, r0, #1
 8001e10:	4188      	sbcs	r0, r1
 8001e12:	4318      	orrs	r0, r3
 8001e14:	e674      	b.n	8001b00 <__aeabi_dsub+0x300>
 8001e16:	2200      	movs	r2, #0
 8001e18:	2400      	movs	r4, #0
 8001e1a:	e617      	b.n	8001a4c <__aeabi_dsub+0x24c>
 8001e1c:	1a16      	subs	r6, r2, r0
 8001e1e:	4663      	mov	r3, ip
 8001e20:	42b2      	cmp	r2, r6
 8001e22:	4192      	sbcs	r2, r2
 8001e24:	1a59      	subs	r1, r3, r1
 8001e26:	4252      	negs	r2, r2
 8001e28:	1a89      	subs	r1, r1, r2
 8001e2a:	003d      	movs	r5, r7
 8001e2c:	e525      	b.n	800187a <__aeabi_dsub+0x7a>
 8001e2e:	4661      	mov	r1, ip
 8001e30:	4691      	mov	r9, r2
 8001e32:	4d15      	ldr	r5, [pc, #84]	; (8001e88 <__aeabi_dsub+0x688>)
 8001e34:	e601      	b.n	8001a3a <__aeabi_dsub+0x23a>
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	2400      	movs	r4, #0
 8001e3a:	0312      	lsls	r2, r2, #12
 8001e3c:	e679      	b.n	8001b32 <__aeabi_dsub+0x332>
 8001e3e:	001d      	movs	r5, r3
 8001e40:	000e      	movs	r6, r1
 8001e42:	3d20      	subs	r5, #32
 8001e44:	40ee      	lsrs	r6, r5
 8001e46:	46b0      	mov	r8, r6
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d004      	beq.n	8001e56 <__aeabi_dsub+0x656>
 8001e4c:	2540      	movs	r5, #64	; 0x40
 8001e4e:	1aeb      	subs	r3, r5, r3
 8001e50:	4099      	lsls	r1, r3
 8001e52:	4308      	orrs	r0, r1
 8001e54:	4681      	mov	r9, r0
 8001e56:	464e      	mov	r6, r9
 8001e58:	4643      	mov	r3, r8
 8001e5a:	1e71      	subs	r1, r6, #1
 8001e5c:	418e      	sbcs	r6, r1
 8001e5e:	431e      	orrs	r6, r3
 8001e60:	e767      	b.n	8001d32 <__aeabi_dsub+0x532>
 8001e62:	1886      	adds	r6, r0, r2
 8001e64:	4296      	cmp	r6, r2
 8001e66:	419b      	sbcs	r3, r3
 8001e68:	4461      	add	r1, ip
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	18c9      	adds	r1, r1, r3
 8001e6e:	003d      	movs	r5, r7
 8001e70:	e58c      	b.n	800198c <__aeabi_dsub+0x18c>
 8001e72:	4647      	mov	r7, r8
 8001e74:	4337      	orrs	r7, r6
 8001e76:	d0ce      	beq.n	8001e16 <__aeabi_dsub+0x616>
 8001e78:	2207      	movs	r2, #7
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	4032      	ands	r2, r6
 8001e7e:	e649      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001e80:	2700      	movs	r7, #0
 8001e82:	003a      	movs	r2, r7
 8001e84:	e5e6      	b.n	8001a54 <__aeabi_dsub+0x254>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	000007ff 	.word	0x000007ff
 8001e8c:	ff7fffff 	.word	0xff7fffff

08001e90 <__aeabi_dcmpun>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4e0c      	ldr	r6, [pc, #48]	; (8001ec4 <__aeabi_dcmpun+0x34>)
 8001e94:	030d      	lsls	r5, r1, #12
 8001e96:	031c      	lsls	r4, r3, #12
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	0b2d      	lsrs	r5, r5, #12
 8001e9e:	0d49      	lsrs	r1, r1, #21
 8001ea0:	0b24      	lsrs	r4, r4, #12
 8001ea2:	0d5b      	lsrs	r3, r3, #21
 8001ea4:	42b1      	cmp	r1, r6
 8001ea6:	d008      	beq.n	8001eba <__aeabi_dcmpun+0x2a>
 8001ea8:	4906      	ldr	r1, [pc, #24]	; (8001ec4 <__aeabi_dcmpun+0x34>)
 8001eaa:	2000      	movs	r0, #0
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d103      	bne.n	8001eb8 <__aeabi_dcmpun+0x28>
 8001eb0:	4314      	orrs	r4, r2
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	1e44      	subs	r4, r0, #1
 8001eb6:	41a0      	sbcs	r0, r4
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d1fa      	bne.n	8001eb8 <__aeabi_dcmpun+0x28>
 8001ec2:	e7f1      	b.n	8001ea8 <__aeabi_dcmpun+0x18>
 8001ec4:	000007ff 	.word	0x000007ff

08001ec8 <__aeabi_d2iz>:
 8001ec8:	b530      	push	{r4, r5, lr}
 8001eca:	4d14      	ldr	r5, [pc, #80]	; (8001f1c <__aeabi_d2iz+0x54>)
 8001ecc:	030a      	lsls	r2, r1, #12
 8001ece:	004b      	lsls	r3, r1, #1
 8001ed0:	0b12      	lsrs	r2, r2, #12
 8001ed2:	0d5b      	lsrs	r3, r3, #21
 8001ed4:	0fc9      	lsrs	r1, r1, #31
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	42ab      	cmp	r3, r5
 8001eda:	dd11      	ble.n	8001f00 <__aeabi_d2iz+0x38>
 8001edc:	4c10      	ldr	r4, [pc, #64]	; (8001f20 <__aeabi_d2iz+0x58>)
 8001ede:	42a3      	cmp	r3, r4
 8001ee0:	dc10      	bgt.n	8001f04 <__aeabi_d2iz+0x3c>
 8001ee2:	2480      	movs	r4, #128	; 0x80
 8001ee4:	0364      	lsls	r4, r4, #13
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	4c0e      	ldr	r4, [pc, #56]	; (8001f24 <__aeabi_d2iz+0x5c>)
 8001eea:	1ae4      	subs	r4, r4, r3
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd0c      	ble.n	8001f0a <__aeabi_d2iz+0x42>
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <__aeabi_d2iz+0x60>)
 8001ef2:	1ac3      	subs	r3, r0, r3
 8001ef4:	40da      	lsrs	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	425c      	negs	r4, r3
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_d2iz+0x38>
 8001efe:	001c      	movs	r4, r3
 8001f00:	0020      	movs	r0, r4
 8001f02:	bd30      	pop	{r4, r5, pc}
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <__aeabi_d2iz+0x64>)
 8001f06:	18cc      	adds	r4, r1, r3
 8001f08:	e7fa      	b.n	8001f00 <__aeabi_d2iz+0x38>
 8001f0a:	4d09      	ldr	r5, [pc, #36]	; (8001f30 <__aeabi_d2iz+0x68>)
 8001f0c:	40e0      	lsrs	r0, r4
 8001f0e:	46ac      	mov	ip, r5
 8001f10:	4463      	add	r3, ip
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	4303      	orrs	r3, r0
 8001f18:	e7ee      	b.n	8001ef8 <__aeabi_d2iz+0x30>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000003fe 	.word	0x000003fe
 8001f20:	0000041d 	.word	0x0000041d
 8001f24:	00000433 	.word	0x00000433
 8001f28:	00000413 	.word	0x00000413
 8001f2c:	7fffffff 	.word	0x7fffffff
 8001f30:	fffffbed 	.word	0xfffffbed

08001f34 <__aeabi_i2d>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d02d      	beq.n	8001f96 <__aeabi_i2d+0x62>
 8001f3a:	17c3      	asrs	r3, r0, #31
 8001f3c:	18c5      	adds	r5, r0, r3
 8001f3e:	405d      	eors	r5, r3
 8001f40:	0fc4      	lsrs	r4, r0, #31
 8001f42:	0028      	movs	r0, r5
 8001f44:	f000 f8e6 	bl	8002114 <__clzsi2>
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <__aeabi_i2d+0x6c>)
 8001f4a:	1a1b      	subs	r3, r3, r0
 8001f4c:	055b      	lsls	r3, r3, #21
 8001f4e:	0d5b      	lsrs	r3, r3, #21
 8001f50:	280a      	cmp	r0, #10
 8001f52:	dd15      	ble.n	8001f80 <__aeabi_i2d+0x4c>
 8001f54:	380b      	subs	r0, #11
 8001f56:	4085      	lsls	r5, r0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	032d      	lsls	r5, r5, #12
 8001f5c:	0b2d      	lsrs	r5, r5, #12
 8001f5e:	2100      	movs	r1, #0
 8001f60:	0010      	movs	r0, r2
 8001f62:	032d      	lsls	r5, r5, #12
 8001f64:	0d0a      	lsrs	r2, r1, #20
 8001f66:	0b2d      	lsrs	r5, r5, #12
 8001f68:	0512      	lsls	r2, r2, #20
 8001f6a:	432a      	orrs	r2, r5
 8001f6c:	4d0d      	ldr	r5, [pc, #52]	; (8001fa4 <__aeabi_i2d+0x70>)
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	402a      	ands	r2, r5
 8001f72:	4313      	orrs	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	07e4      	lsls	r4, r4, #31
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	4323      	orrs	r3, r4
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	0002      	movs	r2, r0
 8001f82:	0029      	movs	r1, r5
 8001f84:	3215      	adds	r2, #21
 8001f86:	4091      	lsls	r1, r2
 8001f88:	000a      	movs	r2, r1
 8001f8a:	210b      	movs	r1, #11
 8001f8c:	1a08      	subs	r0, r1, r0
 8001f8e:	40c5      	lsrs	r5, r0
 8001f90:	032d      	lsls	r5, r5, #12
 8001f92:	0b2d      	lsrs	r5, r5, #12
 8001f94:	e7e3      	b.n	8001f5e <__aeabi_i2d+0x2a>
 8001f96:	2400      	movs	r4, #0
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2500      	movs	r5, #0
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	e7de      	b.n	8001f5e <__aeabi_i2d+0x2a>
 8001fa0:	0000041e 	.word	0x0000041e
 8001fa4:	800fffff 	.word	0x800fffff

08001fa8 <__aeabi_ui2d>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	1e04      	subs	r4, r0, #0
 8001fac:	d025      	beq.n	8001ffa <__aeabi_ui2d+0x52>
 8001fae:	f000 f8b1 	bl	8002114 <__clzsi2>
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <__aeabi_ui2d+0x5c>)
 8001fb4:	1a1b      	subs	r3, r3, r0
 8001fb6:	055b      	lsls	r3, r3, #21
 8001fb8:	0d5b      	lsrs	r3, r3, #21
 8001fba:	280a      	cmp	r0, #10
 8001fbc:	dd12      	ble.n	8001fe4 <__aeabi_ui2d+0x3c>
 8001fbe:	380b      	subs	r0, #11
 8001fc0:	4084      	lsls	r4, r0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	0324      	lsls	r4, r4, #12
 8001fc6:	0b24      	lsrs	r4, r4, #12
 8001fc8:	2100      	movs	r1, #0
 8001fca:	0010      	movs	r0, r2
 8001fcc:	0324      	lsls	r4, r4, #12
 8001fce:	0d0a      	lsrs	r2, r1, #20
 8001fd0:	0b24      	lsrs	r4, r4, #12
 8001fd2:	0512      	lsls	r2, r2, #20
 8001fd4:	4322      	orrs	r2, r4
 8001fd6:	4c0c      	ldr	r4, [pc, #48]	; (8002008 <__aeabi_ui2d+0x60>)
 8001fd8:	051b      	lsls	r3, r3, #20
 8001fda:	4022      	ands	r2, r4
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	0859      	lsrs	r1, r3, #1
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	0021      	movs	r1, r4
 8001fe8:	3215      	adds	r2, #21
 8001fea:	4091      	lsls	r1, r2
 8001fec:	000a      	movs	r2, r1
 8001fee:	210b      	movs	r1, #11
 8001ff0:	1a08      	subs	r0, r1, r0
 8001ff2:	40c4      	lsrs	r4, r0
 8001ff4:	0324      	lsls	r4, r4, #12
 8001ff6:	0b24      	lsrs	r4, r4, #12
 8001ff8:	e7e6      	b.n	8001fc8 <__aeabi_ui2d+0x20>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	e7e2      	b.n	8001fc8 <__aeabi_ui2d+0x20>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	0000041e 	.word	0x0000041e
 8002008:	800fffff 	.word	0x800fffff

0800200c <__aeabi_d2f>:
 800200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200e:	004c      	lsls	r4, r1, #1
 8002010:	0d64      	lsrs	r4, r4, #21
 8002012:	030b      	lsls	r3, r1, #12
 8002014:	1c62      	adds	r2, r4, #1
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	0f46      	lsrs	r6, r0, #29
 800201a:	0552      	lsls	r2, r2, #21
 800201c:	0fc9      	lsrs	r1, r1, #31
 800201e:	431e      	orrs	r6, r3
 8002020:	00c5      	lsls	r5, r0, #3
 8002022:	0d52      	lsrs	r2, r2, #21
 8002024:	2a01      	cmp	r2, #1
 8002026:	dd29      	ble.n	800207c <__aeabi_d2f+0x70>
 8002028:	4b37      	ldr	r3, [pc, #220]	; (8002108 <__aeabi_d2f+0xfc>)
 800202a:	18e7      	adds	r7, r4, r3
 800202c:	2ffe      	cmp	r7, #254	; 0xfe
 800202e:	dc1c      	bgt.n	800206a <__aeabi_d2f+0x5e>
 8002030:	2f00      	cmp	r7, #0
 8002032:	dd3b      	ble.n	80020ac <__aeabi_d2f+0xa0>
 8002034:	0180      	lsls	r0, r0, #6
 8002036:	1e43      	subs	r3, r0, #1
 8002038:	4198      	sbcs	r0, r3
 800203a:	2207      	movs	r2, #7
 800203c:	00f3      	lsls	r3, r6, #3
 800203e:	0f6d      	lsrs	r5, r5, #29
 8002040:	4303      	orrs	r3, r0
 8002042:	432b      	orrs	r3, r5
 8002044:	401a      	ands	r2, r3
 8002046:	2a00      	cmp	r2, #0
 8002048:	d004      	beq.n	8002054 <__aeabi_d2f+0x48>
 800204a:	220f      	movs	r2, #15
 800204c:	401a      	ands	r2, r3
 800204e:	2a04      	cmp	r2, #4
 8002050:	d000      	beq.n	8002054 <__aeabi_d2f+0x48>
 8002052:	3304      	adds	r3, #4
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	04d2      	lsls	r2, r2, #19
 8002058:	401a      	ands	r2, r3
 800205a:	d024      	beq.n	80020a6 <__aeabi_d2f+0x9a>
 800205c:	3701      	adds	r7, #1
 800205e:	b2fa      	uxtb	r2, r7
 8002060:	2fff      	cmp	r7, #255	; 0xff
 8002062:	d002      	beq.n	800206a <__aeabi_d2f+0x5e>
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	0a58      	lsrs	r0, r3, #9
 8002068:	e001      	b.n	800206e <__aeabi_d2f+0x62>
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	2000      	movs	r0, #0
 800206e:	0240      	lsls	r0, r0, #9
 8002070:	05d2      	lsls	r2, r2, #23
 8002072:	0a40      	lsrs	r0, r0, #9
 8002074:	07c9      	lsls	r1, r1, #31
 8002076:	4310      	orrs	r0, r2
 8002078:	4308      	orrs	r0, r1
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	4335      	orrs	r5, r6
 800207e:	2c00      	cmp	r4, #0
 8002080:	d104      	bne.n	800208c <__aeabi_d2f+0x80>
 8002082:	2d00      	cmp	r5, #0
 8002084:	d10a      	bne.n	800209c <__aeabi_d2f+0x90>
 8002086:	2200      	movs	r2, #0
 8002088:	2000      	movs	r0, #0
 800208a:	e7f0      	b.n	800206e <__aeabi_d2f+0x62>
 800208c:	2d00      	cmp	r5, #0
 800208e:	d0ec      	beq.n	800206a <__aeabi_d2f+0x5e>
 8002090:	2080      	movs	r0, #128	; 0x80
 8002092:	03c0      	lsls	r0, r0, #15
 8002094:	4330      	orrs	r0, r6
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	e7e9      	b.n	800206e <__aeabi_d2f+0x62>
 800209a:	2400      	movs	r4, #0
 800209c:	2300      	movs	r3, #0
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	0a58      	lsrs	r0, r3, #9
 80020a2:	b2e2      	uxtb	r2, r4
 80020a4:	e7e3      	b.n	800206e <__aeabi_d2f+0x62>
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	003c      	movs	r4, r7
 80020aa:	e7f8      	b.n	800209e <__aeabi_d2f+0x92>
 80020ac:	003b      	movs	r3, r7
 80020ae:	3317      	adds	r3, #23
 80020b0:	dbf3      	blt.n	800209a <__aeabi_d2f+0x8e>
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	4333      	orrs	r3, r6
 80020b8:	261e      	movs	r6, #30
 80020ba:	1bf6      	subs	r6, r6, r7
 80020bc:	2e1f      	cmp	r6, #31
 80020be:	dd14      	ble.n	80020ea <__aeabi_d2f+0xde>
 80020c0:	2202      	movs	r2, #2
 80020c2:	4252      	negs	r2, r2
 80020c4:	1bd7      	subs	r7, r2, r7
 80020c6:	001a      	movs	r2, r3
 80020c8:	40fa      	lsrs	r2, r7
 80020ca:	0017      	movs	r7, r2
 80020cc:	2e20      	cmp	r6, #32
 80020ce:	d004      	beq.n	80020da <__aeabi_d2f+0xce>
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <__aeabi_d2f+0x100>)
 80020d2:	4694      	mov	ip, r2
 80020d4:	4464      	add	r4, ip
 80020d6:	40a3      	lsls	r3, r4
 80020d8:	431d      	orrs	r5, r3
 80020da:	002b      	movs	r3, r5
 80020dc:	1e5d      	subs	r5, r3, #1
 80020de:	41ab      	sbcs	r3, r5
 80020e0:	2207      	movs	r2, #7
 80020e2:	433b      	orrs	r3, r7
 80020e4:	401a      	ands	r2, r3
 80020e6:	2700      	movs	r7, #0
 80020e8:	e7ad      	b.n	8002046 <__aeabi_d2f+0x3a>
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <__aeabi_d2f+0x104>)
 80020ec:	0028      	movs	r0, r5
 80020ee:	18a2      	adds	r2, r4, r2
 80020f0:	4095      	lsls	r5, r2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	1e6c      	subs	r4, r5, #1
 80020f6:	41a5      	sbcs	r5, r4
 80020f8:	40f0      	lsrs	r0, r6
 80020fa:	2207      	movs	r2, #7
 80020fc:	432b      	orrs	r3, r5
 80020fe:	4303      	orrs	r3, r0
 8002100:	401a      	ands	r2, r3
 8002102:	2700      	movs	r7, #0
 8002104:	e79f      	b.n	8002046 <__aeabi_d2f+0x3a>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	fffffc80 	.word	0xfffffc80
 800210c:	fffffca2 	.word	0xfffffca2
 8002110:	fffffc82 	.word	0xfffffc82

08002114 <__clzsi2>:
 8002114:	211c      	movs	r1, #28
 8002116:	2301      	movs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	4298      	cmp	r0, r3
 800211c:	d301      	bcc.n	8002122 <__clzsi2+0xe>
 800211e:	0c00      	lsrs	r0, r0, #16
 8002120:	3910      	subs	r1, #16
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	4298      	cmp	r0, r3
 8002126:	d301      	bcc.n	800212c <__clzsi2+0x18>
 8002128:	0a00      	lsrs	r0, r0, #8
 800212a:	3908      	subs	r1, #8
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	4298      	cmp	r0, r3
 8002130:	d301      	bcc.n	8002136 <__clzsi2+0x22>
 8002132:	0900      	lsrs	r0, r0, #4
 8002134:	3904      	subs	r1, #4
 8002136:	a202      	add	r2, pc, #8	; (adr r2, 8002140 <__clzsi2+0x2c>)
 8002138:	5c10      	ldrb	r0, [r2, r0]
 800213a:	1840      	adds	r0, r0, r1
 800213c:	4770      	bx	lr
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	02020304 	.word	0x02020304
 8002144:	01010101 	.word	0x01010101
	...

08002150 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	0018      	movs	r0, r3
 800215a:	230c      	movs	r3, #12
 800215c:	001a      	movs	r2, r3
 800215e:	2100      	movs	r1, #0
 8002160:	f003 f8ee 	bl	8005340 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <MX_ADC_Init+0xe4>)
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <MX_ADC_Init+0xe8>)
 8002168:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <MX_ADC_Init+0xe4>)
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	0612      	lsls	r2, r2, #24
 8002170:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <MX_ADC_Init+0xe4>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <MX_ADC_Init+0xe4>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <MX_ADC_Init+0xe4>)
 8002180:	2201      	movs	r2, #1
 8002182:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <MX_ADC_Init+0xe4>)
 8002186:	2204      	movs	r2, #4
 8002188:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <MX_ADC_Init+0xe4>)
 800218c:	2200      	movs	r2, #0
 800218e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <MX_ADC_Init+0xe4>)
 8002192:	2200      	movs	r2, #0
 8002194:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <MX_ADC_Init+0xe4>)
 8002198:	2201      	movs	r2, #1
 800219a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <MX_ADC_Init+0xe4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <MX_ADC_Init+0xe4>)
 80021a4:	22c2      	movs	r2, #194	; 0xc2
 80021a6:	32ff      	adds	r2, #255	; 0xff
 80021a8:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <MX_ADC_Init+0xe4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MX_ADC_Init+0xe4>)
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <MX_ADC_Init+0xe4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_ADC_Init+0xe4>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fcbb 	bl	8002b3c <HAL_ADC_Init>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80021ca:	f000 fa39 	bl	8002640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	0152      	lsls	r2, r2, #5
 80021da:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2207      	movs	r2, #7
 80021e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021e2:	1d3a      	adds	r2, r7, #4
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MX_ADC_Init+0xe4>)
 80021e6:	0011      	movs	r1, r2
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fe69 	bl	8002ec0 <HAL_ADC_ConfigChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80021f2:	f000 fa25 	bl	8002640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021fc:	1d3a      	adds	r2, r7, #4
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <MX_ADC_Init+0xe4>)
 8002200:	0011      	movs	r1, r2
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fe5c 	bl	8002ec0 <HAL_ADC_ConfigChannel>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d001      	beq.n	8002210 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800220c:	f000 fa18 	bl	8002640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2204      	movs	r2, #4
 8002214:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002216:	1d3a      	adds	r2, r7, #4
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_ADC_Init+0xe4>)
 800221a:	0011      	movs	r1, r2
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fe4f 	bl	8002ec0 <HAL_ADC_ConfigChannel>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8002226:	f000 fa0b 	bl	8002640 <Error_Handler>
  }

}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20000250 	.word	0x20000250
 8002238:	40012400 	.word	0x40012400

0800223c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	2314      	movs	r3, #20
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	0018      	movs	r0, r3
 800224a:	2314      	movs	r3, #20
 800224c:	001a      	movs	r2, r3
 800224e:	2100      	movs	r1, #0
 8002250:	f003 f876 	bl	8005340 <memset>
  if(adcHandle->Instance==ADC1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <HAL_ADC_MspInit+0xd4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d154      	bne.n	8002308 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	0089      	lsls	r1, r1, #2
 8002268:	430a      	orrs	r2, r1
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0289      	lsls	r1, r1, #10
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_ADC_MspInit+0xd8>)
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002296:	2114      	movs	r1, #20
 8002298:	187b      	adds	r3, r7, r1
 800229a:	2213      	movs	r2, #19
 800229c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2203      	movs	r2, #3
 80022a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	187a      	adds	r2, r7, r1
 80022ac:	2390      	movs	r3, #144	; 0x90
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f001 fa88 	bl	80037c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_ADC_MspInit+0xe0>)
 80022bc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	00d2      	lsls	r2, r2, #3
 80022de:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 80022ee:	0018      	movs	r0, r3
 80022f0:	f001 f8d2 	bl	8003498 <HAL_DMA_Init>
 80022f4:	1e03      	subs	r3, r0, #0
 80022f6:	d001      	beq.n	80022fc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80022f8:	f000 f9a2 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_ADC_MspInit+0xdc>)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b00a      	add	sp, #40	; 0x28
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40012400 	.word	0x40012400
 8002314:	40021000 	.word	0x40021000
 8002318:	2000020c 	.word	0x2000020c
 800231c:	40020008 	.word	0x40020008

08002320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_DMA_Init+0x38>)
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_DMA_Init+0x38>)
 800232c:	2101      	movs	r1, #1
 800232e:	430a      	orrs	r2, r1
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_DMA_Init+0x38>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2009      	movs	r0, #9
 8002344:	f001 f876 	bl	8003434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002348:	2009      	movs	r0, #9
 800234a:	f001 f888 	bl	800345e <HAL_NVIC_EnableIRQ>

}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40021000 	.word	0x40021000

0800235c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0289      	lsls	r1, r1, #10
 800236c:	430a      	orrs	r2, r1
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	029b      	lsls	r3, r3, #10
 8002378:	4013      	ands	r3, r2
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_GPIO_Init+0x48>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	02c9      	lsls	r1, r1, #11
 8002388:	430a      	orrs	r2, r1
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <MX_GPIO_Init+0x48>)
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	02db      	lsls	r3, r3, #11
 8002394:	4013      	ands	r3, r2
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000

080023a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_I2C1_Init+0x74>)
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <MX_I2C1_Init+0x78>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_I2C1_Init+0x74>)
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <MX_I2C1_Init+0x7c>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 200;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_I2C1_Init+0x74>)
 80023ba:	22c8      	movs	r2, #200	; 0xc8
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_I2C1_Init+0x74>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_I2C1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_I2C1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_I2C1_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_I2C1_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_I2C1_Init+0x74>)
 80023e4:	0018      	movs	r0, r3
 80023e6:	f001 fb67 	bl	8003ab8 <HAL_I2C_Init>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023ee:	f000 f927 	bl	8002640 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_I2C1_Init+0x74>)
 80023f4:	2100      	movs	r1, #0
 80023f6:	0018      	movs	r0, r3
 80023f8:	f001 fbf4 	bl	8003be4 <HAL_I2CEx_ConfigAnalogFilter>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002400:	f000 f91e 	bl	8002640 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <MX_I2C1_Init+0x74>)
 8002406:	2100      	movs	r1, #0
 8002408:	0018      	movs	r0, r3
 800240a:	f001 fc37 	bl	8003c7c <HAL_I2CEx_ConfigDigitalFilter>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002412:	f000 f915 	bl	8002640 <Error_Handler>
  }

}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000290 	.word	0x20000290
 8002420:	40005400 	.word	0x40005400
 8002424:	2000090e 	.word	0x2000090e

08002428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	2314      	movs	r3, #20
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	0018      	movs	r0, r3
 8002436:	2314      	movs	r3, #20
 8002438:	001a      	movs	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	f002 ff80 	bl	8005340 <memset>
  if(i2cHandle->Instance==I2C1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_I2C_MspInit+0x90>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d131      	bne.n	80024ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	02c9      	lsls	r1, r1, #11
 8002454:	430a      	orrs	r2, r1
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	02db      	lsls	r3, r3, #11
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	2114      	movs	r1, #20
 8002468:	187b      	adds	r3, r7, r1
 800246a:	22c0      	movs	r2, #192	; 0xc0
 800246c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2212      	movs	r2, #18
 8002472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2201      	movs	r2, #1
 8002478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2203      	movs	r2, #3
 800247e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2201      	movs	r2, #1
 8002484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	187b      	adds	r3, r7, r1
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_I2C_MspInit+0x98>)
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f001 f99b 	bl	80037c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0389      	lsls	r1, r1, #14
 800249c:	430a      	orrs	r2, r1
 800249e:	61da      	str	r2, [r3, #28]
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_I2C_MspInit+0x94>)
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b00a      	add	sp, #40	; 0x28
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40005400 	.word	0x40005400
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000400 	.word	0x48000400

080024c4 <main>:

#define BUFFER_LIMIT 3
uint16_t adc_buff[BUFFER_LIMIT] = {0};

int main(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  HAL_Init();
 80024c8:	f000 fab2 	bl	8002a30 <HAL_Init>

  SystemClock_Config();
 80024cc:	f000 f858 	bl	8002580 <SystemClock_Config>

  MX_GPIO_Init();
 80024d0:	f7ff ff44 	bl	800235c <MX_GPIO_Init>
  MX_DMA_Init();
 80024d4:	f7ff ff24 	bl	8002320 <MX_DMA_Init>
  MX_ADC_Init();
 80024d8:	f7ff fe3a 	bl	8002150 <MX_ADC_Init>
  MX_I2C1_Init();
 80024dc:	f7ff ff64 	bl	80023a8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80024e0:	f000 fa00 	bl	80028e4 <MX_USART2_UART_Init>

  RetargetInit(&huart2);
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <main+0x68>)
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f8ae 	bl	8002648 <RetargetInit>
  printf("\r\nBegin Log Session ------- \r\n\r\n");
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <main+0x6c>)
 80024ee:	0018      	movs	r0, r3
 80024f0:	f003 fe04 	bl	80060fc <puts>

  // Calibrate The ADC
  //HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buff, BUFFER_LIMIT);
 80024f4:	490f      	ldr	r1, [pc, #60]	; (8002534 <main+0x70>)
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <main+0x74>)
 80024f8:	2203      	movs	r2, #3
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 fc5e 	bl	8002dbc <HAL_ADC_Start_DMA>

  while (1)
  {
	  printf("\r\n------ ADC Cycle -------");
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <main+0x78>)
 8002502:	0018      	movs	r0, r3
 8002504:	f003 fd80 	bl	8006008 <iprintf>
	  printf("\r\nADC0 = %d\r\nADC1 = %d\r\nADC4 = %d\r\n", adc_buff[0], adc_buff[1], adc_buff[2]);
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <main+0x70>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	0019      	movs	r1, r3
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <main+0x70>)
 8002510:	885b      	ldrh	r3, [r3, #2]
 8002512:	001a      	movs	r2, r3
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <main+0x70>)
 8002516:	889b      	ldrh	r3, [r3, #4]
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <main+0x7c>)
 800251a:	f003 fd75 	bl	8006008 <iprintf>
	  HAL_Delay(1000);
 800251e:	23fa      	movs	r3, #250	; 0xfa
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	0018      	movs	r0, r3
 8002524:	f000 fae8 	bl	8002af8 <HAL_Delay>
	  printf("\r\n------ ADC Cycle -------");
 8002528:	e7ea      	b.n	8002500 <main+0x3c>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	200002dc 	.word	0x200002dc
 8002530:	08009ab8 	.word	0x08009ab8
 8002534:	200001f8 	.word	0x200001f8
 8002538:	20000250 	.word	0x20000250
 800253c:	08009ad8 	.word	0x08009ad8
 8002540:	08009af4 	.word	0x08009af4

08002544 <HAL_ADC_ConvCpltCallback>:

}

// DMA ADC Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	// ADC Print
	//printf("\r\n------ ADC Cycle -------");
	//printf("\r\nADC0 = %lu\r\nADC1 = %lu\r\nADC4 = %lu\r\n", adc_buff[0], adc_buff[1], adc_buff[2]);
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef * hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef * hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	printf("\r\n ------ ADC ERROR ------ \r\n");
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_ADC_ErrorCallback+0x18>)
 800256e:	0018      	movs	r0, r3
 8002570:	f003 fdc4 	bl	80060fc <puts>
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08009b18 	.word	0x08009b18

08002580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b099      	sub	sp, #100	; 0x64
 8002584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	242c      	movs	r4, #44	; 0x2c
 8002588:	193b      	adds	r3, r7, r4
 800258a:	0018      	movs	r0, r3
 800258c:	2334      	movs	r3, #52	; 0x34
 800258e:	001a      	movs	r2, r3
 8002590:	2100      	movs	r1, #0
 8002592:	f002 fed5 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002596:	231c      	movs	r3, #28
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	0018      	movs	r0, r3
 800259c:	2310      	movs	r3, #16
 800259e:	001a      	movs	r2, r3
 80025a0:	2100      	movs	r1, #0
 80025a2:	f002 fecd 	bl	8005340 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025a6:	003b      	movs	r3, r7
 80025a8:	0018      	movs	r0, r3
 80025aa:	231c      	movs	r3, #28
 80025ac:	001a      	movs	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	f002 fec6 	bl	8005340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80025b4:	0021      	movs	r1, r4
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2212      	movs	r2, #18
 80025ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2201      	movs	r2, #1
 80025c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2201      	movs	r2, #1
 80025c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2210      	movs	r2, #16
 80025cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2210      	movs	r2, #16
 80025d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	0018      	movs	r0, r3
 80025de:	f001 fb99 	bl	8003d14 <HAL_RCC_OscConfig>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80025e6:	f000 f82b 	bl	8002640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ea:	211c      	movs	r1, #28
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	2207      	movs	r2, #7
 80025f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2100      	movs	r1, #0
 8002608:	0018      	movs	r0, r3
 800260a:	f001 ff09 	bl	8004420 <HAL_RCC_ClockConfig>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002612:	f000 f815 	bl	8002640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002616:	003b      	movs	r3, r7
 8002618:	2222      	movs	r2, #34	; 0x22
 800261a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800261c:	003b      	movs	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002622:	003b      	movs	r3, r7
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002628:	003b      	movs	r3, r7
 800262a:	0018      	movs	r0, r3
 800262c:	f002 f870 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002634:	f000 f804 	bl	8002640 <Error_Handler>
  }
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b019      	add	sp, #100	; 0x64
 800263e:	bd90      	pop	{r4, r7, pc}

08002640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002646:	e7fe      	b.n	8002646 <Error_Handler+0x6>

08002648 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <RetargetInit+0x28>)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <RetargetInit+0x2c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6898      	ldr	r0, [r3, #8]
 800265c:	2300      	movs	r3, #0
 800265e:	2202      	movs	r2, #2
 8002660:	2100      	movs	r1, #0
 8002662:	f003 fd55 	bl	8006110 <setvbuf>
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	20000360 	.word	0x20000360
 8002674:	2000000c 	.word	0x2000000c

08002678 <_isatty>:

int _isatty(int fd) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db04      	blt.n	8002690 <_isatty+0x18>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	dc01      	bgt.n	8002690 <_isatty+0x18>
    return 1;
 800268c:	2301      	movs	r3, #1
 800268e:	e005      	b.n	800269c <_isatty+0x24>

  errno = EBADF;
 8002690:	f002 fe2c 	bl	80052ec <__errno>
 8002694:	0003      	movs	r3, r0
 8002696:	2209      	movs	r2, #9
 8002698:	601a      	str	r2, [r3, #0]
  return 0;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_write>:

int _write(int fd, char* ptr, int len) {
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d002      	beq.n	80026bc <_write+0x18>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d114      	bne.n	80026e6 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <_write+0x58>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	2517      	movs	r5, #23
 80026c6:	197c      	adds	r4, r7, r5
 80026c8:	2301      	movs	r3, #1
 80026ca:	425b      	negs	r3, r3
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	f002 f973 	bl	80049b8 <HAL_UART_Transmit>
 80026d2:	0003      	movs	r3, r0
 80026d4:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 80026d6:	197b      	adds	r3, r7, r5
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <_write+0x3e>
      return len;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	e008      	b.n	80026f4 <_write+0x50>
    else
      return EIO;
 80026e2:	2305      	movs	r3, #5
 80026e4:	e006      	b.n	80026f4 <_write+0x50>
  }
  errno = EBADF;
 80026e6:	f002 fe01 	bl	80052ec <__errno>
 80026ea:	0003      	movs	r3, r0
 80026ec:	2209      	movs	r2, #9
 80026ee:	601a      	str	r2, [r3, #0]
  return -1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	425b      	negs	r3, r3
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b006      	add	sp, #24
 80026fa:	bdb0      	pop	{r4, r5, r7, pc}
 80026fc:	20000360 	.word	0x20000360

08002700 <_close>:

int _close(int fd) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db04      	blt.n	8002718 <_close+0x18>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	dc01      	bgt.n	8002718 <_close+0x18>
    return 0;
 8002714:	2300      	movs	r3, #0
 8002716:	e006      	b.n	8002726 <_close+0x26>

  errno = EBADF;
 8002718:	f002 fde8 	bl	80052ec <__errno>
 800271c:	0003      	movs	r3, r0
 800271e:	2209      	movs	r2, #9
 8002720:	601a      	str	r2, [r3, #0]
  return -1;
 8002722:	2301      	movs	r3, #1
 8002724:	425b      	negs	r3, r3
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}

0800272e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800273a:	f002 fdd7 	bl	80052ec <__errno>
 800273e:	0003      	movs	r3, r0
 8002740:	2209      	movs	r2, #9
 8002742:	601a      	str	r2, [r3, #0]
  return -1;
 8002744:	2301      	movs	r3, #1
 8002746:	425b      	negs	r3, r3
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}

08002750 <_read>:

int _read(int fd, char* ptr, int len) {
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <_read+0x50>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	2517      	movs	r5, #23
 8002768:	197c      	adds	r4, r7, r5
 800276a:	2301      	movs	r3, #1
 800276c:	425b      	negs	r3, r3
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	2201      	movs	r2, #1
 8002772:	f002 f9cb 	bl	8004b0c <HAL_UART_Receive>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <_read+0x36>
      return 1;
 8002782:	2301      	movs	r3, #1
 8002784:	e008      	b.n	8002798 <_read+0x48>
    else
      return EIO;
 8002786:	2305      	movs	r3, #5
 8002788:	e006      	b.n	8002798 <_read+0x48>
  }
  errno = EBADF;
 800278a:	f002 fdaf 	bl	80052ec <__errno>
 800278e:	0003      	movs	r3, r0
 8002790:	2209      	movs	r2, #9
 8002792:	601a      	str	r2, [r3, #0]
  return -1;
 8002794:	2301      	movs	r3, #1
 8002796:	425b      	negs	r3, r3
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b006      	add	sp, #24
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	20000360 	.word	0x20000360

080027a4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db08      	blt.n	80027c6 <_fstat+0x22>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	dc05      	bgt.n	80027c6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	0192      	lsls	r2, r2, #6
 80027c0:	605a      	str	r2, [r3, #4]
    return 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e005      	b.n	80027d2 <_fstat+0x2e>
  }

  errno = EBADF;
 80027c6:	f002 fd91 	bl	80052ec <__errno>
 80027ca:	0003      	movs	r3, r0
 80027cc:	2209      	movs	r2, #9
 80027ce:	601a      	str	r2, [r3, #0]
  return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b002      	add	sp, #8
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_MspInit+0x44>)
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_MspInit+0x44>)
 80027e8:	2101      	movs	r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_MspInit+0x44>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_MspInit+0x44>)
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_MspInit+0x44>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0549      	lsls	r1, r1, #21
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_MspInit+0x44>)
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	055b      	lsls	r3, r3, #21
 8002810:	4013      	ands	r3, r2
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	40021000 	.word	0x40021000

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <NMI_Handler+0x4>

0800282a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <HardFault_Handler+0x4>

08002830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002848:	f000 f93a 	bl	8002ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <DMA1_Channel1_IRQHandler+0x14>)
 800285a:	0018      	movs	r0, r3
 800285c:	f000 feca 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	2000020c 	.word	0x2000020c

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f002 fd26 	bl	80052ec <__errno>
 80028a0:	0003      	movs	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	425b      	negs	r3, r3
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	18d2      	adds	r2, r2, r3
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <_sbrk+0x64>)
 80028bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b006      	add	sp, #24
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20004000 	.word	0x20004000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	20000200 	.word	0x20000200
 80028d4:	20000370 	.word	0x20000370

080028d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_USART2_UART_Init+0x58>)
 80028ea:	4a15      	ldr	r2, [pc, #84]	; (8002940 <MX_USART2_UART_Init+0x5c>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_USART2_UART_Init+0x58>)
 80028f0:	2296      	movs	r2, #150	; 0x96
 80028f2:	0212      	lsls	r2, r2, #8
 80028f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_USART2_UART_Init+0x58>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_USART2_UART_Init+0x58>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_USART2_UART_Init+0x58>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_USART2_UART_Init+0x58>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_USART2_UART_Init+0x58>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_USART2_UART_Init+0x58>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_USART2_UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_USART2_UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <MX_USART2_UART_Init+0x58>)
 8002928:	0018      	movs	r0, r3
 800292a:	f001 fff1 	bl	8004910 <HAL_UART_Init>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002932:	f7ff fe85 	bl	8002640 <Error_Handler>
  }

}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200002dc 	.word	0x200002dc
 8002940:	40004400 	.word	0x40004400

08002944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	2314      	movs	r3, #20
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	0018      	movs	r0, r3
 8002952:	2314      	movs	r3, #20
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f002 fcf2 	bl	8005340 <memset>
  if(uartHandle->Instance==USART2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_UART_MspInit+0x90>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d132      	bne.n	80029cc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_UART_MspInit+0x94>)
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_UART_MspInit+0x94>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	0289      	lsls	r1, r1, #10
 8002970:	430a      	orrs	r2, r1
 8002972:	61da      	str	r2, [r3, #28]
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_UART_MspInit+0x94>)
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_UART_MspInit+0x94>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_UART_MspInit+0x94>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	0289      	lsls	r1, r1, #10
 800298c:	430a      	orrs	r2, r1
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_UART_MspInit+0x94>)
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	029b      	lsls	r3, r3, #10
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800299e:	2114      	movs	r1, #20
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2202      	movs	r2, #2
 80029aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	2203      	movs	r2, #3
 80029b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	2201      	movs	r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	187a      	adds	r2, r7, r1
 80029c0:	2390      	movs	r3, #144	; 0x90
 80029c2:	05db      	lsls	r3, r3, #23
 80029c4:	0011      	movs	r1, r2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fefe 	bl	80037c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b00a      	add	sp, #40	; 0x28
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40021000 	.word	0x40021000

080029dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029dc:	480d      	ldr	r0, [pc, #52]	; (8002a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e0:	480d      	ldr	r0, [pc, #52]	; (8002a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80029e2:	490e      	ldr	r1, [pc, #56]	; (8002a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <LoopForever+0xe>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e8:	e002      	b.n	80029f0 <LoopCopyDataInit>

080029ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ee:	3304      	adds	r3, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f4:	d3f9      	bcc.n	80029ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f6:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f8:	4c0b      	ldr	r4, [pc, #44]	; (8002a28 <LoopForever+0x16>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029fc:	e001      	b.n	8002a02 <LoopFillZerobss>

080029fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a00:	3204      	adds	r2, #4

08002a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a04:	d3fb      	bcc.n	80029fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a06:	f7ff ff67 	bl	80028d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a0a:	f002 fc75 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0e:	f7ff fd59 	bl	80024c4 <main>

08002a12 <LoopForever>:

LoopForever:
    b LoopForever
 8002a12:	e7fe      	b.n	8002a12 <LoopForever>
  ldr   r0, =_estack
 8002a14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a20:	08009f18 	.word	0x08009f18
  ldr r2, =_sbss
 8002a24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a28:	2000036c 	.word	0x2000036c

08002a2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a2c:	e7fe      	b.n	8002a2c <ADC1_COMP_IRQHandler>
	...

08002a30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_Init+0x24>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_Init+0x24>)
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f000 f809 	bl	8002a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a46:	f7ff fec9 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_InitTick+0x5c>)
 8002a62:	681c      	ldr	r4, [r3, #0]
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_InitTick+0x60>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	0019      	movs	r1, r3
 8002a6a:	23fa      	movs	r3, #250	; 0xfa
 8002a6c:	0098      	lsls	r0, r3, #2
 8002a6e:	f7fd fb5d 	bl	800012c <__udivsi3>
 8002a72:	0003      	movs	r3, r0
 8002a74:	0019      	movs	r1, r3
 8002a76:	0020      	movs	r0, r4
 8002a78:	f7fd fb58 	bl	800012c <__udivsi3>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 fcfd 	bl	800347e <HAL_SYSTICK_Config>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e00f      	b.n	8002aac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d80b      	bhi.n	8002aaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	2301      	movs	r3, #1
 8002a96:	425b      	negs	r3, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 fcca 	bl	8003434 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_InitTick+0x64>)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b003      	add	sp, #12
 8002ab2:	bd90      	pop	{r4, r7, pc}
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	20000004 	.word	0x20000004

08002ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_IncTick+0x1c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	001a      	movs	r2, r3
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x20>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	18d2      	adds	r2, r2, r3
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_IncTick+0x20>)
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	20000364 	.word	0x20000364

08002ae4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_GetTick+0x10>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000364 	.word	0x20000364

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	d005      	beq.n	8002b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_Delay+0x40>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	001a      	movs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	f7ff ffe0 	bl	8002ae4 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f7      	bhi.n	8002b20 <HAL_Delay+0x28>
  {
  }
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000008 	.word	0x20000008

08002b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e125      	b.n	8002da6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2234      	movs	r2, #52	; 0x34
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff fb62 	bl	800223c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_Init+0x48>
 8002b82:	e103      	b.n	8002d8c <HAL_ADC_Init+0x250>
 8002b84:	230f      	movs	r3, #15
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d000      	beq.n	8002b90 <HAL_ADC_Init+0x54>
 8002b8e:	e0fd      	b.n	8002d8c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2204      	movs	r2, #4
 8002b98:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b9a:	d000      	beq.n	8002b9e <HAL_ADC_Init+0x62>
 8002b9c:	e0f6      	b.n	8002d8c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4a83      	ldr	r2, [pc, #524]	; (8002db0 <HAL_ADC_Init+0x274>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d112      	bne.n	8002be2 <HAL_ADC_Init+0xa6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d009      	beq.n	8002bde <HAL_ADC_Init+0xa2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0xa6>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_ADC_Init+0xa8>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2218      	movs	r2, #24
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	0899      	lsrs	r1, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4964      	ldr	r1, [pc, #400]	; (8002db4 <HAL_ADC_Init+0x278>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e1b      	ldrb	r3, [r3, #24]
 8002c2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e5b      	ldrb	r3, [r3, #25]
 8002c30:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c32:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e9b      	ldrb	r3, [r3, #26]
 8002c38:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d002      	beq.n	8002c4a <HAL_ADC_Init+0x10e>
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	015b      	lsls	r3, r3, #5
 8002c48:	e000      	b.n	8002c4c <HAL_ADC_Init+0x110>
 8002c4a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c4c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c52:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_Init+0x124>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e000      	b.n	8002c62 <HAL_ADC_Init+0x126>
 8002c60:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c62:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2124      	movs	r1, #36	; 0x24
 8002c68:	5c5b      	ldrb	r3, [r3, r1]
 8002c6a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c6c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7edb      	ldrb	r3, [r3, #27]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d115      	bne.n	8002ca8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7e9b      	ldrb	r3, [r3, #26]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0252      	lsls	r2, r2, #9
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2220      	movs	r2, #32
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	23c2      	movs	r3, #194	; 0xc2
 8002cae:	33ff      	adds	r3, #255	; 0xff
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d007      	beq.n	8002cc4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68d9      	ldr	r1, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d01b      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d017      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d013      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d00f      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00b      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d007      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d003      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d112      	bne.n	8002d3e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2107      	movs	r1, #7
 8002d24:	438a      	bics	r2, r1
 8002d26:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6959      	ldr	r1, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	2207      	movs	r2, #7
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <HAL_ADC_Init+0x27c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10b      	bne.n	8002d66 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d64:	e01c      	b.n	8002da0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	2212      	movs	r2, #18
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	2210      	movs	r2, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d82:	230f      	movs	r3, #15
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d8a:	e009      	b.n	8002da0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	2210      	movs	r2, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d98:	230f      	movs	r3, #15
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	fffffefd 	.word	0xfffffefd
 8002db4:	fffe0219 	.word	0xfffe0219
 8002db8:	833fffe7 	.word	0x833fffe7

08002dbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc8:	2317      	movs	r3, #23
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d15e      	bne.n	8002e9a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2234      	movs	r2, #52	; 0x34
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Start_DMA+0x2e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e05e      	b.n	8002ea8 <HAL_ADC_Start_DMA+0xec>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2234      	movs	r2, #52	; 0x34
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d007      	beq.n	8002e0a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fc      	adds	r4, r7, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f96b 	bl	80030dc <ADC_Enable>
 8002e06:	0003      	movs	r3, r0
 8002e08:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e0a:	2317      	movs	r3, #23
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d146      	bne.n	8002ea2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <HAL_ADC_Start_DMA+0xf4>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	0052      	lsls	r2, r2, #1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2234      	movs	r2, #52	; 0x34
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_ADC_Start_DMA+0xf8>)
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_ADC_Start_DMA+0xfc>)
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_ADC_Start_DMA+0x100>)
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	221c      	movs	r2, #28
 8002e52:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3340      	adds	r3, #64	; 0x40
 8002e7e:	0019      	movs	r1, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f000 fb50 	bl	8003528 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2104      	movs	r1, #4
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e9a:	2317      	movs	r3, #23
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b007      	add	sp, #28
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	fffff0fe 	.word	0xfffff0fe
 8002eb4:	080031d5 	.word	0x080031d5
 8002eb8:	08003289 	.word	0x08003289
 8002ebc:	080032a7 	.word	0x080032a7

08002ec0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eca:	230f      	movs	r3, #15
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	055b      	lsls	r3, r3, #21
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d011      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x46>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d00d      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x46>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d009      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x46>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d005      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x46>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d001      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x46>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2234      	movs	r2, #52	; 0x34
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x54>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0d0      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x1f6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2234      	movs	r2, #52	; 0x34
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2204      	movs	r2, #4
 8002f24:	4013      	ands	r3, r2
 8002f26:	d000      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x6a>
 8002f28:	e0b4      	b.n	8003094 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a64      	ldr	r2, [pc, #400]	; (80030c0 <HAL_ADC_ConfigChannel+0x200>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d100      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x76>
 8002f34:	e082      	b.n	800303c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	055b      	lsls	r3, r3, #21
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d037      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d033      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d02f      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d02b      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d027      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d023      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d01f      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	2b07      	cmp	r3, #7
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2107      	movs	r1, #7
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d012      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2107      	movs	r1, #7
 8002fae:	438a      	bics	r2, r1
 8002fb0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6959      	ldr	r1, [r3, #20]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d007      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x120>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b11      	cmp	r3, #17
 8002fd6:	d003      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x120>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	d163      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_ADC_ConfigChannel+0x204>)
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d009      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x140>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b11      	cmp	r3, #17
 8002ff2:	d102      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x13a>
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	03db      	lsls	r3, r3, #15
 8002ff8:	e004      	b.n	8003004 <HAL_ADC_ConfigChannel+0x144>
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	045b      	lsls	r3, r3, #17
 8002ffe:	e001      	b.n	8003004 <HAL_ADC_ConfigChannel+0x144>
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <HAL_ADC_ConfigChannel+0x204>)
 8003006:	430b      	orrs	r3, r1
 8003008:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d14a      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003012:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <HAL_ADC_ConfigChannel+0x208>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	492d      	ldr	r1, [pc, #180]	; (80030cc <HAL_ADC_ConfigChannel+0x20c>)
 8003018:	0018      	movs	r0, r3
 800301a:	f7fd f887 	bl	800012c <__udivsi3>
 800301e:	0003      	movs	r3, r0
 8003020:	001a      	movs	r2, r3
 8003022:	0013      	movs	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	189b      	adds	r3, r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800302c:	e002      	b.n	8003034 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3b01      	subs	r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f9      	bne.n	800302e <HAL_ADC_ConfigChannel+0x16e>
 800303a:	e035      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	4099      	lsls	r1, r3
 800304a:	000b      	movs	r3, r1
 800304c:	43d9      	mvns	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	400a      	ands	r2, r1
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b10      	cmp	r3, #16
 800305c:	d007      	beq.n	800306e <HAL_ADC_ConfigChannel+0x1ae>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b11      	cmp	r3, #17
 8003064:	d003      	beq.n	800306e <HAL_ADC_ConfigChannel+0x1ae>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b12      	cmp	r3, #18
 800306c:	d11c      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_ADC_ConfigChannel+0x204>)
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b10      	cmp	r3, #16
 8003078:	d007      	beq.n	800308a <HAL_ADC_ConfigChannel+0x1ca>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b11      	cmp	r3, #17
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x1c6>
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_ADC_ConfigChannel+0x210>)
 8003084:	e002      	b.n	800308c <HAL_ADC_ConfigChannel+0x1cc>
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_ADC_ConfigChannel+0x214>)
 8003088:	e000      	b.n	800308c <HAL_ADC_ConfigChannel+0x1cc>
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_ADC_ConfigChannel+0x218>)
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_ADC_ConfigChannel+0x204>)
 800308e:	400b      	ands	r3, r1
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e009      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	2220      	movs	r2, #32
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2234      	movs	r2, #52	; 0x34
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	00001001 	.word	0x00001001
 80030c4:	40012708 	.word	0x40012708
 80030c8:	20000000 	.word	0x20000000
 80030cc:	000f4240 	.word	0x000f4240
 80030d0:	ffbfffff 	.word	0xffbfffff
 80030d4:	feffffff 	.word	0xfeffffff
 80030d8:	ff7fffff 	.word	0xff7fffff

080030dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2203      	movs	r2, #3
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d112      	bne.n	8003120 <ADC_Enable+0x44>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	2b01      	cmp	r3, #1
 8003106:	d009      	beq.n	800311c <ADC_Enable+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	401a      	ands	r2, r3
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	429a      	cmp	r2, r3
 800311a:	d101      	bne.n	8003120 <ADC_Enable+0x44>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <ADC_Enable+0x46>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d14b      	bne.n	80031be <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <ADC_Enable+0xec>)
 800312e:	4013      	ands	r3, r2
 8003130:	d00d      	beq.n	800314e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	2210      	movs	r2, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2201      	movs	r2, #1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e038      	b.n	80031c0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <ADC_Enable+0xf0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	491b      	ldr	r1, [pc, #108]	; (80031d0 <ADC_Enable+0xf4>)
 8003164:	0018      	movs	r0, r3
 8003166:	f7fc ffe1 	bl	800012c <__udivsi3>
 800316a:	0003      	movs	r3, r0
 800316c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800316e:	e002      	b.n	8003176 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3b01      	subs	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f9      	bne.n	8003170 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800317c:	f7ff fcb2 	bl	8002ae4 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003184:	e014      	b.n	80031b0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003186:	f7ff fcad 	bl	8002ae4 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d90d      	bls.n	80031b0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	2210      	movs	r2, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	2201      	movs	r2, #1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d1e3      	bne.n	8003186 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b004      	add	sp, #16
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	80000017 	.word	0x80000017
 80031cc:	20000000 	.word	0x20000000
 80031d0:	000f4240 	.word	0x000f4240

080031d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	2250      	movs	r2, #80	; 0x50
 80031e8:	4013      	ands	r3, r2
 80031ea:	d140      	bne.n	800326e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4013      	ands	r3, r2
 8003206:	d12d      	bne.n	8003264 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800320c:	2b00      	cmp	r3, #0
 800320e:	d129      	bne.n	8003264 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2208      	movs	r2, #8
 8003218:	4013      	ands	r3, r2
 800321a:	2b08      	cmp	r3, #8
 800321c:	d122      	bne.n	8003264 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2204      	movs	r2, #4
 8003226:	4013      	ands	r3, r2
 8003228:	d110      	bne.n	800324c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	210c      	movs	r1, #12
 8003236:	438a      	bics	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <ADC_DMAConvCplt+0xb0>)
 8003240:	4013      	ands	r3, r2
 8003242:	2201      	movs	r2, #1
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
 800324a:	e00b      	b.n	8003264 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	2220      	movs	r2, #32
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2201      	movs	r2, #1
 800325e:	431a      	orrs	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff f96c 	bl	8002544 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800326c:	e005      	b.n	800327a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	0010      	movs	r0, r2
 8003278:	4798      	blx	r3
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	fffffefe 	.word	0xfffffefe

08003288 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff f95b 	bl	8002554 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	2240      	movs	r2, #64	; 0x40
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	2204      	movs	r2, #4
 80032c6:	431a      	orrs	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff f948 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b004      	add	sp, #16
 80032da:	bd80      	pop	{r7, pc}

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	0002      	movs	r2, r0
 80032e4:	1dfb      	adds	r3, r7, #7
 80032e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b7f      	cmp	r3, #127	; 0x7f
 80032ee:	d809      	bhi.n	8003304 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f0:	1dfb      	adds	r3, r7, #7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	001a      	movs	r2, r3
 80032f6:	231f      	movs	r3, #31
 80032f8:	401a      	ands	r2, r3
 80032fa:	4b04      	ldr	r3, [pc, #16]	; (800330c <__NVIC_EnableIRQ+0x30>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	4091      	lsls	r1, r2
 8003300:	000a      	movs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
  }
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}
 800330c:	e000e100 	.word	0xe000e100

08003310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	0002      	movs	r2, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800331e:	1dfb      	adds	r3, r7, #7
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b7f      	cmp	r3, #127	; 0x7f
 8003324:	d828      	bhi.n	8003378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003326:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <__NVIC_SetPriority+0xd4>)
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b25b      	sxtb	r3, r3
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	33c0      	adds	r3, #192	; 0xc0
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	589b      	ldr	r3, [r3, r2]
 8003336:	1dfa      	adds	r2, r7, #7
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	0011      	movs	r1, r2
 800333c:	2203      	movs	r2, #3
 800333e:	400a      	ands	r2, r1
 8003340:	00d2      	lsls	r2, r2, #3
 8003342:	21ff      	movs	r1, #255	; 0xff
 8003344:	4091      	lsls	r1, r2
 8003346:	000a      	movs	r2, r1
 8003348:	43d2      	mvns	r2, r2
 800334a:	401a      	ands	r2, r3
 800334c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	22ff      	movs	r2, #255	; 0xff
 8003354:	401a      	ands	r2, r3
 8003356:	1dfb      	adds	r3, r7, #7
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	0018      	movs	r0, r3
 800335c:	2303      	movs	r3, #3
 800335e:	4003      	ands	r3, r0
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003364:	481f      	ldr	r0, [pc, #124]	; (80033e4 <__NVIC_SetPriority+0xd4>)
 8003366:	1dfb      	adds	r3, r7, #7
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b25b      	sxtb	r3, r3
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	430a      	orrs	r2, r1
 8003370:	33c0      	adds	r3, #192	; 0xc0
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003376:	e031      	b.n	80033dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <__NVIC_SetPriority+0xd8>)
 800337a:	1dfb      	adds	r3, r7, #7
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	0019      	movs	r1, r3
 8003380:	230f      	movs	r3, #15
 8003382:	400b      	ands	r3, r1
 8003384:	3b08      	subs	r3, #8
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3306      	adds	r3, #6
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	3304      	adds	r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1dfa      	adds	r2, r7, #7
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	0011      	movs	r1, r2
 8003398:	2203      	movs	r2, #3
 800339a:	400a      	ands	r2, r1
 800339c:	00d2      	lsls	r2, r2, #3
 800339e:	21ff      	movs	r1, #255	; 0xff
 80033a0:	4091      	lsls	r1, r2
 80033a2:	000a      	movs	r2, r1
 80033a4:	43d2      	mvns	r2, r2
 80033a6:	401a      	ands	r2, r3
 80033a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	22ff      	movs	r2, #255	; 0xff
 80033b0:	401a      	ands	r2, r3
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	0018      	movs	r0, r3
 80033b8:	2303      	movs	r3, #3
 80033ba:	4003      	ands	r3, r0
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033c0:	4809      	ldr	r0, [pc, #36]	; (80033e8 <__NVIC_SetPriority+0xd8>)
 80033c2:	1dfb      	adds	r3, r7, #7
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	001c      	movs	r4, r3
 80033c8:	230f      	movs	r3, #15
 80033ca:	4023      	ands	r3, r4
 80033cc:	3b08      	subs	r3, #8
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	430a      	orrs	r2, r1
 80033d2:	3306      	adds	r3, #6
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	18c3      	adds	r3, r0, r3
 80033d8:	3304      	adds	r3, #4
 80033da:	601a      	str	r2, [r3, #0]
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b003      	add	sp, #12
 80033e2:	bd90      	pop	{r4, r7, pc}
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	4a0c      	ldr	r2, [pc, #48]	; (800342c <SysTick_Config+0x40>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fe:	2301      	movs	r3, #1
 8003400:	e010      	b.n	8003424 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <SysTick_Config+0x44>)
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	3a01      	subs	r2, #1
 8003408:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340a:	2301      	movs	r3, #1
 800340c:	425b      	negs	r3, r3
 800340e:	2103      	movs	r1, #3
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff7d 	bl	8003310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <SysTick_Config+0x44>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <SysTick_Config+0x44>)
 800341e:	2207      	movs	r2, #7
 8003420:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003422:	2300      	movs	r3, #0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00ffffff 	.word	0x00ffffff
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	210f      	movs	r1, #15
 8003440:	187b      	adds	r3, r7, r1
 8003442:	1c02      	adds	r2, r0, #0
 8003444:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	187b      	adds	r3, r7, r1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b25b      	sxtb	r3, r3
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff ff5d 	bl	8003310 <__NVIC_SetPriority>
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b004      	add	sp, #16
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	0002      	movs	r2, r0
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b25b      	sxtb	r3, r3
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff ff33 	bl	80032dc <__NVIC_EnableIRQ>
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b002      	add	sp, #8
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff ffaf 	bl	80033ec <SysTick_Config>
 800348e:	0003      	movs	r3, r0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e036      	b.n	800351c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2221      	movs	r2, #33	; 0x21
 80034b2:	2102      	movs	r1, #2
 80034b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_DMA_Init+0x8c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f946 	bl	8003790 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2221      	movs	r2, #33	; 0x21
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}  
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	ffffc00f 	.word	0xffffc00f

08003528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003536:	2317      	movs	r3, #23
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_DMA_Start_IT+0x24>
 8003548:	2302      	movs	r3, #2
 800354a:	e04f      	b.n	80035ec <HAL_DMA_Start_IT+0xc4>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	2101      	movs	r1, #1
 8003552:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2221      	movs	r2, #33	; 0x21
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d13a      	bne.n	80035d6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	2102      	movs	r1, #2
 8003566:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	438a      	bics	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f8d7 	bl	8003738 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	210e      	movs	r1, #14
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00f      	b.n	80035c4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	210a      	movs	r1, #10
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2104      	movs	r1, #4
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e007      	b.n	80035e6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035de:	2317      	movs	r3, #23
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80035e6:	2317      	movs	r3, #23
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	781b      	ldrb	r3, [r3, #0]
} 
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b006      	add	sp, #24
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2204      	movs	r2, #4
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4013      	ands	r3, r2
 800361a:	d024      	beq.n	8003666 <HAL_DMA_IRQHandler+0x72>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2204      	movs	r2, #4
 8003620:	4013      	ands	r3, r2
 8003622:	d020      	beq.n	8003666 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2220      	movs	r2, #32
 800362c:	4013      	ands	r3, r2
 800362e:	d107      	bne.n	8003640 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2104      	movs	r1, #4
 800363c:	438a      	bics	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	2104      	movs	r1, #4
 800364a:	4091      	lsls	r1, r2
 800364c:	000a      	movs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d100      	bne.n	800365a <HAL_DMA_IRQHandler+0x66>
 8003658:	e06a      	b.n	8003730 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	0010      	movs	r0, r2
 8003662:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003664:	e064      	b.n	8003730 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2202      	movs	r2, #2
 800366c:	409a      	lsls	r2, r3
 800366e:	0013      	movs	r3, r2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	d02b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xda>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2202      	movs	r2, #2
 800367a:	4013      	ands	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2220      	movs	r2, #32
 8003686:	4013      	ands	r3, r2
 8003688:	d10b      	bne.n	80036a2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	210a      	movs	r1, #10
 8003696:	438a      	bics	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2221      	movs	r2, #33	; 0x21
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2102      	movs	r1, #2
 80036ac:	4091      	lsls	r1, r2
 80036ae:	000a      	movs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d036      	beq.n	8003730 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	0010      	movs	r0, r2
 80036ca:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80036cc:	e030      	b.n	8003730 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2208      	movs	r2, #8
 80036d4:	409a      	lsls	r2, r3
 80036d6:	0013      	movs	r3, r2
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	d028      	beq.n	8003730 <HAL_DMA_IRQHandler+0x13c>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2208      	movs	r2, #8
 80036e2:	4013      	ands	r3, r2
 80036e4:	d024      	beq.n	8003730 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	210e      	movs	r1, #14
 80036f2:	438a      	bics	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2101      	movs	r1, #1
 8003700:	4091      	lsls	r1, r2
 8003702:	000a      	movs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2221      	movs	r2, #33	; 0x21
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	0010      	movs	r0, r2
 800372c:	4798      	blx	r3
    }
   }
}  
 800372e:	e7ff      	b.n	8003730 <HAL_DMA_IRQHandler+0x13c>
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	2101      	movs	r1, #1
 8003750:	4091      	lsls	r1, r2
 8003752:	000a      	movs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b10      	cmp	r3, #16
 8003764:	d108      	bne.n	8003778 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003776:	e007      	b.n	8003788 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}

08003790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <DMA_CalcBaseAndBitshift+0x30>)
 800379e:	4694      	mov	ip, r2
 80037a0:	4463      	add	r3, ip
 80037a2:	2114      	movs	r1, #20
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fc fcc1 	bl	800012c <__udivsi3>
 80037aa:	0003      	movs	r3, r0
 80037ac:	009a      	lsls	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a03      	ldr	r2, [pc, #12]	; (80037c4 <DMA_CalcBaseAndBitshift+0x34>)
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	bffdfff8 	.word	0xbffdfff8
 80037c4:	40020000 	.word	0x40020000

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d6:	e155      	b.n	8003a84 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4091      	lsls	r1, r2
 80037e2:	000a      	movs	r2, r1
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d100      	bne.n	80037f0 <HAL_GPIO_Init+0x28>
 80037ee:	e146      	b.n	8003a7e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d00b      	beq.n	8003810 <HAL_GPIO_Init+0x48>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d007      	beq.n	8003810 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003804:	2b11      	cmp	r3, #17
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b12      	cmp	r3, #18
 800380e:	d130      	bne.n	8003872 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	409a      	lsls	r2, r3
 800381e:	0013      	movs	r3, r2
 8003820:	43da      	mvns	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	0013      	movs	r3, r2
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003846:	2201      	movs	r2, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	43da      	mvns	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	2201      	movs	r2, #1
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
 8003864:	0013      	movs	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	409a      	lsls	r2, r3
 8003880:	0013      	movs	r3, r2
 8003882:	43da      	mvns	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0xea>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b12      	cmp	r3, #18
 80038b0:	d123      	bne.n	80038fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	58d3      	ldr	r3, [r2, r3]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2207      	movs	r2, #7
 80038c4:	4013      	ands	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	409a      	lsls	r2, r3
 80038cc:	0013      	movs	r3, r2
 80038ce:	43da      	mvns	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2107      	movs	r1, #7
 80038de:	400b      	ands	r3, r1
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	409a      	lsls	r2, r3
 80038e4:	0013      	movs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	6939      	ldr	r1, [r7, #16]
 80038f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	409a      	lsls	r2, r3
 8003908:	0013      	movs	r3, r2
 800390a:	43da      	mvns	r2, r3
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	401a      	ands	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	0013      	movs	r3, r2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	055b      	lsls	r3, r3, #21
 8003936:	4013      	ands	r3, r2
 8003938:	d100      	bne.n	800393c <HAL_GPIO_Init+0x174>
 800393a:	e0a0      	b.n	8003a7e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393c:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <HAL_GPIO_Init+0x2d4>)
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <HAL_GPIO_Init+0x2d4>)
 8003942:	2101      	movs	r1, #1
 8003944:	430a      	orrs	r2, r1
 8003946:	619a      	str	r2, [r3, #24]
 8003948:	4b54      	ldr	r3, [pc, #336]	; (8003a9c <HAL_GPIO_Init+0x2d4>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003954:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_GPIO_Init+0x2d8>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	589b      	ldr	r3, [r3, r2]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2203      	movs	r2, #3
 8003966:	4013      	ands	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	409a      	lsls	r2, r3
 800396e:	0013      	movs	r3, r2
 8003970:	43da      	mvns	r2, r3
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	2390      	movs	r3, #144	; 0x90
 800397c:	05db      	lsls	r3, r3, #23
 800397e:	429a      	cmp	r2, r3
 8003980:	d019      	beq.n	80039b6 <HAL_GPIO_Init+0x1ee>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <HAL_GPIO_Init+0x2dc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_GPIO_Init+0x1ea>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a46      	ldr	r2, [pc, #280]	; (8003aa8 <HAL_GPIO_Init+0x2e0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_GPIO_Init+0x1e6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a45      	ldr	r2, [pc, #276]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <HAL_GPIO_Init+0x1e2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <HAL_GPIO_Init+0x2e8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_GPIO_Init+0x1de>
 80039a2:	2304      	movs	r3, #4
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x1f0>
 80039a6:	2305      	movs	r3, #5
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x1f0>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x1f0>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x1f0>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x1f0>
 80039b6:	2300      	movs	r3, #0
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	2103      	movs	r1, #3
 80039bc:	400a      	ands	r2, r1
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039c8:	4935      	ldr	r1, [pc, #212]	; (8003aa0 <HAL_GPIO_Init+0x2d8>)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43da      	mvns	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	025b      	lsls	r3, r3, #9
 80039ee:	4013      	ands	r3, r2
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	029b      	lsls	r3, r3, #10
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2a:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43da      	mvns	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	035b      	lsls	r3, r3, #13
 8003a42:	4013      	ands	r3, r2
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	039b      	lsls	r3, r3, #14
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3301      	adds	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	40da      	lsrs	r2, r3
 8003a8c:	1e13      	subs	r3, r2, #0
 8003a8e:	d000      	beq.n	8003a92 <HAL_GPIO_Init+0x2ca>
 8003a90:	e6a2      	b.n	80037d8 <HAL_GPIO_Init+0x10>
  } 
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b006      	add	sp, #24
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	48000400 	.word	0x48000400
 8003aa8:	48000800 	.word	0x48000800
 8003aac:	48000c00 	.word	0x48000c00
 8003ab0:	48001000 	.word	0x48001000
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e082      	b.n	8003bd0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2241      	movs	r2, #65	; 0x41
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2240      	movs	r2, #64	; 0x40
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7fe fca1 	bl	8002428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2241      	movs	r2, #65	; 0x41
 8003aea:	2124      	movs	r1, #36	; 0x24
 8003aec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	438a      	bics	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4934      	ldr	r1, [pc, #208]	; (8003bd8 <HAL_I2C_Init+0x120>)
 8003b08:	400a      	ands	r2, r1
 8003b0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4931      	ldr	r1, [pc, #196]	; (8003bdc <HAL_I2C_Init+0x124>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d108      	bne.n	8003b36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2180      	movs	r1, #128	; 0x80
 8003b2e:	0209      	lsls	r1, r1, #8
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	e007      	b.n	8003b46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2184      	movs	r1, #132	; 0x84
 8003b40:	0209      	lsls	r1, r1, #8
 8003b42:	430a      	orrs	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d104      	bne.n	8003b58 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	491f      	ldr	r1, [pc, #124]	; (8003be0 <HAL_I2C_Init+0x128>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	491a      	ldr	r1, [pc, #104]	; (8003bdc <HAL_I2C_Init+0x124>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	0011      	movs	r1, r2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	021a      	lsls	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69d9      	ldr	r1, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2241      	movs	r2, #65	; 0x41
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2242      	movs	r2, #66	; 0x42
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	f0ffffff 	.word	0xf0ffffff
 8003bdc:	ffff7fff 	.word	0xffff7fff
 8003be0:	02008000 	.word	0x02008000

08003be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2241      	movs	r2, #65	; 0x41
 8003bf2:	5c9b      	ldrb	r3, [r3, r2]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d138      	bne.n	8003c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2240      	movs	r2, #64	; 0x40
 8003bfe:	5c9b      	ldrb	r3, [r3, r2]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e032      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2241      	movs	r2, #65	; 0x41
 8003c14:	2124      	movs	r1, #36	; 0x24
 8003c16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	438a      	bics	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4911      	ldr	r1, [pc, #68]	; (8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2241      	movs	r2, #65	; 0x41
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2240      	movs	r2, #64	; 0x40
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	ffffefff 	.word	0xffffefff

08003c7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2241      	movs	r2, #65	; 0x41
 8003c8a:	5c9b      	ldrb	r3, [r3, r2]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d139      	bne.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2240      	movs	r2, #64	; 0x40
 8003c96:	5c9b      	ldrb	r3, [r3, r2]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e033      	b.n	8003d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2241      	movs	r2, #65	; 0x41
 8003cac:	2124      	movs	r1, #36	; 0x24
 8003cae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2101      	movs	r1, #1
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2241      	movs	r2, #65	; 0x41
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b004      	add	sp, #16
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	fffff0ff 	.word	0xfffff0ff

08003d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f000 fb76 	bl	8004414 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d100      	bne.n	8003d34 <HAL_RCC_OscConfig+0x20>
 8003d32:	e08e      	b.n	8003e52 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d34:	4bc5      	ldr	r3, [pc, #788]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	220c      	movs	r2, #12
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00e      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d40:	4bc2      	ldr	r3, [pc, #776]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	220c      	movs	r2, #12
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d117      	bne.n	8003d7c <HAL_RCC_OscConfig+0x68>
 8003d4c:	4bbf      	ldr	r3, [pc, #764]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	23c0      	movs	r3, #192	; 0xc0
 8003d52:	025b      	lsls	r3, r3, #9
 8003d54:	401a      	ands	r2, r3
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	025b      	lsls	r3, r3, #9
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10e      	bne.n	8003d7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4bbb      	ldr	r3, [pc, #748]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	029b      	lsls	r3, r3, #10
 8003d66:	4013      	ands	r3, r2
 8003d68:	d100      	bne.n	8003d6c <HAL_RCC_OscConfig+0x58>
 8003d6a:	e071      	b.n	8003e50 <HAL_RCC_OscConfig+0x13c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d000      	beq.n	8003d76 <HAL_RCC_OscConfig+0x62>
 8003d74:	e06c      	b.n	8003e50 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f000 fb4c 	bl	8004414 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x80>
 8003d84:	4bb1      	ldr	r3, [pc, #708]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4bb0      	ldr	r3, [pc, #704]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0249      	lsls	r1, r1, #9
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e02f      	b.n	8003df4 <HAL_RCC_OscConfig+0xe0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0xa2>
 8003d9c:	4bab      	ldr	r3, [pc, #684]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4baa      	ldr	r3, [pc, #680]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003da2:	49ab      	ldr	r1, [pc, #684]	; (8004050 <HAL_RCC_OscConfig+0x33c>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4ba8      	ldr	r3, [pc, #672]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4ba7      	ldr	r3, [pc, #668]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dae:	49a9      	ldr	r1, [pc, #676]	; (8004054 <HAL_RCC_OscConfig+0x340>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e01e      	b.n	8003df4 <HAL_RCC_OscConfig+0xe0>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d10e      	bne.n	8003ddc <HAL_RCC_OscConfig+0xc8>
 8003dbe:	4ba3      	ldr	r3, [pc, #652]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4ba2      	ldr	r3, [pc, #648]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	02c9      	lsls	r1, r1, #11
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	4b9f      	ldr	r3, [pc, #636]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b9e      	ldr	r3, [pc, #632]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0249      	lsls	r1, r1, #9
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xe0>
 8003ddc:	4b9b      	ldr	r3, [pc, #620]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b9a      	ldr	r3, [pc, #616]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003de2:	499b      	ldr	r1, [pc, #620]	; (8004050 <HAL_RCC_OscConfig+0x33c>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	4b98      	ldr	r3, [pc, #608]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b97      	ldr	r3, [pc, #604]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003dee:	4999      	ldr	r1, [pc, #612]	; (8004054 <HAL_RCC_OscConfig+0x340>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d014      	beq.n	8003e26 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fe72 	bl	8002ae4 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e06:	f7fe fe6d 	bl	8002ae4 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b64      	cmp	r3, #100	; 0x64
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e2fd      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	4b8c      	ldr	r3, [pc, #560]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	029b      	lsls	r3, r3, #10
 8003e20:	4013      	ands	r3, r2
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0xf2>
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe fe5d 	bl	8002ae4 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe fe58 	bl	8002ae4 <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e2e8      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b82      	ldr	r3, [pc, #520]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x11c>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <HAL_RCC_OscConfig+0x14a>
 8003e5c:	e06c      	b.n	8003f38 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e5e:	4b7b      	ldr	r3, [pc, #492]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	220c      	movs	r2, #12
 8003e64:	4013      	ands	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e68:	4b78      	ldr	r3, [pc, #480]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d11f      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1a0>
 8003e74:	4b75      	ldr	r3, [pc, #468]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	23c0      	movs	r3, #192	; 0xc0
 8003e7a:	025b      	lsls	r3, r3, #9
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d116      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	4b71      	ldr	r3, [pc, #452]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x188>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e2bb      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	4b6b      	ldr	r3, [pc, #428]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	22f8      	movs	r2, #248	; 0xf8
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00da      	lsls	r2, r3, #3
 8003eac:	4b67      	ldr	r3, [pc, #412]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e041      	b.n	8003f38 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d024      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebc:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b62      	ldr	r3, [pc, #392]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fe0c 	bl	8002ae4 <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fe07 	bl	8002ae4 <HAL_GetTick>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e297      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	d0f1      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	22f8      	movs	r2, #248	; 0xf8
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00da      	lsls	r2, r3, #3
 8003efe:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e018      	b.n	8003f38 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b51      	ldr	r3, [pc, #324]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	438a      	bics	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fe fde7 	bl	8002ae4 <HAL_GetTick>
 8003f16:	0003      	movs	r3, r0
 8003f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7fe fde2 	bl	8002ae4 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e272      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2202      	movs	r2, #2
 8003f34:	4013      	ands	r3, r2
 8003f36:	d1f1      	bne.n	8003f1c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b40      	ldr	r3, [pc, #256]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f50:	2101      	movs	r1, #1
 8003f52:	430a      	orrs	r2, r1
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fe fdc5 	bl	8002ae4 <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fe fdc0 	bl	8002ae4 <HAL_GetTick>
 8003f64:	0002      	movs	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e250      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d0f1      	beq.n	8003f60 <HAL_RCC_OscConfig+0x24c>
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f82:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	438a      	bics	r2, r1
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fdab 	bl	8002ae4 <HAL_GetTick>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fe fda6 	bl	8002ae4 <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e236      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d1f1      	bne.n	8003f94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d100      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2a8>
 8003fba:	e0b5      	b.n	8004128 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbc:	231f      	movs	r3, #31
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc4:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	055b      	lsls	r3, r3, #21
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	0549      	lsls	r1, r1, #21
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	055b      	lsls	r3, r3, #21
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fec:	231f      	movs	r3, #31
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_RCC_OscConfig+0x344>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d11a      	bne.n	8004036 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004000:	4b15      	ldr	r3, [pc, #84]	; (8004058 <HAL_RCC_OscConfig+0x344>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <HAL_RCC_OscConfig+0x344>)
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	0049      	lsls	r1, r1, #1
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fe fd69 	bl	8002ae4 <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fe fd64 	bl	8002ae4 <HAL_GetTick>
 800401c:	0002      	movs	r2, r0
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1f4      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x344>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4013      	ands	r3, r2
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d10e      	bne.n	800405c <HAL_RCC_OscConfig+0x348>
 800403e:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	4b02      	ldr	r3, [pc, #8]	; (800404c <HAL_RCC_OscConfig+0x338>)
 8004044:	2101      	movs	r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	621a      	str	r2, [r3, #32]
 800404a:	e035      	b.n	80040b8 <HAL_RCC_OscConfig+0x3a4>
 800404c:	40021000 	.word	0x40021000
 8004050:	fffeffff 	.word	0xfffeffff
 8004054:	fffbffff 	.word	0xfffbffff
 8004058:	40007000 	.word	0x40007000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x36a>
 8004064:	4bca      	ldr	r3, [pc, #808]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	4bc9      	ldr	r3, [pc, #804]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800406a:	2101      	movs	r1, #1
 800406c:	438a      	bics	r2, r1
 800406e:	621a      	str	r2, [r3, #32]
 8004070:	4bc7      	ldr	r3, [pc, #796]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	4bc6      	ldr	r3, [pc, #792]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004076:	2104      	movs	r1, #4
 8004078:	438a      	bics	r2, r1
 800407a:	621a      	str	r2, [r3, #32]
 800407c:	e01c      	b.n	80040b8 <HAL_RCC_OscConfig+0x3a4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x38c>
 8004086:	4bc2      	ldr	r3, [pc, #776]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	4bc1      	ldr	r3, [pc, #772]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800408c:	2104      	movs	r1, #4
 800408e:	430a      	orrs	r2, r1
 8004090:	621a      	str	r2, [r3, #32]
 8004092:	4bbf      	ldr	r3, [pc, #764]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	4bbe      	ldr	r3, [pc, #760]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004098:	2101      	movs	r1, #1
 800409a:	430a      	orrs	r2, r1
 800409c:	621a      	str	r2, [r3, #32]
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0x3a4>
 80040a0:	4bbb      	ldr	r3, [pc, #748]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	4bba      	ldr	r3, [pc, #744]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	438a      	bics	r2, r1
 80040aa:	621a      	str	r2, [r3, #32]
 80040ac:	4bb8      	ldr	r3, [pc, #736]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	4bb7      	ldr	r3, [pc, #732]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040b2:	2104      	movs	r1, #4
 80040b4:	438a      	bics	r2, r1
 80040b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d014      	beq.n	80040ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c0:	f7fe fd10 	bl	8002ae4 <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	e009      	b.n	80040de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fe fd0b 	bl	8002ae4 <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4aaf      	ldr	r2, [pc, #700]	; (8004394 <HAL_RCC_OscConfig+0x680>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e19a      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	4bac      	ldr	r3, [pc, #688]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	2202      	movs	r2, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x3b6>
 80040e8:	e013      	b.n	8004112 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fe fcfb 	bl	8002ae4 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	e009      	b.n	8004108 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fe fcf6 	bl	8002ae4 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4aa5      	ldr	r2, [pc, #660]	; (8004394 <HAL_RCC_OscConfig+0x680>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e185      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	4ba1      	ldr	r3, [pc, #644]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004112:	231f      	movs	r3, #31
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411c:	4b9c      	ldr	r3, [pc, #624]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	4b9b      	ldr	r3, [pc, #620]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004122:	499d      	ldr	r1, [pc, #628]	; (8004398 <HAL_RCC_OscConfig+0x684>)
 8004124:	400a      	ands	r2, r1
 8004126:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2210      	movs	r2, #16
 800412e:	4013      	ands	r3, r2
 8004130:	d063      	beq.n	80041fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d12a      	bne.n	8004190 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800413a:	4b95      	ldr	r3, [pc, #596]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800413c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413e:	4b94      	ldr	r3, [pc, #592]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004140:	2104      	movs	r1, #4
 8004142:	430a      	orrs	r2, r1
 8004144:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004146:	4b92      	ldr	r3, [pc, #584]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414a:	4b91      	ldr	r3, [pc, #580]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800414c:	2101      	movs	r1, #1
 800414e:	430a      	orrs	r2, r1
 8004150:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fe fcc7 	bl	8002ae4 <HAL_GetTick>
 8004156:	0003      	movs	r3, r0
 8004158:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800415c:	f7fe fcc2 	bl	8002ae4 <HAL_GetTick>
 8004160:	0002      	movs	r2, r0
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e152      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800416e:	4b88      	ldr	r3, [pc, #544]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	2202      	movs	r2, #2
 8004174:	4013      	ands	r3, r2
 8004176:	d0f1      	beq.n	800415c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004178:	4b85      	ldr	r3, [pc, #532]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	22f8      	movs	r2, #248	; 0xf8
 800417e:	4393      	bics	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	00da      	lsls	r2, r3, #3
 8004188:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800418a:	430a      	orrs	r2, r1
 800418c:	635a      	str	r2, [r3, #52]	; 0x34
 800418e:	e034      	b.n	80041fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	3305      	adds	r3, #5
 8004196:	d111      	bne.n	80041bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004198:	4b7d      	ldr	r3, [pc, #500]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800419a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419c:	4b7c      	ldr	r3, [pc, #496]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800419e:	2104      	movs	r1, #4
 80041a0:	438a      	bics	r2, r1
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041a4:	4b7a      	ldr	r3, [pc, #488]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	22f8      	movs	r2, #248	; 0xf8
 80041aa:	4393      	bics	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	00da      	lsls	r2, r3, #3
 80041b4:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041b6:	430a      	orrs	r2, r1
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ba:	e01e      	b.n	80041fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041bc:	4b74      	ldr	r3, [pc, #464]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c0:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041c2:	2104      	movs	r1, #4
 80041c4:	430a      	orrs	r2, r1
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80041c8:	4b71      	ldr	r3, [pc, #452]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041cc:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041ce:	2101      	movs	r1, #1
 80041d0:	438a      	bics	r2, r1
 80041d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d4:	f7fe fc86 	bl	8002ae4 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041de:	f7fe fc81 	bl	8002ae4 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e111      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	2202      	movs	r2, #2
 80041f6:	4013      	ands	r3, r2
 80041f8:	d1f1      	bne.n	80041de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2220      	movs	r2, #32
 8004200:	4013      	ands	r3, r2
 8004202:	d05c      	beq.n	80042be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004204:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	220c      	movs	r2, #12
 800420a:	4013      	ands	r3, r2
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d00e      	beq.n	800422e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004210:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	220c      	movs	r2, #12
 8004216:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004218:	2b08      	cmp	r3, #8
 800421a:	d114      	bne.n	8004246 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800421c:	4b5c      	ldr	r3, [pc, #368]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	23c0      	movs	r3, #192	; 0xc0
 8004222:	025b      	lsls	r3, r3, #9
 8004224:	401a      	ands	r2, r3
 8004226:	23c0      	movs	r3, #192	; 0xc0
 8004228:	025b      	lsls	r3, r3, #9
 800422a:	429a      	cmp	r2, r3
 800422c:	d10b      	bne.n	8004246 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800422e:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	025b      	lsls	r3, r3, #9
 8004236:	4013      	ands	r3, r2
 8004238:	d040      	beq.n	80042bc <HAL_RCC_OscConfig+0x5a8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d03c      	beq.n	80042bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0e6      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01b      	beq.n	8004286 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800424e:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004252:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	0249      	lsls	r1, r1, #9
 8004258:	430a      	orrs	r2, r1
 800425a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fe fc42 	bl	8002ae4 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004266:	f7fe fc3d 	bl	8002ae4 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0cd      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004278:	4b45      	ldr	r3, [pc, #276]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800427a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	025b      	lsls	r3, r3, #9
 8004280:	4013      	ands	r3, r2
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x552>
 8004284:	e01b      	b.n	80042be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004286:	4b42      	ldr	r3, [pc, #264]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800428c:	4943      	ldr	r1, [pc, #268]	; (800439c <HAL_RCC_OscConfig+0x688>)
 800428e:	400a      	ands	r2, r1
 8004290:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fc27 	bl	8002ae4 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800429c:	f7fe fc22 	bl	8002ae4 <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0b2      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80042ae:	4b38      	ldr	r3, [pc, #224]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	025b      	lsls	r3, r3, #9
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x588>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042bc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d100      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5b4>
 80042c6:	e0a4      	b.n	8004412 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	220c      	movs	r2, #12
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d100      	bne.n	80042d6 <HAL_RCC_OscConfig+0x5c2>
 80042d4:	e078      	b.n	80043c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d14c      	bne.n	8004378 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042e4:	492e      	ldr	r1, [pc, #184]	; (80043a0 <HAL_RCC_OscConfig+0x68c>)
 80042e6:	400a      	ands	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fe fbfb 	bl	8002ae4 <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fe fbf6 	bl	8002ae4 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e086      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	049b      	lsls	r3, r3, #18
 800430e:	4013      	ands	r3, r2
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	220f      	movs	r2, #15
 8004318:	4393      	bics	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004322:	430a      	orrs	r2, r1
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <HAL_RCC_OscConfig+0x690>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	431a      	orrs	r2, r3
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b12      	ldr	r3, [pc, #72]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	0449      	lsls	r1, r1, #17
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fe fbc9 	bl	8002ae4 <HAL_GetTick>
 8004352:	0003      	movs	r3, r0
 8004354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe fbc4 	bl	8002ae4 <HAL_GetTick>
 800435c:	0002      	movs	r2, r0
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e054      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	049b      	lsls	r3, r3, #18
 8004372:	4013      	ands	r3, r2
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x644>
 8004376:	e04c      	b.n	8004412 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCC_OscConfig+0x67c>)
 800437e:	4908      	ldr	r1, [pc, #32]	; (80043a0 <HAL_RCC_OscConfig+0x68c>)
 8004380:	400a      	ands	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fbae 	bl	8002ae4 <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438c:	e015      	b.n	80043ba <HAL_RCC_OscConfig+0x6a6>
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	40021000 	.word	0x40021000
 8004394:	00001388 	.word	0x00001388
 8004398:	efffffff 	.word	0xefffffff
 800439c:	fffeffff 	.word	0xfffeffff
 80043a0:	feffffff 	.word	0xfeffffff
 80043a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe fb9c 	bl	8002ae4 <HAL_GetTick>
 80043ac:	0002      	movs	r2, r0
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e02c      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_RCC_OscConfig+0x708>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	049b      	lsls	r3, r3, #18
 80043c2:	4013      	ands	r3, r2
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x694>
 80043c6:	e024      	b.n	8004412 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e01f      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_RCC_OscConfig+0x708>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_RCC_OscConfig+0x708>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	23c0      	movs	r3, #192	; 0xc0
 80043e4:	025b      	lsls	r3, r3, #9
 80043e6:	401a      	ands	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d10e      	bne.n	800440e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	220f      	movs	r2, #15
 80043f4:	401a      	ands	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	23f0      	movs	r3, #240	; 0xf0
 8004402:	039b      	lsls	r3, r3, #14
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b008      	add	sp, #32
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000

08004420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0bf      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d911      	bls.n	8004466 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b5e      	ldr	r3, [pc, #376]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4393      	bics	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004454:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0a6      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2202      	movs	r2, #2
 800446c:	4013      	ands	r3, r2
 800446e:	d015      	beq.n	800449c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2204      	movs	r2, #4
 8004476:	4013      	ands	r3, r2
 8004478:	d006      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800447a:	4b51      	ldr	r3, [pc, #324]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004480:	21e0      	movs	r1, #224	; 0xe0
 8004482:	00c9      	lsls	r1, r1, #3
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	22f0      	movs	r2, #240	; 0xf0
 800448e:	4393      	bics	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d04c      	beq.n	8004540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	4013      	ands	r3, r2
 80044b8:	d120      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07a      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	049b      	lsls	r3, r3, #18
 80044ce:	4013      	ands	r3, r2
 80044d0:	d114      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06e      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044de:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	025b      	lsls	r3, r3, #9
 80044e6:	4013      	ands	r3, r2
 80044e8:	d108      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e062      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2202      	movs	r2, #2
 80044f4:	4013      	ands	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e05b      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2203      	movs	r2, #3
 8004502:	4393      	bics	r3, r2
 8004504:	0019      	movs	r1, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004510:	f7fe fae8 	bl	8002ae4 <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004518:	e009      	b.n	800452e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fe fae3 	bl	8002ae4 <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <HAL_RCC_ClockConfig+0x1a4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e042      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	220c      	movs	r2, #12
 8004534:	401a      	ands	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	429a      	cmp	r2, r3
 800453e:	d1ec      	bne.n	800451a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d211      	bcs.n	8004572 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	4393      	bics	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2201      	movs	r2, #1
 8004566:	4013      	ands	r3, r2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e020      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2204      	movs	r2, #4
 8004578:	4013      	ands	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <HAL_RCC_ClockConfig+0x1a8>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004590:	f000 f820 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004594:	0001      	movs	r1, r0
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	220f      	movs	r2, #15
 800459e:	4013      	ands	r3, r2
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <HAL_RCC_ClockConfig+0x1ac>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	000a      	movs	r2, r1
 80045a6:	40da      	lsrs	r2, r3
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x1b0>)
 80045aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7fe fa53 	bl	8002a58 <HAL_InitTick>
  
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b004      	add	sp, #16
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40021000 	.word	0x40021000
 80045c4:	00001388 	.word	0x00001388
 80045c8:	fffff8ff 	.word	0xfffff8ff
 80045cc:	08009bd8 	.word	0x08009bd8
 80045d0:	20000000 	.word	0x20000000

080045d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b08f      	sub	sp, #60	; 0x3c
 80045d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80045da:	2314      	movs	r3, #20
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	4a37      	ldr	r2, [pc, #220]	; (80046bc <HAL_RCC_GetSysClockFreq+0xe8>)
 80045e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045e2:	c313      	stmia	r3!, {r0, r1, r4}
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045e8:	1d3b      	adds	r3, r7, #4
 80045ea:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <HAL_RCC_GetSysClockFreq+0xec>)
 80045ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045ee:	c313      	stmia	r3!, {r0, r1, r4}
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f8:	2300      	movs	r3, #0
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fc:	2300      	movs	r3, #0
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004600:	2300      	movs	r3, #0
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004608:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	220c      	movs	r2, #12
 8004612:	4013      	ands	r3, r2
 8004614:	2b08      	cmp	r3, #8
 8004616:	d006      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x52>
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d043      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0xd0>
 800461c:	2b04      	cmp	r3, #4
 800461e:	d144      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004620:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004624:	e044      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	0c9b      	lsrs	r3, r3, #18
 800462a:	220f      	movs	r2, #15
 800462c:	4013      	ands	r3, r2
 800462e:	2214      	movs	r2, #20
 8004630:	18ba      	adds	r2, r7, r2
 8004632:	5cd3      	ldrb	r3, [r2, r3]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	220f      	movs	r2, #15
 800463c:	4013      	ands	r3, r2
 800463e:	1d3a      	adds	r2, r7, #4
 8004640:	5cd3      	ldrb	r3, [r2, r3]
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004646:	23c0      	movs	r3, #192	; 0xc0
 8004648:	025b      	lsls	r3, r3, #9
 800464a:	401a      	ands	r2, r3
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	025b      	lsls	r3, r3, #9
 8004650:	429a      	cmp	r2, r3
 8004652:	d109      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004656:	481c      	ldr	r0, [pc, #112]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004658:	f7fb fd68 	bl	800012c <__udivsi3>
 800465c:	0003      	movs	r3, r0
 800465e:	001a      	movs	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	4353      	muls	r3, r2
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
 8004666:	e01a      	b.n	800469e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466a:	23c0      	movs	r3, #192	; 0xc0
 800466c:	025b      	lsls	r3, r3, #9
 800466e:	401a      	ands	r2, r3
 8004670:	23c0      	movs	r3, #192	; 0xc0
 8004672:	025b      	lsls	r3, r3, #9
 8004674:	429a      	cmp	r2, r3
 8004676:	d109      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800467a:	4814      	ldr	r0, [pc, #80]	; (80046cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800467c:	f7fb fd56 	bl	800012c <__udivsi3>
 8004680:	0003      	movs	r3, r0
 8004682:	001a      	movs	r2, r3
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	4353      	muls	r3, r2
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	e008      	b.n	800469e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	480e      	ldr	r0, [pc, #56]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004690:	f7fb fd4c 	bl	800012c <__udivsi3>
 8004694:	0003      	movs	r3, r0
 8004696:	001a      	movs	r2, r3
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	4353      	muls	r3, r2
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046a2:	e005      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046a8:	e002      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80046ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b00f      	add	sp, #60	; 0x3c
 80046b8:	bd90      	pop	{r4, r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	08009b38 	.word	0x08009b38
 80046c0:	08009b48 	.word	0x08009b48
 80046c4:	40021000 	.word	0x40021000
 80046c8:	007a1200 	.word	0x007a1200
 80046cc:	02dc6c00 	.word	0x02dc6c00

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	20000000 	.word	0x20000000

080046e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80046e8:	f7ff fff2 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046ec:	0001      	movs	r1, r0
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	2207      	movs	r2, #7
 80046f6:	4013      	ands	r3, r2
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <HAL_RCC_GetPCLK1Freq+0x28>)
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	40d9      	lsrs	r1, r3
 80046fe:	000b      	movs	r3, r1
}    
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	40021000 	.word	0x40021000
 800470c:	08009be8 	.word	0x08009be8

08004710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	025b      	lsls	r3, r3, #9
 8004728:	4013      	ands	r3, r2
 800472a:	d100      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800472c:	e08f      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2317      	movs	r3, #23
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	055b      	lsls	r3, r3, #21
 800473e:	4013      	ands	r3, r2
 8004740:	d111      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	4b6c      	ldr	r3, [pc, #432]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	4b6b      	ldr	r3, [pc, #428]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	0549      	lsls	r1, r1, #21
 800474c:	430a      	orrs	r2, r1
 800474e:	61da      	str	r2, [r3, #28]
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	055b      	lsls	r3, r3, #21
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2317      	movs	r3, #23
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b64      	ldr	r3, [pc, #400]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4013      	ands	r3, r2
 8004770:	d11a      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004772:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b60      	ldr	r3, [pc, #384]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004778:	2180      	movs	r1, #128	; 0x80
 800477a:	0049      	lsls	r1, r1, #1
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004780:	f7fe f9b0 	bl	8002ae4 <HAL_GetTick>
 8004784:	0003      	movs	r3, r0
 8004786:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fe f9ab 	bl	8002ae4 <HAL_GetTick>
 800478e:	0002      	movs	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0a6      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	d0f0      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a8:	4b52      	ldr	r3, [pc, #328]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	23c0      	movs	r3, #192	; 0xc0
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4013      	ands	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d034      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	23c0      	movs	r3, #192	; 0xc0
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4013      	ands	r3, r2
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d02c      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ca:	4b4a      	ldr	r3, [pc, #296]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a4b      	ldr	r2, [pc, #300]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d4:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0249      	lsls	r1, r1, #9
 80047de:	430a      	orrs	r2, r1
 80047e0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e2:	4b44      	ldr	r3, [pc, #272]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047e8:	4945      	ldr	r1, [pc, #276]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80047ea:	400a      	ands	r2, r1
 80047ec:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d013      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fe f972 	bl	8002ae4 <HAL_GetTick>
 8004800:	0003      	movs	r3, r0
 8004802:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	e009      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fe f96d 	bl	8002ae4 <HAL_GetTick>
 800480a:	0002      	movs	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e067      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	2202      	movs	r2, #2
 8004820:	4013      	ands	r3, r2
 8004822:	d0f0      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004824:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a34      	ldr	r2, [pc, #208]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800482a:	4013      	ands	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004834:	430a      	orrs	r2, r1
 8004836:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004838:	2317      	movs	r3, #23
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b2c      	ldr	r3, [pc, #176]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004848:	492f      	ldr	r1, [pc, #188]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800484a:	400a      	ands	r2, r1
 800484c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2201      	movs	r2, #1
 8004854:	4013      	ands	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	2203      	movs	r2, #3
 800485e:	4393      	bics	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004868:	430a      	orrs	r2, r1
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2202      	movs	r2, #2
 8004872:	4013      	ands	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a24      	ldr	r2, [pc, #144]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800487c:	4013      	ands	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004886:	430a      	orrs	r2, r1
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2220      	movs	r2, #32
 8004890:	4013      	ands	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004894:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2210      	movs	r2, #16
 800489a:	4393      	bics	r3, r2
 800489c:	0019      	movs	r1, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048a4:	430a      	orrs	r2, r1
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	4013      	ands	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	2280      	movs	r2, #128	; 0x80
 80048ba:	4393      	bics	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048c4:	430a      	orrs	r2, r1
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4013      	ands	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	2240      	movs	r2, #64	; 0x40
 80048da:	4393      	bics	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b006      	add	sp, #24
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
 80048fc:	fffffcff 	.word	0xfffffcff
 8004900:	fffeffff 	.word	0xfffeffff
 8004904:	00001388 	.word	0x00001388
 8004908:	efffffff 	.word	0xefffffff
 800490c:	fffcffff 	.word	0xfffcffff

08004910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e044      	b.n	80049ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2274      	movs	r2, #116	; 0x74
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f7fe f805 	bl	8002944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2224      	movs	r2, #36	; 0x24
 800493e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	438a      	bics	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0018      	movs	r0, r3
 8004954:	f000 f9ca 	bl	8004cec <UART_SetConfig>
 8004958:	0003      	movs	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e024      	b.n	80049ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 fb41 	bl	8004ff4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	490d      	ldr	r1, [pc, #52]	; (80049b4 <HAL_UART_Init+0xa4>)
 800497e:	400a      	ands	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	212a      	movs	r1, #42	; 0x2a
 800498e:	438a      	bics	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 fbd9 	bl	800515c <UART_CheckIdleState>
 80049aa:	0003      	movs	r3, r0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	ffffb7ff 	.word	0xffffb7ff

080049b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	1dbb      	adds	r3, r7, #6
 80049c6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d000      	beq.n	80049d2 <HAL_UART_Transmit+0x1a>
 80049d0:	e096      	b.n	8004b00 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_UART_Transmit+0x28>
 80049d8:	1dbb      	adds	r3, r7, #6
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e08e      	b.n	8004b02 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d109      	bne.n	8004a04 <HAL_UART_Transmit+0x4c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	d001      	beq.n	8004a04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e07e      	b.n	8004b02 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2274      	movs	r2, #116	; 0x74
 8004a08:	5c9b      	ldrb	r3, [r3, r2]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Transmit+0x5a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e077      	b.n	8004b02 <HAL_UART_Transmit+0x14a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2274      	movs	r2, #116	; 0x74
 8004a16:	2101      	movs	r1, #1
 8004a18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2221      	movs	r2, #33	; 0x21
 8004a26:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a28:	f7fe f85c 	bl	8002ae4 <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1dba      	adds	r2, r7, #6
 8004a34:	2150      	movs	r1, #80	; 0x50
 8004a36:	8812      	ldrh	r2, [r2, #0]
 8004a38:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1dba      	adds	r2, r7, #6
 8004a3e:	2152      	movs	r1, #82	; 0x52
 8004a40:	8812      	ldrh	r2, [r2, #0]
 8004a42:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	015b      	lsls	r3, r3, #5
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d108      	bne.n	8004a62 <HAL_UART_Transmit+0xaa>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	e003      	b.n	8004a6a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2274      	movs	r2, #116	; 0x74
 8004a6e:	2100      	movs	r1, #0
 8004a70:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004a72:	e02d      	b.n	8004ad0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	0013      	movs	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	f000 fbb5 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004a86:	1e03      	subs	r3, r0, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e039      	b.n	8004b02 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	881a      	ldrh	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	05d2      	lsls	r2, r2, #23
 8004a9e:	0dd2      	lsrs	r2, r2, #23
 8004aa0:	b292      	uxth	r2, r2
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e008      	b.n	8004abe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b292      	uxth	r2, r2
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2252      	movs	r2, #82	; 0x52
 8004ac2:	5a9b      	ldrh	r3, [r3, r2]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b299      	uxth	r1, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2252      	movs	r2, #82	; 0x52
 8004ace:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2252      	movs	r2, #82	; 0x52
 8004ad4:	5a9b      	ldrh	r3, [r3, r2]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1cb      	bne.n	8004a74 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	0013      	movs	r3, r2
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2140      	movs	r1, #64	; 0x40
 8004aea:	f000 fb81 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e005      	b.n	8004b02 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b008      	add	sp, #32
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	1dbb      	adds	r3, r7, #6
 8004b1a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d000      	beq.n	8004b26 <HAL_UART_Receive+0x1a>
 8004b24:	e0da      	b.n	8004cdc <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_UART_Receive+0x28>
 8004b2c:	1dbb      	adds	r3, r7, #6
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0d2      	b.n	8004cde <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d109      	bne.n	8004b58 <HAL_UART_Receive+0x4c>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	4013      	ands	r3, r2
 8004b52:	d001      	beq.n	8004b58 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0c2      	b.n	8004cde <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2274      	movs	r2, #116	; 0x74
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Receive+0x5a>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e0bb      	b.n	8004cde <HAL_UART_Receive+0x1d2>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2274      	movs	r2, #116	; 0x74
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2280      	movs	r2, #128	; 0x80
 8004b72:	2100      	movs	r1, #0
 8004b74:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2222      	movs	r2, #34	; 0x22
 8004b7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b82:	f7fd ffaf 	bl	8002ae4 <HAL_GetTick>
 8004b86:	0003      	movs	r3, r0
 8004b88:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1dba      	adds	r2, r7, #6
 8004b8e:	2158      	movs	r1, #88	; 0x58
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1dba      	adds	r2, r7, #6
 8004b98:	215a      	movs	r1, #90	; 0x5a
 8004b9a:	8812      	ldrh	r2, [r2, #0]
 8004b9c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	015b      	lsls	r3, r3, #5
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d10d      	bne.n	8004bc6 <HAL_UART_Receive+0xba>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d104      	bne.n	8004bbc <HAL_UART_Receive+0xb0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	225c      	movs	r2, #92	; 0x5c
 8004bb6:	494c      	ldr	r1, [pc, #304]	; (8004ce8 <HAL_UART_Receive+0x1dc>)
 8004bb8:	5299      	strh	r1, [r3, r2]
 8004bba:	e02e      	b.n	8004c1a <HAL_UART_Receive+0x10e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	225c      	movs	r2, #92	; 0x5c
 8004bc0:	21ff      	movs	r1, #255	; 0xff
 8004bc2:	5299      	strh	r1, [r3, r2]
 8004bc4:	e029      	b.n	8004c1a <HAL_UART_Receive+0x10e>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_UART_Receive+0xde>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_UART_Receive+0xd4>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	225c      	movs	r2, #92	; 0x5c
 8004bda:	21ff      	movs	r1, #255	; 0xff
 8004bdc:	5299      	strh	r1, [r3, r2]
 8004bde:	e01c      	b.n	8004c1a <HAL_UART_Receive+0x10e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	225c      	movs	r2, #92	; 0x5c
 8004be4:	217f      	movs	r1, #127	; 0x7f
 8004be6:	5299      	strh	r1, [r3, r2]
 8004be8:	e017      	b.n	8004c1a <HAL_UART_Receive+0x10e>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	055b      	lsls	r3, r3, #21
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10d      	bne.n	8004c12 <HAL_UART_Receive+0x106>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <HAL_UART_Receive+0xfc>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	225c      	movs	r2, #92	; 0x5c
 8004c02:	217f      	movs	r1, #127	; 0x7f
 8004c04:	5299      	strh	r1, [r3, r2]
 8004c06:	e008      	b.n	8004c1a <HAL_UART_Receive+0x10e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	225c      	movs	r2, #92	; 0x5c
 8004c0c:	213f      	movs	r1, #63	; 0x3f
 8004c0e:	5299      	strh	r1, [r3, r2]
 8004c10:	e003      	b.n	8004c1a <HAL_UART_Receive+0x10e>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	225c      	movs	r2, #92	; 0x5c
 8004c16:	2100      	movs	r1, #0
 8004c18:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004c1a:	2312      	movs	r3, #18
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	215c      	movs	r1, #92	; 0x5c
 8004c22:	5a52      	ldrh	r2, [r2, r1]
 8004c24:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	015b      	lsls	r3, r3, #5
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d108      	bne.n	8004c44 <HAL_UART_Receive+0x138>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2274      	movs	r2, #116	; 0x74
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c54:	e037      	b.n	8004cc6 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	0013      	movs	r3, r2
 8004c60:	2200      	movs	r2, #0
 8004c62:	2120      	movs	r1, #32
 8004c64:	f000 fac4 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e036      	b.n	8004cde <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10e      	bne.n	8004c94 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2212      	movs	r2, #18
 8004c80:	18ba      	adds	r2, r7, r2
 8004c82:	8812      	ldrh	r2, [r2, #0]
 8004c84:	4013      	ands	r3, r2
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	3302      	adds	r3, #2
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e00f      	b.n	8004cb4 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2212      	movs	r2, #18
 8004ca0:	18ba      	adds	r2, r7, r2
 8004ca2:	8812      	ldrh	r2, [r2, #0]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	225a      	movs	r2, #90	; 0x5a
 8004cb8:	5a9b      	ldrh	r3, [r3, r2]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b299      	uxth	r1, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	225a      	movs	r2, #90	; 0x5a
 8004cc4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	225a      	movs	r2, #90	; 0x5a
 8004cca:	5a9b      	ldrh	r3, [r3, r2]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1c1      	bne.n	8004c56 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b008      	add	sp, #32
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	000001ff 	.word	0x000001ff

08004cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cf4:	231e      	movs	r3, #30
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4aac      	ldr	r2, [pc, #688]	; (8004fcc <UART_SetConfig+0x2e0>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	0019      	movs	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4aa7      	ldr	r2, [pc, #668]	; (8004fd0 <UART_SetConfig+0x2e4>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a9e      	ldr	r2, [pc, #632]	; (8004fd4 <UART_SetConfig+0x2e8>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a9a      	ldr	r2, [pc, #616]	; (8004fd8 <UART_SetConfig+0x2ec>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d125      	bne.n	8004dbe <UART_SetConfig+0xd2>
 8004d72:	4b9a      	ldr	r3, [pc, #616]	; (8004fdc <UART_SetConfig+0x2f0>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	2203      	movs	r2, #3
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d00f      	beq.n	8004d9e <UART_SetConfig+0xb2>
 8004d7e:	d304      	bcc.n	8004d8a <UART_SetConfig+0x9e>
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d011      	beq.n	8004da8 <UART_SetConfig+0xbc>
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d005      	beq.n	8004d94 <UART_SetConfig+0xa8>
 8004d88:	e013      	b.n	8004db2 <UART_SetConfig+0xc6>
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e064      	b.n	8004e5e <UART_SetConfig+0x172>
 8004d94:	231f      	movs	r3, #31
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2202      	movs	r2, #2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e05f      	b.n	8004e5e <UART_SetConfig+0x172>
 8004d9e:	231f      	movs	r3, #31
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2204      	movs	r2, #4
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e05a      	b.n	8004e5e <UART_SetConfig+0x172>
 8004da8:	231f      	movs	r3, #31
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	2208      	movs	r2, #8
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e055      	b.n	8004e5e <UART_SetConfig+0x172>
 8004db2:	231f      	movs	r3, #31
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	2210      	movs	r2, #16
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	e04f      	b.n	8004e5e <UART_SetConfig+0x172>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a87      	ldr	r2, [pc, #540]	; (8004fe0 <UART_SetConfig+0x2f4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d132      	bne.n	8004e2e <UART_SetConfig+0x142>
 8004dc8:	4b84      	ldr	r3, [pc, #528]	; (8004fdc <UART_SetConfig+0x2f0>)
 8004dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dcc:	23c0      	movs	r3, #192	; 0xc0
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	0252      	lsls	r2, r2, #9
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d019      	beq.n	8004e0e <UART_SetConfig+0x122>
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	0252      	lsls	r2, r2, #9
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d802      	bhi.n	8004de8 <UART_SetConfig+0xfc>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <UART_SetConfig+0x10e>
 8004de6:	e01c      	b.n	8004e22 <UART_SetConfig+0x136>
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	0292      	lsls	r2, r2, #10
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <UART_SetConfig+0x12c>
 8004df0:	22c0      	movs	r2, #192	; 0xc0
 8004df2:	0292      	lsls	r2, r2, #10
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d005      	beq.n	8004e04 <UART_SetConfig+0x118>
 8004df8:	e013      	b.n	8004e22 <UART_SetConfig+0x136>
 8004dfa:	231f      	movs	r3, #31
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e02c      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e04:	231f      	movs	r3, #31
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2202      	movs	r2, #2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e027      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e0e:	231f      	movs	r3, #31
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	2204      	movs	r2, #4
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e022      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e18:	231f      	movs	r3, #31
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	e01d      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e22:	231f      	movs	r3, #31
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	2210      	movs	r2, #16
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	e017      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6c      	ldr	r2, [pc, #432]	; (8004fe4 <UART_SetConfig+0x2f8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d104      	bne.n	8004e42 <UART_SetConfig+0x156>
 8004e38:	231f      	movs	r3, #31
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e00d      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a68      	ldr	r2, [pc, #416]	; (8004fe8 <UART_SetConfig+0x2fc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0x16a>
 8004e4c:	231f      	movs	r3, #31
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0x172>
 8004e56:	231f      	movs	r3, #31
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69da      	ldr	r2, [r3, #28]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d15c      	bne.n	8004f24 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8004e6a:	231f      	movs	r3, #31
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d00d      	beq.n	8004e90 <UART_SetConfig+0x1a4>
 8004e74:	dc02      	bgt.n	8004e7c <UART_SetConfig+0x190>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <UART_SetConfig+0x19a>
 8004e7a:	e015      	b.n	8004ea8 <UART_SetConfig+0x1bc>
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d00a      	beq.n	8004e96 <UART_SetConfig+0x1aa>
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d00d      	beq.n	8004ea0 <UART_SetConfig+0x1b4>
 8004e84:	e010      	b.n	8004ea8 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e86:	f7ff fc2d 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	61bb      	str	r3, [r7, #24]
        break;
 8004e8e:	e012      	b.n	8004eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <UART_SetConfig+0x300>)
 8004e92:	61bb      	str	r3, [r7, #24]
        break;
 8004e94:	e00f      	b.n	8004eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e96:	f7ff fb9d 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	61bb      	str	r3, [r7, #24]
        break;
 8004e9e:	e00a      	b.n	8004eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	61bb      	str	r3, [r7, #24]
        break;
 8004ea6:	e006      	b.n	8004eb6 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eac:	231e      	movs	r3, #30
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
        break;
 8004eb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d100      	bne.n	8004ebe <UART_SetConfig+0x1d2>
 8004ebc:	e079      	b.n	8004fb2 <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	005a      	lsls	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	18d2      	adds	r2, r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	0019      	movs	r1, r3
 8004ed0:	0010      	movs	r0, r2
 8004ed2:	f7fb f92b 	bl	800012c <__udivsi3>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d91b      	bls.n	8004f1a <UART_SetConfig+0x22e>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4a42      	ldr	r2, [pc, #264]	; (8004ff0 <UART_SetConfig+0x304>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d817      	bhi.n	8004f1a <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	200e      	movs	r0, #14
 8004ef0:	183b      	adds	r3, r7, r0
 8004ef2:	210f      	movs	r1, #15
 8004ef4:	438a      	bics	r2, r1
 8004ef6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2207      	movs	r2, #7
 8004f00:	4013      	ands	r3, r2
 8004f02:	b299      	uxth	r1, r3
 8004f04:	183b      	adds	r3, r7, r0
 8004f06:	183a      	adds	r2, r7, r0
 8004f08:	8812      	ldrh	r2, [r2, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	183a      	adds	r2, r7, r0
 8004f14:	8812      	ldrh	r2, [r2, #0]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e04b      	b.n	8004fb2 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1a:	231e      	movs	r3, #30
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e046      	b.n	8004fb2 <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f24:	231f      	movs	r3, #31
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d00d      	beq.n	8004f4a <UART_SetConfig+0x25e>
 8004f2e:	dc02      	bgt.n	8004f36 <UART_SetConfig+0x24a>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <UART_SetConfig+0x254>
 8004f34:	e015      	b.n	8004f62 <UART_SetConfig+0x276>
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d00a      	beq.n	8004f50 <UART_SetConfig+0x264>
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d00d      	beq.n	8004f5a <UART_SetConfig+0x26e>
 8004f3e:	e010      	b.n	8004f62 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7ff fbd0 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 8004f44:	0003      	movs	r3, r0
 8004f46:	61bb      	str	r3, [r7, #24]
        break;
 8004f48:	e012      	b.n	8004f70 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4a:	4b28      	ldr	r3, [pc, #160]	; (8004fec <UART_SetConfig+0x300>)
 8004f4c:	61bb      	str	r3, [r7, #24]
        break;
 8004f4e:	e00f      	b.n	8004f70 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f50:	f7ff fb40 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004f54:	0003      	movs	r3, r0
 8004f56:	61bb      	str	r3, [r7, #24]
        break;
 8004f58:	e00a      	b.n	8004f70 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e006      	b.n	8004f70 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f66:	231e      	movs	r3, #30
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
        break;
 8004f6e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01d      	beq.n	8004fb2 <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	085a      	lsrs	r2, r3, #1
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	18d2      	adds	r2, r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	0019      	movs	r1, r3
 8004f86:	0010      	movs	r0, r2
 8004f88:	f7fb f8d0 	bl	800012c <__udivsi3>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d908      	bls.n	8004faa <UART_SetConfig+0x2be>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <UART_SetConfig+0x304>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d804      	bhi.n	8004faa <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e003      	b.n	8004fb2 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8004faa:	231e      	movs	r3, #30
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fbe:	231e      	movs	r3, #30
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	781b      	ldrb	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b008      	add	sp, #32
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	efff69f3 	.word	0xefff69f3
 8004fd0:	ffffcfff 	.word	0xffffcfff
 8004fd4:	fffff4ff 	.word	0xfffff4ff
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40004400 	.word	0x40004400
 8004fe4:	40004800 	.word	0x40004800
 8004fe8:	40004c00 	.word	0x40004c00
 8004fec:	007a1200 	.word	0x007a1200
 8004ff0:	0000ffff 	.word	0x0000ffff

08004ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2201      	movs	r2, #1
 8005002:	4013      	ands	r3, r2
 8005004:	d00b      	beq.n	800501e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4a4a      	ldr	r2, [pc, #296]	; (8005138 <UART_AdvFeatureConfig+0x144>)
 800500e:	4013      	ands	r3, r2
 8005010:	0019      	movs	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2202      	movs	r2, #2
 8005024:	4013      	ands	r3, r2
 8005026:	d00b      	beq.n	8005040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4a43      	ldr	r2, [pc, #268]	; (800513c <UART_AdvFeatureConfig+0x148>)
 8005030:	4013      	ands	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2204      	movs	r2, #4
 8005046:	4013      	ands	r3, r2
 8005048:	d00b      	beq.n	8005062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a3b      	ldr	r2, [pc, #236]	; (8005140 <UART_AdvFeatureConfig+0x14c>)
 8005052:	4013      	ands	r3, r2
 8005054:	0019      	movs	r1, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2208      	movs	r2, #8
 8005068:	4013      	ands	r3, r2
 800506a:	d00b      	beq.n	8005084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4a34      	ldr	r2, [pc, #208]	; (8005144 <UART_AdvFeatureConfig+0x150>)
 8005074:	4013      	ands	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2210      	movs	r2, #16
 800508a:	4013      	ands	r3, r2
 800508c:	d00b      	beq.n	80050a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <UART_AdvFeatureConfig+0x154>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2220      	movs	r2, #32
 80050ac:	4013      	ands	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	4a25      	ldr	r2, [pc, #148]	; (800514c <UART_AdvFeatureConfig+0x158>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2240      	movs	r2, #64	; 0x40
 80050ce:	4013      	ands	r3, r2
 80050d0:	d01d      	beq.n	800510e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <UART_AdvFeatureConfig+0x15c>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	035b      	lsls	r3, r3, #13
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d10b      	bne.n	800510e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <UART_AdvFeatureConfig+0x160>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	4013      	ands	r3, r2
 8005116:	d00b      	beq.n	8005130 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4a0e      	ldr	r2, [pc, #56]	; (8005158 <UART_AdvFeatureConfig+0x164>)
 8005120:	4013      	ands	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}
 8005138:	fffdffff 	.word	0xfffdffff
 800513c:	fffeffff 	.word	0xfffeffff
 8005140:	fffbffff 	.word	0xfffbffff
 8005144:	ffff7fff 	.word	0xffff7fff
 8005148:	ffffefff 	.word	0xffffefff
 800514c:	ffffdfff 	.word	0xffffdfff
 8005150:	ffefffff 	.word	0xffefffff
 8005154:	ff9fffff 	.word	0xff9fffff
 8005158:	fff7ffff 	.word	0xfff7ffff

0800515c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2280      	movs	r2, #128	; 0x80
 8005168:	2100      	movs	r1, #0
 800516a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800516c:	f7fd fcba 	bl	8002ae4 <HAL_GetTick>
 8005170:	0003      	movs	r3, r0
 8005172:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2208      	movs	r2, #8
 800517c:	4013      	ands	r3, r2
 800517e:	2b08      	cmp	r3, #8
 8005180:	d10d      	bne.n	800519e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	0399      	lsls	r1, r3, #14
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <UART_CheckIdleState+0x90>)
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	0013      	movs	r3, r2
 8005190:	2200      	movs	r2, #0
 8005192:	f000 f82d 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d001      	beq.n	800519e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e022      	b.n	80051e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2204      	movs	r2, #4
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d10d      	bne.n	80051c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	03d9      	lsls	r1, r3, #15
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <UART_CheckIdleState+0x90>)
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	0013      	movs	r3, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	f000 f818 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80051c0:	1e03      	subs	r3, r0, #0
 80051c2:	d001      	beq.n	80051c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e00d      	b.n	80051e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2274      	movs	r2, #116	; 0x74
 80051de:	2100      	movs	r1, #0
 80051e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b004      	add	sp, #16
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	01ffffff 	.word	0x01ffffff

080051f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	1dfb      	adds	r3, r7, #7
 80051fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	e05e      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	3301      	adds	r3, #1
 8005206:	d05b      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7fd fc6c 	bl	8002ae4 <HAL_GetTick>
 800520c:	0002      	movs	r2, r0
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11b      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	492f      	ldr	r1, [pc, #188]	; (80052e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800522a:	400a      	ands	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	438a      	bics	r2, r1
 800523c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2274      	movs	r2, #116	; 0x74
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e044      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	4013      	ands	r3, r2
 8005260:	d02e      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	401a      	ands	r2, r3
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	429a      	cmp	r2, r3
 8005274:	d124      	bne.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2280      	movs	r2, #128	; 0x80
 800527c:	0112      	lsls	r2, r2, #4
 800527e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4917      	ldr	r1, [pc, #92]	; (80052e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800528c:	400a      	ands	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	438a      	bics	r2, r1
 800529e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2280      	movs	r2, #128	; 0x80
 80052b0:	2120      	movs	r1, #32
 80052b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2274      	movs	r2, #116	; 0x74
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e00f      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	425a      	negs	r2, r3
 80052d0:	4153      	adcs	r3, r2
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	001a      	movs	r2, r3
 80052d6:	1dfb      	adds	r3, r7, #7
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d091      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b004      	add	sp, #16
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	fffffe5f 	.word	0xfffffe5f

080052ec <__errno>:
 80052ec:	4b01      	ldr	r3, [pc, #4]	; (80052f4 <__errno+0x8>)
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	4770      	bx	lr
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	2000000c 	.word	0x2000000c

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	2600      	movs	r6, #0
 80052fc:	4d0c      	ldr	r5, [pc, #48]	; (8005330 <__libc_init_array+0x38>)
 80052fe:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	2600      	movs	r6, #0
 800530a:	f004 fbc9 	bl	8009aa0 <_init>
 800530e:	4d0a      	ldr	r5, [pc, #40]	; (8005338 <__libc_init_array+0x40>)
 8005310:	4c0a      	ldr	r4, [pc, #40]	; (800533c <__libc_init_array+0x44>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	00b3      	lsls	r3, r6, #2
 800531e:	58eb      	ldr	r3, [r5, r3]
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	00b3      	lsls	r3, r6, #2
 8005328:	58eb      	ldr	r3, [r5, r3]
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	08009f10 	.word	0x08009f10
 8005334:	08009f10 	.word	0x08009f10
 8005338:	08009f10 	.word	0x08009f10
 800533c:	08009f14 	.word	0x08009f14

08005340 <memset>:
 8005340:	0003      	movs	r3, r0
 8005342:	1812      	adds	r2, r2, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	7019      	strb	r1, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <__cvt>:
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005352:	b08b      	sub	sp, #44	; 0x2c
 8005354:	0014      	movs	r4, r2
 8005356:	1e1d      	subs	r5, r3, #0
 8005358:	9912      	ldr	r1, [sp, #72]	; 0x48
 800535a:	da53      	bge.n	8005404 <__cvt+0xb4>
 800535c:	2480      	movs	r4, #128	; 0x80
 800535e:	0624      	lsls	r4, r4, #24
 8005360:	191b      	adds	r3, r3, r4
 8005362:	001d      	movs	r5, r3
 8005364:	0014      	movs	r4, r2
 8005366:	232d      	movs	r3, #45	; 0x2d
 8005368:	700b      	strb	r3, [r1, #0]
 800536a:	2320      	movs	r3, #32
 800536c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800536e:	2203      	movs	r2, #3
 8005370:	439e      	bics	r6, r3
 8005372:	2e46      	cmp	r6, #70	; 0x46
 8005374:	d007      	beq.n	8005386 <__cvt+0x36>
 8005376:	0033      	movs	r3, r6
 8005378:	3b45      	subs	r3, #69	; 0x45
 800537a:	4259      	negs	r1, r3
 800537c:	414b      	adcs	r3, r1
 800537e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005380:	3a01      	subs	r2, #1
 8005382:	18cb      	adds	r3, r1, r3
 8005384:	9310      	str	r3, [sp, #64]	; 0x40
 8005386:	ab09      	add	r3, sp, #36	; 0x24
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	ab08      	add	r3, sp, #32
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005390:	9200      	str	r2, [sp, #0]
 8005392:	9302      	str	r3, [sp, #8]
 8005394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005396:	0022      	movs	r2, r4
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	002b      	movs	r3, r5
 800539c:	f001 ffba 	bl	8007314 <_dtoa_r>
 80053a0:	0007      	movs	r7, r0
 80053a2:	2e47      	cmp	r6, #71	; 0x47
 80053a4:	d102      	bne.n	80053ac <__cvt+0x5c>
 80053a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053a8:	07db      	lsls	r3, r3, #31
 80053aa:	d524      	bpl.n	80053f6 <__cvt+0xa6>
 80053ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	9307      	str	r3, [sp, #28]
 80053b2:	2e46      	cmp	r6, #70	; 0x46
 80053b4:	d114      	bne.n	80053e0 <__cvt+0x90>
 80053b6:	783b      	ldrb	r3, [r7, #0]
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d10c      	bne.n	80053d6 <__cvt+0x86>
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	0020      	movs	r0, r4
 80053c2:	0029      	movs	r1, r5
 80053c4:	f7fb f838 	bl	8000438 <__aeabi_dcmpeq>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d104      	bne.n	80053d6 <__cvt+0x86>
 80053cc:	2301      	movs	r3, #1
 80053ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053d8:	9a07      	ldr	r2, [sp, #28]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	9307      	str	r3, [sp, #28]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2300      	movs	r3, #0
 80053e4:	0020      	movs	r0, r4
 80053e6:	0029      	movs	r1, r5
 80053e8:	f7fb f826 	bl	8000438 <__aeabi_dcmpeq>
 80053ec:	2230      	movs	r2, #48	; 0x30
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d00d      	beq.n	800540e <__cvt+0xbe>
 80053f2:	9b07      	ldr	r3, [sp, #28]
 80053f4:	9309      	str	r3, [sp, #36]	; 0x24
 80053f6:	0038      	movs	r0, r7
 80053f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053fc:	1bdb      	subs	r3, r3, r7
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	b00b      	add	sp, #44	; 0x2c
 8005402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005404:	2300      	movs	r3, #0
 8005406:	e7af      	b.n	8005368 <__cvt+0x18>
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	9109      	str	r1, [sp, #36]	; 0x24
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005410:	9907      	ldr	r1, [sp, #28]
 8005412:	428b      	cmp	r3, r1
 8005414:	d3f8      	bcc.n	8005408 <__cvt+0xb8>
 8005416:	e7ee      	b.n	80053f6 <__cvt+0xa6>

08005418 <__exponent>:
 8005418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541a:	1c83      	adds	r3, r0, #2
 800541c:	b085      	sub	sp, #20
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	0006      	movs	r6, r0
 8005422:	000c      	movs	r4, r1
 8005424:	7002      	strb	r2, [r0, #0]
 8005426:	232b      	movs	r3, #43	; 0x2b
 8005428:	2900      	cmp	r1, #0
 800542a:	da01      	bge.n	8005430 <__exponent+0x18>
 800542c:	232d      	movs	r3, #45	; 0x2d
 800542e:	424c      	negs	r4, r1
 8005430:	7073      	strb	r3, [r6, #1]
 8005432:	2c09      	cmp	r4, #9
 8005434:	dd22      	ble.n	800547c <__exponent+0x64>
 8005436:	ab02      	add	r3, sp, #8
 8005438:	1ddd      	adds	r5, r3, #7
 800543a:	0020      	movs	r0, r4
 800543c:	210a      	movs	r1, #10
 800543e:	f7fa ffe5 	bl	800040c <__aeabi_idivmod>
 8005442:	1e6f      	subs	r7, r5, #1
 8005444:	3130      	adds	r1, #48	; 0x30
 8005446:	7039      	strb	r1, [r7, #0]
 8005448:	0020      	movs	r0, r4
 800544a:	210a      	movs	r1, #10
 800544c:	f7fa fef8 	bl	8000240 <__divsi3>
 8005450:	0004      	movs	r4, r0
 8005452:	2809      	cmp	r0, #9
 8005454:	dc0b      	bgt.n	800546e <__exponent+0x56>
 8005456:	3d02      	subs	r5, #2
 8005458:	3430      	adds	r4, #48	; 0x30
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	702c      	strb	r4, [r5, #0]
 800545e:	aa02      	add	r2, sp, #8
 8005460:	3207      	adds	r2, #7
 8005462:	0018      	movs	r0, r3
 8005464:	42aa      	cmp	r2, r5
 8005466:	d804      	bhi.n	8005472 <__exponent+0x5a>
 8005468:	1b80      	subs	r0, r0, r6
 800546a:	b005      	add	sp, #20
 800546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546e:	003d      	movs	r5, r7
 8005470:	e7e3      	b.n	800543a <__exponent+0x22>
 8005472:	782a      	ldrb	r2, [r5, #0]
 8005474:	3501      	adds	r5, #1
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	e7f0      	b.n	800545e <__exponent+0x46>
 800547c:	2330      	movs	r3, #48	; 0x30
 800547e:	18e4      	adds	r4, r4, r3
 8005480:	70b3      	strb	r3, [r6, #2]
 8005482:	1d30      	adds	r0, r6, #4
 8005484:	70f4      	strb	r4, [r6, #3]
 8005486:	e7ef      	b.n	8005468 <__exponent+0x50>

08005488 <_printf_float>:
 8005488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548a:	b095      	sub	sp, #84	; 0x54
 800548c:	000c      	movs	r4, r1
 800548e:	920a      	str	r2, [sp, #40]	; 0x28
 8005490:	930b      	str	r3, [sp, #44]	; 0x2c
 8005492:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005494:	9009      	str	r0, [sp, #36]	; 0x24
 8005496:	f003 f9df 	bl	8008858 <_localeconv_r>
 800549a:	6803      	ldr	r3, [r0, #0]
 800549c:	0018      	movs	r0, r3
 800549e:	930c      	str	r3, [sp, #48]	; 0x30
 80054a0:	f7fa fe32 	bl	8000108 <strlen>
 80054a4:	2300      	movs	r3, #0
 80054a6:	9312      	str	r3, [sp, #72]	; 0x48
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	900e      	str	r0, [sp, #56]	; 0x38
 80054ac:	930d      	str	r3, [sp, #52]	; 0x34
 80054ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054b0:	7e27      	ldrb	r7, [r4, #24]
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	2207      	movs	r2, #7
 80054b6:	05c9      	lsls	r1, r1, #23
 80054b8:	d545      	bpl.n	8005546 <_printf_float+0xbe>
 80054ba:	189b      	adds	r3, r3, r2
 80054bc:	4393      	bics	r3, r2
 80054be:	001a      	movs	r2, r3
 80054c0:	3208      	adds	r2, #8
 80054c2:	602a      	str	r2, [r5, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	64a2      	str	r2, [r4, #72]	; 0x48
 80054ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 80054cc:	2201      	movs	r2, #1
 80054ce:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80054d0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80054d2:	006b      	lsls	r3, r5, #1
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d8:	4252      	negs	r2, r2
 80054da:	4bac      	ldr	r3, [pc, #688]	; (800578c <_printf_float+0x304>)
 80054dc:	0030      	movs	r0, r6
 80054de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054e0:	f7fc fcd6 	bl	8001e90 <__aeabi_dcmpun>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d130      	bne.n	800554a <_printf_float+0xc2>
 80054e8:	2201      	movs	r2, #1
 80054ea:	4ba8      	ldr	r3, [pc, #672]	; (800578c <_printf_float+0x304>)
 80054ec:	4252      	negs	r2, r2
 80054ee:	0030      	movs	r0, r6
 80054f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054f2:	f7fa ffb1 	bl	8000458 <__aeabi_dcmple>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d127      	bne.n	800554a <_printf_float+0xc2>
 80054fa:	2200      	movs	r2, #0
 80054fc:	2300      	movs	r3, #0
 80054fe:	0030      	movs	r0, r6
 8005500:	0029      	movs	r1, r5
 8005502:	f7fa ff9f 	bl	8000444 <__aeabi_dcmplt>
 8005506:	2800      	cmp	r0, #0
 8005508:	d003      	beq.n	8005512 <_printf_float+0x8a>
 800550a:	0023      	movs	r3, r4
 800550c:	222d      	movs	r2, #45	; 0x2d
 800550e:	3343      	adds	r3, #67	; 0x43
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	4d9f      	ldr	r5, [pc, #636]	; (8005790 <_printf_float+0x308>)
 8005514:	2f47      	cmp	r7, #71	; 0x47
 8005516:	d800      	bhi.n	800551a <_printf_float+0x92>
 8005518:	4d9e      	ldr	r5, [pc, #632]	; (8005794 <_printf_float+0x30c>)
 800551a:	2303      	movs	r3, #3
 800551c:	2600      	movs	r6, #0
 800551e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	439a      	bics	r2, r3
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800552a:	aa13      	add	r2, sp, #76	; 0x4c
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	0021      	movs	r1, r4
 8005530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005532:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005534:	f000 f9f4 	bl	8005920 <_printf_common>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d000      	beq.n	800553e <_printf_float+0xb6>
 800553c:	e093      	b.n	8005666 <_printf_float+0x1de>
 800553e:	2001      	movs	r0, #1
 8005540:	4240      	negs	r0, r0
 8005542:	b015      	add	sp, #84	; 0x54
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005546:	3307      	adds	r3, #7
 8005548:	e7b8      	b.n	80054bc <_printf_float+0x34>
 800554a:	0032      	movs	r2, r6
 800554c:	002b      	movs	r3, r5
 800554e:	0030      	movs	r0, r6
 8005550:	0029      	movs	r1, r5
 8005552:	f7fc fc9d 	bl	8001e90 <__aeabi_dcmpun>
 8005556:	2800      	cmp	r0, #0
 8005558:	d004      	beq.n	8005564 <_printf_float+0xdc>
 800555a:	4d8f      	ldr	r5, [pc, #572]	; (8005798 <_printf_float+0x310>)
 800555c:	2f47      	cmp	r7, #71	; 0x47
 800555e:	d8dc      	bhi.n	800551a <_printf_float+0x92>
 8005560:	4d8e      	ldr	r5, [pc, #568]	; (800579c <_printf_float+0x314>)
 8005562:	e7da      	b.n	800551a <_printf_float+0x92>
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005568:	6862      	ldr	r2, [r4, #4]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	430b      	orrs	r3, r1
 800556e:	1c51      	adds	r1, r2, #1
 8005570:	d143      	bne.n	80055fa <_printf_float+0x172>
 8005572:	3207      	adds	r2, #7
 8005574:	6062      	str	r2, [r4, #4]
 8005576:	aa12      	add	r2, sp, #72	; 0x48
 8005578:	2100      	movs	r1, #0
 800557a:	9205      	str	r2, [sp, #20]
 800557c:	aa11      	add	r2, sp, #68	; 0x44
 800557e:	9203      	str	r2, [sp, #12]
 8005580:	2223      	movs	r2, #35	; 0x23
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	9106      	str	r1, [sp, #24]
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	a908      	add	r1, sp, #32
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	1852      	adds	r2, r2, r1
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	0032      	movs	r2, r6
 8005594:	002b      	movs	r3, r5
 8005596:	9704      	str	r7, [sp, #16]
 8005598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800559a:	f7ff fed9 	bl	8005350 <__cvt>
 800559e:	2320      	movs	r3, #32
 80055a0:	003a      	movs	r2, r7
 80055a2:	0005      	movs	r5, r0
 80055a4:	439a      	bics	r2, r3
 80055a6:	2a47      	cmp	r2, #71	; 0x47
 80055a8:	d107      	bne.n	80055ba <_printf_float+0x132>
 80055aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055ac:	1cda      	adds	r2, r3, #3
 80055ae:	db02      	blt.n	80055b6 <_printf_float+0x12e>
 80055b0:	6862      	ldr	r2, [r4, #4]
 80055b2:	4293      	cmp	r3, r2
 80055b4:	dd45      	ble.n	8005642 <_printf_float+0x1ba>
 80055b6:	3f02      	subs	r7, #2
 80055b8:	b2ff      	uxtb	r7, r7
 80055ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80055bc:	2f65      	cmp	r7, #101	; 0x65
 80055be:	d825      	bhi.n	800560c <_printf_float+0x184>
 80055c0:	0020      	movs	r0, r4
 80055c2:	3901      	subs	r1, #1
 80055c4:	003a      	movs	r2, r7
 80055c6:	3050      	adds	r0, #80	; 0x50
 80055c8:	9111      	str	r1, [sp, #68]	; 0x44
 80055ca:	f7ff ff25 	bl	8005418 <__exponent>
 80055ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055d0:	0006      	movs	r6, r0
 80055d2:	1813      	adds	r3, r2, r0
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	2a01      	cmp	r2, #1
 80055d8:	dc02      	bgt.n	80055e0 <_printf_float+0x158>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	07d2      	lsls	r2, r2, #31
 80055de:	d501      	bpl.n	80055e4 <_printf_float+0x15c>
 80055e0:	3301      	adds	r3, #1
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	2323      	movs	r3, #35	; 0x23
 80055e6:	aa08      	add	r2, sp, #32
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d09b      	beq.n	8005528 <_printf_float+0xa0>
 80055f0:	0023      	movs	r3, r4
 80055f2:	222d      	movs	r2, #45	; 0x2d
 80055f4:	3343      	adds	r3, #67	; 0x43
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e796      	b.n	8005528 <_printf_float+0xa0>
 80055fa:	2f67      	cmp	r7, #103	; 0x67
 80055fc:	d100      	bne.n	8005600 <_printf_float+0x178>
 80055fe:	e176      	b.n	80058ee <_printf_float+0x466>
 8005600:	2f47      	cmp	r7, #71	; 0x47
 8005602:	d1b8      	bne.n	8005576 <_printf_float+0xee>
 8005604:	2a00      	cmp	r2, #0
 8005606:	d1b6      	bne.n	8005576 <_printf_float+0xee>
 8005608:	2201      	movs	r2, #1
 800560a:	e7b3      	b.n	8005574 <_printf_float+0xec>
 800560c:	2f66      	cmp	r7, #102	; 0x66
 800560e:	d119      	bne.n	8005644 <_printf_float+0x1bc>
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	2900      	cmp	r1, #0
 8005614:	dd0c      	ble.n	8005630 <_printf_float+0x1a8>
 8005616:	6121      	str	r1, [r4, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <_printf_float+0x19a>
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	07d2      	lsls	r2, r2, #31
 8005620:	d502      	bpl.n	8005628 <_printf_float+0x1a0>
 8005622:	3301      	adds	r3, #1
 8005624:	185b      	adds	r3, r3, r1
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800562a:	2600      	movs	r6, #0
 800562c:	65a3      	str	r3, [r4, #88]	; 0x58
 800562e:	e7d9      	b.n	80055e4 <_printf_float+0x15c>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <_printf_float+0x1b4>
 8005634:	2201      	movs	r2, #1
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	4211      	tst	r1, r2
 800563a:	d000      	beq.n	800563e <_printf_float+0x1b6>
 800563c:	1c9a      	adds	r2, r3, #2
 800563e:	6122      	str	r2, [r4, #16]
 8005640:	e7f2      	b.n	8005628 <_printf_float+0x1a0>
 8005642:	2767      	movs	r7, #103	; 0x67
 8005644:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005646:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005648:	4293      	cmp	r3, r2
 800564a:	db05      	blt.n	8005658 <_printf_float+0x1d0>
 800564c:	6822      	ldr	r2, [r4, #0]
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	07d2      	lsls	r2, r2, #31
 8005652:	d5e9      	bpl.n	8005628 <_printf_float+0x1a0>
 8005654:	3301      	adds	r3, #1
 8005656:	e7e6      	b.n	8005626 <_printf_float+0x19e>
 8005658:	2101      	movs	r1, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	dc01      	bgt.n	8005662 <_printf_float+0x1da>
 800565e:	1849      	adds	r1, r1, r1
 8005660:	1ac9      	subs	r1, r1, r3
 8005662:	1852      	adds	r2, r2, r1
 8005664:	e7eb      	b.n	800563e <_printf_float+0x1b6>
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	0553      	lsls	r3, r2, #21
 800566a:	d408      	bmi.n	800567e <_printf_float+0x1f6>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	002a      	movs	r2, r5
 8005670:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005674:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005676:	47a8      	blx	r5
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d129      	bne.n	80056d0 <_printf_float+0x248>
 800567c:	e75f      	b.n	800553e <_printf_float+0xb6>
 800567e:	2f65      	cmp	r7, #101	; 0x65
 8005680:	d800      	bhi.n	8005684 <_printf_float+0x1fc>
 8005682:	e0e0      	b.n	8005846 <_printf_float+0x3be>
 8005684:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005686:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005688:	2200      	movs	r2, #0
 800568a:	2300      	movs	r3, #0
 800568c:	f7fa fed4 	bl	8000438 <__aeabi_dcmpeq>
 8005690:	2800      	cmp	r0, #0
 8005692:	d034      	beq.n	80056fe <_printf_float+0x276>
 8005694:	2301      	movs	r3, #1
 8005696:	4a42      	ldr	r2, [pc, #264]	; (80057a0 <_printf_float+0x318>)
 8005698:	990a      	ldr	r1, [sp, #40]	; 0x28
 800569a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800569c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800569e:	47a8      	blx	r5
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d100      	bne.n	80056a6 <_printf_float+0x21e>
 80056a4:	e74b      	b.n	800553e <_printf_float+0xb6>
 80056a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056aa:	4293      	cmp	r3, r2
 80056ac:	db02      	blt.n	80056b4 <_printf_float+0x22c>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	07db      	lsls	r3, r3, #31
 80056b2:	d50d      	bpl.n	80056d0 <_printf_float+0x248>
 80056b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80056b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056be:	47a8      	blx	r5
 80056c0:	2500      	movs	r5, #0
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d100      	bne.n	80056c8 <_printf_float+0x240>
 80056c6:	e73a      	b.n	800553e <_printf_float+0xb6>
 80056c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056ca:	3b01      	subs	r3, #1
 80056cc:	42ab      	cmp	r3, r5
 80056ce:	dc0a      	bgt.n	80056e6 <_printf_float+0x25e>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	079b      	lsls	r3, r3, #30
 80056d4:	d500      	bpl.n	80056d8 <_printf_float+0x250>
 80056d6:	e108      	b.n	80058ea <_printf_float+0x462>
 80056d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056da:	68e0      	ldr	r0, [r4, #12]
 80056dc:	4298      	cmp	r0, r3
 80056de:	db00      	blt.n	80056e2 <_printf_float+0x25a>
 80056e0:	e72f      	b.n	8005542 <_printf_float+0xba>
 80056e2:	0018      	movs	r0, r3
 80056e4:	e72d      	b.n	8005542 <_printf_float+0xba>
 80056e6:	0022      	movs	r2, r4
 80056e8:	2301      	movs	r3, #1
 80056ea:	321a      	adds	r2, #26
 80056ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80056f2:	47b0      	blx	r6
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d100      	bne.n	80056fa <_printf_float+0x272>
 80056f8:	e721      	b.n	800553e <_printf_float+0xb6>
 80056fa:	3501      	adds	r5, #1
 80056fc:	e7e4      	b.n	80056c8 <_printf_float+0x240>
 80056fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005700:	2b00      	cmp	r3, #0
 8005702:	dc2d      	bgt.n	8005760 <_printf_float+0x2d8>
 8005704:	2301      	movs	r3, #1
 8005706:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <_printf_float+0x318>)
 8005708:	990a      	ldr	r1, [sp, #40]	; 0x28
 800570a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800570c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800570e:	47b0      	blx	r6
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d100      	bne.n	8005716 <_printf_float+0x28e>
 8005714:	e713      	b.n	800553e <_printf_float+0xb6>
 8005716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <_printf_float+0x2a0>
 800571c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <_printf_float+0x2a0>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	07db      	lsls	r3, r3, #31
 8005726:	d5d3      	bpl.n	80056d0 <_printf_float+0x248>
 8005728:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800572a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800572c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800572e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005732:	47b0      	blx	r6
 8005734:	2600      	movs	r6, #0
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d100      	bne.n	800573c <_printf_float+0x2b4>
 800573a:	e700      	b.n	800553e <_printf_float+0xb6>
 800573c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800573e:	425b      	negs	r3, r3
 8005740:	42b3      	cmp	r3, r6
 8005742:	dc01      	bgt.n	8005748 <_printf_float+0x2c0>
 8005744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005746:	e792      	b.n	800566e <_printf_float+0x1e6>
 8005748:	0022      	movs	r2, r4
 800574a:	2301      	movs	r3, #1
 800574c:	321a      	adds	r2, #26
 800574e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005752:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005754:	47b8      	blx	r7
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	d100      	bne.n	800575c <_printf_float+0x2d4>
 800575a:	e6f0      	b.n	800553e <_printf_float+0xb6>
 800575c:	3601      	adds	r6, #1
 800575e:	e7ed      	b.n	800573c <_printf_float+0x2b4>
 8005760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005762:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005764:	429f      	cmp	r7, r3
 8005766:	dd00      	ble.n	800576a <_printf_float+0x2e2>
 8005768:	001f      	movs	r7, r3
 800576a:	2f00      	cmp	r7, #0
 800576c:	dd08      	ble.n	8005780 <_printf_float+0x2f8>
 800576e:	003b      	movs	r3, r7
 8005770:	002a      	movs	r2, r5
 8005772:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005776:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005778:	47b0      	blx	r6
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d100      	bne.n	8005780 <_printf_float+0x2f8>
 800577e:	e6de      	b.n	800553e <_printf_float+0xb6>
 8005780:	2300      	movs	r3, #0
 8005782:	930d      	str	r3, [sp, #52]	; 0x34
 8005784:	43fb      	mvns	r3, r7
 8005786:	17db      	asrs	r3, r3, #31
 8005788:	930f      	str	r3, [sp, #60]	; 0x3c
 800578a:	e018      	b.n	80057be <_printf_float+0x336>
 800578c:	7fefffff 	.word	0x7fefffff
 8005790:	08009bf8 	.word	0x08009bf8
 8005794:	08009bf4 	.word	0x08009bf4
 8005798:	08009c00 	.word	0x08009c00
 800579c:	08009bfc 	.word	0x08009bfc
 80057a0:	08009c04 	.word	0x08009c04
 80057a4:	0022      	movs	r2, r4
 80057a6:	2301      	movs	r3, #1
 80057a8:	321a      	adds	r2, #26
 80057aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ae:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80057b0:	47b0      	blx	r6
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d100      	bne.n	80057b8 <_printf_float+0x330>
 80057b6:	e6c2      	b.n	800553e <_printf_float+0xb6>
 80057b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ba:	3301      	adds	r3, #1
 80057bc:	930d      	str	r3, [sp, #52]	; 0x34
 80057be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057c0:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80057c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057c4:	403b      	ands	r3, r7
 80057c6:	1af3      	subs	r3, r6, r3
 80057c8:	4293      	cmp	r3, r2
 80057ca:	dceb      	bgt.n	80057a4 <_printf_float+0x31c>
 80057cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057d0:	19ad      	adds	r5, r5, r6
 80057d2:	4293      	cmp	r3, r2
 80057d4:	db10      	blt.n	80057f8 <_printf_float+0x370>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	07db      	lsls	r3, r3, #31
 80057da:	d40d      	bmi.n	80057f8 <_printf_float+0x370>
 80057dc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80057de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057e0:	1bbe      	subs	r6, r7, r6
 80057e2:	1aff      	subs	r7, r7, r3
 80057e4:	42b7      	cmp	r7, r6
 80057e6:	dd00      	ble.n	80057ea <_printf_float+0x362>
 80057e8:	0037      	movs	r7, r6
 80057ea:	2f00      	cmp	r7, #0
 80057ec:	dc0d      	bgt.n	800580a <_printf_float+0x382>
 80057ee:	43fe      	mvns	r6, r7
 80057f0:	17f3      	asrs	r3, r6, #31
 80057f2:	2500      	movs	r5, #0
 80057f4:	930c      	str	r3, [sp, #48]	; 0x30
 80057f6:	e01c      	b.n	8005832 <_printf_float+0x3aa>
 80057f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005800:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005802:	47b8      	blx	r7
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d1e9      	bne.n	80057dc <_printf_float+0x354>
 8005808:	e699      	b.n	800553e <_printf_float+0xb6>
 800580a:	003b      	movs	r3, r7
 800580c:	002a      	movs	r2, r5
 800580e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005814:	47a8      	blx	r5
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	d1e9      	bne.n	80057ee <_printf_float+0x366>
 800581a:	e690      	b.n	800553e <_printf_float+0xb6>
 800581c:	0022      	movs	r2, r4
 800581e:	2301      	movs	r3, #1
 8005820:	321a      	adds	r2, #26
 8005822:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005826:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005828:	47b0      	blx	r6
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d100      	bne.n	8005830 <_printf_float+0x3a8>
 800582e:	e686      	b.n	800553e <_printf_float+0xb6>
 8005830:	3501      	adds	r5, #1
 8005832:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005836:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	003a      	movs	r2, r7
 800583c:	400a      	ands	r2, r1
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	42ab      	cmp	r3, r5
 8005842:	dceb      	bgt.n	800581c <_printf_float+0x394>
 8005844:	e744      	b.n	80056d0 <_printf_float+0x248>
 8005846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005848:	2b01      	cmp	r3, #1
 800584a:	dc02      	bgt.n	8005852 <_printf_float+0x3ca>
 800584c:	2301      	movs	r3, #1
 800584e:	421a      	tst	r2, r3
 8005850:	d032      	beq.n	80058b8 <_printf_float+0x430>
 8005852:	2301      	movs	r3, #1
 8005854:	002a      	movs	r2, r5
 8005856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800585a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800585c:	47b8      	blx	r7
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d100      	bne.n	8005864 <_printf_float+0x3dc>
 8005862:	e66c      	b.n	800553e <_printf_float+0xb6>
 8005864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005868:	990a      	ldr	r1, [sp, #40]	; 0x28
 800586a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800586c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800586e:	3501      	adds	r5, #1
 8005870:	47b8      	blx	r7
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	d100      	bne.n	8005878 <_printf_float+0x3f0>
 8005876:	e662      	b.n	800553e <_printf_float+0xb6>
 8005878:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800587a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800587c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800587e:	2200      	movs	r2, #0
 8005880:	1e5f      	subs	r7, r3, #1
 8005882:	2300      	movs	r3, #0
 8005884:	f7fa fdd8 	bl	8000438 <__aeabi_dcmpeq>
 8005888:	003b      	movs	r3, r7
 800588a:	2800      	cmp	r0, #0
 800588c:	d014      	beq.n	80058b8 <_printf_float+0x430>
 800588e:	2500      	movs	r5, #0
 8005890:	e00a      	b.n	80058a8 <_printf_float+0x420>
 8005892:	0022      	movs	r2, r4
 8005894:	2301      	movs	r3, #1
 8005896:	321a      	adds	r2, #26
 8005898:	990a      	ldr	r1, [sp, #40]	; 0x28
 800589a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800589c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800589e:	47b8      	blx	r7
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d100      	bne.n	80058a6 <_printf_float+0x41e>
 80058a4:	e64b      	b.n	800553e <_printf_float+0xb6>
 80058a6:	3501      	adds	r5, #1
 80058a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058aa:	3b01      	subs	r3, #1
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dcf0      	bgt.n	8005892 <_printf_float+0x40a>
 80058b0:	0022      	movs	r2, r4
 80058b2:	0033      	movs	r3, r6
 80058b4:	3250      	adds	r2, #80	; 0x50
 80058b6:	e6db      	b.n	8005670 <_printf_float+0x1e8>
 80058b8:	002a      	movs	r2, r5
 80058ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80058c0:	47a8      	blx	r5
 80058c2:	1c43      	adds	r3, r0, #1
 80058c4:	d1f4      	bne.n	80058b0 <_printf_float+0x428>
 80058c6:	e63a      	b.n	800553e <_printf_float+0xb6>
 80058c8:	0022      	movs	r2, r4
 80058ca:	2301      	movs	r3, #1
 80058cc:	3219      	adds	r2, #25
 80058ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058d4:	47b0      	blx	r6
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d100      	bne.n	80058dc <_printf_float+0x454>
 80058da:	e630      	b.n	800553e <_printf_float+0xb6>
 80058dc:	3501      	adds	r5, #1
 80058de:	68e3      	ldr	r3, [r4, #12]
 80058e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	42ab      	cmp	r3, r5
 80058e6:	dcef      	bgt.n	80058c8 <_printf_float+0x440>
 80058e8:	e6f6      	b.n	80056d8 <_printf_float+0x250>
 80058ea:	2500      	movs	r5, #0
 80058ec:	e7f7      	b.n	80058de <_printf_float+0x456>
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d100      	bne.n	80058f4 <_printf_float+0x46c>
 80058f2:	e689      	b.n	8005608 <_printf_float+0x180>
 80058f4:	2100      	movs	r1, #0
 80058f6:	9106      	str	r1, [sp, #24]
 80058f8:	a912      	add	r1, sp, #72	; 0x48
 80058fa:	9105      	str	r1, [sp, #20]
 80058fc:	a911      	add	r1, sp, #68	; 0x44
 80058fe:	9103      	str	r1, [sp, #12]
 8005900:	2123      	movs	r1, #35	; 0x23
 8005902:	a808      	add	r0, sp, #32
 8005904:	1809      	adds	r1, r1, r0
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	9200      	str	r2, [sp, #0]
 800590c:	002b      	movs	r3, r5
 800590e:	9704      	str	r7, [sp, #16]
 8005910:	9102      	str	r1, [sp, #8]
 8005912:	0032      	movs	r2, r6
 8005914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005916:	f7ff fd1b 	bl	8005350 <__cvt>
 800591a:	0005      	movs	r5, r0
 800591c:	e645      	b.n	80055aa <_printf_float+0x122>
 800591e:	46c0      	nop			; (mov r8, r8)

08005920 <_printf_common>:
 8005920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005922:	0015      	movs	r5, r2
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	688a      	ldr	r2, [r1, #8]
 8005928:	690b      	ldr	r3, [r1, #16]
 800592a:	9000      	str	r0, [sp, #0]
 800592c:	000c      	movs	r4, r1
 800592e:	4293      	cmp	r3, r2
 8005930:	da00      	bge.n	8005934 <_printf_common+0x14>
 8005932:	0013      	movs	r3, r2
 8005934:	0022      	movs	r2, r4
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	3243      	adds	r2, #67	; 0x43
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	2a00      	cmp	r2, #0
 800593e:	d001      	beq.n	8005944 <_printf_common+0x24>
 8005940:	3301      	adds	r3, #1
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	069b      	lsls	r3, r3, #26
 8005948:	d502      	bpl.n	8005950 <_printf_common+0x30>
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	3302      	adds	r3, #2
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	2706      	movs	r7, #6
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	401f      	ands	r7, r3
 8005956:	d027      	beq.n	80059a8 <_printf_common+0x88>
 8005958:	0023      	movs	r3, r4
 800595a:	3343      	adds	r3, #67	; 0x43
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	4193      	sbcs	r3, r2
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	0692      	lsls	r2, r2, #26
 8005966:	d430      	bmi.n	80059ca <_printf_common+0xaa>
 8005968:	0022      	movs	r2, r4
 800596a:	9901      	ldr	r1, [sp, #4]
 800596c:	3243      	adds	r2, #67	; 0x43
 800596e:	9800      	ldr	r0, [sp, #0]
 8005970:	9e08      	ldr	r6, [sp, #32]
 8005972:	47b0      	blx	r6
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d025      	beq.n	80059c4 <_printf_common+0xa4>
 8005978:	2306      	movs	r3, #6
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	682a      	ldr	r2, [r5, #0]
 800597e:	68e1      	ldr	r1, [r4, #12]
 8005980:	4003      	ands	r3, r0
 8005982:	2500      	movs	r5, #0
 8005984:	2b04      	cmp	r3, #4
 8005986:	d103      	bne.n	8005990 <_printf_common+0x70>
 8005988:	1a8d      	subs	r5, r1, r2
 800598a:	43eb      	mvns	r3, r5
 800598c:	17db      	asrs	r3, r3, #31
 800598e:	401d      	ands	r5, r3
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	6922      	ldr	r2, [r4, #16]
 8005994:	4293      	cmp	r3, r2
 8005996:	dd01      	ble.n	800599c <_printf_common+0x7c>
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	18ed      	adds	r5, r5, r3
 800599c:	2700      	movs	r7, #0
 800599e:	42bd      	cmp	r5, r7
 80059a0:	d120      	bne.n	80059e4 <_printf_common+0xc4>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e010      	b.n	80059c8 <_printf_common+0xa8>
 80059a6:	3701      	adds	r7, #1
 80059a8:	68e3      	ldr	r3, [r4, #12]
 80059aa:	682a      	ldr	r2, [r5, #0]
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	42bb      	cmp	r3, r7
 80059b0:	ddd2      	ble.n	8005958 <_printf_common+0x38>
 80059b2:	0022      	movs	r2, r4
 80059b4:	2301      	movs	r3, #1
 80059b6:	3219      	adds	r2, #25
 80059b8:	9901      	ldr	r1, [sp, #4]
 80059ba:	9800      	ldr	r0, [sp, #0]
 80059bc:	9e08      	ldr	r6, [sp, #32]
 80059be:	47b0      	blx	r6
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d1f0      	bne.n	80059a6 <_printf_common+0x86>
 80059c4:	2001      	movs	r0, #1
 80059c6:	4240      	negs	r0, r0
 80059c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059ca:	2030      	movs	r0, #48	; 0x30
 80059cc:	18e1      	adds	r1, r4, r3
 80059ce:	3143      	adds	r1, #67	; 0x43
 80059d0:	7008      	strb	r0, [r1, #0]
 80059d2:	0021      	movs	r1, r4
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	3145      	adds	r1, #69	; 0x45
 80059d8:	7809      	ldrb	r1, [r1, #0]
 80059da:	18a2      	adds	r2, r4, r2
 80059dc:	3243      	adds	r2, #67	; 0x43
 80059de:	3302      	adds	r3, #2
 80059e0:	7011      	strb	r1, [r2, #0]
 80059e2:	e7c1      	b.n	8005968 <_printf_common+0x48>
 80059e4:	0022      	movs	r2, r4
 80059e6:	2301      	movs	r3, #1
 80059e8:	321a      	adds	r2, #26
 80059ea:	9901      	ldr	r1, [sp, #4]
 80059ec:	9800      	ldr	r0, [sp, #0]
 80059ee:	9e08      	ldr	r6, [sp, #32]
 80059f0:	47b0      	blx	r6
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d0e6      	beq.n	80059c4 <_printf_common+0xa4>
 80059f6:	3701      	adds	r7, #1
 80059f8:	e7d1      	b.n	800599e <_printf_common+0x7e>
	...

080059fc <_printf_i>:
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	9204      	str	r2, [sp, #16]
 8005a02:	000a      	movs	r2, r1
 8005a04:	3243      	adds	r2, #67	; 0x43
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	9003      	str	r0, [sp, #12]
 8005a0a:	9202      	str	r2, [sp, #8]
 8005a0c:	7e0a      	ldrb	r2, [r1, #24]
 8005a0e:	000c      	movs	r4, r1
 8005a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a12:	2a6e      	cmp	r2, #110	; 0x6e
 8005a14:	d100      	bne.n	8005a18 <_printf_i+0x1c>
 8005a16:	e086      	b.n	8005b26 <_printf_i+0x12a>
 8005a18:	d81f      	bhi.n	8005a5a <_printf_i+0x5e>
 8005a1a:	2a63      	cmp	r2, #99	; 0x63
 8005a1c:	d033      	beq.n	8005a86 <_printf_i+0x8a>
 8005a1e:	d808      	bhi.n	8005a32 <_printf_i+0x36>
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d100      	bne.n	8005a26 <_printf_i+0x2a>
 8005a24:	e08c      	b.n	8005b40 <_printf_i+0x144>
 8005a26:	2a58      	cmp	r2, #88	; 0x58
 8005a28:	d04d      	beq.n	8005ac6 <_printf_i+0xca>
 8005a2a:	0025      	movs	r5, r4
 8005a2c:	3542      	adds	r5, #66	; 0x42
 8005a2e:	702a      	strb	r2, [r5, #0]
 8005a30:	e030      	b.n	8005a94 <_printf_i+0x98>
 8005a32:	2a64      	cmp	r2, #100	; 0x64
 8005a34:	d001      	beq.n	8005a3a <_printf_i+0x3e>
 8005a36:	2a69      	cmp	r2, #105	; 0x69
 8005a38:	d1f7      	bne.n	8005a2a <_printf_i+0x2e>
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	6825      	ldr	r5, [r4, #0]
 8005a3e:	1d0a      	adds	r2, r1, #4
 8005a40:	0628      	lsls	r0, r5, #24
 8005a42:	d529      	bpl.n	8005a98 <_printf_i+0x9c>
 8005a44:	6808      	ldr	r0, [r1, #0]
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	da03      	bge.n	8005a54 <_printf_i+0x58>
 8005a4c:	232d      	movs	r3, #45	; 0x2d
 8005a4e:	9a02      	ldr	r2, [sp, #8]
 8005a50:	4240      	negs	r0, r0
 8005a52:	7013      	strb	r3, [r2, #0]
 8005a54:	4e6b      	ldr	r6, [pc, #428]	; (8005c04 <_printf_i+0x208>)
 8005a56:	270a      	movs	r7, #10
 8005a58:	e04f      	b.n	8005afa <_printf_i+0xfe>
 8005a5a:	2a73      	cmp	r2, #115	; 0x73
 8005a5c:	d074      	beq.n	8005b48 <_printf_i+0x14c>
 8005a5e:	d808      	bhi.n	8005a72 <_printf_i+0x76>
 8005a60:	2a6f      	cmp	r2, #111	; 0x6f
 8005a62:	d01f      	beq.n	8005aa4 <_printf_i+0xa8>
 8005a64:	2a70      	cmp	r2, #112	; 0x70
 8005a66:	d1e0      	bne.n	8005a2a <_printf_i+0x2e>
 8005a68:	2220      	movs	r2, #32
 8005a6a:	6809      	ldr	r1, [r1, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	e003      	b.n	8005a7a <_printf_i+0x7e>
 8005a72:	2a75      	cmp	r2, #117	; 0x75
 8005a74:	d016      	beq.n	8005aa4 <_printf_i+0xa8>
 8005a76:	2a78      	cmp	r2, #120	; 0x78
 8005a78:	d1d7      	bne.n	8005a2a <_printf_i+0x2e>
 8005a7a:	0022      	movs	r2, r4
 8005a7c:	2178      	movs	r1, #120	; 0x78
 8005a7e:	3245      	adds	r2, #69	; 0x45
 8005a80:	7011      	strb	r1, [r2, #0]
 8005a82:	4e61      	ldr	r6, [pc, #388]	; (8005c08 <_printf_i+0x20c>)
 8005a84:	e022      	b.n	8005acc <_printf_i+0xd0>
 8005a86:	0025      	movs	r5, r4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	3542      	adds	r5, #66	; 0x42
 8005a8c:	1d11      	adds	r1, r2, #4
 8005a8e:	6019      	str	r1, [r3, #0]
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	702b      	strb	r3, [r5, #0]
 8005a94:	2301      	movs	r3, #1
 8005a96:	e065      	b.n	8005b64 <_printf_i+0x168>
 8005a98:	6808      	ldr	r0, [r1, #0]
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	0669      	lsls	r1, r5, #25
 8005a9e:	d5d3      	bpl.n	8005a48 <_printf_i+0x4c>
 8005aa0:	b200      	sxth	r0, r0
 8005aa2:	e7d1      	b.n	8005a48 <_printf_i+0x4c>
 8005aa4:	6819      	ldr	r1, [r3, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	1d08      	adds	r0, r1, #4
 8005aaa:	6018      	str	r0, [r3, #0]
 8005aac:	6808      	ldr	r0, [r1, #0]
 8005aae:	062e      	lsls	r6, r5, #24
 8005ab0:	d505      	bpl.n	8005abe <_printf_i+0xc2>
 8005ab2:	4e54      	ldr	r6, [pc, #336]	; (8005c04 <_printf_i+0x208>)
 8005ab4:	2708      	movs	r7, #8
 8005ab6:	2a6f      	cmp	r2, #111	; 0x6f
 8005ab8:	d01b      	beq.n	8005af2 <_printf_i+0xf6>
 8005aba:	270a      	movs	r7, #10
 8005abc:	e019      	b.n	8005af2 <_printf_i+0xf6>
 8005abe:	066d      	lsls	r5, r5, #25
 8005ac0:	d5f7      	bpl.n	8005ab2 <_printf_i+0xb6>
 8005ac2:	b280      	uxth	r0, r0
 8005ac4:	e7f5      	b.n	8005ab2 <_printf_i+0xb6>
 8005ac6:	3145      	adds	r1, #69	; 0x45
 8005ac8:	4e4e      	ldr	r6, [pc, #312]	; (8005c04 <_printf_i+0x208>)
 8005aca:	700a      	strb	r2, [r1, #0]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	1d01      	adds	r1, r0, #4
 8005ad2:	6800      	ldr	r0, [r0, #0]
 8005ad4:	6019      	str	r1, [r3, #0]
 8005ad6:	0615      	lsls	r5, r2, #24
 8005ad8:	d521      	bpl.n	8005b1e <_printf_i+0x122>
 8005ada:	07d3      	lsls	r3, r2, #31
 8005adc:	d502      	bpl.n	8005ae4 <_printf_i+0xe8>
 8005ade:	2320      	movs	r3, #32
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	2710      	movs	r7, #16
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d103      	bne.n	8005af2 <_printf_i+0xf6>
 8005aea:	2320      	movs	r3, #32
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	439a      	bics	r2, r3
 8005af0:	6022      	str	r2, [r4, #0]
 8005af2:	0023      	movs	r3, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	3343      	adds	r3, #67	; 0x43
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db58      	blt.n	8005bb4 <_printf_i+0x1b8>
 8005b02:	2204      	movs	r2, #4
 8005b04:	6821      	ldr	r1, [r4, #0]
 8005b06:	4391      	bics	r1, r2
 8005b08:	6021      	str	r1, [r4, #0]
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d154      	bne.n	8005bb8 <_printf_i+0x1bc>
 8005b0e:	9d02      	ldr	r5, [sp, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05a      	beq.n	8005bca <_printf_i+0x1ce>
 8005b14:	0025      	movs	r5, r4
 8005b16:	7833      	ldrb	r3, [r6, #0]
 8005b18:	3542      	adds	r5, #66	; 0x42
 8005b1a:	702b      	strb	r3, [r5, #0]
 8005b1c:	e055      	b.n	8005bca <_printf_i+0x1ce>
 8005b1e:	0655      	lsls	r5, r2, #25
 8005b20:	d5db      	bpl.n	8005ada <_printf_i+0xde>
 8005b22:	b280      	uxth	r0, r0
 8005b24:	e7d9      	b.n	8005ada <_printf_i+0xde>
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	680d      	ldr	r5, [r1, #0]
 8005b2a:	1d10      	adds	r0, r2, #4
 8005b2c:	6949      	ldr	r1, [r1, #20]
 8005b2e:	6018      	str	r0, [r3, #0]
 8005b30:	6813      	ldr	r3, [r2, #0]
 8005b32:	062e      	lsls	r6, r5, #24
 8005b34:	d501      	bpl.n	8005b3a <_printf_i+0x13e>
 8005b36:	6019      	str	r1, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <_printf_i+0x144>
 8005b3a:	066d      	lsls	r5, r5, #25
 8005b3c:	d5fb      	bpl.n	8005b36 <_printf_i+0x13a>
 8005b3e:	8019      	strh	r1, [r3, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9d02      	ldr	r5, [sp, #8]
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	e04f      	b.n	8005be8 <_printf_i+0x1ec>
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	1d11      	adds	r1, r2, #4
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	6815      	ldr	r5, [r2, #0]
 8005b50:	2100      	movs	r1, #0
 8005b52:	6862      	ldr	r2, [r4, #4]
 8005b54:	0028      	movs	r0, r5
 8005b56:	f002 ff13 	bl	8008980 <memchr>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d001      	beq.n	8005b62 <_printf_i+0x166>
 8005b5e:	1b40      	subs	r0, r0, r5
 8005b60:	6060      	str	r0, [r4, #4]
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9a02      	ldr	r2, [sp, #8]
 8005b6a:	7013      	strb	r3, [r2, #0]
 8005b6c:	e03c      	b.n	8005be8 <_printf_i+0x1ec>
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	002a      	movs	r2, r5
 8005b72:	9904      	ldr	r1, [sp, #16]
 8005b74:	9803      	ldr	r0, [sp, #12]
 8005b76:	9d05      	ldr	r5, [sp, #20]
 8005b78:	47a8      	blx	r5
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	d03e      	beq.n	8005bfc <_printf_i+0x200>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	079b      	lsls	r3, r3, #30
 8005b82:	d415      	bmi.n	8005bb0 <_printf_i+0x1b4>
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	68e0      	ldr	r0, [r4, #12]
 8005b88:	4298      	cmp	r0, r3
 8005b8a:	da39      	bge.n	8005c00 <_printf_i+0x204>
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	e037      	b.n	8005c00 <_printf_i+0x204>
 8005b90:	0022      	movs	r2, r4
 8005b92:	2301      	movs	r3, #1
 8005b94:	3219      	adds	r2, #25
 8005b96:	9904      	ldr	r1, [sp, #16]
 8005b98:	9803      	ldr	r0, [sp, #12]
 8005b9a:	9e05      	ldr	r6, [sp, #20]
 8005b9c:	47b0      	blx	r6
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	d02c      	beq.n	8005bfc <_printf_i+0x200>
 8005ba2:	3501      	adds	r5, #1
 8005ba4:	68e3      	ldr	r3, [r4, #12]
 8005ba6:	9a07      	ldr	r2, [sp, #28]
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	dcf0      	bgt.n	8005b90 <_printf_i+0x194>
 8005bae:	e7e9      	b.n	8005b84 <_printf_i+0x188>
 8005bb0:	2500      	movs	r5, #0
 8005bb2:	e7f7      	b.n	8005ba4 <_printf_i+0x1a8>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d0ad      	beq.n	8005b14 <_printf_i+0x118>
 8005bb8:	9d02      	ldr	r5, [sp, #8]
 8005bba:	0039      	movs	r1, r7
 8005bbc:	f7fa fb3c 	bl	8000238 <__aeabi_uidivmod>
 8005bc0:	5c73      	ldrb	r3, [r6, r1]
 8005bc2:	3d01      	subs	r5, #1
 8005bc4:	702b      	strb	r3, [r5, #0]
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d1f7      	bne.n	8005bba <_printf_i+0x1be>
 8005bca:	2f08      	cmp	r7, #8
 8005bcc:	d109      	bne.n	8005be2 <_printf_i+0x1e6>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	07db      	lsls	r3, r3, #31
 8005bd2:	d506      	bpl.n	8005be2 <_printf_i+0x1e6>
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	dc02      	bgt.n	8005be2 <_printf_i+0x1e6>
 8005bdc:	2330      	movs	r3, #48	; 0x30
 8005bde:	3d01      	subs	r5, #1
 8005be0:	702b      	strb	r3, [r5, #0]
 8005be2:	9b02      	ldr	r3, [sp, #8]
 8005be4:	1b5b      	subs	r3, r3, r5
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	aa07      	add	r2, sp, #28
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	0021      	movs	r1, r4
 8005bf0:	9b04      	ldr	r3, [sp, #16]
 8005bf2:	9803      	ldr	r0, [sp, #12]
 8005bf4:	f7ff fe94 	bl	8005920 <_printf_common>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d1b8      	bne.n	8005b6e <_printf_i+0x172>
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	4240      	negs	r0, r0
 8005c00:	b009      	add	sp, #36	; 0x24
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	08009c06 	.word	0x08009c06
 8005c08:	08009c17 	.word	0x08009c17

08005c0c <_scanf_float>:
 8005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0e:	b08b      	sub	sp, #44	; 0x2c
 8005c10:	9002      	str	r0, [sp, #8]
 8005c12:	9200      	str	r2, [sp, #0]
 8005c14:	2000      	movs	r0, #0
 8005c16:	22ae      	movs	r2, #174	; 0xae
 8005c18:	9305      	str	r3, [sp, #20]
 8005c1a:	688b      	ldr	r3, [r1, #8]
 8005c1c:	000e      	movs	r6, r1
 8005c1e:	1e59      	subs	r1, r3, #1
 8005c20:	0052      	lsls	r2, r2, #1
 8005c22:	9004      	str	r0, [sp, #16]
 8005c24:	4291      	cmp	r1, r2
 8005c26:	d905      	bls.n	8005c34 <_scanf_float+0x28>
 8005c28:	3b5e      	subs	r3, #94	; 0x5e
 8005c2a:	3bff      	subs	r3, #255	; 0xff
 8005c2c:	9304      	str	r3, [sp, #16]
 8005c2e:	235e      	movs	r3, #94	; 0x5e
 8005c30:	33ff      	adds	r3, #255	; 0xff
 8005c32:	60b3      	str	r3, [r6, #8]
 8005c34:	23f0      	movs	r3, #240	; 0xf0
 8005c36:	6832      	ldr	r2, [r6, #0]
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	0033      	movs	r3, r6
 8005c40:	2700      	movs	r7, #0
 8005c42:	331c      	adds	r3, #28
 8005c44:	001d      	movs	r5, r3
 8005c46:	003c      	movs	r4, r7
 8005c48:	9303      	str	r3, [sp, #12]
 8005c4a:	9708      	str	r7, [sp, #32]
 8005c4c:	9707      	str	r7, [sp, #28]
 8005c4e:	9701      	str	r7, [sp, #4]
 8005c50:	9706      	str	r7, [sp, #24]
 8005c52:	68b2      	ldr	r2, [r6, #8]
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	d013      	beq.n	8005c80 <_scanf_float+0x74>
 8005c58:	9b00      	ldr	r3, [sp, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b49      	cmp	r3, #73	; 0x49
 8005c62:	d100      	bne.n	8005c66 <_scanf_float+0x5a>
 8005c64:	e07c      	b.n	8005d60 <_scanf_float+0x154>
 8005c66:	d854      	bhi.n	8005d12 <_scanf_float+0x106>
 8005c68:	2b39      	cmp	r3, #57	; 0x39
 8005c6a:	d847      	bhi.n	8005cfc <_scanf_float+0xf0>
 8005c6c:	2b31      	cmp	r3, #49	; 0x31
 8005c6e:	d300      	bcc.n	8005c72 <_scanf_float+0x66>
 8005c70:	e094      	b.n	8005d9c <_scanf_float+0x190>
 8005c72:	2b2d      	cmp	r3, #45	; 0x2d
 8005c74:	d100      	bne.n	8005c78 <_scanf_float+0x6c>
 8005c76:	e09c      	b.n	8005db2 <_scanf_float+0x1a6>
 8005c78:	d817      	bhi.n	8005caa <_scanf_float+0x9e>
 8005c7a:	2b2b      	cmp	r3, #43	; 0x2b
 8005c7c:	d100      	bne.n	8005c80 <_scanf_float+0x74>
 8005c7e:	e098      	b.n	8005db2 <_scanf_float+0x1a6>
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <_scanf_float+0x82>
 8005c86:	6832      	ldr	r2, [r6, #0]
 8005c88:	4b9b      	ldr	r3, [pc, #620]	; (8005ef8 <_scanf_float+0x2ec>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	3c01      	subs	r4, #1
 8005c90:	2c01      	cmp	r4, #1
 8005c92:	d900      	bls.n	8005c96 <_scanf_float+0x8a>
 8005c94:	e0ee      	b.n	8005e74 <_scanf_float+0x268>
 8005c96:	24be      	movs	r4, #190	; 0xbe
 8005c98:	0064      	lsls	r4, r4, #1
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	429d      	cmp	r5, r3
 8005c9e:	d900      	bls.n	8005ca2 <_scanf_float+0x96>
 8005ca0:	e0de      	b.n	8005e60 <_scanf_float+0x254>
 8005ca2:	2701      	movs	r7, #1
 8005ca4:	0038      	movs	r0, r7
 8005ca6:	b00b      	add	sp, #44	; 0x2c
 8005ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005caa:	2b2e      	cmp	r3, #46	; 0x2e
 8005cac:	d100      	bne.n	8005cb0 <_scanf_float+0xa4>
 8005cae:	e0a2      	b.n	8005df6 <_scanf_float+0x1ea>
 8005cb0:	2b30      	cmp	r3, #48	; 0x30
 8005cb2:	d1e5      	bne.n	8005c80 <_scanf_float+0x74>
 8005cb4:	6831      	ldr	r1, [r6, #0]
 8005cb6:	05c8      	lsls	r0, r1, #23
 8005cb8:	d570      	bpl.n	8005d9c <_scanf_float+0x190>
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	4399      	bics	r1, r3
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	6031      	str	r1, [r6, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	9b04      	ldr	r3, [sp, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <_scanf_float+0xc8>
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	3201      	adds	r2, #1
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	60b2      	str	r2, [r6, #8]
 8005cd4:	68b3      	ldr	r3, [r6, #8]
 8005cd6:	9a00      	ldr	r2, [sp, #0]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	60b3      	str	r3, [r6, #8]
 8005cdc:	6933      	ldr	r3, [r6, #16]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	6133      	str	r3, [r6, #16]
 8005ce2:	9b00      	ldr	r3, [sp, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	6053      	str	r3, [r2, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dc00      	bgt.n	8005cf2 <_scanf_float+0xe6>
 8005cf0:	e0ac      	b.n	8005e4c <_scanf_float+0x240>
 8005cf2:	6813      	ldr	r3, [r2, #0]
 8005cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e7aa      	b.n	8005c52 <_scanf_float+0x46>
 8005cfc:	2b45      	cmp	r3, #69	; 0x45
 8005cfe:	d100      	bne.n	8005d02 <_scanf_float+0xf6>
 8005d00:	e083      	b.n	8005e0a <_scanf_float+0x1fe>
 8005d02:	2b46      	cmp	r3, #70	; 0x46
 8005d04:	d06d      	beq.n	8005de2 <_scanf_float+0x1d6>
 8005d06:	2b41      	cmp	r3, #65	; 0x41
 8005d08:	d1ba      	bne.n	8005c80 <_scanf_float+0x74>
 8005d0a:	2c01      	cmp	r4, #1
 8005d0c:	d1b8      	bne.n	8005c80 <_scanf_float+0x74>
 8005d0e:	2402      	movs	r4, #2
 8005d10:	e04c      	b.n	8005dac <_scanf_float+0x1a0>
 8005d12:	2b65      	cmp	r3, #101	; 0x65
 8005d14:	d079      	beq.n	8005e0a <_scanf_float+0x1fe>
 8005d16:	d81b      	bhi.n	8005d50 <_scanf_float+0x144>
 8005d18:	2b54      	cmp	r3, #84	; 0x54
 8005d1a:	d067      	beq.n	8005dec <_scanf_float+0x1e0>
 8005d1c:	d813      	bhi.n	8005d46 <_scanf_float+0x13a>
 8005d1e:	2b4e      	cmp	r3, #78	; 0x4e
 8005d20:	d1ae      	bne.n	8005c80 <_scanf_float+0x74>
 8005d22:	2c00      	cmp	r4, #0
 8005d24:	d14c      	bne.n	8005dc0 <_scanf_float+0x1b4>
 8005d26:	9a01      	ldr	r2, [sp, #4]
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d14b      	bne.n	8005dc4 <_scanf_float+0x1b8>
 8005d2c:	21e0      	movs	r1, #224	; 0xe0
 8005d2e:	20e0      	movs	r0, #224	; 0xe0
 8005d30:	6832      	ldr	r2, [r6, #0]
 8005d32:	00c9      	lsls	r1, r1, #3
 8005d34:	4011      	ands	r1, r2
 8005d36:	00c0      	lsls	r0, r0, #3
 8005d38:	4281      	cmp	r1, r0
 8005d3a:	d143      	bne.n	8005dc4 <_scanf_float+0x1b8>
 8005d3c:	496f      	ldr	r1, [pc, #444]	; (8005efc <_scanf_float+0x2f0>)
 8005d3e:	3401      	adds	r4, #1
 8005d40:	400a      	ands	r2, r1
 8005d42:	6032      	str	r2, [r6, #0]
 8005d44:	e032      	b.n	8005dac <_scanf_float+0x1a0>
 8005d46:	2b59      	cmp	r3, #89	; 0x59
 8005d48:	d023      	beq.n	8005d92 <_scanf_float+0x186>
 8005d4a:	2b61      	cmp	r3, #97	; 0x61
 8005d4c:	d0dd      	beq.n	8005d0a <_scanf_float+0xfe>
 8005d4e:	e797      	b.n	8005c80 <_scanf_float+0x74>
 8005d50:	2b6e      	cmp	r3, #110	; 0x6e
 8005d52:	d0e6      	beq.n	8005d22 <_scanf_float+0x116>
 8005d54:	d818      	bhi.n	8005d88 <_scanf_float+0x17c>
 8005d56:	2b66      	cmp	r3, #102	; 0x66
 8005d58:	d043      	beq.n	8005de2 <_scanf_float+0x1d6>
 8005d5a:	2b69      	cmp	r3, #105	; 0x69
 8005d5c:	d000      	beq.n	8005d60 <_scanf_float+0x154>
 8005d5e:	e78f      	b.n	8005c80 <_scanf_float+0x74>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	d137      	bne.n	8005dd4 <_scanf_float+0x1c8>
 8005d64:	9a01      	ldr	r2, [sp, #4]
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	d000      	beq.n	8005d6c <_scanf_float+0x160>
 8005d6a:	e78c      	b.n	8005c86 <_scanf_float+0x7a>
 8005d6c:	21e0      	movs	r1, #224	; 0xe0
 8005d6e:	20e0      	movs	r0, #224	; 0xe0
 8005d70:	6832      	ldr	r2, [r6, #0]
 8005d72:	00c9      	lsls	r1, r1, #3
 8005d74:	4011      	ands	r1, r2
 8005d76:	00c0      	lsls	r0, r0, #3
 8005d78:	4281      	cmp	r1, r0
 8005d7a:	d000      	beq.n	8005d7e <_scanf_float+0x172>
 8005d7c:	e787      	b.n	8005c8e <_scanf_float+0x82>
 8005d7e:	495f      	ldr	r1, [pc, #380]	; (8005efc <_scanf_float+0x2f0>)
 8005d80:	3701      	adds	r7, #1
 8005d82:	400a      	ands	r2, r1
 8005d84:	6032      	str	r2, [r6, #0]
 8005d86:	e011      	b.n	8005dac <_scanf_float+0x1a0>
 8005d88:	2b74      	cmp	r3, #116	; 0x74
 8005d8a:	d02f      	beq.n	8005dec <_scanf_float+0x1e0>
 8005d8c:	2b79      	cmp	r3, #121	; 0x79
 8005d8e:	d000      	beq.n	8005d92 <_scanf_float+0x186>
 8005d90:	e776      	b.n	8005c80 <_scanf_float+0x74>
 8005d92:	2f07      	cmp	r7, #7
 8005d94:	d000      	beq.n	8005d98 <_scanf_float+0x18c>
 8005d96:	e773      	b.n	8005c80 <_scanf_float+0x74>
 8005d98:	2708      	movs	r7, #8
 8005d9a:	e007      	b.n	8005dac <_scanf_float+0x1a0>
 8005d9c:	19e2      	adds	r2, r4, r7
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	d000      	beq.n	8005da4 <_scanf_float+0x198>
 8005da2:	e76d      	b.n	8005c80 <_scanf_float+0x74>
 8005da4:	4a56      	ldr	r2, [pc, #344]	; (8005f00 <_scanf_float+0x2f4>)
 8005da6:	6831      	ldr	r1, [r6, #0]
 8005da8:	400a      	ands	r2, r1
 8005daa:	6032      	str	r2, [r6, #0]
 8005dac:	702b      	strb	r3, [r5, #0]
 8005dae:	3501      	adds	r5, #1
 8005db0:	e790      	b.n	8005cd4 <_scanf_float+0xc8>
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	6832      	ldr	r2, [r6, #0]
 8005db6:	420a      	tst	r2, r1
 8005db8:	d100      	bne.n	8005dbc <_scanf_float+0x1b0>
 8005dba:	e761      	b.n	8005c80 <_scanf_float+0x74>
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	e7f4      	b.n	8005daa <_scanf_float+0x19e>
 8005dc0:	2c02      	cmp	r4, #2
 8005dc2:	d041      	beq.n	8005e48 <_scanf_float+0x23c>
 8005dc4:	2f01      	cmp	r7, #1
 8005dc6:	d002      	beq.n	8005dce <_scanf_float+0x1c2>
 8005dc8:	2f04      	cmp	r7, #4
 8005dca:	d000      	beq.n	8005dce <_scanf_float+0x1c2>
 8005dcc:	e758      	b.n	8005c80 <_scanf_float+0x74>
 8005dce:	3701      	adds	r7, #1
 8005dd0:	b2ff      	uxtb	r7, r7
 8005dd2:	e7eb      	b.n	8005dac <_scanf_float+0x1a0>
 8005dd4:	2102      	movs	r1, #2
 8005dd6:	1efa      	subs	r2, r7, #3
 8005dd8:	438a      	bics	r2, r1
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d0f6      	beq.n	8005dce <_scanf_float+0x1c2>
 8005de0:	e74e      	b.n	8005c80 <_scanf_float+0x74>
 8005de2:	2f02      	cmp	r7, #2
 8005de4:	d000      	beq.n	8005de8 <_scanf_float+0x1dc>
 8005de6:	e74b      	b.n	8005c80 <_scanf_float+0x74>
 8005de8:	2703      	movs	r7, #3
 8005dea:	e7df      	b.n	8005dac <_scanf_float+0x1a0>
 8005dec:	2f06      	cmp	r7, #6
 8005dee:	d000      	beq.n	8005df2 <_scanf_float+0x1e6>
 8005df0:	e746      	b.n	8005c80 <_scanf_float+0x74>
 8005df2:	2707      	movs	r7, #7
 8005df4:	e7da      	b.n	8005dac <_scanf_float+0x1a0>
 8005df6:	6832      	ldr	r2, [r6, #0]
 8005df8:	0591      	lsls	r1, r2, #22
 8005dfa:	d400      	bmi.n	8005dfe <_scanf_float+0x1f2>
 8005dfc:	e740      	b.n	8005c80 <_scanf_float+0x74>
 8005dfe:	4941      	ldr	r1, [pc, #260]	; (8005f04 <_scanf_float+0x2f8>)
 8005e00:	400a      	ands	r2, r1
 8005e02:	6032      	str	r2, [r6, #0]
 8005e04:	9a01      	ldr	r2, [sp, #4]
 8005e06:	9206      	str	r2, [sp, #24]
 8005e08:	e7d0      	b.n	8005dac <_scanf_float+0x1a0>
 8005e0a:	21a0      	movs	r1, #160	; 0xa0
 8005e0c:	2080      	movs	r0, #128	; 0x80
 8005e0e:	6832      	ldr	r2, [r6, #0]
 8005e10:	00c9      	lsls	r1, r1, #3
 8005e12:	4011      	ands	r1, r2
 8005e14:	00c0      	lsls	r0, r0, #3
 8005e16:	4281      	cmp	r1, r0
 8005e18:	d006      	beq.n	8005e28 <_scanf_float+0x21c>
 8005e1a:	4202      	tst	r2, r0
 8005e1c:	d100      	bne.n	8005e20 <_scanf_float+0x214>
 8005e1e:	e72f      	b.n	8005c80 <_scanf_float+0x74>
 8005e20:	9901      	ldr	r1, [sp, #4]
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d100      	bne.n	8005e28 <_scanf_float+0x21c>
 8005e26:	e732      	b.n	8005c8e <_scanf_float+0x82>
 8005e28:	0591      	lsls	r1, r2, #22
 8005e2a:	d404      	bmi.n	8005e36 <_scanf_float+0x22a>
 8005e2c:	9901      	ldr	r1, [sp, #4]
 8005e2e:	9806      	ldr	r0, [sp, #24]
 8005e30:	9508      	str	r5, [sp, #32]
 8005e32:	1a09      	subs	r1, r1, r0
 8005e34:	9107      	str	r1, [sp, #28]
 8005e36:	4931      	ldr	r1, [pc, #196]	; (8005efc <_scanf_float+0x2f0>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	21c0      	movs	r1, #192	; 0xc0
 8005e3c:	0049      	lsls	r1, r1, #1
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	6032      	str	r2, [r6, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	9201      	str	r2, [sp, #4]
 8005e46:	e7b1      	b.n	8005dac <_scanf_float+0x1a0>
 8005e48:	2403      	movs	r4, #3
 8005e4a:	e7af      	b.n	8005dac <_scanf_float+0x1a0>
 8005e4c:	23c0      	movs	r3, #192	; 0xc0
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	58f3      	ldr	r3, [r6, r3]
 8005e52:	9900      	ldr	r1, [sp, #0]
 8005e54:	9802      	ldr	r0, [sp, #8]
 8005e56:	4798      	blx	r3
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d100      	bne.n	8005e5e <_scanf_float+0x252>
 8005e5c:	e6f9      	b.n	8005c52 <_scanf_float+0x46>
 8005e5e:	e70f      	b.n	8005c80 <_scanf_float+0x74>
 8005e60:	3d01      	subs	r5, #1
 8005e62:	5933      	ldr	r3, [r6, r4]
 8005e64:	7829      	ldrb	r1, [r5, #0]
 8005e66:	9a00      	ldr	r2, [sp, #0]
 8005e68:	9802      	ldr	r0, [sp, #8]
 8005e6a:	4798      	blx	r3
 8005e6c:	6933      	ldr	r3, [r6, #16]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6133      	str	r3, [r6, #16]
 8005e72:	e712      	b.n	8005c9a <_scanf_float+0x8e>
 8005e74:	1e7b      	subs	r3, r7, #1
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d826      	bhi.n	8005ec8 <_scanf_float+0x2bc>
 8005e7a:	2f02      	cmp	r7, #2
 8005e7c:	d839      	bhi.n	8005ef2 <_scanf_float+0x2e6>
 8005e7e:	24be      	movs	r4, #190	; 0xbe
 8005e80:	0064      	lsls	r4, r4, #1
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	429d      	cmp	r5, r3
 8005e86:	d800      	bhi.n	8005e8a <_scanf_float+0x27e>
 8005e88:	e70b      	b.n	8005ca2 <_scanf_float+0x96>
 8005e8a:	3d01      	subs	r5, #1
 8005e8c:	5933      	ldr	r3, [r6, r4]
 8005e8e:	7829      	ldrb	r1, [r5, #0]
 8005e90:	9a00      	ldr	r2, [sp, #0]
 8005e92:	9802      	ldr	r0, [sp, #8]
 8005e94:	4798      	blx	r3
 8005e96:	6933      	ldr	r3, [r6, #16]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	6133      	str	r3, [r6, #16]
 8005e9c:	e7f1      	b.n	8005e82 <_scanf_float+0x276>
 8005e9e:	9b04      	ldr	r3, [sp, #16]
 8005ea0:	9a00      	ldr	r2, [sp, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	7819      	ldrb	r1, [r3, #0]
 8005ea8:	23be      	movs	r3, #190	; 0xbe
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	58f3      	ldr	r3, [r6, r3]
 8005eae:	9802      	ldr	r0, [sp, #8]
 8005eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb2:	4798      	blx	r3
 8005eb4:	6933      	ldr	r3, [r6, #16]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	6133      	str	r3, [r6, #16]
 8005eba:	3c01      	subs	r4, #1
 8005ebc:	b2e4      	uxtb	r4, r4
 8005ebe:	2c02      	cmp	r4, #2
 8005ec0:	d1ed      	bne.n	8005e9e <_scanf_float+0x292>
 8005ec2:	3f03      	subs	r7, #3
 8005ec4:	b2ff      	uxtb	r7, r7
 8005ec6:	1bed      	subs	r5, r5, r7
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	05da      	lsls	r2, r3, #23
 8005ecc:	d537      	bpl.n	8005f3e <_scanf_float+0x332>
 8005ece:	055b      	lsls	r3, r3, #21
 8005ed0:	d51a      	bpl.n	8005f08 <_scanf_float+0x2fc>
 8005ed2:	24be      	movs	r4, #190	; 0xbe
 8005ed4:	0064      	lsls	r4, r4, #1
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	429d      	cmp	r5, r3
 8005eda:	d800      	bhi.n	8005ede <_scanf_float+0x2d2>
 8005edc:	e6e1      	b.n	8005ca2 <_scanf_float+0x96>
 8005ede:	3d01      	subs	r5, #1
 8005ee0:	5933      	ldr	r3, [r6, r4]
 8005ee2:	7829      	ldrb	r1, [r5, #0]
 8005ee4:	9a00      	ldr	r2, [sp, #0]
 8005ee6:	9802      	ldr	r0, [sp, #8]
 8005ee8:	4798      	blx	r3
 8005eea:	6933      	ldr	r3, [r6, #16]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	6133      	str	r3, [r6, #16]
 8005ef0:	e7f1      	b.n	8005ed6 <_scanf_float+0x2ca>
 8005ef2:	003c      	movs	r4, r7
 8005ef4:	9504      	str	r5, [sp, #16]
 8005ef6:	e7e0      	b.n	8005eba <_scanf_float+0x2ae>
 8005ef8:	fffffeff 	.word	0xfffffeff
 8005efc:	fffff87f 	.word	0xfffff87f
 8005f00:	fffffe7f 	.word	0xfffffe7f
 8005f04:	fffffd7f 	.word	0xfffffd7f
 8005f08:	6933      	ldr	r3, [r6, #16]
 8005f0a:	1e6c      	subs	r4, r5, #1
 8005f0c:	7821      	ldrb	r1, [r4, #0]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	6133      	str	r3, [r6, #16]
 8005f12:	2965      	cmp	r1, #101	; 0x65
 8005f14:	d00c      	beq.n	8005f30 <_scanf_float+0x324>
 8005f16:	2945      	cmp	r1, #69	; 0x45
 8005f18:	d00a      	beq.n	8005f30 <_scanf_float+0x324>
 8005f1a:	23be      	movs	r3, #190	; 0xbe
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	58f3      	ldr	r3, [r6, r3]
 8005f20:	9a00      	ldr	r2, [sp, #0]
 8005f22:	9802      	ldr	r0, [sp, #8]
 8005f24:	4798      	blx	r3
 8005f26:	6933      	ldr	r3, [r6, #16]
 8005f28:	1eac      	subs	r4, r5, #2
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	7821      	ldrb	r1, [r4, #0]
 8005f2e:	6133      	str	r3, [r6, #16]
 8005f30:	23be      	movs	r3, #190	; 0xbe
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	58f3      	ldr	r3, [r6, r3]
 8005f36:	9a00      	ldr	r2, [sp, #0]
 8005f38:	9802      	ldr	r0, [sp, #8]
 8005f3a:	4798      	blx	r3
 8005f3c:	0025      	movs	r5, r4
 8005f3e:	2710      	movs	r7, #16
 8005f40:	6833      	ldr	r3, [r6, #0]
 8005f42:	401f      	ands	r7, r3
 8005f44:	d15b      	bne.n	8005ffe <_scanf_float+0x3f2>
 8005f46:	23c0      	movs	r3, #192	; 0xc0
 8005f48:	702f      	strb	r7, [r5, #0]
 8005f4a:	6832      	ldr	r2, [r6, #0]
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	00d2      	lsls	r2, r2, #3
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d11b      	bne.n	8005f90 <_scanf_float+0x384>
 8005f58:	9a06      	ldr	r2, [sp, #24]
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	425a      	negs	r2, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d122      	bne.n	8005faa <_scanf_float+0x39e>
 8005f64:	2200      	movs	r2, #0
 8005f66:	9903      	ldr	r1, [sp, #12]
 8005f68:	9802      	ldr	r0, [sp, #8]
 8005f6a:	f000 ffe1 	bl	8006f30 <_strtod_r>
 8005f6e:	9b05      	ldr	r3, [sp, #20]
 8005f70:	0004      	movs	r4, r0
 8005f72:	6830      	ldr	r0, [r6, #0]
 8005f74:	000d      	movs	r5, r1
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	0782      	lsls	r2, r0, #30
 8005f7a:	d523      	bpl.n	8005fc4 <_scanf_float+0x3b8>
 8005f7c:	1d1a      	adds	r2, r3, #4
 8005f7e:	9905      	ldr	r1, [sp, #20]
 8005f80:	600a      	str	r2, [r1, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	601c      	str	r4, [r3, #0]
 8005f86:	605d      	str	r5, [r3, #4]
 8005f88:	68f3      	ldr	r3, [r6, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60f3      	str	r3, [r6, #12]
 8005f8e:	e689      	b.n	8005ca4 <_scanf_float+0x98>
 8005f90:	9b07      	ldr	r3, [sp, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0e6      	beq.n	8005f64 <_scanf_float+0x358>
 8005f96:	9b08      	ldr	r3, [sp, #32]
 8005f98:	003a      	movs	r2, r7
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	9802      	ldr	r0, [sp, #8]
 8005f9e:	230a      	movs	r3, #10
 8005fa0:	f001 f856 	bl	8007050 <_strtol_r>
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	9d08      	ldr	r5, [sp, #32]
 8005fa8:	1ac2      	subs	r2, r0, r3
 8005faa:	0033      	movs	r3, r6
 8005fac:	3370      	adds	r3, #112	; 0x70
 8005fae:	33ff      	adds	r3, #255	; 0xff
 8005fb0:	429d      	cmp	r5, r3
 8005fb2:	d302      	bcc.n	8005fba <_scanf_float+0x3ae>
 8005fb4:	0035      	movs	r5, r6
 8005fb6:	356f      	adds	r5, #111	; 0x6f
 8005fb8:	35ff      	adds	r5, #255	; 0xff
 8005fba:	4912      	ldr	r1, [pc, #72]	; (8006004 <_scanf_float+0x3f8>)
 8005fbc:	0028      	movs	r0, r5
 8005fbe:	f000 f957 	bl	8006270 <siprintf>
 8005fc2:	e7cf      	b.n	8005f64 <_scanf_float+0x358>
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	4008      	ands	r0, r1
 8005fc8:	1d1a      	adds	r2, r3, #4
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d1d6      	bne.n	8005f7e <_scanf_float+0x372>
 8005fd0:	9905      	ldr	r1, [sp, #20]
 8005fd2:	0020      	movs	r0, r4
 8005fd4:	600a      	str	r2, [r1, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	0022      	movs	r2, r4
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	0029      	movs	r1, r5
 8005fde:	002b      	movs	r3, r5
 8005fe0:	f7fb ff56 	bl	8001e90 <__aeabi_dcmpun>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d005      	beq.n	8005ff4 <_scanf_float+0x3e8>
 8005fe8:	9801      	ldr	r0, [sp, #4]
 8005fea:	f000 f93d 	bl	8006268 <nanf>
 8005fee:	9b00      	ldr	r3, [sp, #0]
 8005ff0:	6018      	str	r0, [r3, #0]
 8005ff2:	e7c9      	b.n	8005f88 <_scanf_float+0x37c>
 8005ff4:	0020      	movs	r0, r4
 8005ff6:	0029      	movs	r1, r5
 8005ff8:	f7fc f808 	bl	800200c <__aeabi_d2f>
 8005ffc:	e7f7      	b.n	8005fee <_scanf_float+0x3e2>
 8005ffe:	2700      	movs	r7, #0
 8006000:	e650      	b.n	8005ca4 <_scanf_float+0x98>
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	08009c28 	.word	0x08009c28

08006008 <iprintf>:
 8006008:	b40f      	push	{r0, r1, r2, r3}
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <iprintf+0x30>)
 800600c:	b513      	push	{r0, r1, r4, lr}
 800600e:	681c      	ldr	r4, [r3, #0]
 8006010:	2c00      	cmp	r4, #0
 8006012:	d005      	beq.n	8006020 <iprintf+0x18>
 8006014:	69a3      	ldr	r3, [r4, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <iprintf+0x18>
 800601a:	0020      	movs	r0, r4
 800601c:	f002 f852 	bl	80080c4 <__sinit>
 8006020:	ab05      	add	r3, sp, #20
 8006022:	9a04      	ldr	r2, [sp, #16]
 8006024:	68a1      	ldr	r1, [r4, #8]
 8006026:	0020      	movs	r0, r4
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	f003 faf1 	bl	8009610 <_vfiprintf_r>
 800602e:	bc16      	pop	{r1, r2, r4}
 8006030:	bc08      	pop	{r3}
 8006032:	b004      	add	sp, #16
 8006034:	4718      	bx	r3
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	2000000c 	.word	0x2000000c

0800603c <_puts_r>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	0005      	movs	r5, r0
 8006040:	000e      	movs	r6, r1
 8006042:	2800      	cmp	r0, #0
 8006044:	d004      	beq.n	8006050 <_puts_r+0x14>
 8006046:	6983      	ldr	r3, [r0, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <_puts_r+0x14>
 800604c:	f002 f83a 	bl	80080c4 <__sinit>
 8006050:	69ab      	ldr	r3, [r5, #24]
 8006052:	68ac      	ldr	r4, [r5, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <_puts_r+0x22>
 8006058:	0028      	movs	r0, r5
 800605a:	f002 f833 	bl	80080c4 <__sinit>
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <_puts_r+0xb4>)
 8006060:	429c      	cmp	r4, r3
 8006062:	d10f      	bne.n	8006084 <_puts_r+0x48>
 8006064:	686c      	ldr	r4, [r5, #4]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	071b      	lsls	r3, r3, #28
 800606a:	d502      	bpl.n	8006072 <_puts_r+0x36>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11f      	bne.n	80060b2 <_puts_r+0x76>
 8006072:	0021      	movs	r1, r4
 8006074:	0028      	movs	r0, r5
 8006076:	f001 f851 	bl	800711c <__swsetup_r>
 800607a:	2800      	cmp	r0, #0
 800607c:	d019      	beq.n	80060b2 <_puts_r+0x76>
 800607e:	2001      	movs	r0, #1
 8006080:	4240      	negs	r0, r0
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <_puts_r+0xb8>)
 8006086:	429c      	cmp	r4, r3
 8006088:	d101      	bne.n	800608e <_puts_r+0x52>
 800608a:	68ac      	ldr	r4, [r5, #8]
 800608c:	e7eb      	b.n	8006066 <_puts_r+0x2a>
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <_puts_r+0xbc>)
 8006090:	429c      	cmp	r4, r3
 8006092:	d1e8      	bne.n	8006066 <_puts_r+0x2a>
 8006094:	68ec      	ldr	r4, [r5, #12]
 8006096:	e7e6      	b.n	8006066 <_puts_r+0x2a>
 8006098:	3601      	adds	r6, #1
 800609a:	60a3      	str	r3, [r4, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da04      	bge.n	80060aa <_puts_r+0x6e>
 80060a0:	69a2      	ldr	r2, [r4, #24]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	dc16      	bgt.n	80060d4 <_puts_r+0x98>
 80060a6:	290a      	cmp	r1, #10
 80060a8:	d014      	beq.n	80060d4 <_puts_r+0x98>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	6022      	str	r2, [r4, #0]
 80060b0:	7019      	strb	r1, [r3, #0]
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	7831      	ldrb	r1, [r6, #0]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d1ed      	bne.n	8006098 <_puts_r+0x5c>
 80060bc:	60a3      	str	r3, [r4, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da0f      	bge.n	80060e2 <_puts_r+0xa6>
 80060c2:	0022      	movs	r2, r4
 80060c4:	310a      	adds	r1, #10
 80060c6:	0028      	movs	r0, r5
 80060c8:	f000 ffd2 	bl	8007070 <__swbuf_r>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d0d6      	beq.n	800607e <_puts_r+0x42>
 80060d0:	200a      	movs	r0, #10
 80060d2:	e7d6      	b.n	8006082 <_puts_r+0x46>
 80060d4:	0022      	movs	r2, r4
 80060d6:	0028      	movs	r0, r5
 80060d8:	f000 ffca 	bl	8007070 <__swbuf_r>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d1e8      	bne.n	80060b2 <_puts_r+0x76>
 80060e0:	e7cd      	b.n	800607e <_puts_r+0x42>
 80060e2:	200a      	movs	r0, #10
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	7018      	strb	r0, [r3, #0]
 80060ec:	e7c9      	b.n	8006082 <_puts_r+0x46>
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	08009cb0 	.word	0x08009cb0
 80060f4:	08009cd0 	.word	0x08009cd0
 80060f8:	08009c90 	.word	0x08009c90

080060fc <puts>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4b03      	ldr	r3, [pc, #12]	; (800610c <puts+0x10>)
 8006100:	0001      	movs	r1, r0
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	f7ff ff9a 	bl	800603c <_puts_r>
 8006108:	bd10      	pop	{r4, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	2000000c 	.word	0x2000000c

08006110 <setvbuf>:
 8006110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006112:	001d      	movs	r5, r3
 8006114:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <setvbuf+0x144>)
 8006116:	b085      	sub	sp, #20
 8006118:	681e      	ldr	r6, [r3, #0]
 800611a:	0004      	movs	r4, r0
 800611c:	000f      	movs	r7, r1
 800611e:	9200      	str	r2, [sp, #0]
 8006120:	2e00      	cmp	r6, #0
 8006122:	d005      	beq.n	8006130 <setvbuf+0x20>
 8006124:	69b3      	ldr	r3, [r6, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <setvbuf+0x20>
 800612a:	0030      	movs	r0, r6
 800612c:	f001 ffca 	bl	80080c4 <__sinit>
 8006130:	4b49      	ldr	r3, [pc, #292]	; (8006258 <setvbuf+0x148>)
 8006132:	429c      	cmp	r4, r3
 8006134:	d150      	bne.n	80061d8 <setvbuf+0xc8>
 8006136:	6874      	ldr	r4, [r6, #4]
 8006138:	9b00      	ldr	r3, [sp, #0]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d005      	beq.n	800614a <setvbuf+0x3a>
 800613e:	2b01      	cmp	r3, #1
 8006140:	d900      	bls.n	8006144 <setvbuf+0x34>
 8006142:	e084      	b.n	800624e <setvbuf+0x13e>
 8006144:	2d00      	cmp	r5, #0
 8006146:	da00      	bge.n	800614a <setvbuf+0x3a>
 8006148:	e081      	b.n	800624e <setvbuf+0x13e>
 800614a:	0021      	movs	r1, r4
 800614c:	0030      	movs	r0, r6
 800614e:	f001 ff4b 	bl	8007fe8 <_fflush_r>
 8006152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006154:	2900      	cmp	r1, #0
 8006156:	d008      	beq.n	800616a <setvbuf+0x5a>
 8006158:	0023      	movs	r3, r4
 800615a:	3344      	adds	r3, #68	; 0x44
 800615c:	4299      	cmp	r1, r3
 800615e:	d002      	beq.n	8006166 <setvbuf+0x56>
 8006160:	0030      	movs	r0, r6
 8006162:	f003 f825 	bl	80091b0 <_free_r>
 8006166:	2300      	movs	r3, #0
 8006168:	6363      	str	r3, [r4, #52]	; 0x34
 800616a:	2300      	movs	r3, #0
 800616c:	61a3      	str	r3, [r4, #24]
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	d503      	bpl.n	800617e <setvbuf+0x6e>
 8006176:	6921      	ldr	r1, [r4, #16]
 8006178:	0030      	movs	r0, r6
 800617a:	f003 f819 	bl	80091b0 <_free_r>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	4a36      	ldr	r2, [pc, #216]	; (800625c <setvbuf+0x14c>)
 8006182:	4013      	ands	r3, r2
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d05a      	beq.n	8006242 <setvbuf+0x132>
 800618c:	ab03      	add	r3, sp, #12
 800618e:	aa02      	add	r2, sp, #8
 8006190:	0021      	movs	r1, r4
 8006192:	0030      	movs	r0, r6
 8006194:	f002 fb6c 	bl	8008870 <__swhatbuf_r>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	4318      	orrs	r0, r3
 800619c:	81a0      	strh	r0, [r4, #12]
 800619e:	2d00      	cmp	r5, #0
 80061a0:	d124      	bne.n	80061ec <setvbuf+0xdc>
 80061a2:	9d02      	ldr	r5, [sp, #8]
 80061a4:	0028      	movs	r0, r5
 80061a6:	f002 fbcf 	bl	8008948 <malloc>
 80061aa:	9501      	str	r5, [sp, #4]
 80061ac:	1e07      	subs	r7, r0, #0
 80061ae:	d142      	bne.n	8006236 <setvbuf+0x126>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	d139      	bne.n	800622c <setvbuf+0x11c>
 80061b8:	2001      	movs	r0, #1
 80061ba:	4240      	negs	r0, r0
 80061bc:	2302      	movs	r3, #2
 80061be:	89a2      	ldrh	r2, [r4, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	81a3      	strh	r3, [r4, #12]
 80061c4:	2300      	movs	r3, #0
 80061c6:	60a3      	str	r3, [r4, #8]
 80061c8:	0023      	movs	r3, r4
 80061ca:	3347      	adds	r3, #71	; 0x47
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	2301      	movs	r3, #1
 80061d2:	6163      	str	r3, [r4, #20]
 80061d4:	b005      	add	sp, #20
 80061d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d8:	4b21      	ldr	r3, [pc, #132]	; (8006260 <setvbuf+0x150>)
 80061da:	429c      	cmp	r4, r3
 80061dc:	d101      	bne.n	80061e2 <setvbuf+0xd2>
 80061de:	68b4      	ldr	r4, [r6, #8]
 80061e0:	e7aa      	b.n	8006138 <setvbuf+0x28>
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <setvbuf+0x154>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d1a7      	bne.n	8006138 <setvbuf+0x28>
 80061e8:	68f4      	ldr	r4, [r6, #12]
 80061ea:	e7a5      	b.n	8006138 <setvbuf+0x28>
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	d0d9      	beq.n	80061a4 <setvbuf+0x94>
 80061f0:	69b3      	ldr	r3, [r6, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <setvbuf+0xec>
 80061f6:	0030      	movs	r0, r6
 80061f8:	f001 ff64 	bl	80080c4 <__sinit>
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d103      	bne.n	800620a <setvbuf+0xfa>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	9a00      	ldr	r2, [sp, #0]
 8006206:	431a      	orrs	r2, r3
 8006208:	81a2      	strh	r2, [r4, #12]
 800620a:	2008      	movs	r0, #8
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	6027      	str	r7, [r4, #0]
 8006210:	6127      	str	r7, [r4, #16]
 8006212:	6165      	str	r5, [r4, #20]
 8006214:	4018      	ands	r0, r3
 8006216:	d018      	beq.n	800624a <setvbuf+0x13a>
 8006218:	2001      	movs	r0, #1
 800621a:	4018      	ands	r0, r3
 800621c:	2300      	movs	r3, #0
 800621e:	4298      	cmp	r0, r3
 8006220:	d011      	beq.n	8006246 <setvbuf+0x136>
 8006222:	426d      	negs	r5, r5
 8006224:	60a3      	str	r3, [r4, #8]
 8006226:	61a5      	str	r5, [r4, #24]
 8006228:	0018      	movs	r0, r3
 800622a:	e7d3      	b.n	80061d4 <setvbuf+0xc4>
 800622c:	9801      	ldr	r0, [sp, #4]
 800622e:	f002 fb8b 	bl	8008948 <malloc>
 8006232:	1e07      	subs	r7, r0, #0
 8006234:	d0c0      	beq.n	80061b8 <setvbuf+0xa8>
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	89a2      	ldrh	r2, [r4, #12]
 800623a:	9d01      	ldr	r5, [sp, #4]
 800623c:	4313      	orrs	r3, r2
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	e7d6      	b.n	80061f0 <setvbuf+0xe0>
 8006242:	2000      	movs	r0, #0
 8006244:	e7ba      	b.n	80061bc <setvbuf+0xac>
 8006246:	60a5      	str	r5, [r4, #8]
 8006248:	e7c4      	b.n	80061d4 <setvbuf+0xc4>
 800624a:	60a0      	str	r0, [r4, #8]
 800624c:	e7c2      	b.n	80061d4 <setvbuf+0xc4>
 800624e:	2001      	movs	r0, #1
 8006250:	4240      	negs	r0, r0
 8006252:	e7bf      	b.n	80061d4 <setvbuf+0xc4>
 8006254:	2000000c 	.word	0x2000000c
 8006258:	08009cb0 	.word	0x08009cb0
 800625c:	fffff35c 	.word	0xfffff35c
 8006260:	08009cd0 	.word	0x08009cd0
 8006264:	08009c90 	.word	0x08009c90

08006268 <nanf>:
 8006268:	4800      	ldr	r0, [pc, #0]	; (800626c <nanf+0x4>)
 800626a:	4770      	bx	lr
 800626c:	7fc00000 	.word	0x7fc00000

08006270 <siprintf>:
 8006270:	b40e      	push	{r1, r2, r3}
 8006272:	b500      	push	{lr}
 8006274:	490b      	ldr	r1, [pc, #44]	; (80062a4 <siprintf+0x34>)
 8006276:	b09c      	sub	sp, #112	; 0x70
 8006278:	ab1d      	add	r3, sp, #116	; 0x74
 800627a:	9002      	str	r0, [sp, #8]
 800627c:	9006      	str	r0, [sp, #24]
 800627e:	9107      	str	r1, [sp, #28]
 8006280:	9104      	str	r1, [sp, #16]
 8006282:	4809      	ldr	r0, [pc, #36]	; (80062a8 <siprintf+0x38>)
 8006284:	4909      	ldr	r1, [pc, #36]	; (80062ac <siprintf+0x3c>)
 8006286:	cb04      	ldmia	r3!, {r2}
 8006288:	9105      	str	r1, [sp, #20]
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	a902      	add	r1, sp, #8
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	f003 f898 	bl	80093c4 <_svfiprintf_r>
 8006294:	2300      	movs	r3, #0
 8006296:	9a02      	ldr	r2, [sp, #8]
 8006298:	7013      	strb	r3, [r2, #0]
 800629a:	b01c      	add	sp, #112	; 0x70
 800629c:	bc08      	pop	{r3}
 800629e:	b003      	add	sp, #12
 80062a0:	4718      	bx	r3
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	7fffffff 	.word	0x7fffffff
 80062a8:	2000000c 	.word	0x2000000c
 80062ac:	ffff0208 	.word	0xffff0208

080062b0 <sulp>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	0016      	movs	r6, r2
 80062b4:	000d      	movs	r5, r1
 80062b6:	f002 fe47 	bl	8008f48 <__ulp>
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	d00d      	beq.n	80062da <sulp+0x2a>
 80062be:	236b      	movs	r3, #107	; 0x6b
 80062c0:	006a      	lsls	r2, r5, #1
 80062c2:	0d52      	lsrs	r2, r2, #21
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd07      	ble.n	80062da <sulp+0x2a>
 80062ca:	2400      	movs	r4, #0
 80062cc:	4a03      	ldr	r2, [pc, #12]	; (80062dc <sulp+0x2c>)
 80062ce:	051b      	lsls	r3, r3, #20
 80062d0:	189d      	adds	r5, r3, r2
 80062d2:	002b      	movs	r3, r5
 80062d4:	0022      	movs	r2, r4
 80062d6:	f7fb f821 	bl	800131c <__aeabi_dmul>
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	3ff00000 	.word	0x3ff00000

080062e0 <_strtod_l>:
 80062e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e2:	b0a7      	sub	sp, #156	; 0x9c
 80062e4:	9307      	str	r3, [sp, #28]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9004      	str	r0, [sp, #16]
 80062ea:	9807      	ldr	r0, [sp, #28]
 80062ec:	9322      	str	r3, [sp, #136]	; 0x88
 80062ee:	9106      	str	r1, [sp, #24]
 80062f0:	921d      	str	r2, [sp, #116]	; 0x74
 80062f2:	f002 faae 	bl	8008852 <__localeconv_l>
 80062f6:	0005      	movs	r5, r0
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f7f9 ff05 	bl	8000108 <strlen>
 80062fe:	2600      	movs	r6, #0
 8006300:	2700      	movs	r7, #0
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	9005      	str	r0, [sp, #20]
 8006306:	9321      	str	r3, [sp, #132]	; 0x84
 8006308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	2a0d      	cmp	r2, #13
 800630e:	d839      	bhi.n	8006384 <_strtod_l+0xa4>
 8006310:	2a09      	cmp	r2, #9
 8006312:	d23d      	bcs.n	8006390 <_strtod_l+0xb0>
 8006314:	2a00      	cmp	r2, #0
 8006316:	d044      	beq.n	80063a2 <_strtod_l+0xc2>
 8006318:	2300      	movs	r3, #0
 800631a:	9313      	str	r3, [sp, #76]	; 0x4c
 800631c:	2200      	movs	r2, #0
 800631e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006320:	920c      	str	r2, [sp, #48]	; 0x30
 8006322:	7823      	ldrb	r3, [r4, #0]
 8006324:	2b30      	cmp	r3, #48	; 0x30
 8006326:	d000      	beq.n	800632a <_strtod_l+0x4a>
 8006328:	e07e      	b.n	8006428 <_strtod_l+0x148>
 800632a:	7863      	ldrb	r3, [r4, #1]
 800632c:	2b58      	cmp	r3, #88	; 0x58
 800632e:	d002      	beq.n	8006336 <_strtod_l+0x56>
 8006330:	2b78      	cmp	r3, #120	; 0x78
 8006332:	d000      	beq.n	8006336 <_strtod_l+0x56>
 8006334:	e06e      	b.n	8006414 <_strtod_l+0x134>
 8006336:	9b07      	ldr	r3, [sp, #28]
 8006338:	4a96      	ldr	r2, [pc, #600]	; (8006594 <_strtod_l+0x2b4>)
 800633a:	9302      	str	r3, [sp, #8]
 800633c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800633e:	a921      	add	r1, sp, #132	; 0x84
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	ab22      	add	r3, sp, #136	; 0x88
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	9804      	ldr	r0, [sp, #16]
 8006348:	ab23      	add	r3, sp, #140	; 0x8c
 800634a:	f001 ff97 	bl	800827c <__gethex>
 800634e:	2507      	movs	r5, #7
 8006350:	9005      	str	r0, [sp, #20]
 8006352:	4005      	ands	r5, r0
 8006354:	d005      	beq.n	8006362 <_strtod_l+0x82>
 8006356:	2d06      	cmp	r5, #6
 8006358:	d12f      	bne.n	80063ba <_strtod_l+0xda>
 800635a:	2300      	movs	r3, #0
 800635c:	3401      	adds	r4, #1
 800635e:	9421      	str	r4, [sp, #132]	; 0x84
 8006360:	9313      	str	r3, [sp, #76]	; 0x4c
 8006362:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <_strtod_l+0x8e>
 8006368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800636a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01d      	beq.n	80063b0 <_strtod_l+0xd0>
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	0032      	movs	r2, r6
 8006378:	061b      	lsls	r3, r3, #24
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	0010      	movs	r0, r2
 800637e:	0019      	movs	r1, r3
 8006380:	b027      	add	sp, #156	; 0x9c
 8006382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006384:	2a2b      	cmp	r2, #43	; 0x2b
 8006386:	d016      	beq.n	80063b6 <_strtod_l+0xd6>
 8006388:	2a2d      	cmp	r2, #45	; 0x2d
 800638a:	d003      	beq.n	8006394 <_strtod_l+0xb4>
 800638c:	2a20      	cmp	r2, #32
 800638e:	d1c3      	bne.n	8006318 <_strtod_l+0x38>
 8006390:	3301      	adds	r3, #1
 8006392:	e7b8      	b.n	8006306 <_strtod_l+0x26>
 8006394:	2201      	movs	r2, #1
 8006396:	9213      	str	r2, [sp, #76]	; 0x4c
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	9221      	str	r2, [sp, #132]	; 0x84
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1bc      	bne.n	800631c <_strtod_l+0x3c>
 80063a2:	9b06      	ldr	r3, [sp, #24]
 80063a4:	9321      	str	r3, [sp, #132]	; 0x84
 80063a6:	2300      	movs	r3, #0
 80063a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1db      	bne.n	8006368 <_strtod_l+0x88>
 80063b0:	0032      	movs	r2, r6
 80063b2:	003b      	movs	r3, r7
 80063b4:	e7e2      	b.n	800637c <_strtod_l+0x9c>
 80063b6:	2200      	movs	r2, #0
 80063b8:	e7ed      	b.n	8006396 <_strtod_l+0xb6>
 80063ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063bc:	2a00      	cmp	r2, #0
 80063be:	d007      	beq.n	80063d0 <_strtod_l+0xf0>
 80063c0:	2135      	movs	r1, #53	; 0x35
 80063c2:	a824      	add	r0, sp, #144	; 0x90
 80063c4:	f002 fead 	bl	8009122 <__copybits>
 80063c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80063ca:	9804      	ldr	r0, [sp, #16]
 80063cc:	f002 fb24 	bl	8008a18 <_Bfree>
 80063d0:	1e68      	subs	r0, r5, #1
 80063d2:	2804      	cmp	r0, #4
 80063d4:	d806      	bhi.n	80063e4 <_strtod_l+0x104>
 80063d6:	f7f9 fe9f 	bl	8000118 <__gnu_thumb1_case_uqi>
 80063da:	030c      	.short	0x030c
 80063dc:	1917      	.short	0x1917
 80063de:	0c          	.byte	0x0c
 80063df:	00          	.byte	0x00
 80063e0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80063e2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80063e4:	9b05      	ldr	r3, [sp, #20]
 80063e6:	071b      	lsls	r3, r3, #28
 80063e8:	d5bb      	bpl.n	8006362 <_strtod_l+0x82>
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	061b      	lsls	r3, r3, #24
 80063ee:	431f      	orrs	r7, r3
 80063f0:	e7b7      	b.n	8006362 <_strtod_l+0x82>
 80063f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <_strtod_l+0x2b8>)
 80063f6:	4969      	ldr	r1, [pc, #420]	; (800659c <_strtod_l+0x2bc>)
 80063f8:	401a      	ands	r2, r3
 80063fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063fc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80063fe:	185b      	adds	r3, r3, r1
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	431a      	orrs	r2, r3
 8006404:	0017      	movs	r7, r2
 8006406:	e7ed      	b.n	80063e4 <_strtod_l+0x104>
 8006408:	4f65      	ldr	r7, [pc, #404]	; (80065a0 <_strtod_l+0x2c0>)
 800640a:	e7eb      	b.n	80063e4 <_strtod_l+0x104>
 800640c:	2601      	movs	r6, #1
 800640e:	4f65      	ldr	r7, [pc, #404]	; (80065a4 <_strtod_l+0x2c4>)
 8006410:	4276      	negs	r6, r6
 8006412:	e7e7      	b.n	80063e4 <_strtod_l+0x104>
 8006414:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	9221      	str	r2, [sp, #132]	; 0x84
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b30      	cmp	r3, #48	; 0x30
 800641e:	d0f9      	beq.n	8006414 <_strtod_l+0x134>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d09e      	beq.n	8006362 <_strtod_l+0x82>
 8006424:	2301      	movs	r3, #1
 8006426:	930c      	str	r3, [sp, #48]	; 0x30
 8006428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800642a:	220a      	movs	r2, #10
 800642c:	9312      	str	r3, [sp, #72]	; 0x48
 800642e:	2300      	movs	r3, #0
 8006430:	930b      	str	r3, [sp, #44]	; 0x2c
 8006432:	9308      	str	r3, [sp, #32]
 8006434:	930a      	str	r3, [sp, #40]	; 0x28
 8006436:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006438:	7804      	ldrb	r4, [r0, #0]
 800643a:	0023      	movs	r3, r4
 800643c:	3b30      	subs	r3, #48	; 0x30
 800643e:	b2d9      	uxtb	r1, r3
 8006440:	2909      	cmp	r1, #9
 8006442:	d934      	bls.n	80064ae <_strtod_l+0x1ce>
 8006444:	9a05      	ldr	r2, [sp, #20]
 8006446:	6829      	ldr	r1, [r5, #0]
 8006448:	f003 fa56 	bl	80098f8 <strncmp>
 800644c:	2800      	cmp	r0, #0
 800644e:	d040      	beq.n	80064d2 <_strtod_l+0x1f2>
 8006450:	2000      	movs	r0, #0
 8006452:	0023      	movs	r3, r4
 8006454:	4684      	mov	ip, r0
 8006456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006458:	9007      	str	r0, [sp, #28]
 800645a:	9205      	str	r2, [sp, #20]
 800645c:	2220      	movs	r2, #32
 800645e:	0019      	movs	r1, r3
 8006460:	4391      	bics	r1, r2
 8006462:	000a      	movs	r2, r1
 8006464:	2100      	movs	r1, #0
 8006466:	2a45      	cmp	r2, #69	; 0x45
 8006468:	d000      	beq.n	800646c <_strtod_l+0x18c>
 800646a:	e0bf      	b.n	80065ec <_strtod_l+0x30c>
 800646c:	9b05      	ldr	r3, [sp, #20]
 800646e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006470:	4303      	orrs	r3, r0
 8006472:	4313      	orrs	r3, r2
 8006474:	428b      	cmp	r3, r1
 8006476:	d094      	beq.n	80063a2 <_strtod_l+0xc2>
 8006478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800647a:	9306      	str	r3, [sp, #24]
 800647c:	3301      	adds	r3, #1
 800647e:	9321      	str	r3, [sp, #132]	; 0x84
 8006480:	9b06      	ldr	r3, [sp, #24]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b2b      	cmp	r3, #43	; 0x2b
 8006486:	d100      	bne.n	800648a <_strtod_l+0x1aa>
 8006488:	e082      	b.n	8006590 <_strtod_l+0x2b0>
 800648a:	000c      	movs	r4, r1
 800648c:	2b2d      	cmp	r3, #45	; 0x2d
 800648e:	d105      	bne.n	800649c <_strtod_l+0x1bc>
 8006490:	2401      	movs	r4, #1
 8006492:	9b06      	ldr	r3, [sp, #24]
 8006494:	3302      	adds	r3, #2
 8006496:	9321      	str	r3, [sp, #132]	; 0x84
 8006498:	9b06      	ldr	r3, [sp, #24]
 800649a:	789b      	ldrb	r3, [r3, #2]
 800649c:	001a      	movs	r2, r3
 800649e:	3a30      	subs	r2, #48	; 0x30
 80064a0:	2a09      	cmp	r2, #9
 80064a2:	d800      	bhi.n	80064a6 <_strtod_l+0x1c6>
 80064a4:	e084      	b.n	80065b0 <_strtod_l+0x2d0>
 80064a6:	9a06      	ldr	r2, [sp, #24]
 80064a8:	2100      	movs	r1, #0
 80064aa:	9221      	str	r2, [sp, #132]	; 0x84
 80064ac:	e09e      	b.n	80065ec <_strtod_l+0x30c>
 80064ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064b0:	2908      	cmp	r1, #8
 80064b2:	dc09      	bgt.n	80064c8 <_strtod_l+0x1e8>
 80064b4:	9908      	ldr	r1, [sp, #32]
 80064b6:	4351      	muls	r1, r2
 80064b8:	18cb      	adds	r3, r1, r3
 80064ba:	9308      	str	r3, [sp, #32]
 80064bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064be:	3001      	adds	r0, #1
 80064c0:	3301      	adds	r3, #1
 80064c2:	930a      	str	r3, [sp, #40]	; 0x28
 80064c4:	9021      	str	r0, [sp, #132]	; 0x84
 80064c6:	e7b6      	b.n	8006436 <_strtod_l+0x156>
 80064c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ca:	4351      	muls	r1, r2
 80064cc:	18cb      	adds	r3, r1, r3
 80064ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d0:	e7f4      	b.n	80064bc <_strtod_l+0x1dc>
 80064d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064d4:	9b05      	ldr	r3, [sp, #20]
 80064d6:	4694      	mov	ip, r2
 80064d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064da:	4463      	add	r3, ip
 80064dc:	9321      	str	r3, [sp, #132]	; 0x84
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d036      	beq.n	8006552 <_strtod_l+0x272>
 80064e4:	4684      	mov	ip, r0
 80064e6:	9205      	str	r2, [sp, #20]
 80064e8:	001a      	movs	r2, r3
 80064ea:	3a30      	subs	r2, #48	; 0x30
 80064ec:	2a09      	cmp	r2, #9
 80064ee:	d912      	bls.n	8006516 <_strtod_l+0x236>
 80064f0:	2201      	movs	r2, #1
 80064f2:	9207      	str	r2, [sp, #28]
 80064f4:	e7b2      	b.n	800645c <_strtod_l+0x17c>
 80064f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f8:	3001      	adds	r0, #1
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	9221      	str	r2, [sp, #132]	; 0x84
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d0f8      	beq.n	80064f6 <_strtod_l+0x216>
 8006504:	001a      	movs	r2, r3
 8006506:	3a31      	subs	r2, #49	; 0x31
 8006508:	2a08      	cmp	r2, #8
 800650a:	d83c      	bhi.n	8006586 <_strtod_l+0x2a6>
 800650c:	4684      	mov	ip, r0
 800650e:	2000      	movs	r0, #0
 8006510:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006512:	9005      	str	r0, [sp, #20]
 8006514:	9212      	str	r2, [sp, #72]	; 0x48
 8006516:	3b30      	subs	r3, #48	; 0x30
 8006518:	1c42      	adds	r2, r0, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d013      	beq.n	8006546 <_strtod_l+0x266>
 800651e:	210a      	movs	r1, #10
 8006520:	4494      	add	ip, r2
 8006522:	9a05      	ldr	r2, [sp, #20]
 8006524:	1885      	adds	r5, r0, r2
 8006526:	42aa      	cmp	r2, r5
 8006528:	d115      	bne.n	8006556 <_strtod_l+0x276>
 800652a:	9905      	ldr	r1, [sp, #20]
 800652c:	9a05      	ldr	r2, [sp, #20]
 800652e:	3101      	adds	r1, #1
 8006530:	1809      	adds	r1, r1, r0
 8006532:	1812      	adds	r2, r2, r0
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	2a08      	cmp	r2, #8
 8006538:	dc1b      	bgt.n	8006572 <_strtod_l+0x292>
 800653a:	220a      	movs	r2, #10
 800653c:	9908      	ldr	r1, [sp, #32]
 800653e:	434a      	muls	r2, r1
 8006540:	189b      	adds	r3, r3, r2
 8006542:	2200      	movs	r2, #0
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006548:	0010      	movs	r0, r2
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	9121      	str	r1, [sp, #132]	; 0x84
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	e7ca      	b.n	80064e8 <_strtod_l+0x208>
 8006552:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006554:	e7d4      	b.n	8006500 <_strtod_l+0x220>
 8006556:	1c54      	adds	r4, r2, #1
 8006558:	2a08      	cmp	r2, #8
 800655a:	dc04      	bgt.n	8006566 <_strtod_l+0x286>
 800655c:	9a08      	ldr	r2, [sp, #32]
 800655e:	434a      	muls	r2, r1
 8006560:	9208      	str	r2, [sp, #32]
 8006562:	0022      	movs	r2, r4
 8006564:	e7df      	b.n	8006526 <_strtod_l+0x246>
 8006566:	2c10      	cmp	r4, #16
 8006568:	dcfb      	bgt.n	8006562 <_strtod_l+0x282>
 800656a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800656c:	434a      	muls	r2, r1
 800656e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006570:	e7f7      	b.n	8006562 <_strtod_l+0x282>
 8006572:	9905      	ldr	r1, [sp, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	2910      	cmp	r1, #16
 8006578:	dce5      	bgt.n	8006546 <_strtod_l+0x266>
 800657a:	210a      	movs	r1, #10
 800657c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800657e:	4341      	muls	r1, r0
 8006580:	185b      	adds	r3, r3, r1
 8006582:	930b      	str	r3, [sp, #44]	; 0x2c
 8006584:	e7df      	b.n	8006546 <_strtod_l+0x266>
 8006586:	2200      	movs	r2, #0
 8006588:	4694      	mov	ip, r2
 800658a:	9205      	str	r2, [sp, #20]
 800658c:	3201      	adds	r2, #1
 800658e:	e7b0      	b.n	80064f2 <_strtod_l+0x212>
 8006590:	000c      	movs	r4, r1
 8006592:	e77e      	b.n	8006492 <_strtod_l+0x1b2>
 8006594:	08009c30 	.word	0x08009c30
 8006598:	ffefffff 	.word	0xffefffff
 800659c:	00000433 	.word	0x00000433
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	7fffffff 	.word	0x7fffffff
 80065a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	9221      	str	r2, [sp, #132]	; 0x84
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d0f9      	beq.n	80065a8 <_strtod_l+0x2c8>
 80065b4:	001a      	movs	r2, r3
 80065b6:	3a31      	subs	r2, #49	; 0x31
 80065b8:	2100      	movs	r1, #0
 80065ba:	2a08      	cmp	r2, #8
 80065bc:	d816      	bhi.n	80065ec <_strtod_l+0x30c>
 80065be:	3b30      	subs	r3, #48	; 0x30
 80065c0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80065c2:	930e      	str	r3, [sp, #56]	; 0x38
 80065c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	9121      	str	r1, [sp, #132]	; 0x84
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	001a      	movs	r2, r3
 80065ce:	3a30      	subs	r2, #48	; 0x30
 80065d0:	2a09      	cmp	r2, #9
 80065d2:	d932      	bls.n	800663a <_strtod_l+0x35a>
 80065d4:	1b4a      	subs	r2, r1, r5
 80065d6:	4dad      	ldr	r5, [pc, #692]	; (800688c <_strtod_l+0x5ac>)
 80065d8:	0029      	movs	r1, r5
 80065da:	2a08      	cmp	r2, #8
 80065dc:	dc03      	bgt.n	80065e6 <_strtod_l+0x306>
 80065de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	dd00      	ble.n	80065e6 <_strtod_l+0x306>
 80065e4:	0029      	movs	r1, r5
 80065e6:	2c00      	cmp	r4, #0
 80065e8:	d000      	beq.n	80065ec <_strtod_l+0x30c>
 80065ea:	4249      	negs	r1, r1
 80065ec:	9a05      	ldr	r2, [sp, #20]
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	d149      	bne.n	8006686 <_strtod_l+0x3a6>
 80065f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065f4:	4310      	orrs	r0, r2
 80065f6:	d000      	beq.n	80065fa <_strtod_l+0x31a>
 80065f8:	e6b3      	b.n	8006362 <_strtod_l+0x82>
 80065fa:	9a07      	ldr	r2, [sp, #28]
 80065fc:	2a00      	cmp	r2, #0
 80065fe:	d000      	beq.n	8006602 <_strtod_l+0x322>
 8006600:	e6cf      	b.n	80063a2 <_strtod_l+0xc2>
 8006602:	2b4e      	cmp	r3, #78	; 0x4e
 8006604:	d025      	beq.n	8006652 <_strtod_l+0x372>
 8006606:	dc1f      	bgt.n	8006648 <_strtod_l+0x368>
 8006608:	2b49      	cmp	r3, #73	; 0x49
 800660a:	d000      	beq.n	800660e <_strtod_l+0x32e>
 800660c:	e6c9      	b.n	80063a2 <_strtod_l+0xc2>
 800660e:	49a0      	ldr	r1, [pc, #640]	; (8006890 <_strtod_l+0x5b0>)
 8006610:	a821      	add	r0, sp, #132	; 0x84
 8006612:	f002 f870 	bl	80086f6 <__match>
 8006616:	2800      	cmp	r0, #0
 8006618:	d100      	bne.n	800661c <_strtod_l+0x33c>
 800661a:	e6c2      	b.n	80063a2 <_strtod_l+0xc2>
 800661c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800661e:	499d      	ldr	r1, [pc, #628]	; (8006894 <_strtod_l+0x5b4>)
 8006620:	3b01      	subs	r3, #1
 8006622:	a821      	add	r0, sp, #132	; 0x84
 8006624:	9321      	str	r3, [sp, #132]	; 0x84
 8006626:	f002 f866 	bl	80086f6 <__match>
 800662a:	2800      	cmp	r0, #0
 800662c:	d102      	bne.n	8006634 <_strtod_l+0x354>
 800662e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006630:	3301      	adds	r3, #1
 8006632:	9321      	str	r3, [sp, #132]	; 0x84
 8006634:	4f98      	ldr	r7, [pc, #608]	; (8006898 <_strtod_l+0x5b8>)
 8006636:	2600      	movs	r6, #0
 8006638:	e693      	b.n	8006362 <_strtod_l+0x82>
 800663a:	220a      	movs	r2, #10
 800663c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800663e:	434a      	muls	r2, r1
 8006640:	18d2      	adds	r2, r2, r3
 8006642:	3a30      	subs	r2, #48	; 0x30
 8006644:	920e      	str	r2, [sp, #56]	; 0x38
 8006646:	e7bd      	b.n	80065c4 <_strtod_l+0x2e4>
 8006648:	2b69      	cmp	r3, #105	; 0x69
 800664a:	d0e0      	beq.n	800660e <_strtod_l+0x32e>
 800664c:	2b6e      	cmp	r3, #110	; 0x6e
 800664e:	d000      	beq.n	8006652 <_strtod_l+0x372>
 8006650:	e6a7      	b.n	80063a2 <_strtod_l+0xc2>
 8006652:	4992      	ldr	r1, [pc, #584]	; (800689c <_strtod_l+0x5bc>)
 8006654:	a821      	add	r0, sp, #132	; 0x84
 8006656:	f002 f84e 	bl	80086f6 <__match>
 800665a:	2800      	cmp	r0, #0
 800665c:	d100      	bne.n	8006660 <_strtod_l+0x380>
 800665e:	e6a0      	b.n	80063a2 <_strtod_l+0xc2>
 8006660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b28      	cmp	r3, #40	; 0x28
 8006666:	d10c      	bne.n	8006682 <_strtod_l+0x3a2>
 8006668:	aa24      	add	r2, sp, #144	; 0x90
 800666a:	498d      	ldr	r1, [pc, #564]	; (80068a0 <_strtod_l+0x5c0>)
 800666c:	a821      	add	r0, sp, #132	; 0x84
 800666e:	f002 f856 	bl	800871e <__hexnan>
 8006672:	2805      	cmp	r0, #5
 8006674:	d105      	bne.n	8006682 <_strtod_l+0x3a2>
 8006676:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006678:	4a87      	ldr	r2, [pc, #540]	; (8006898 <_strtod_l+0x5b8>)
 800667a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800667c:	431a      	orrs	r2, r3
 800667e:	0017      	movs	r7, r2
 8006680:	e66f      	b.n	8006362 <_strtod_l+0x82>
 8006682:	4f88      	ldr	r7, [pc, #544]	; (80068a4 <_strtod_l+0x5c4>)
 8006684:	e7d7      	b.n	8006636 <_strtod_l+0x356>
 8006686:	4663      	mov	r3, ip
 8006688:	1acb      	subs	r3, r1, r3
 800668a:	9307      	str	r3, [sp, #28]
 800668c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <_strtod_l+0x3b6>
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	930a      	str	r3, [sp, #40]	; 0x28
 8006696:	9c05      	ldr	r4, [sp, #20]
 8006698:	2c10      	cmp	r4, #16
 800669a:	dd00      	ble.n	800669e <_strtod_l+0x3be>
 800669c:	2410      	movs	r4, #16
 800669e:	9808      	ldr	r0, [sp, #32]
 80066a0:	f7fb fc82 	bl	8001fa8 <__aeabi_ui2d>
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	0006      	movs	r6, r0
 80066a8:	000f      	movs	r7, r1
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	dc15      	bgt.n	80066da <_strtod_l+0x3fa>
 80066ae:	9b07      	ldr	r3, [sp, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d100      	bne.n	80066b6 <_strtod_l+0x3d6>
 80066b4:	e655      	b.n	8006362 <_strtod_l+0x82>
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc00      	bgt.n	80066be <_strtod_l+0x3de>
 80066bc:	e07d      	b.n	80067ba <_strtod_l+0x4da>
 80066be:	2b16      	cmp	r3, #22
 80066c0:	dc62      	bgt.n	8006788 <_strtod_l+0x4a8>
 80066c2:	00dc      	lsls	r4, r3, #3
 80066c4:	4b78      	ldr	r3, [pc, #480]	; (80068a8 <_strtod_l+0x5c8>)
 80066c6:	0032      	movs	r2, r6
 80066c8:	1919      	adds	r1, r3, r4
 80066ca:	003b      	movs	r3, r7
 80066cc:	6808      	ldr	r0, [r1, #0]
 80066ce:	6849      	ldr	r1, [r1, #4]
 80066d0:	f7fa fe24 	bl	800131c <__aeabi_dmul>
 80066d4:	0006      	movs	r6, r0
 80066d6:	000f      	movs	r7, r1
 80066d8:	e643      	b.n	8006362 <_strtod_l+0x82>
 80066da:	0022      	movs	r2, r4
 80066dc:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <_strtod_l+0x5c8>)
 80066de:	3a09      	subs	r2, #9
 80066e0:	00d2      	lsls	r2, r2, #3
 80066e2:	189b      	adds	r3, r3, r2
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f7fa fe18 	bl	800131c <__aeabi_dmul>
 80066ec:	0006      	movs	r6, r0
 80066ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066f0:	000f      	movs	r7, r1
 80066f2:	f7fb fc59 	bl	8001fa8 <__aeabi_ui2d>
 80066f6:	000b      	movs	r3, r1
 80066f8:	0002      	movs	r2, r0
 80066fa:	0039      	movs	r1, r7
 80066fc:	0030      	movs	r0, r6
 80066fe:	f7f9 fee7 	bl	80004d0 <__aeabi_dadd>
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	0006      	movs	r6, r0
 8006706:	000f      	movs	r7, r1
 8006708:	2b0f      	cmp	r3, #15
 800670a:	ddd0      	ble.n	80066ae <_strtod_l+0x3ce>
 800670c:	9b05      	ldr	r3, [sp, #20]
 800670e:	1b1c      	subs	r4, r3, r4
 8006710:	9b07      	ldr	r3, [sp, #28]
 8006712:	18e4      	adds	r4, r4, r3
 8006714:	2c00      	cmp	r4, #0
 8006716:	dc00      	bgt.n	800671a <_strtod_l+0x43a>
 8006718:	e094      	b.n	8006844 <_strtod_l+0x564>
 800671a:	230f      	movs	r3, #15
 800671c:	4023      	ands	r3, r4
 800671e:	d00a      	beq.n	8006736 <_strtod_l+0x456>
 8006720:	4961      	ldr	r1, [pc, #388]	; (80068a8 <_strtod_l+0x5c8>)
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	18c9      	adds	r1, r1, r3
 8006726:	0032      	movs	r2, r6
 8006728:	6808      	ldr	r0, [r1, #0]
 800672a:	6849      	ldr	r1, [r1, #4]
 800672c:	003b      	movs	r3, r7
 800672e:	f7fa fdf5 	bl	800131c <__aeabi_dmul>
 8006732:	0006      	movs	r6, r0
 8006734:	000f      	movs	r7, r1
 8006736:	230f      	movs	r3, #15
 8006738:	439c      	bics	r4, r3
 800673a:	d06e      	beq.n	800681a <_strtod_l+0x53a>
 800673c:	3326      	adds	r3, #38	; 0x26
 800673e:	33ff      	adds	r3, #255	; 0xff
 8006740:	429c      	cmp	r4, r3
 8006742:	dd48      	ble.n	80067d6 <_strtod_l+0x4f6>
 8006744:	2400      	movs	r4, #0
 8006746:	9405      	str	r4, [sp, #20]
 8006748:	940b      	str	r4, [sp, #44]	; 0x2c
 800674a:	940a      	str	r4, [sp, #40]	; 0x28
 800674c:	2322      	movs	r3, #34	; 0x22
 800674e:	2600      	movs	r6, #0
 8006750:	9a04      	ldr	r2, [sp, #16]
 8006752:	4f51      	ldr	r7, [pc, #324]	; (8006898 <_strtod_l+0x5b8>)
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	42b3      	cmp	r3, r6
 800675a:	d100      	bne.n	800675e <_strtod_l+0x47e>
 800675c:	e601      	b.n	8006362 <_strtod_l+0x82>
 800675e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006760:	9804      	ldr	r0, [sp, #16]
 8006762:	f002 f959 	bl	8008a18 <_Bfree>
 8006766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006768:	9804      	ldr	r0, [sp, #16]
 800676a:	f002 f955 	bl	8008a18 <_Bfree>
 800676e:	9905      	ldr	r1, [sp, #20]
 8006770:	9804      	ldr	r0, [sp, #16]
 8006772:	f002 f951 	bl	8008a18 <_Bfree>
 8006776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006778:	9804      	ldr	r0, [sp, #16]
 800677a:	f002 f94d 	bl	8008a18 <_Bfree>
 800677e:	0021      	movs	r1, r4
 8006780:	9804      	ldr	r0, [sp, #16]
 8006782:	f002 f949 	bl	8008a18 <_Bfree>
 8006786:	e5ec      	b.n	8006362 <_strtod_l+0x82>
 8006788:	2325      	movs	r3, #37	; 0x25
 800678a:	9a05      	ldr	r2, [sp, #20]
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	9a07      	ldr	r2, [sp, #28]
 8006790:	4293      	cmp	r3, r2
 8006792:	dbbb      	blt.n	800670c <_strtod_l+0x42c>
 8006794:	230f      	movs	r3, #15
 8006796:	9a05      	ldr	r2, [sp, #20]
 8006798:	4c43      	ldr	r4, [pc, #268]	; (80068a8 <_strtod_l+0x5c8>)
 800679a:	1a9d      	subs	r5, r3, r2
 800679c:	00e9      	lsls	r1, r5, #3
 800679e:	1861      	adds	r1, r4, r1
 80067a0:	0032      	movs	r2, r6
 80067a2:	6808      	ldr	r0, [r1, #0]
 80067a4:	6849      	ldr	r1, [r1, #4]
 80067a6:	003b      	movs	r3, r7
 80067a8:	f7fa fdb8 	bl	800131c <__aeabi_dmul>
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	1b5e      	subs	r6, r3, r5
 80067b0:	00f6      	lsls	r6, r6, #3
 80067b2:	19a6      	adds	r6, r4, r6
 80067b4:	6832      	ldr	r2, [r6, #0]
 80067b6:	6873      	ldr	r3, [r6, #4]
 80067b8:	e78a      	b.n	80066d0 <_strtod_l+0x3f0>
 80067ba:	9b07      	ldr	r3, [sp, #28]
 80067bc:	3316      	adds	r3, #22
 80067be:	dba5      	blt.n	800670c <_strtod_l+0x42c>
 80067c0:	9b07      	ldr	r3, [sp, #28]
 80067c2:	0030      	movs	r0, r6
 80067c4:	00da      	lsls	r2, r3, #3
 80067c6:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <_strtod_l+0x5c8>)
 80067c8:	0039      	movs	r1, r7
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f7fa f99a 	bl	8000b08 <__aeabi_ddiv>
 80067d4:	e77e      	b.n	80066d4 <_strtod_l+0x3f4>
 80067d6:	2300      	movs	r3, #0
 80067d8:	0030      	movs	r0, r6
 80067da:	0039      	movs	r1, r7
 80067dc:	001d      	movs	r5, r3
 80067de:	1124      	asrs	r4, r4, #4
 80067e0:	2c01      	cmp	r4, #1
 80067e2:	dc1d      	bgt.n	8006820 <_strtod_l+0x540>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <_strtod_l+0x50c>
 80067e8:	0006      	movs	r6, r0
 80067ea:	000f      	movs	r7, r1
 80067ec:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <_strtod_l+0x5cc>)
 80067ee:	00ed      	lsls	r5, r5, #3
 80067f0:	18ff      	adds	r7, r7, r3
 80067f2:	4b2f      	ldr	r3, [pc, #188]	; (80068b0 <_strtod_l+0x5d0>)
 80067f4:	0032      	movs	r2, r6
 80067f6:	195d      	adds	r5, r3, r5
 80067f8:	6828      	ldr	r0, [r5, #0]
 80067fa:	6869      	ldr	r1, [r5, #4]
 80067fc:	003b      	movs	r3, r7
 80067fe:	f7fa fd8d 	bl	800131c <__aeabi_dmul>
 8006802:	4b25      	ldr	r3, [pc, #148]	; (8006898 <_strtod_l+0x5b8>)
 8006804:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <_strtod_l+0x5d4>)
 8006806:	0006      	movs	r6, r0
 8006808:	400b      	ands	r3, r1
 800680a:	4293      	cmp	r3, r2
 800680c:	d89a      	bhi.n	8006744 <_strtod_l+0x464>
 800680e:	4a2a      	ldr	r2, [pc, #168]	; (80068b8 <_strtod_l+0x5d8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d913      	bls.n	800683c <_strtod_l+0x55c>
 8006814:	2601      	movs	r6, #1
 8006816:	4f29      	ldr	r7, [pc, #164]	; (80068bc <_strtod_l+0x5dc>)
 8006818:	4276      	negs	r6, r6
 800681a:	2300      	movs	r3, #0
 800681c:	9306      	str	r3, [sp, #24]
 800681e:	e07b      	b.n	8006918 <_strtod_l+0x638>
 8006820:	2201      	movs	r2, #1
 8006822:	4214      	tst	r4, r2
 8006824:	d007      	beq.n	8006836 <_strtod_l+0x556>
 8006826:	4a22      	ldr	r2, [pc, #136]	; (80068b0 <_strtod_l+0x5d0>)
 8006828:	00eb      	lsls	r3, r5, #3
 800682a:	189b      	adds	r3, r3, r2
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f7fa fd74 	bl	800131c <__aeabi_dmul>
 8006834:	2301      	movs	r3, #1
 8006836:	3501      	adds	r5, #1
 8006838:	1064      	asrs	r4, r4, #1
 800683a:	e7d1      	b.n	80067e0 <_strtod_l+0x500>
 800683c:	23d4      	movs	r3, #212	; 0xd4
 800683e:	049b      	lsls	r3, r3, #18
 8006840:	18cf      	adds	r7, r1, r3
 8006842:	e7ea      	b.n	800681a <_strtod_l+0x53a>
 8006844:	2c00      	cmp	r4, #0
 8006846:	d0e8      	beq.n	800681a <_strtod_l+0x53a>
 8006848:	230f      	movs	r3, #15
 800684a:	4264      	negs	r4, r4
 800684c:	4023      	ands	r3, r4
 800684e:	d00a      	beq.n	8006866 <_strtod_l+0x586>
 8006850:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <_strtod_l+0x5c8>)
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	18d3      	adds	r3, r2, r3
 8006856:	0030      	movs	r0, r6
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	0039      	movs	r1, r7
 800685e:	f7fa f953 	bl	8000b08 <__aeabi_ddiv>
 8006862:	0006      	movs	r6, r0
 8006864:	000f      	movs	r7, r1
 8006866:	1124      	asrs	r4, r4, #4
 8006868:	d0d7      	beq.n	800681a <_strtod_l+0x53a>
 800686a:	2c1f      	cmp	r4, #31
 800686c:	dd28      	ble.n	80068c0 <_strtod_l+0x5e0>
 800686e:	2400      	movs	r4, #0
 8006870:	9405      	str	r4, [sp, #20]
 8006872:	940b      	str	r4, [sp, #44]	; 0x2c
 8006874:	940a      	str	r4, [sp, #40]	; 0x28
 8006876:	2322      	movs	r3, #34	; 0x22
 8006878:	9a04      	ldr	r2, [sp, #16]
 800687a:	2600      	movs	r6, #0
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006880:	2700      	movs	r7, #0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d000      	beq.n	8006888 <_strtod_l+0x5a8>
 8006886:	e76a      	b.n	800675e <_strtod_l+0x47e>
 8006888:	e56b      	b.n	8006362 <_strtod_l+0x82>
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	00004e1f 	.word	0x00004e1f
 8006890:	08009bf9 	.word	0x08009bf9
 8006894:	08009c83 	.word	0x08009c83
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	08009c01 	.word	0x08009c01
 80068a0:	08009c44 	.word	0x08009c44
 80068a4:	fff80000 	.word	0xfff80000
 80068a8:	08009d28 	.word	0x08009d28
 80068ac:	fcb00000 	.word	0xfcb00000
 80068b0:	08009d00 	.word	0x08009d00
 80068b4:	7ca00000 	.word	0x7ca00000
 80068b8:	7c900000 	.word	0x7c900000
 80068bc:	7fefffff 	.word	0x7fefffff
 80068c0:	2310      	movs	r3, #16
 80068c2:	4023      	ands	r3, r4
 80068c4:	9306      	str	r3, [sp, #24]
 80068c6:	d001      	beq.n	80068cc <_strtod_l+0x5ec>
 80068c8:	236a      	movs	r3, #106	; 0x6a
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	2300      	movs	r3, #0
 80068ce:	0030      	movs	r0, r6
 80068d0:	0039      	movs	r1, r7
 80068d2:	001d      	movs	r5, r3
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	dd00      	ble.n	80068da <_strtod_l+0x5fa>
 80068d8:	e10e      	b.n	8006af8 <_strtod_l+0x818>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <_strtod_l+0x602>
 80068de:	0006      	movs	r6, r0
 80068e0:	000f      	movs	r7, r1
 80068e2:	9b06      	ldr	r3, [sp, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00f      	beq.n	8006908 <_strtod_l+0x628>
 80068e8:	236b      	movs	r3, #107	; 0x6b
 80068ea:	0079      	lsls	r1, r7, #1
 80068ec:	0d49      	lsrs	r1, r1, #21
 80068ee:	003a      	movs	r2, r7
 80068f0:	1a5b      	subs	r3, r3, r1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dd08      	ble.n	8006908 <_strtod_l+0x628>
 80068f6:	2b1f      	cmp	r3, #31
 80068f8:	dc00      	bgt.n	80068fc <_strtod_l+0x61c>
 80068fa:	e112      	b.n	8006b22 <_strtod_l+0x842>
 80068fc:	2600      	movs	r6, #0
 80068fe:	2b34      	cmp	r3, #52	; 0x34
 8006900:	dc00      	bgt.n	8006904 <_strtod_l+0x624>
 8006902:	e107      	b.n	8006b14 <_strtod_l+0x834>
 8006904:	27dc      	movs	r7, #220	; 0xdc
 8006906:	04bf      	lsls	r7, r7, #18
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	0030      	movs	r0, r6
 800690e:	0039      	movs	r1, r7
 8006910:	f7f9 fd92 	bl	8000438 <__aeabi_dcmpeq>
 8006914:	2800      	cmp	r0, #0
 8006916:	d1aa      	bne.n	800686e <_strtod_l+0x58e>
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	9804      	ldr	r0, [sp, #16]
 8006924:	f002 f8cf 	bl	8008ac6 <__s2b>
 8006928:	900b      	str	r0, [sp, #44]	; 0x2c
 800692a:	2800      	cmp	r0, #0
 800692c:	d100      	bne.n	8006930 <_strtod_l+0x650>
 800692e:	e709      	b.n	8006744 <_strtod_l+0x464>
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	9a07      	ldr	r2, [sp, #28]
 8006934:	17db      	asrs	r3, r3, #31
 8006936:	4252      	negs	r2, r2
 8006938:	4013      	ands	r3, r2
 800693a:	9315      	str	r3, [sp, #84]	; 0x54
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	2400      	movs	r4, #0
 8006940:	43db      	mvns	r3, r3
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	17db      	asrs	r3, r3, #31
 8006946:	401a      	ands	r2, r3
 8006948:	921c      	str	r2, [sp, #112]	; 0x70
 800694a:	9405      	str	r4, [sp, #20]
 800694c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694e:	9804      	ldr	r0, [sp, #16]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	f002 f829 	bl	80089a8 <_Balloc>
 8006956:	900a      	str	r0, [sp, #40]	; 0x28
 8006958:	2800      	cmp	r0, #0
 800695a:	d100      	bne.n	800695e <_strtod_l+0x67e>
 800695c:	e6f6      	b.n	800674c <_strtod_l+0x46c>
 800695e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	310c      	adds	r1, #12
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	300c      	adds	r0, #12
 800696c:	9308      	str	r3, [sp, #32]
 800696e:	f002 f812 	bl	8008996 <memcpy>
 8006972:	ab24      	add	r3, sp, #144	; 0x90
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	ab23      	add	r3, sp, #140	; 0x8c
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	0032      	movs	r2, r6
 800697c:	003b      	movs	r3, r7
 800697e:	9804      	ldr	r0, [sp, #16]
 8006980:	960e      	str	r6, [sp, #56]	; 0x38
 8006982:	970f      	str	r7, [sp, #60]	; 0x3c
 8006984:	f002 fb52 	bl	800902c <__d2b>
 8006988:	9022      	str	r0, [sp, #136]	; 0x88
 800698a:	2800      	cmp	r0, #0
 800698c:	d100      	bne.n	8006990 <_strtod_l+0x6b0>
 800698e:	e6dd      	b.n	800674c <_strtod_l+0x46c>
 8006990:	2101      	movs	r1, #1
 8006992:	9804      	ldr	r0, [sp, #16]
 8006994:	f002 f91e 	bl	8008bd4 <__i2b>
 8006998:	9005      	str	r0, [sp, #20]
 800699a:	2800      	cmp	r0, #0
 800699c:	d100      	bne.n	80069a0 <_strtod_l+0x6c0>
 800699e:	e6d5      	b.n	800674c <_strtod_l+0x46c>
 80069a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da00      	bge.n	80069a8 <_strtod_l+0x6c8>
 80069a6:	e0c1      	b.n	8006b2c <_strtod_l+0x84c>
 80069a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069aa:	189d      	adds	r5, r3, r2
 80069ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069ae:	4694      	mov	ip, r2
 80069b0:	9906      	ldr	r1, [sp, #24]
 80069b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069b4:	1a5b      	subs	r3, r3, r1
 80069b6:	2136      	movs	r1, #54	; 0x36
 80069b8:	189b      	adds	r3, r3, r2
 80069ba:	1a8a      	subs	r2, r1, r2
 80069bc:	49b2      	ldr	r1, [pc, #712]	; (8006c88 <_strtod_l+0x9a8>)
 80069be:	3b01      	subs	r3, #1
 80069c0:	2001      	movs	r0, #1
 80069c2:	428b      	cmp	r3, r1
 80069c4:	db00      	blt.n	80069c8 <_strtod_l+0x6e8>
 80069c6:	e0bd      	b.n	8006b44 <_strtod_l+0x864>
 80069c8:	1ac9      	subs	r1, r1, r3
 80069ca:	1a52      	subs	r2, r2, r1
 80069cc:	291f      	cmp	r1, #31
 80069ce:	dd00      	ble.n	80069d2 <_strtod_l+0x6f2>
 80069d0:	e0b1      	b.n	8006b36 <_strtod_l+0x856>
 80069d2:	4088      	lsls	r0, r1
 80069d4:	2300      	movs	r3, #0
 80069d6:	9014      	str	r0, [sp, #80]	; 0x50
 80069d8:	9310      	str	r3, [sp, #64]	; 0x40
 80069da:	18ab      	adds	r3, r5, r2
 80069dc:	9308      	str	r3, [sp, #32]
 80069de:	0013      	movs	r3, r2
 80069e0:	9a06      	ldr	r2, [sp, #24]
 80069e2:	4463      	add	r3, ip
 80069e4:	18d3      	adds	r3, r2, r3
 80069e6:	9a08      	ldr	r2, [sp, #32]
 80069e8:	930c      	str	r3, [sp, #48]	; 0x30
 80069ea:	002b      	movs	r3, r5
 80069ec:	4295      	cmp	r5, r2
 80069ee:	dd00      	ble.n	80069f2 <_strtod_l+0x712>
 80069f0:	0013      	movs	r3, r2
 80069f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069f4:	4293      	cmp	r3, r2
 80069f6:	dd00      	ble.n	80069fa <_strtod_l+0x71a>
 80069f8:	0013      	movs	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dd06      	ble.n	8006a0c <_strtod_l+0x72c>
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	1aed      	subs	r5, r5, r3
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	9208      	str	r2, [sp, #32]
 8006a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	920c      	str	r2, [sp, #48]	; 0x30
 8006a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d017      	beq.n	8006a42 <_strtod_l+0x762>
 8006a12:	001a      	movs	r2, r3
 8006a14:	9905      	ldr	r1, [sp, #20]
 8006a16:	9804      	ldr	r0, [sp, #16]
 8006a18:	f002 f974 	bl	8008d04 <__pow5mult>
 8006a1c:	9005      	str	r0, [sp, #20]
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d100      	bne.n	8006a24 <_strtod_l+0x744>
 8006a22:	e693      	b.n	800674c <_strtod_l+0x46c>
 8006a24:	0001      	movs	r1, r0
 8006a26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a28:	9804      	ldr	r0, [sp, #16]
 8006a2a:	f002 f8dc 	bl	8008be6 <__multiply>
 8006a2e:	9012      	str	r0, [sp, #72]	; 0x48
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d100      	bne.n	8006a36 <_strtod_l+0x756>
 8006a34:	e68a      	b.n	800674c <_strtod_l+0x46c>
 8006a36:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a38:	9804      	ldr	r0, [sp, #16]
 8006a3a:	f001 ffed 	bl	8008a18 <_Bfree>
 8006a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a40:	9322      	str	r3, [sp, #136]	; 0x88
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dd00      	ble.n	8006a4a <_strtod_l+0x76a>
 8006a48:	e07f      	b.n	8006b4a <_strtod_l+0x86a>
 8006a4a:	9b07      	ldr	r3, [sp, #28]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dd08      	ble.n	8006a62 <_strtod_l+0x782>
 8006a50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a54:	9804      	ldr	r0, [sp, #16]
 8006a56:	f002 f955 	bl	8008d04 <__pow5mult>
 8006a5a:	900a      	str	r0, [sp, #40]	; 0x28
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d100      	bne.n	8006a62 <_strtod_l+0x782>
 8006a60:	e674      	b.n	800674c <_strtod_l+0x46c>
 8006a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd08      	ble.n	8006a7a <_strtod_l+0x79a>
 8006a68:	001a      	movs	r2, r3
 8006a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a6c:	9804      	ldr	r0, [sp, #16]
 8006a6e:	f002 f99b 	bl	8008da8 <__lshift>
 8006a72:	900a      	str	r0, [sp, #40]	; 0x28
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d100      	bne.n	8006a7a <_strtod_l+0x79a>
 8006a78:	e668      	b.n	800674c <_strtod_l+0x46c>
 8006a7a:	2d00      	cmp	r5, #0
 8006a7c:	dd08      	ble.n	8006a90 <_strtod_l+0x7b0>
 8006a7e:	002a      	movs	r2, r5
 8006a80:	9905      	ldr	r1, [sp, #20]
 8006a82:	9804      	ldr	r0, [sp, #16]
 8006a84:	f002 f990 	bl	8008da8 <__lshift>
 8006a88:	9005      	str	r0, [sp, #20]
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d100      	bne.n	8006a90 <_strtod_l+0x7b0>
 8006a8e:	e65d      	b.n	800674c <_strtod_l+0x46c>
 8006a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a94:	9804      	ldr	r0, [sp, #16]
 8006a96:	f002 f9f3 	bl	8008e80 <__mdiff>
 8006a9a:	1e04      	subs	r4, r0, #0
 8006a9c:	d100      	bne.n	8006aa0 <_strtod_l+0x7c0>
 8006a9e:	e655      	b.n	800674c <_strtod_l+0x46c>
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	68c3      	ldr	r3, [r0, #12]
 8006aa4:	9905      	ldr	r1, [sp, #20]
 8006aa6:	60c5      	str	r5, [r0, #12]
 8006aa8:	9312      	str	r3, [sp, #72]	; 0x48
 8006aaa:	f002 f9cf 	bl	8008e4c <__mcmp>
 8006aae:	42a8      	cmp	r0, r5
 8006ab0:	da55      	bge.n	8006b5e <_strtod_l+0x87e>
 8006ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	d11b      	bne.n	8006af0 <_strtod_l+0x810>
 8006ab8:	42ae      	cmp	r6, r5
 8006aba:	d119      	bne.n	8006af0 <_strtod_l+0x810>
 8006abc:	033b      	lsls	r3, r7, #12
 8006abe:	42ab      	cmp	r3, r5
 8006ac0:	d116      	bne.n	8006af0 <_strtod_l+0x810>
 8006ac2:	22d6      	movs	r2, #214	; 0xd6
 8006ac4:	4b71      	ldr	r3, [pc, #452]	; (8006c8c <_strtod_l+0x9ac>)
 8006ac6:	04d2      	lsls	r2, r2, #19
 8006ac8:	403b      	ands	r3, r7
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d910      	bls.n	8006af0 <_strtod_l+0x810>
 8006ace:	6963      	ldr	r3, [r4, #20]
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	d102      	bne.n	8006ada <_strtod_l+0x7fa>
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	dd0a      	ble.n	8006af0 <_strtod_l+0x810>
 8006ada:	0021      	movs	r1, r4
 8006adc:	2201      	movs	r2, #1
 8006ade:	9804      	ldr	r0, [sp, #16]
 8006ae0:	f002 f962 	bl	8008da8 <__lshift>
 8006ae4:	9905      	ldr	r1, [sp, #20]
 8006ae6:	0004      	movs	r4, r0
 8006ae8:	f002 f9b0 	bl	8008e4c <__mcmp>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	dc6b      	bgt.n	8006bc8 <_strtod_l+0x8e8>
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d178      	bne.n	8006be8 <_strtod_l+0x908>
 8006af6:	e632      	b.n	800675e <_strtod_l+0x47e>
 8006af8:	2201      	movs	r2, #1
 8006afa:	4214      	tst	r4, r2
 8006afc:	d007      	beq.n	8006b0e <_strtod_l+0x82e>
 8006afe:	4a64      	ldr	r2, [pc, #400]	; (8006c90 <_strtod_l+0x9b0>)
 8006b00:	00eb      	lsls	r3, r5, #3
 8006b02:	18d3      	adds	r3, r2, r3
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f7fa fc08 	bl	800131c <__aeabi_dmul>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	3501      	adds	r5, #1
 8006b10:	1064      	asrs	r4, r4, #1
 8006b12:	e6df      	b.n	80068d4 <_strtod_l+0x5f4>
 8006b14:	2101      	movs	r1, #1
 8006b16:	3b20      	subs	r3, #32
 8006b18:	4249      	negs	r1, r1
 8006b1a:	4099      	lsls	r1, r3
 8006b1c:	400a      	ands	r2, r1
 8006b1e:	0017      	movs	r7, r2
 8006b20:	e6f2      	b.n	8006908 <_strtod_l+0x628>
 8006b22:	2201      	movs	r2, #1
 8006b24:	4252      	negs	r2, r2
 8006b26:	409a      	lsls	r2, r3
 8006b28:	4016      	ands	r6, r2
 8006b2a:	e6ed      	b.n	8006908 <_strtod_l+0x628>
 8006b2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b2e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	4694      	mov	ip, r2
 8006b34:	e73c      	b.n	80069b0 <_strtod_l+0x6d0>
 8006b36:	4957      	ldr	r1, [pc, #348]	; (8006c94 <_strtod_l+0x9b4>)
 8006b38:	1acb      	subs	r3, r1, r3
 8006b3a:	0001      	movs	r1, r0
 8006b3c:	4099      	lsls	r1, r3
 8006b3e:	9110      	str	r1, [sp, #64]	; 0x40
 8006b40:	9014      	str	r0, [sp, #80]	; 0x50
 8006b42:	e74a      	b.n	80069da <_strtod_l+0x6fa>
 8006b44:	2300      	movs	r3, #0
 8006b46:	9310      	str	r3, [sp, #64]	; 0x40
 8006b48:	e7fa      	b.n	8006b40 <_strtod_l+0x860>
 8006b4a:	9a08      	ldr	r2, [sp, #32]
 8006b4c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b4e:	9804      	ldr	r0, [sp, #16]
 8006b50:	f002 f92a 	bl	8008da8 <__lshift>
 8006b54:	9022      	str	r0, [sp, #136]	; 0x88
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d000      	beq.n	8006b5c <_strtod_l+0x87c>
 8006b5a:	e776      	b.n	8006a4a <_strtod_l+0x76a>
 8006b5c:	e5f6      	b.n	800674c <_strtod_l+0x46c>
 8006b5e:	970c      	str	r7, [sp, #48]	; 0x30
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d000      	beq.n	8006b66 <_strtod_l+0x886>
 8006b64:	e0a0      	b.n	8006ca8 <_strtod_l+0x9c8>
 8006b66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b68:	033b      	lsls	r3, r7, #12
 8006b6a:	0b1b      	lsrs	r3, r3, #12
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	d027      	beq.n	8006bc0 <_strtod_l+0x8e0>
 8006b70:	4a49      	ldr	r2, [pc, #292]	; (8006c98 <_strtod_l+0x9b8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d157      	bne.n	8006c26 <_strtod_l+0x946>
 8006b76:	2201      	movs	r2, #1
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	4252      	negs	r2, r2
 8006b7c:	0031      	movs	r1, r6
 8006b7e:	0010      	movs	r0, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <_strtod_l+0x8bc>
 8006b84:	25d4      	movs	r5, #212	; 0xd4
 8006b86:	4b41      	ldr	r3, [pc, #260]	; (8006c8c <_strtod_l+0x9ac>)
 8006b88:	04ed      	lsls	r5, r5, #19
 8006b8a:	403b      	ands	r3, r7
 8006b8c:	0010      	movs	r0, r2
 8006b8e:	42ab      	cmp	r3, r5
 8006b90:	d804      	bhi.n	8006b9c <_strtod_l+0x8bc>
 8006b92:	306c      	adds	r0, #108	; 0x6c
 8006b94:	0d1b      	lsrs	r3, r3, #20
 8006b96:	1ac3      	subs	r3, r0, r3
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	0010      	movs	r0, r2
 8006b9c:	4281      	cmp	r1, r0
 8006b9e:	d142      	bne.n	8006c26 <_strtod_l+0x946>
 8006ba0:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <_strtod_l+0x9bc>)
 8006ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d102      	bne.n	8006bae <_strtod_l+0x8ce>
 8006ba8:	1c4b      	adds	r3, r1, #1
 8006baa:	d100      	bne.n	8006bae <_strtod_l+0x8ce>
 8006bac:	e5ce      	b.n	800674c <_strtod_l+0x46c>
 8006bae:	4b37      	ldr	r3, [pc, #220]	; (8006c8c <_strtod_l+0x9ac>)
 8006bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	401a      	ands	r2, r3
 8006bb6:	0013      	movs	r3, r2
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	0352      	lsls	r2, r2, #13
 8006bbc:	189f      	adds	r7, r3, r2
 8006bbe:	e797      	b.n	8006af0 <_strtod_l+0x810>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d130      	bne.n	8006c26 <_strtod_l+0x946>
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	d12e      	bne.n	8006c26 <_strtod_l+0x946>
 8006bc8:	9906      	ldr	r1, [sp, #24]
 8006bca:	003b      	movs	r3, r7
 8006bcc:	4a2f      	ldr	r2, [pc, #188]	; (8006c8c <_strtod_l+0x9ac>)
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	d020      	beq.n	8006c14 <_strtod_l+0x934>
 8006bd2:	0011      	movs	r1, r2
 8006bd4:	20d6      	movs	r0, #214	; 0xd6
 8006bd6:	4039      	ands	r1, r7
 8006bd8:	04c0      	lsls	r0, r0, #19
 8006bda:	4281      	cmp	r1, r0
 8006bdc:	dc1a      	bgt.n	8006c14 <_strtod_l+0x934>
 8006bde:	23dc      	movs	r3, #220	; 0xdc
 8006be0:	049b      	lsls	r3, r3, #18
 8006be2:	4299      	cmp	r1, r3
 8006be4:	dc00      	bgt.n	8006be8 <_strtod_l+0x908>
 8006be6:	e646      	b.n	8006876 <_strtod_l+0x596>
 8006be8:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <_strtod_l+0x9c0>)
 8006bea:	0030      	movs	r0, r6
 8006bec:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bee:	2300      	movs	r3, #0
 8006bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bf6:	0039      	movs	r1, r7
 8006bf8:	f7fa fb90 	bl	800131c <__aeabi_dmul>
 8006bfc:	0006      	movs	r6, r0
 8006bfe:	000f      	movs	r7, r1
 8006c00:	1e0b      	subs	r3, r1, #0
 8006c02:	d000      	beq.n	8006c06 <_strtod_l+0x926>
 8006c04:	e5ab      	b.n	800675e <_strtod_l+0x47e>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d000      	beq.n	8006c0c <_strtod_l+0x92c>
 8006c0a:	e5a8      	b.n	800675e <_strtod_l+0x47e>
 8006c0c:	9a04      	ldr	r2, [sp, #16]
 8006c0e:	3322      	adds	r3, #34	; 0x22
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e5a4      	b.n	800675e <_strtod_l+0x47e>
 8006c14:	2601      	movs	r6, #1
 8006c16:	4013      	ands	r3, r2
 8006c18:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <_strtod_l+0x9c4>)
 8006c1a:	4276      	negs	r6, r6
 8006c1c:	189b      	adds	r3, r3, r2
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <_strtod_l+0x9b8>)
 8006c20:	431a      	orrs	r2, r3
 8006c22:	0017      	movs	r7, r2
 8006c24:	e764      	b.n	8006af0 <_strtod_l+0x810>
 8006c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d015      	beq.n	8006c58 <_strtod_l+0x978>
 8006c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c30:	4213      	tst	r3, r2
 8006c32:	d100      	bne.n	8006c36 <_strtod_l+0x956>
 8006c34:	e75c      	b.n	8006af0 <_strtod_l+0x810>
 8006c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c38:	9a06      	ldr	r2, [sp, #24]
 8006c3a:	0030      	movs	r0, r6
 8006c3c:	0039      	movs	r1, r7
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00f      	beq.n	8006c62 <_strtod_l+0x982>
 8006c42:	f7ff fb35 	bl	80062b0 <sulp>
 8006c46:	0002      	movs	r2, r0
 8006c48:	000b      	movs	r3, r1
 8006c4a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c4e:	f7f9 fc3f 	bl	80004d0 <__aeabi_dadd>
 8006c52:	0006      	movs	r6, r0
 8006c54:	000f      	movs	r7, r1
 8006c56:	e74b      	b.n	8006af0 <_strtod_l+0x810>
 8006c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c5a:	4233      	tst	r3, r6
 8006c5c:	d100      	bne.n	8006c60 <_strtod_l+0x980>
 8006c5e:	e747      	b.n	8006af0 <_strtod_l+0x810>
 8006c60:	e7e9      	b.n	8006c36 <_strtod_l+0x956>
 8006c62:	f7ff fb25 	bl	80062b0 <sulp>
 8006c66:	0002      	movs	r2, r0
 8006c68:	000b      	movs	r3, r1
 8006c6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006c6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c6e:	f7fa fdc7 	bl	8001800 <__aeabi_dsub>
 8006c72:	2200      	movs	r2, #0
 8006c74:	2300      	movs	r3, #0
 8006c76:	0006      	movs	r6, r0
 8006c78:	000f      	movs	r7, r1
 8006c7a:	f7f9 fbdd 	bl	8000438 <__aeabi_dcmpeq>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d000      	beq.n	8006c84 <_strtod_l+0x9a4>
 8006c82:	e5f8      	b.n	8006876 <_strtod_l+0x596>
 8006c84:	e734      	b.n	8006af0 <_strtod_l+0x810>
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	fffffc02 	.word	0xfffffc02
 8006c8c:	7ff00000 	.word	0x7ff00000
 8006c90:	08009c58 	.word	0x08009c58
 8006c94:	fffffbe2 	.word	0xfffffbe2
 8006c98:	000fffff 	.word	0x000fffff
 8006c9c:	7fefffff 	.word	0x7fefffff
 8006ca0:	39500000 	.word	0x39500000
 8006ca4:	fff00000 	.word	0xfff00000
 8006ca8:	9905      	ldr	r1, [sp, #20]
 8006caa:	0020      	movs	r0, r4
 8006cac:	f002 fa12 	bl	80090d4 <__ratio>
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	05db      	lsls	r3, r3, #23
 8006cb6:	9008      	str	r0, [sp, #32]
 8006cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006cba:	f7f9 fbcd 	bl	8000458 <__aeabi_dcmple>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d100      	bne.n	8006cc4 <_strtod_l+0x9e4>
 8006cc2:	e07f      	b.n	8006dc4 <_strtod_l+0xae4>
 8006cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d04b      	beq.n	8006d62 <_strtod_l+0xa82>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4b8a      	ldr	r3, [pc, #552]	; (8006ef8 <_strtod_l+0xc18>)
 8006cce:	9210      	str	r2, [sp, #64]	; 0x40
 8006cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8006cd2:	4b89      	ldr	r3, [pc, #548]	; (8006ef8 <_strtod_l+0xc18>)
 8006cd4:	9308      	str	r3, [sp, #32]
 8006cd6:	4a89      	ldr	r2, [pc, #548]	; (8006efc <_strtod_l+0xc1c>)
 8006cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cda:	4013      	ands	r3, r2
 8006cdc:	9314      	str	r3, [sp, #80]	; 0x50
 8006cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ce0:	4b87      	ldr	r3, [pc, #540]	; (8006f00 <_strtod_l+0xc20>)
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d000      	beq.n	8006ce8 <_strtod_l+0xa08>
 8006ce6:	e0ba      	b.n	8006e5e <_strtod_l+0xb7e>
 8006ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cec:	921a      	str	r2, [sp, #104]	; 0x68
 8006cee:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cf0:	4a84      	ldr	r2, [pc, #528]	; (8006f04 <_strtod_l+0xc24>)
 8006cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf4:	4694      	mov	ip, r2
 8006cf6:	4463      	add	r3, ip
 8006cf8:	001f      	movs	r7, r3
 8006cfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cfe:	0030      	movs	r0, r6
 8006d00:	0039      	movs	r1, r7
 8006d02:	920c      	str	r2, [sp, #48]	; 0x30
 8006d04:	930d      	str	r3, [sp, #52]	; 0x34
 8006d06:	f002 f91f 	bl	8008f48 <__ulp>
 8006d0a:	0002      	movs	r2, r0
 8006d0c:	000b      	movs	r3, r1
 8006d0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d12:	f7fa fb03 	bl	800131c <__aeabi_dmul>
 8006d16:	0032      	movs	r2, r6
 8006d18:	003b      	movs	r3, r7
 8006d1a:	f7f9 fbd9 	bl	80004d0 <__aeabi_dadd>
 8006d1e:	4a77      	ldr	r2, [pc, #476]	; (8006efc <_strtod_l+0xc1c>)
 8006d20:	4b79      	ldr	r3, [pc, #484]	; (8006f08 <_strtod_l+0xc28>)
 8006d22:	0006      	movs	r6, r0
 8006d24:	400a      	ands	r2, r1
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d964      	bls.n	8006df4 <_strtod_l+0xb14>
 8006d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d2c:	4a77      	ldr	r2, [pc, #476]	; (8006f0c <_strtod_l+0xc2c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d103      	bne.n	8006d3a <_strtod_l+0xa5a>
 8006d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d34:	3301      	adds	r3, #1
 8006d36:	d100      	bne.n	8006d3a <_strtod_l+0xa5a>
 8006d38:	e508      	b.n	800674c <_strtod_l+0x46c>
 8006d3a:	2601      	movs	r6, #1
 8006d3c:	4f73      	ldr	r7, [pc, #460]	; (8006f0c <_strtod_l+0xc2c>)
 8006d3e:	4276      	negs	r6, r6
 8006d40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d42:	9804      	ldr	r0, [sp, #16]
 8006d44:	f001 fe68 	bl	8008a18 <_Bfree>
 8006d48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d4a:	9804      	ldr	r0, [sp, #16]
 8006d4c:	f001 fe64 	bl	8008a18 <_Bfree>
 8006d50:	9905      	ldr	r1, [sp, #20]
 8006d52:	9804      	ldr	r0, [sp, #16]
 8006d54:	f001 fe60 	bl	8008a18 <_Bfree>
 8006d58:	0021      	movs	r1, r4
 8006d5a:	9804      	ldr	r0, [sp, #16]
 8006d5c:	f001 fe5c 	bl	8008a18 <_Bfree>
 8006d60:	e5f4      	b.n	800694c <_strtod_l+0x66c>
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d11e      	bne.n	8006da4 <_strtod_l+0xac4>
 8006d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	d121      	bne.n	8006db0 <_strtod_l+0xad0>
 8006d6c:	9808      	ldr	r0, [sp, #32]
 8006d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d70:	2200      	movs	r2, #0
 8006d72:	4b61      	ldr	r3, [pc, #388]	; (8006ef8 <_strtod_l+0xc18>)
 8006d74:	f7f9 fb66 	bl	8000444 <__aeabi_dcmplt>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d11f      	bne.n	8006dbc <_strtod_l+0xadc>
 8006d7c:	9808      	ldr	r0, [sp, #32]
 8006d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d80:	2200      	movs	r2, #0
 8006d82:	4b63      	ldr	r3, [pc, #396]	; (8006f10 <_strtod_l+0xc30>)
 8006d84:	f7fa faca 	bl	800131c <__aeabi_dmul>
 8006d88:	0005      	movs	r5, r0
 8006d8a:	9108      	str	r1, [sp, #32]
 8006d8c:	2280      	movs	r2, #128	; 0x80
 8006d8e:	0612      	lsls	r2, r2, #24
 8006d90:	4694      	mov	ip, r2
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	951e      	str	r5, [sp, #120]	; 0x78
 8006d96:	4463      	add	r3, ip
 8006d98:	931f      	str	r3, [sp, #124]	; 0x7c
 8006d9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d9e:	9210      	str	r2, [sp, #64]	; 0x40
 8006da0:	9311      	str	r3, [sp, #68]	; 0x44
 8006da2:	e798      	b.n	8006cd6 <_strtod_l+0x9f6>
 8006da4:	2e01      	cmp	r6, #1
 8006da6:	d103      	bne.n	8006db0 <_strtod_l+0xad0>
 8006da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d100      	bne.n	8006db0 <_strtod_l+0xad0>
 8006dae:	e562      	b.n	8006876 <_strtod_l+0x596>
 8006db0:	2200      	movs	r2, #0
 8006db2:	4b58      	ldr	r3, [pc, #352]	; (8006f14 <_strtod_l+0xc34>)
 8006db4:	2500      	movs	r5, #0
 8006db6:	9210      	str	r2, [sp, #64]	; 0x40
 8006db8:	9311      	str	r3, [sp, #68]	; 0x44
 8006dba:	e78a      	b.n	8006cd2 <_strtod_l+0x9f2>
 8006dbc:	4b54      	ldr	r3, [pc, #336]	; (8006f10 <_strtod_l+0xc30>)
 8006dbe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006dc0:	9308      	str	r3, [sp, #32]
 8006dc2:	e7e3      	b.n	8006d8c <_strtod_l+0xaac>
 8006dc4:	4b52      	ldr	r3, [pc, #328]	; (8006f10 <_strtod_l+0xc30>)
 8006dc6:	9808      	ldr	r0, [sp, #32]
 8006dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f7fa faa6 	bl	800131c <__aeabi_dmul>
 8006dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd2:	0005      	movs	r5, r0
 8006dd4:	9108      	str	r1, [sp, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d107      	bne.n	8006dea <_strtod_l+0xb0a>
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	061b      	lsls	r3, r3, #24
 8006dde:	18cb      	adds	r3, r1, r3
 8006de0:	9016      	str	r0, [sp, #88]	; 0x58
 8006de2:	9317      	str	r3, [sp, #92]	; 0x5c
 8006de4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006de8:	e7d9      	b.n	8006d9e <_strtod_l+0xabe>
 8006dea:	0002      	movs	r2, r0
 8006dec:	9b08      	ldr	r3, [sp, #32]
 8006dee:	9216      	str	r2, [sp, #88]	; 0x58
 8006df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006df2:	e7f7      	b.n	8006de4 <_strtod_l+0xb04>
 8006df4:	23d4      	movs	r3, #212	; 0xd4
 8006df6:	049b      	lsls	r3, r3, #18
 8006df8:	18cf      	adds	r7, r1, r3
 8006dfa:	9b06      	ldr	r3, [sp, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d19f      	bne.n	8006d40 <_strtod_l+0xa60>
 8006e00:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <_strtod_l+0xc1c>)
 8006e02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e04:	970c      	str	r7, [sp, #48]	; 0x30
 8006e06:	403b      	ands	r3, r7
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d199      	bne.n	8006d40 <_strtod_l+0xa60>
 8006e0c:	9908      	ldr	r1, [sp, #32]
 8006e0e:	0028      	movs	r0, r5
 8006e10:	f7fb f85a 	bl	8001ec8 <__aeabi_d2iz>
 8006e14:	f7fb f88e 	bl	8001f34 <__aeabi_i2d>
 8006e18:	000b      	movs	r3, r1
 8006e1a:	0002      	movs	r2, r0
 8006e1c:	9908      	ldr	r1, [sp, #32]
 8006e1e:	0028      	movs	r0, r5
 8006e20:	f7fa fcee 	bl	8001800 <__aeabi_dsub>
 8006e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e26:	9008      	str	r0, [sp, #32]
 8006e28:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <_strtod_l+0xb58>
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	d102      	bne.n	8006e38 <_strtod_l+0xb58>
 8006e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e34:	031b      	lsls	r3, r3, #12
 8006e36:	d058      	beq.n	8006eea <_strtod_l+0xc0a>
 8006e38:	9808      	ldr	r0, [sp, #32]
 8006e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <_strtod_l+0xc38>)
 8006e3e:	4b37      	ldr	r3, [pc, #220]	; (8006f1c <_strtod_l+0xc3c>)
 8006e40:	f7f9 fb00 	bl	8000444 <__aeabi_dcmplt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d000      	beq.n	8006e4a <_strtod_l+0xb6a>
 8006e48:	e489      	b.n	800675e <_strtod_l+0x47e>
 8006e4a:	9808      	ldr	r0, [sp, #32]
 8006e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e4e:	4a34      	ldr	r2, [pc, #208]	; (8006f20 <_strtod_l+0xc40>)
 8006e50:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <_strtod_l+0xc30>)
 8006e52:	f7f9 fb0b 	bl	800046c <__aeabi_dcmpgt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d100      	bne.n	8006e5c <_strtod_l+0xb7c>
 8006e5a:	e771      	b.n	8006d40 <_strtod_l+0xa60>
 8006e5c:	e47f      	b.n	800675e <_strtod_l+0x47e>
 8006e5e:	9b06      	ldr	r3, [sp, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d02a      	beq.n	8006eba <_strtod_l+0xbda>
 8006e64:	23d4      	movs	r3, #212	; 0xd4
 8006e66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e68:	04db      	lsls	r3, r3, #19
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d825      	bhi.n	8006eba <_strtod_l+0xbda>
 8006e6e:	4a2d      	ldr	r2, [pc, #180]	; (8006f24 <_strtod_l+0xc44>)
 8006e70:	4b2d      	ldr	r3, [pc, #180]	; (8006f28 <_strtod_l+0xc48>)
 8006e72:	0028      	movs	r0, r5
 8006e74:	9908      	ldr	r1, [sp, #32]
 8006e76:	f7f9 faef 	bl	8000458 <__aeabi_dcmple>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d016      	beq.n	8006eac <_strtod_l+0xbcc>
 8006e7e:	0028      	movs	r0, r5
 8006e80:	9908      	ldr	r1, [sp, #32]
 8006e82:	f7f9 fb07 	bl	8000494 <__aeabi_d2uiz>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d100      	bne.n	8006e8c <_strtod_l+0xbac>
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f7fb f88c 	bl	8001fa8 <__aeabi_ui2d>
 8006e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e92:	0005      	movs	r5, r0
 8006e94:	9108      	str	r1, [sp, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d122      	bne.n	8006ee0 <_strtod_l+0xc00>
 8006e9a:	2380      	movs	r3, #128	; 0x80
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	18cb      	adds	r3, r1, r3
 8006ea0:	9018      	str	r0, [sp, #96]	; 0x60
 8006ea2:	9319      	str	r3, [sp, #100]	; 0x64
 8006ea4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ea6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea8:	9210      	str	r2, [sp, #64]	; 0x40
 8006eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8006eac:	22d6      	movs	r2, #214	; 0xd6
 8006eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eb0:	04d2      	lsls	r2, r2, #19
 8006eb2:	189b      	adds	r3, r3, r2
 8006eb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8006eba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ebc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ebe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006ec0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8006ec2:	f002 f841 	bl	8008f48 <__ulp>
 8006ec6:	0002      	movs	r2, r0
 8006ec8:	000b      	movs	r3, r1
 8006eca:	0030      	movs	r0, r6
 8006ecc:	0039      	movs	r1, r7
 8006ece:	f7fa fa25 	bl	800131c <__aeabi_dmul>
 8006ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ed6:	f7f9 fafb 	bl	80004d0 <__aeabi_dadd>
 8006eda:	0006      	movs	r6, r0
 8006edc:	000f      	movs	r7, r1
 8006ede:	e78c      	b.n	8006dfa <_strtod_l+0xb1a>
 8006ee0:	0002      	movs	r2, r0
 8006ee2:	9b08      	ldr	r3, [sp, #32]
 8006ee4:	9218      	str	r2, [sp, #96]	; 0x60
 8006ee6:	9319      	str	r3, [sp, #100]	; 0x64
 8006ee8:	e7dc      	b.n	8006ea4 <_strtod_l+0xbc4>
 8006eea:	4a0b      	ldr	r2, [pc, #44]	; (8006f18 <_strtod_l+0xc38>)
 8006eec:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <_strtod_l+0xc4c>)
 8006eee:	9808      	ldr	r0, [sp, #32]
 8006ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef2:	f7f9 faa7 	bl	8000444 <__aeabi_dcmplt>
 8006ef6:	e7ae      	b.n	8006e56 <_strtod_l+0xb76>
 8006ef8:	3ff00000 	.word	0x3ff00000
 8006efc:	7ff00000 	.word	0x7ff00000
 8006f00:	7fe00000 	.word	0x7fe00000
 8006f04:	fcb00000 	.word	0xfcb00000
 8006f08:	7c9fffff 	.word	0x7c9fffff
 8006f0c:	7fefffff 	.word	0x7fefffff
 8006f10:	3fe00000 	.word	0x3fe00000
 8006f14:	bff00000 	.word	0xbff00000
 8006f18:	94a03595 	.word	0x94a03595
 8006f1c:	3fdfffff 	.word	0x3fdfffff
 8006f20:	35afe535 	.word	0x35afe535
 8006f24:	ffc00000 	.word	0xffc00000
 8006f28:	41dfffff 	.word	0x41dfffff
 8006f2c:	3fcfffff 	.word	0x3fcfffff

08006f30 <_strtod_r>:
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <_strtod_r+0x14>)
 8006f32:	b510      	push	{r4, lr}
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d100      	bne.n	8006f3e <_strtod_r+0xe>
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <_strtod_r+0x18>)
 8006f3e:	f7ff f9cf 	bl	80062e0 <_strtod_l>
 8006f42:	bd10      	pop	{r4, pc}
 8006f44:	2000000c 	.word	0x2000000c
 8006f48:	20000070 	.word	0x20000070

08006f4c <_strtol_l.isra.0>:
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	001f      	movs	r7, r3
 8006f50:	000e      	movs	r6, r1
 8006f52:	b087      	sub	sp, #28
 8006f54:	9005      	str	r0, [sp, #20]
 8006f56:	9101      	str	r1, [sp, #4]
 8006f58:	9202      	str	r2, [sp, #8]
 8006f5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f5c:	7834      	ldrb	r4, [r6, #0]
 8006f5e:	f001 fc75 	bl	800884c <__locale_ctype_ptr_l>
 8006f62:	2208      	movs	r2, #8
 8006f64:	1900      	adds	r0, r0, r4
 8006f66:	7843      	ldrb	r3, [r0, #1]
 8006f68:	1c75      	adds	r5, r6, #1
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d136      	bne.n	8006fdc <_strtol_l.isra.0+0x90>
 8006f6e:	2c2d      	cmp	r4, #45	; 0x2d
 8006f70:	d136      	bne.n	8006fe0 <_strtol_l.isra.0+0x94>
 8006f72:	1cb5      	adds	r5, r6, #2
 8006f74:	7874      	ldrb	r4, [r6, #1]
 8006f76:	2601      	movs	r6, #1
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	d062      	beq.n	8007042 <_strtol_l.isra.0+0xf6>
 8006f7c:	2f10      	cmp	r7, #16
 8006f7e:	d109      	bne.n	8006f94 <_strtol_l.isra.0+0x48>
 8006f80:	2c30      	cmp	r4, #48	; 0x30
 8006f82:	d107      	bne.n	8006f94 <_strtol_l.isra.0+0x48>
 8006f84:	2220      	movs	r2, #32
 8006f86:	782b      	ldrb	r3, [r5, #0]
 8006f88:	4393      	bics	r3, r2
 8006f8a:	2b58      	cmp	r3, #88	; 0x58
 8006f8c:	d154      	bne.n	8007038 <_strtol_l.isra.0+0xec>
 8006f8e:	2710      	movs	r7, #16
 8006f90:	786c      	ldrb	r4, [r5, #1]
 8006f92:	3502      	adds	r5, #2
 8006f94:	4b2d      	ldr	r3, [pc, #180]	; (800704c <_strtol_l.isra.0+0x100>)
 8006f96:	0039      	movs	r1, r7
 8006f98:	18f3      	adds	r3, r6, r3
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	9303      	str	r3, [sp, #12]
 8006f9e:	f7f9 f94b 	bl	8000238 <__aeabi_uidivmod>
 8006fa2:	9104      	str	r1, [sp, #16]
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4249      	negs	r1, r1
 8006faa:	0002      	movs	r2, r0
 8006fac:	468c      	mov	ip, r1
 8006fae:	0018      	movs	r0, r3
 8006fb0:	0021      	movs	r1, r4
 8006fb2:	3930      	subs	r1, #48	; 0x30
 8006fb4:	2909      	cmp	r1, #9
 8006fb6:	d81a      	bhi.n	8006fee <_strtol_l.isra.0+0xa2>
 8006fb8:	000c      	movs	r4, r1
 8006fba:	42a7      	cmp	r7, r4
 8006fbc:	dd23      	ble.n	8007006 <_strtol_l.isra.0+0xba>
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	d009      	beq.n	8006fd6 <_strtol_l.isra.0+0x8a>
 8006fc2:	4663      	mov	r3, ip
 8006fc4:	4282      	cmp	r2, r0
 8006fc6:	d306      	bcc.n	8006fd6 <_strtol_l.isra.0+0x8a>
 8006fc8:	d102      	bne.n	8006fd0 <_strtol_l.isra.0+0x84>
 8006fca:	9904      	ldr	r1, [sp, #16]
 8006fcc:	42a1      	cmp	r1, r4
 8006fce:	db02      	blt.n	8006fd6 <_strtol_l.isra.0+0x8a>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4378      	muls	r0, r7
 8006fd4:	1820      	adds	r0, r4, r0
 8006fd6:	782c      	ldrb	r4, [r5, #0]
 8006fd8:	3501      	adds	r5, #1
 8006fda:	e7e9      	b.n	8006fb0 <_strtol_l.isra.0+0x64>
 8006fdc:	002e      	movs	r6, r5
 8006fde:	e7bc      	b.n	8006f5a <_strtol_l.isra.0+0xe>
 8006fe0:	2c2b      	cmp	r4, #43	; 0x2b
 8006fe2:	d001      	beq.n	8006fe8 <_strtol_l.isra.0+0x9c>
 8006fe4:	001e      	movs	r6, r3
 8006fe6:	e7c7      	b.n	8006f78 <_strtol_l.isra.0+0x2c>
 8006fe8:	1cb5      	adds	r5, r6, #2
 8006fea:	7874      	ldrb	r4, [r6, #1]
 8006fec:	e7fa      	b.n	8006fe4 <_strtol_l.isra.0+0x98>
 8006fee:	0021      	movs	r1, r4
 8006ff0:	3941      	subs	r1, #65	; 0x41
 8006ff2:	2919      	cmp	r1, #25
 8006ff4:	d801      	bhi.n	8006ffa <_strtol_l.isra.0+0xae>
 8006ff6:	3c37      	subs	r4, #55	; 0x37
 8006ff8:	e7df      	b.n	8006fba <_strtol_l.isra.0+0x6e>
 8006ffa:	0021      	movs	r1, r4
 8006ffc:	3961      	subs	r1, #97	; 0x61
 8006ffe:	2919      	cmp	r1, #25
 8007000:	d801      	bhi.n	8007006 <_strtol_l.isra.0+0xba>
 8007002:	3c57      	subs	r4, #87	; 0x57
 8007004:	e7d9      	b.n	8006fba <_strtol_l.isra.0+0x6e>
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	d108      	bne.n	800701c <_strtol_l.isra.0+0xd0>
 800700a:	9a05      	ldr	r2, [sp, #20]
 800700c:	3323      	adds	r3, #35	; 0x23
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	9803      	ldr	r0, [sp, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <_strtol_l.isra.0+0xe0>
 8007018:	b007      	add	sp, #28
 800701a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701c:	2e00      	cmp	r6, #0
 800701e:	d000      	beq.n	8007022 <_strtol_l.isra.0+0xd6>
 8007020:	4240      	negs	r0, r0
 8007022:	9a02      	ldr	r2, [sp, #8]
 8007024:	2a00      	cmp	r2, #0
 8007026:	d0f7      	beq.n	8007018 <_strtol_l.isra.0+0xcc>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <_strtol_l.isra.0+0xe4>
 800702c:	1e6b      	subs	r3, r5, #1
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e7ef      	b.n	8007018 <_strtol_l.isra.0+0xcc>
 8007038:	2430      	movs	r4, #48	; 0x30
 800703a:	2f00      	cmp	r7, #0
 800703c:	d1aa      	bne.n	8006f94 <_strtol_l.isra.0+0x48>
 800703e:	2708      	movs	r7, #8
 8007040:	e7a8      	b.n	8006f94 <_strtol_l.isra.0+0x48>
 8007042:	2c30      	cmp	r4, #48	; 0x30
 8007044:	d09e      	beq.n	8006f84 <_strtol_l.isra.0+0x38>
 8007046:	270a      	movs	r7, #10
 8007048:	e7a4      	b.n	8006f94 <_strtol_l.isra.0+0x48>
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	7fffffff 	.word	0x7fffffff

08007050 <_strtol_r>:
 8007050:	b513      	push	{r0, r1, r4, lr}
 8007052:	4c05      	ldr	r4, [pc, #20]	; (8007068 <_strtol_r+0x18>)
 8007054:	6824      	ldr	r4, [r4, #0]
 8007056:	6a24      	ldr	r4, [r4, #32]
 8007058:	2c00      	cmp	r4, #0
 800705a:	d100      	bne.n	800705e <_strtol_r+0xe>
 800705c:	4c03      	ldr	r4, [pc, #12]	; (800706c <_strtol_r+0x1c>)
 800705e:	9400      	str	r4, [sp, #0]
 8007060:	f7ff ff74 	bl	8006f4c <_strtol_l.isra.0>
 8007064:	bd16      	pop	{r1, r2, r4, pc}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	2000000c 	.word	0x2000000c
 800706c:	20000070 	.word	0x20000070

08007070 <__swbuf_r>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	0005      	movs	r5, r0
 8007074:	000e      	movs	r6, r1
 8007076:	0014      	movs	r4, r2
 8007078:	2800      	cmp	r0, #0
 800707a:	d004      	beq.n	8007086 <__swbuf_r+0x16>
 800707c:	6983      	ldr	r3, [r0, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <__swbuf_r+0x16>
 8007082:	f001 f81f 	bl	80080c4 <__sinit>
 8007086:	4b22      	ldr	r3, [pc, #136]	; (8007110 <__swbuf_r+0xa0>)
 8007088:	429c      	cmp	r4, r3
 800708a:	d12d      	bne.n	80070e8 <__swbuf_r+0x78>
 800708c:	686c      	ldr	r4, [r5, #4]
 800708e:	69a3      	ldr	r3, [r4, #24]
 8007090:	60a3      	str	r3, [r4, #8]
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	071b      	lsls	r3, r3, #28
 8007096:	d531      	bpl.n	80070fc <__swbuf_r+0x8c>
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d02e      	beq.n	80070fc <__swbuf_r+0x8c>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	6922      	ldr	r2, [r4, #16]
 80070a2:	b2f7      	uxtb	r7, r6
 80070a4:	1a98      	subs	r0, r3, r2
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	b2f6      	uxtb	r6, r6
 80070aa:	4283      	cmp	r3, r0
 80070ac:	dc05      	bgt.n	80070ba <__swbuf_r+0x4a>
 80070ae:	0021      	movs	r1, r4
 80070b0:	0028      	movs	r0, r5
 80070b2:	f000 ff99 	bl	8007fe8 <_fflush_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d126      	bne.n	8007108 <__swbuf_r+0x98>
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	3001      	adds	r0, #1
 80070be:	3b01      	subs	r3, #1
 80070c0:	60a3      	str	r3, [r4, #8]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	6022      	str	r2, [r4, #0]
 80070c8:	701f      	strb	r7, [r3, #0]
 80070ca:	6963      	ldr	r3, [r4, #20]
 80070cc:	4283      	cmp	r3, r0
 80070ce:	d004      	beq.n	80070da <__swbuf_r+0x6a>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	07db      	lsls	r3, r3, #31
 80070d4:	d51a      	bpl.n	800710c <__swbuf_r+0x9c>
 80070d6:	2e0a      	cmp	r6, #10
 80070d8:	d118      	bne.n	800710c <__swbuf_r+0x9c>
 80070da:	0021      	movs	r1, r4
 80070dc:	0028      	movs	r0, r5
 80070de:	f000 ff83 	bl	8007fe8 <_fflush_r>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d012      	beq.n	800710c <__swbuf_r+0x9c>
 80070e6:	e00f      	b.n	8007108 <__swbuf_r+0x98>
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <__swbuf_r+0xa4>)
 80070ea:	429c      	cmp	r4, r3
 80070ec:	d101      	bne.n	80070f2 <__swbuf_r+0x82>
 80070ee:	68ac      	ldr	r4, [r5, #8]
 80070f0:	e7cd      	b.n	800708e <__swbuf_r+0x1e>
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <__swbuf_r+0xa8>)
 80070f4:	429c      	cmp	r4, r3
 80070f6:	d1ca      	bne.n	800708e <__swbuf_r+0x1e>
 80070f8:	68ec      	ldr	r4, [r5, #12]
 80070fa:	e7c8      	b.n	800708e <__swbuf_r+0x1e>
 80070fc:	0021      	movs	r1, r4
 80070fe:	0028      	movs	r0, r5
 8007100:	f000 f80c 	bl	800711c <__swsetup_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	d0ca      	beq.n	800709e <__swbuf_r+0x2e>
 8007108:	2601      	movs	r6, #1
 800710a:	4276      	negs	r6, r6
 800710c:	0030      	movs	r0, r6
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007110:	08009cb0 	.word	0x08009cb0
 8007114:	08009cd0 	.word	0x08009cd0
 8007118:	08009c90 	.word	0x08009c90

0800711c <__swsetup_r>:
 800711c:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <__swsetup_r+0xdc>)
 800711e:	b570      	push	{r4, r5, r6, lr}
 8007120:	681d      	ldr	r5, [r3, #0]
 8007122:	0006      	movs	r6, r0
 8007124:	000c      	movs	r4, r1
 8007126:	2d00      	cmp	r5, #0
 8007128:	d005      	beq.n	8007136 <__swsetup_r+0x1a>
 800712a:	69ab      	ldr	r3, [r5, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <__swsetup_r+0x1a>
 8007130:	0028      	movs	r0, r5
 8007132:	f000 ffc7 	bl	80080c4 <__sinit>
 8007136:	4b31      	ldr	r3, [pc, #196]	; (80071fc <__swsetup_r+0xe0>)
 8007138:	429c      	cmp	r4, r3
 800713a:	d10f      	bne.n	800715c <__swsetup_r+0x40>
 800713c:	686c      	ldr	r4, [r5, #4]
 800713e:	230c      	movs	r3, #12
 8007140:	5ee2      	ldrsh	r2, [r4, r3]
 8007142:	b293      	uxth	r3, r2
 8007144:	0719      	lsls	r1, r3, #28
 8007146:	d42d      	bmi.n	80071a4 <__swsetup_r+0x88>
 8007148:	06d9      	lsls	r1, r3, #27
 800714a:	d411      	bmi.n	8007170 <__swsetup_r+0x54>
 800714c:	2309      	movs	r3, #9
 800714e:	2001      	movs	r0, #1
 8007150:	6033      	str	r3, [r6, #0]
 8007152:	3337      	adds	r3, #55	; 0x37
 8007154:	4313      	orrs	r3, r2
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	4240      	negs	r0, r0
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	4b28      	ldr	r3, [pc, #160]	; (8007200 <__swsetup_r+0xe4>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d101      	bne.n	8007166 <__swsetup_r+0x4a>
 8007162:	68ac      	ldr	r4, [r5, #8]
 8007164:	e7eb      	b.n	800713e <__swsetup_r+0x22>
 8007166:	4b27      	ldr	r3, [pc, #156]	; (8007204 <__swsetup_r+0xe8>)
 8007168:	429c      	cmp	r4, r3
 800716a:	d1e8      	bne.n	800713e <__swsetup_r+0x22>
 800716c:	68ec      	ldr	r4, [r5, #12]
 800716e:	e7e6      	b.n	800713e <__swsetup_r+0x22>
 8007170:	075b      	lsls	r3, r3, #29
 8007172:	d513      	bpl.n	800719c <__swsetup_r+0x80>
 8007174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007176:	2900      	cmp	r1, #0
 8007178:	d008      	beq.n	800718c <__swsetup_r+0x70>
 800717a:	0023      	movs	r3, r4
 800717c:	3344      	adds	r3, #68	; 0x44
 800717e:	4299      	cmp	r1, r3
 8007180:	d002      	beq.n	8007188 <__swsetup_r+0x6c>
 8007182:	0030      	movs	r0, r6
 8007184:	f002 f814 	bl	80091b0 <_free_r>
 8007188:	2300      	movs	r3, #0
 800718a:	6363      	str	r3, [r4, #52]	; 0x34
 800718c:	2224      	movs	r2, #36	; 0x24
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	4393      	bics	r3, r2
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	2300      	movs	r3, #0
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	2308      	movs	r3, #8
 800719e:	89a2      	ldrh	r2, [r4, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <__swsetup_r+0xa6>
 80071aa:	21a0      	movs	r1, #160	; 0xa0
 80071ac:	2280      	movs	r2, #128	; 0x80
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	0089      	lsls	r1, r1, #2
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	400b      	ands	r3, r1
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <__swsetup_r+0xa6>
 80071ba:	0021      	movs	r1, r4
 80071bc:	0030      	movs	r0, r6
 80071be:	f001 fb7f 	bl	80088c0 <__smakebuf_r>
 80071c2:	2301      	movs	r3, #1
 80071c4:	89a2      	ldrh	r2, [r4, #12]
 80071c6:	4013      	ands	r3, r2
 80071c8:	d011      	beq.n	80071ee <__swsetup_r+0xd2>
 80071ca:	2300      	movs	r3, #0
 80071cc:	60a3      	str	r3, [r4, #8]
 80071ce:	6963      	ldr	r3, [r4, #20]
 80071d0:	425b      	negs	r3, r3
 80071d2:	61a3      	str	r3, [r4, #24]
 80071d4:	2000      	movs	r0, #0
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	4283      	cmp	r3, r0
 80071da:	d1be      	bne.n	800715a <__swsetup_r+0x3e>
 80071dc:	230c      	movs	r3, #12
 80071de:	5ee2      	ldrsh	r2, [r4, r3]
 80071e0:	0613      	lsls	r3, r2, #24
 80071e2:	d5ba      	bpl.n	800715a <__swsetup_r+0x3e>
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	4313      	orrs	r3, r2
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	3801      	subs	r0, #1
 80071ec:	e7b5      	b.n	800715a <__swsetup_r+0x3e>
 80071ee:	0792      	lsls	r2, r2, #30
 80071f0:	d400      	bmi.n	80071f4 <__swsetup_r+0xd8>
 80071f2:	6963      	ldr	r3, [r4, #20]
 80071f4:	60a3      	str	r3, [r4, #8]
 80071f6:	e7ed      	b.n	80071d4 <__swsetup_r+0xb8>
 80071f8:	2000000c 	.word	0x2000000c
 80071fc:	08009cb0 	.word	0x08009cb0
 8007200:	08009cd0 	.word	0x08009cd0
 8007204:	08009c90 	.word	0x08009c90

08007208 <quorem>:
 8007208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720a:	6903      	ldr	r3, [r0, #16]
 800720c:	690c      	ldr	r4, [r1, #16]
 800720e:	b089      	sub	sp, #36	; 0x24
 8007210:	0007      	movs	r7, r0
 8007212:	9105      	str	r1, [sp, #20]
 8007214:	2600      	movs	r6, #0
 8007216:	42a3      	cmp	r3, r4
 8007218:	db65      	blt.n	80072e6 <quorem+0xde>
 800721a:	000b      	movs	r3, r1
 800721c:	3c01      	subs	r4, #1
 800721e:	3314      	adds	r3, #20
 8007220:	00a5      	lsls	r5, r4, #2
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	195b      	adds	r3, r3, r5
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	0003      	movs	r3, r0
 800722a:	3314      	adds	r3, #20
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	195d      	adds	r5, r3, r5
 8007230:	9b04      	ldr	r3, [sp, #16]
 8007232:	6828      	ldr	r0, [r5, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	f7f8 ff77 	bl	800012c <__udivsi3>
 800723e:	9001      	str	r0, [sp, #4]
 8007240:	42b0      	cmp	r0, r6
 8007242:	d029      	beq.n	8007298 <quorem+0x90>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	9802      	ldr	r0, [sp, #8]
 8007248:	469c      	mov	ip, r3
 800724a:	9606      	str	r6, [sp, #24]
 800724c:	4662      	mov	r2, ip
 800724e:	ca08      	ldmia	r2!, {r3}
 8007250:	4694      	mov	ip, r2
 8007252:	9a01      	ldr	r2, [sp, #4]
 8007254:	b299      	uxth	r1, r3
 8007256:	4351      	muls	r1, r2
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	4353      	muls	r3, r2
 800725c:	1989      	adds	r1, r1, r6
 800725e:	0c0a      	lsrs	r2, r1, #16
 8007260:	189b      	adds	r3, r3, r2
 8007262:	9307      	str	r3, [sp, #28]
 8007264:	0c1e      	lsrs	r6, r3, #16
 8007266:	6803      	ldr	r3, [r0, #0]
 8007268:	b289      	uxth	r1, r1
 800726a:	b29a      	uxth	r2, r3
 800726c:	9b06      	ldr	r3, [sp, #24]
 800726e:	18d2      	adds	r2, r2, r3
 8007270:	6803      	ldr	r3, [r0, #0]
 8007272:	1a52      	subs	r2, r2, r1
 8007274:	0c19      	lsrs	r1, r3, #16
 8007276:	466b      	mov	r3, sp
 8007278:	8b9b      	ldrh	r3, [r3, #28]
 800727a:	1acb      	subs	r3, r1, r3
 800727c:	1411      	asrs	r1, r2, #16
 800727e:	185b      	adds	r3, r3, r1
 8007280:	1419      	asrs	r1, r3, #16
 8007282:	b292      	uxth	r2, r2
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	431a      	orrs	r2, r3
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	9106      	str	r1, [sp, #24]
 800728c:	c004      	stmia	r0!, {r2}
 800728e:	4563      	cmp	r3, ip
 8007290:	d2dc      	bcs.n	800724c <quorem+0x44>
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02d      	beq.n	80072f4 <quorem+0xec>
 8007298:	9905      	ldr	r1, [sp, #20]
 800729a:	0038      	movs	r0, r7
 800729c:	f001 fdd6 	bl	8008e4c <__mcmp>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	db1f      	blt.n	80072e4 <quorem+0xdc>
 80072a4:	2500      	movs	r5, #0
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	9802      	ldr	r0, [sp, #8]
 80072aa:	3301      	adds	r3, #1
 80072ac:	9903      	ldr	r1, [sp, #12]
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	6802      	ldr	r2, [r0, #0]
 80072b2:	c908      	ldmia	r1!, {r3}
 80072b4:	b292      	uxth	r2, r2
 80072b6:	1955      	adds	r5, r2, r5
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	1aaa      	subs	r2, r5, r2
 80072bc:	6805      	ldr	r5, [r0, #0]
 80072be:	0c1b      	lsrs	r3, r3, #16
 80072c0:	0c2d      	lsrs	r5, r5, #16
 80072c2:	1aeb      	subs	r3, r5, r3
 80072c4:	1415      	asrs	r5, r2, #16
 80072c6:	195b      	adds	r3, r3, r5
 80072c8:	141d      	asrs	r5, r3, #16
 80072ca:	b292      	uxth	r2, r2
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	4313      	orrs	r3, r2
 80072d0:	c008      	stmia	r0!, {r3}
 80072d2:	9b04      	ldr	r3, [sp, #16]
 80072d4:	428b      	cmp	r3, r1
 80072d6:	d2eb      	bcs.n	80072b0 <quorem+0xa8>
 80072d8:	9a02      	ldr	r2, [sp, #8]
 80072da:	00a3      	lsls	r3, r4, #2
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	d011      	beq.n	8007308 <quorem+0x100>
 80072e4:	9e01      	ldr	r6, [sp, #4]
 80072e6:	0030      	movs	r0, r6
 80072e8:	b009      	add	sp, #36	; 0x24
 80072ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <quorem+0xf4>
 80072f2:	3c01      	subs	r4, #1
 80072f4:	9b02      	ldr	r3, [sp, #8]
 80072f6:	3d04      	subs	r5, #4
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	d3f7      	bcc.n	80072ec <quorem+0xe4>
 80072fc:	613c      	str	r4, [r7, #16]
 80072fe:	e7cb      	b.n	8007298 <quorem+0x90>
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	2a00      	cmp	r2, #0
 8007304:	d104      	bne.n	8007310 <quorem+0x108>
 8007306:	3c01      	subs	r4, #1
 8007308:	9a02      	ldr	r2, [sp, #8]
 800730a:	3b04      	subs	r3, #4
 800730c:	429a      	cmp	r2, r3
 800730e:	d3f7      	bcc.n	8007300 <quorem+0xf8>
 8007310:	613c      	str	r4, [r7, #16]
 8007312:	e7e7      	b.n	80072e4 <quorem+0xdc>

08007314 <_dtoa_r>:
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007316:	0016      	movs	r6, r2
 8007318:	001f      	movs	r7, r3
 800731a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800731c:	b09b      	sub	sp, #108	; 0x6c
 800731e:	9002      	str	r0, [sp, #8]
 8007320:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8007322:	9606      	str	r6, [sp, #24]
 8007324:	9707      	str	r7, [sp, #28]
 8007326:	2c00      	cmp	r4, #0
 8007328:	d108      	bne.n	800733c <_dtoa_r+0x28>
 800732a:	2010      	movs	r0, #16
 800732c:	f001 fb0c 	bl	8008948 <malloc>
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	6258      	str	r0, [r3, #36]	; 0x24
 8007334:	6044      	str	r4, [r0, #4]
 8007336:	6084      	str	r4, [r0, #8]
 8007338:	6004      	str	r4, [r0, #0]
 800733a:	60c4      	str	r4, [r0, #12]
 800733c:	9b02      	ldr	r3, [sp, #8]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	6819      	ldr	r1, [r3, #0]
 8007342:	2900      	cmp	r1, #0
 8007344:	d00b      	beq.n	800735e <_dtoa_r+0x4a>
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	2301      	movs	r3, #1
 800734a:	4093      	lsls	r3, r2
 800734c:	604a      	str	r2, [r1, #4]
 800734e:	608b      	str	r3, [r1, #8]
 8007350:	9802      	ldr	r0, [sp, #8]
 8007352:	f001 fb61 	bl	8008a18 <_Bfree>
 8007356:	2200      	movs	r2, #0
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	2f00      	cmp	r7, #0
 8007360:	da20      	bge.n	80073a4 <_dtoa_r+0x90>
 8007362:	2301      	movs	r3, #1
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	007b      	lsls	r3, r7, #1
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	9c07      	ldr	r4, [sp, #28]
 800736e:	4bb2      	ldr	r3, [pc, #712]	; (8007638 <_dtoa_r+0x324>)
 8007370:	0022      	movs	r2, r4
 8007372:	9317      	str	r3, [sp, #92]	; 0x5c
 8007374:	401a      	ands	r2, r3
 8007376:	429a      	cmp	r2, r3
 8007378:	d117      	bne.n	80073aa <_dtoa_r+0x96>
 800737a:	4bb0      	ldr	r3, [pc, #704]	; (800763c <_dtoa_r+0x328>)
 800737c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <_dtoa_r+0x7a>
 8007386:	0324      	lsls	r4, r4, #12
 8007388:	d101      	bne.n	800738e <_dtoa_r+0x7a>
 800738a:	f000 fd87 	bl	8007e9c <_dtoa_r+0xb88>
 800738e:	4bac      	ldr	r3, [pc, #688]	; (8007640 <_dtoa_r+0x32c>)
 8007390:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	2a00      	cmp	r2, #0
 8007396:	d002      	beq.n	800739e <_dtoa_r+0x8a>
 8007398:	4baa      	ldr	r3, [pc, #680]	; (8007644 <_dtoa_r+0x330>)
 800739a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	9808      	ldr	r0, [sp, #32]
 80073a0:	b01b      	add	sp, #108	; 0x6c
 80073a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a4:	2300      	movs	r3, #0
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	e7e0      	b.n	800736c <_dtoa_r+0x58>
 80073aa:	9e06      	ldr	r6, [sp, #24]
 80073ac:	9f07      	ldr	r7, [sp, #28]
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	0030      	movs	r0, r6
 80073b4:	0039      	movs	r1, r7
 80073b6:	f7f9 f83f 	bl	8000438 <__aeabi_dcmpeq>
 80073ba:	1e05      	subs	r5, r0, #0
 80073bc:	d00b      	beq.n	80073d6 <_dtoa_r+0xc2>
 80073be:	2301      	movs	r3, #1
 80073c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	4ba0      	ldr	r3, [pc, #640]	; (8007648 <_dtoa_r+0x334>)
 80073c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073c8:	9308      	str	r3, [sp, #32]
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	d0e7      	beq.n	800739e <_dtoa_r+0x8a>
 80073ce:	4a9f      	ldr	r2, [pc, #636]	; (800764c <_dtoa_r+0x338>)
 80073d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80073d2:	600a      	str	r2, [r1, #0]
 80073d4:	e7e3      	b.n	800739e <_dtoa_r+0x8a>
 80073d6:	ab18      	add	r3, sp, #96	; 0x60
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	ab19      	add	r3, sp, #100	; 0x64
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	0032      	movs	r2, r6
 80073e0:	003b      	movs	r3, r7
 80073e2:	9802      	ldr	r0, [sp, #8]
 80073e4:	f001 fe22 	bl	800902c <__d2b>
 80073e8:	0063      	lsls	r3, r4, #1
 80073ea:	9003      	str	r0, [sp, #12]
 80073ec:	0d5b      	lsrs	r3, r3, #21
 80073ee:	d074      	beq.n	80074da <_dtoa_r+0x1c6>
 80073f0:	033a      	lsls	r2, r7, #12
 80073f2:	4c97      	ldr	r4, [pc, #604]	; (8007650 <_dtoa_r+0x33c>)
 80073f4:	0b12      	lsrs	r2, r2, #12
 80073f6:	4314      	orrs	r4, r2
 80073f8:	0021      	movs	r1, r4
 80073fa:	4a96      	ldr	r2, [pc, #600]	; (8007654 <_dtoa_r+0x340>)
 80073fc:	0030      	movs	r0, r6
 80073fe:	9516      	str	r5, [sp, #88]	; 0x58
 8007400:	189e      	adds	r6, r3, r2
 8007402:	2200      	movs	r2, #0
 8007404:	4b94      	ldr	r3, [pc, #592]	; (8007658 <_dtoa_r+0x344>)
 8007406:	f7fa f9fb 	bl	8001800 <__aeabi_dsub>
 800740a:	4a94      	ldr	r2, [pc, #592]	; (800765c <_dtoa_r+0x348>)
 800740c:	4b94      	ldr	r3, [pc, #592]	; (8007660 <_dtoa_r+0x34c>)
 800740e:	f7f9 ff85 	bl	800131c <__aeabi_dmul>
 8007412:	4a94      	ldr	r2, [pc, #592]	; (8007664 <_dtoa_r+0x350>)
 8007414:	4b94      	ldr	r3, [pc, #592]	; (8007668 <_dtoa_r+0x354>)
 8007416:	f7f9 f85b 	bl	80004d0 <__aeabi_dadd>
 800741a:	0004      	movs	r4, r0
 800741c:	0030      	movs	r0, r6
 800741e:	000d      	movs	r5, r1
 8007420:	f7fa fd88 	bl	8001f34 <__aeabi_i2d>
 8007424:	4a91      	ldr	r2, [pc, #580]	; (800766c <_dtoa_r+0x358>)
 8007426:	4b92      	ldr	r3, [pc, #584]	; (8007670 <_dtoa_r+0x35c>)
 8007428:	f7f9 ff78 	bl	800131c <__aeabi_dmul>
 800742c:	0002      	movs	r2, r0
 800742e:	000b      	movs	r3, r1
 8007430:	0020      	movs	r0, r4
 8007432:	0029      	movs	r1, r5
 8007434:	f7f9 f84c 	bl	80004d0 <__aeabi_dadd>
 8007438:	0004      	movs	r4, r0
 800743a:	000d      	movs	r5, r1
 800743c:	f7fa fd44 	bl	8001ec8 <__aeabi_d2iz>
 8007440:	2200      	movs	r2, #0
 8007442:	0007      	movs	r7, r0
 8007444:	2300      	movs	r3, #0
 8007446:	0020      	movs	r0, r4
 8007448:	0029      	movs	r1, r5
 800744a:	f7f8 fffb 	bl	8000444 <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	d009      	beq.n	8007466 <_dtoa_r+0x152>
 8007452:	0038      	movs	r0, r7
 8007454:	f7fa fd6e 	bl	8001f34 <__aeabi_i2d>
 8007458:	002b      	movs	r3, r5
 800745a:	0022      	movs	r2, r4
 800745c:	f7f8 ffec 	bl	8000438 <__aeabi_dcmpeq>
 8007460:	4243      	negs	r3, r0
 8007462:	4158      	adcs	r0, r3
 8007464:	1a3f      	subs	r7, r7, r0
 8007466:	2301      	movs	r3, #1
 8007468:	9314      	str	r3, [sp, #80]	; 0x50
 800746a:	2f16      	cmp	r7, #22
 800746c:	d80d      	bhi.n	800748a <_dtoa_r+0x176>
 800746e:	4981      	ldr	r1, [pc, #516]	; (8007674 <_dtoa_r+0x360>)
 8007470:	00fb      	lsls	r3, r7, #3
 8007472:	18c9      	adds	r1, r1, r3
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	6849      	ldr	r1, [r1, #4]
 8007478:	9a06      	ldr	r2, [sp, #24]
 800747a:	9b07      	ldr	r3, [sp, #28]
 800747c:	f7f8 fff6 	bl	800046c <__aeabi_dcmpgt>
 8007480:	2800      	cmp	r0, #0
 8007482:	d046      	beq.n	8007512 <_dtoa_r+0x1fe>
 8007484:	2300      	movs	r3, #0
 8007486:	3f01      	subs	r7, #1
 8007488:	9314      	str	r3, [sp, #80]	; 0x50
 800748a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800748c:	1b9e      	subs	r6, r3, r6
 800748e:	2300      	movs	r3, #0
 8007490:	930a      	str	r3, [sp, #40]	; 0x28
 8007492:	0033      	movs	r3, r6
 8007494:	3b01      	subs	r3, #1
 8007496:	930b      	str	r3, [sp, #44]	; 0x2c
 8007498:	d504      	bpl.n	80074a4 <_dtoa_r+0x190>
 800749a:	2301      	movs	r3, #1
 800749c:	1b9b      	subs	r3, r3, r6
 800749e:	930a      	str	r3, [sp, #40]	; 0x28
 80074a0:	2300      	movs	r3, #0
 80074a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	db36      	blt.n	8007516 <_dtoa_r+0x202>
 80074a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074aa:	9711      	str	r7, [sp, #68]	; 0x44
 80074ac:	19db      	adds	r3, r3, r7
 80074ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b0:	2300      	movs	r3, #0
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074b6:	2401      	movs	r4, #1
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d900      	bls.n	80074be <_dtoa_r+0x1aa>
 80074bc:	e084      	b.n	80075c8 <_dtoa_r+0x2b4>
 80074be:	2b05      	cmp	r3, #5
 80074c0:	dd02      	ble.n	80074c8 <_dtoa_r+0x1b4>
 80074c2:	2400      	movs	r4, #0
 80074c4:	3b04      	subs	r3, #4
 80074c6:	9320      	str	r3, [sp, #128]	; 0x80
 80074c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074ca:	1e98      	subs	r0, r3, #2
 80074cc:	2803      	cmp	r0, #3
 80074ce:	d900      	bls.n	80074d2 <_dtoa_r+0x1be>
 80074d0:	e084      	b.n	80075dc <_dtoa_r+0x2c8>
 80074d2:	f7f8 fe21 	bl	8000118 <__gnu_thumb1_case_uqi>
 80074d6:	7775      	.short	0x7775
 80074d8:	6a28      	.short	0x6a28
 80074da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80074dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074de:	189e      	adds	r6, r3, r2
 80074e0:	4b65      	ldr	r3, [pc, #404]	; (8007678 <_dtoa_r+0x364>)
 80074e2:	18f2      	adds	r2, r6, r3
 80074e4:	2a20      	cmp	r2, #32
 80074e6:	dd0f      	ble.n	8007508 <_dtoa_r+0x1f4>
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	409c      	lsls	r4, r3
 80074ee:	4b63      	ldr	r3, [pc, #396]	; (800767c <_dtoa_r+0x368>)
 80074f0:	9806      	ldr	r0, [sp, #24]
 80074f2:	18f3      	adds	r3, r6, r3
 80074f4:	40d8      	lsrs	r0, r3
 80074f6:	4320      	orrs	r0, r4
 80074f8:	f7fa fd56 	bl	8001fa8 <__aeabi_ui2d>
 80074fc:	2301      	movs	r3, #1
 80074fe:	4c60      	ldr	r4, [pc, #384]	; (8007680 <_dtoa_r+0x36c>)
 8007500:	3e01      	subs	r6, #1
 8007502:	1909      	adds	r1, r1, r4
 8007504:	9316      	str	r3, [sp, #88]	; 0x58
 8007506:	e77c      	b.n	8007402 <_dtoa_r+0xee>
 8007508:	2320      	movs	r3, #32
 800750a:	9806      	ldr	r0, [sp, #24]
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	4098      	lsls	r0, r3
 8007510:	e7f2      	b.n	80074f8 <_dtoa_r+0x1e4>
 8007512:	9014      	str	r0, [sp, #80]	; 0x50
 8007514:	e7b9      	b.n	800748a <_dtoa_r+0x176>
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	1bdb      	subs	r3, r3, r7
 800751a:	930a      	str	r3, [sp, #40]	; 0x28
 800751c:	427b      	negs	r3, r7
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	2300      	movs	r3, #0
 8007522:	9311      	str	r3, [sp, #68]	; 0x44
 8007524:	e7c6      	b.n	80074b4 <_dtoa_r+0x1a0>
 8007526:	2301      	movs	r3, #1
 8007528:	930d      	str	r3, [sp, #52]	; 0x34
 800752a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800752c:	2b00      	cmp	r3, #0
 800752e:	dd59      	ble.n	80075e4 <_dtoa_r+0x2d0>
 8007530:	930c      	str	r3, [sp, #48]	; 0x30
 8007532:	9309      	str	r3, [sp, #36]	; 0x24
 8007534:	9a02      	ldr	r2, [sp, #8]
 8007536:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007538:	2200      	movs	r2, #0
 800753a:	606a      	str	r2, [r5, #4]
 800753c:	3204      	adds	r2, #4
 800753e:	0010      	movs	r0, r2
 8007540:	3014      	adds	r0, #20
 8007542:	6869      	ldr	r1, [r5, #4]
 8007544:	4298      	cmp	r0, r3
 8007546:	d952      	bls.n	80075ee <_dtoa_r+0x2da>
 8007548:	9802      	ldr	r0, [sp, #8]
 800754a:	f001 fa2d 	bl	80089a8 <_Balloc>
 800754e:	9b02      	ldr	r3, [sp, #8]
 8007550:	6028      	str	r0, [r5, #0]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755a:	2b0e      	cmp	r3, #14
 800755c:	d900      	bls.n	8007560 <_dtoa_r+0x24c>
 800755e:	e10a      	b.n	8007776 <_dtoa_r+0x462>
 8007560:	2c00      	cmp	r4, #0
 8007562:	d100      	bne.n	8007566 <_dtoa_r+0x252>
 8007564:	e107      	b.n	8007776 <_dtoa_r+0x462>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	9c07      	ldr	r4, [sp, #28]
 800756a:	9312      	str	r3, [sp, #72]	; 0x48
 800756c:	9413      	str	r4, [sp, #76]	; 0x4c
 800756e:	2f00      	cmp	r7, #0
 8007570:	dc00      	bgt.n	8007574 <_dtoa_r+0x260>
 8007572:	e089      	b.n	8007688 <_dtoa_r+0x374>
 8007574:	210f      	movs	r1, #15
 8007576:	003a      	movs	r2, r7
 8007578:	4b3e      	ldr	r3, [pc, #248]	; (8007674 <_dtoa_r+0x360>)
 800757a:	400a      	ands	r2, r1
 800757c:	00d2      	lsls	r2, r2, #3
 800757e:	189b      	adds	r3, r3, r2
 8007580:	681d      	ldr	r5, [r3, #0]
 8007582:	685e      	ldr	r6, [r3, #4]
 8007584:	2302      	movs	r3, #2
 8007586:	113c      	asrs	r4, r7, #4
 8007588:	930e      	str	r3, [sp, #56]	; 0x38
 800758a:	06e3      	lsls	r3, r4, #27
 800758c:	d50b      	bpl.n	80075a6 <_dtoa_r+0x292>
 800758e:	4b3d      	ldr	r3, [pc, #244]	; (8007684 <_dtoa_r+0x370>)
 8007590:	400c      	ands	r4, r1
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007598:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800759a:	f7f9 fab5 	bl	8000b08 <__aeabi_ddiv>
 800759e:	2303      	movs	r3, #3
 80075a0:	9006      	str	r0, [sp, #24]
 80075a2:	9107      	str	r1, [sp, #28]
 80075a4:	930e      	str	r3, [sp, #56]	; 0x38
 80075a6:	2300      	movs	r3, #0
 80075a8:	e03a      	b.n	8007620 <_dtoa_r+0x30c>
 80075aa:	2301      	movs	r3, #1
 80075ac:	930d      	str	r3, [sp, #52]	; 0x34
 80075ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075b0:	18fb      	adds	r3, r7, r3
 80075b2:	930c      	str	r3, [sp, #48]	; 0x30
 80075b4:	3301      	adds	r3, #1
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dcbb      	bgt.n	8007534 <_dtoa_r+0x220>
 80075bc:	2301      	movs	r3, #1
 80075be:	e7b9      	b.n	8007534 <_dtoa_r+0x220>
 80075c0:	2300      	movs	r3, #0
 80075c2:	e7b1      	b.n	8007528 <_dtoa_r+0x214>
 80075c4:	2300      	movs	r3, #0
 80075c6:	e7f1      	b.n	80075ac <_dtoa_r+0x298>
 80075c8:	2300      	movs	r3, #0
 80075ca:	940d      	str	r4, [sp, #52]	; 0x34
 80075cc:	9320      	str	r3, [sp, #128]	; 0x80
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2200      	movs	r2, #0
 80075d2:	930c      	str	r3, [sp, #48]	; 0x30
 80075d4:	9309      	str	r3, [sp, #36]	; 0x24
 80075d6:	3313      	adds	r3, #19
 80075d8:	9221      	str	r2, [sp, #132]	; 0x84
 80075da:	e7ab      	b.n	8007534 <_dtoa_r+0x220>
 80075dc:	2301      	movs	r3, #1
 80075de:	930d      	str	r3, [sp, #52]	; 0x34
 80075e0:	3b02      	subs	r3, #2
 80075e2:	e7f5      	b.n	80075d0 <_dtoa_r+0x2bc>
 80075e4:	2301      	movs	r3, #1
 80075e6:	930c      	str	r3, [sp, #48]	; 0x30
 80075e8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ea:	001a      	movs	r2, r3
 80075ec:	e7f4      	b.n	80075d8 <_dtoa_r+0x2c4>
 80075ee:	3101      	adds	r1, #1
 80075f0:	6069      	str	r1, [r5, #4]
 80075f2:	0052      	lsls	r2, r2, #1
 80075f4:	e7a3      	b.n	800753e <_dtoa_r+0x22a>
 80075f6:	2301      	movs	r3, #1
 80075f8:	421c      	tst	r4, r3
 80075fa:	d00e      	beq.n	800761a <_dtoa_r+0x306>
 80075fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075fe:	4a21      	ldr	r2, [pc, #132]	; (8007684 <_dtoa_r+0x370>)
 8007600:	3301      	adds	r3, #1
 8007602:	930e      	str	r3, [sp, #56]	; 0x38
 8007604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007606:	0028      	movs	r0, r5
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	189b      	adds	r3, r3, r2
 800760c:	0031      	movs	r1, r6
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f7f9 fe83 	bl	800131c <__aeabi_dmul>
 8007616:	0005      	movs	r5, r0
 8007618:	000e      	movs	r6, r1
 800761a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800761c:	1064      	asrs	r4, r4, #1
 800761e:	3301      	adds	r3, #1
 8007620:	9310      	str	r3, [sp, #64]	; 0x40
 8007622:	2c00      	cmp	r4, #0
 8007624:	d1e7      	bne.n	80075f6 <_dtoa_r+0x2e2>
 8007626:	9806      	ldr	r0, [sp, #24]
 8007628:	9907      	ldr	r1, [sp, #28]
 800762a:	002a      	movs	r2, r5
 800762c:	0033      	movs	r3, r6
 800762e:	f7f9 fa6b 	bl	8000b08 <__aeabi_ddiv>
 8007632:	9006      	str	r0, [sp, #24]
 8007634:	9107      	str	r1, [sp, #28]
 8007636:	e042      	b.n	80076be <_dtoa_r+0x3aa>
 8007638:	7ff00000 	.word	0x7ff00000
 800763c:	0000270f 	.word	0x0000270f
 8007640:	08009c89 	.word	0x08009c89
 8007644:	08009c8c 	.word	0x08009c8c
 8007648:	08009c04 	.word	0x08009c04
 800764c:	08009c05 	.word	0x08009c05
 8007650:	3ff00000 	.word	0x3ff00000
 8007654:	fffffc01 	.word	0xfffffc01
 8007658:	3ff80000 	.word	0x3ff80000
 800765c:	636f4361 	.word	0x636f4361
 8007660:	3fd287a7 	.word	0x3fd287a7
 8007664:	8b60c8b3 	.word	0x8b60c8b3
 8007668:	3fc68a28 	.word	0x3fc68a28
 800766c:	509f79fb 	.word	0x509f79fb
 8007670:	3fd34413 	.word	0x3fd34413
 8007674:	08009d28 	.word	0x08009d28
 8007678:	00000432 	.word	0x00000432
 800767c:	00000412 	.word	0x00000412
 8007680:	fe100000 	.word	0xfe100000
 8007684:	08009d00 	.word	0x08009d00
 8007688:	2302      	movs	r3, #2
 800768a:	930e      	str	r3, [sp, #56]	; 0x38
 800768c:	2f00      	cmp	r7, #0
 800768e:	d016      	beq.n	80076be <_dtoa_r+0x3aa>
 8007690:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007692:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007694:	427c      	negs	r4, r7
 8007696:	330d      	adds	r3, #13
 8007698:	4023      	ands	r3, r4
 800769a:	4ace      	ldr	r2, [pc, #824]	; (80079d4 <_dtoa_r+0x6c0>)
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	18d3      	adds	r3, r2, r3
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f7f9 fe3a 	bl	800131c <__aeabi_dmul>
 80076a8:	2300      	movs	r3, #0
 80076aa:	2601      	movs	r6, #1
 80076ac:	001d      	movs	r5, r3
 80076ae:	9006      	str	r0, [sp, #24]
 80076b0:	9107      	str	r1, [sp, #28]
 80076b2:	1124      	asrs	r4, r4, #4
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	d000      	beq.n	80076ba <_dtoa_r+0x3a6>
 80076b8:	e08c      	b.n	80077d4 <_dtoa_r+0x4c0>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1b9      	bne.n	8007632 <_dtoa_r+0x31e>
 80076be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <_dtoa_r+0x3b2>
 80076c4:	e096      	b.n	80077f4 <_dtoa_r+0x4e0>
 80076c6:	9c06      	ldr	r4, [sp, #24]
 80076c8:	9d07      	ldr	r5, [sp, #28]
 80076ca:	2200      	movs	r2, #0
 80076cc:	4bc2      	ldr	r3, [pc, #776]	; (80079d8 <_dtoa_r+0x6c4>)
 80076ce:	0020      	movs	r0, r4
 80076d0:	0029      	movs	r1, r5
 80076d2:	f7f8 feb7 	bl	8000444 <__aeabi_dcmplt>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d100      	bne.n	80076dc <_dtoa_r+0x3c8>
 80076da:	e08b      	b.n	80077f4 <_dtoa_r+0x4e0>
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d100      	bne.n	80076e4 <_dtoa_r+0x3d0>
 80076e2:	e087      	b.n	80077f4 <_dtoa_r+0x4e0>
 80076e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dd41      	ble.n	800776e <_dtoa_r+0x45a>
 80076ea:	4bbc      	ldr	r3, [pc, #752]	; (80079dc <_dtoa_r+0x6c8>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	0020      	movs	r0, r4
 80076f0:	0029      	movs	r1, r5
 80076f2:	f7f9 fe13 	bl	800131c <__aeabi_dmul>
 80076f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076f8:	9006      	str	r0, [sp, #24]
 80076fa:	9107      	str	r1, [sp, #28]
 80076fc:	3301      	adds	r3, #1
 80076fe:	930e      	str	r3, [sp, #56]	; 0x38
 8007700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007702:	1e7e      	subs	r6, r7, #1
 8007704:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007706:	9310      	str	r3, [sp, #64]	; 0x40
 8007708:	f7fa fc14 	bl	8001f34 <__aeabi_i2d>
 800770c:	9a06      	ldr	r2, [sp, #24]
 800770e:	9b07      	ldr	r3, [sp, #28]
 8007710:	f7f9 fe04 	bl	800131c <__aeabi_dmul>
 8007714:	2200      	movs	r2, #0
 8007716:	4bb2      	ldr	r3, [pc, #712]	; (80079e0 <_dtoa_r+0x6cc>)
 8007718:	f7f8 feda 	bl	80004d0 <__aeabi_dadd>
 800771c:	4ab1      	ldr	r2, [pc, #708]	; (80079e4 <_dtoa_r+0x6d0>)
 800771e:	900e      	str	r0, [sp, #56]	; 0x38
 8007720:	910f      	str	r1, [sp, #60]	; 0x3c
 8007722:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007724:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007726:	4694      	mov	ip, r2
 8007728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800772a:	4463      	add	r3, ip
 800772c:	9315      	str	r3, [sp, #84]	; 0x54
 800772e:	001d      	movs	r5, r3
 8007730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d161      	bne.n	80077fa <_dtoa_r+0x4e6>
 8007736:	9806      	ldr	r0, [sp, #24]
 8007738:	9907      	ldr	r1, [sp, #28]
 800773a:	2200      	movs	r2, #0
 800773c:	4baa      	ldr	r3, [pc, #680]	; (80079e8 <_dtoa_r+0x6d4>)
 800773e:	f7fa f85f 	bl	8001800 <__aeabi_dsub>
 8007742:	0022      	movs	r2, r4
 8007744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007746:	9006      	str	r0, [sp, #24]
 8007748:	9107      	str	r1, [sp, #28]
 800774a:	f7f8 fe8f 	bl	800046c <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	d000      	beq.n	8007754 <_dtoa_r+0x440>
 8007752:	e2a8      	b.n	8007ca6 <_dtoa_r+0x992>
 8007754:	48a5      	ldr	r0, [pc, #660]	; (80079ec <_dtoa_r+0x6d8>)
 8007756:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007758:	4684      	mov	ip, r0
 800775a:	4461      	add	r1, ip
 800775c:	000b      	movs	r3, r1
 800775e:	9806      	ldr	r0, [sp, #24]
 8007760:	9907      	ldr	r1, [sp, #28]
 8007762:	0022      	movs	r2, r4
 8007764:	f7f8 fe6e 	bl	8000444 <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	d000      	beq.n	800776e <_dtoa_r+0x45a>
 800776c:	e295      	b.n	8007c9a <_dtoa_r+0x986>
 800776e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007770:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007772:	9306      	str	r3, [sp, #24]
 8007774:	9407      	str	r4, [sp, #28]
 8007776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007778:	2b00      	cmp	r3, #0
 800777a:	da00      	bge.n	800777e <_dtoa_r+0x46a>
 800777c:	e15c      	b.n	8007a38 <_dtoa_r+0x724>
 800777e:	2f0e      	cmp	r7, #14
 8007780:	dd00      	ble.n	8007784 <_dtoa_r+0x470>
 8007782:	e159      	b.n	8007a38 <_dtoa_r+0x724>
 8007784:	4b93      	ldr	r3, [pc, #588]	; (80079d4 <_dtoa_r+0x6c0>)
 8007786:	00fa      	lsls	r2, r7, #3
 8007788:	189b      	adds	r3, r3, r2
 800778a:	685c      	ldr	r4, [r3, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	9405      	str	r4, [sp, #20]
 8007792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007794:	2b00      	cmp	r3, #0
 8007796:	db00      	blt.n	800779a <_dtoa_r+0x486>
 8007798:	e0d8      	b.n	800794c <_dtoa_r+0x638>
 800779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd00      	ble.n	80077a2 <_dtoa_r+0x48e>
 80077a0:	e0d4      	b.n	800794c <_dtoa_r+0x638>
 80077a2:	d000      	beq.n	80077a6 <_dtoa_r+0x492>
 80077a4:	e27d      	b.n	8007ca2 <_dtoa_r+0x98e>
 80077a6:	9804      	ldr	r0, [sp, #16]
 80077a8:	9905      	ldr	r1, [sp, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	4b8e      	ldr	r3, [pc, #568]	; (80079e8 <_dtoa_r+0x6d4>)
 80077ae:	f7f9 fdb5 	bl	800131c <__aeabi_dmul>
 80077b2:	9a06      	ldr	r2, [sp, #24]
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	f7f8 fe63 	bl	8000480 <__aeabi_dcmpge>
 80077ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	001e      	movs	r6, r3
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d000      	beq.n	80077c6 <_dtoa_r+0x4b2>
 80077c4:	e24f      	b.n	8007c66 <_dtoa_r+0x952>
 80077c6:	9b08      	ldr	r3, [sp, #32]
 80077c8:	9a08      	ldr	r2, [sp, #32]
 80077ca:	1c5d      	adds	r5, r3, #1
 80077cc:	2331      	movs	r3, #49	; 0x31
 80077ce:	3701      	adds	r7, #1
 80077d0:	7013      	strb	r3, [r2, #0]
 80077d2:	e24b      	b.n	8007c6c <_dtoa_r+0x958>
 80077d4:	4234      	tst	r4, r6
 80077d6:	d00a      	beq.n	80077ee <_dtoa_r+0x4da>
 80077d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077da:	4a85      	ldr	r2, [pc, #532]	; (80079f0 <_dtoa_r+0x6dc>)
 80077dc:	3301      	adds	r3, #1
 80077de:	930e      	str	r3, [sp, #56]	; 0x38
 80077e0:	00eb      	lsls	r3, r5, #3
 80077e2:	189b      	adds	r3, r3, r2
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f7f9 fd98 	bl	800131c <__aeabi_dmul>
 80077ec:	0033      	movs	r3, r6
 80077ee:	1064      	asrs	r4, r4, #1
 80077f0:	3501      	adds	r5, #1
 80077f2:	e75f      	b.n	80076b4 <_dtoa_r+0x3a0>
 80077f4:	003e      	movs	r6, r7
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	e784      	b.n	8007704 <_dtoa_r+0x3f0>
 80077fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077fe:	1e5a      	subs	r2, r3, #1
 8007800:	4b74      	ldr	r3, [pc, #464]	; (80079d4 <_dtoa_r+0x6c0>)
 8007802:	00d2      	lsls	r2, r2, #3
 8007804:	189b      	adds	r3, r3, r2
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2900      	cmp	r1, #0
 800780c:	d049      	beq.n	80078a2 <_dtoa_r+0x58e>
 800780e:	2000      	movs	r0, #0
 8007810:	4978      	ldr	r1, [pc, #480]	; (80079f4 <_dtoa_r+0x6e0>)
 8007812:	f7f9 f979 	bl	8000b08 <__aeabi_ddiv>
 8007816:	002b      	movs	r3, r5
 8007818:	0022      	movs	r2, r4
 800781a:	f7f9 fff1 	bl	8001800 <__aeabi_dsub>
 800781e:	9b08      	ldr	r3, [sp, #32]
 8007820:	900e      	str	r0, [sp, #56]	; 0x38
 8007822:	910f      	str	r1, [sp, #60]	; 0x3c
 8007824:	9315      	str	r3, [sp, #84]	; 0x54
 8007826:	9806      	ldr	r0, [sp, #24]
 8007828:	9907      	ldr	r1, [sp, #28]
 800782a:	f7fa fb4d 	bl	8001ec8 <__aeabi_d2iz>
 800782e:	0004      	movs	r4, r0
 8007830:	f7fa fb80 	bl	8001f34 <__aeabi_i2d>
 8007834:	0002      	movs	r2, r0
 8007836:	000b      	movs	r3, r1
 8007838:	9806      	ldr	r0, [sp, #24]
 800783a:	9907      	ldr	r1, [sp, #28]
 800783c:	f7f9 ffe0 	bl	8001800 <__aeabi_dsub>
 8007840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007842:	3430      	adds	r4, #48	; 0x30
 8007844:	1c5d      	adds	r5, r3, #1
 8007846:	701c      	strb	r4, [r3, #0]
 8007848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800784a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800784c:	9006      	str	r0, [sp, #24]
 800784e:	9107      	str	r1, [sp, #28]
 8007850:	f7f8 fdf8 	bl	8000444 <__aeabi_dcmplt>
 8007854:	2800      	cmp	r0, #0
 8007856:	d16c      	bne.n	8007932 <_dtoa_r+0x61e>
 8007858:	9a06      	ldr	r2, [sp, #24]
 800785a:	9b07      	ldr	r3, [sp, #28]
 800785c:	2000      	movs	r0, #0
 800785e:	495e      	ldr	r1, [pc, #376]	; (80079d8 <_dtoa_r+0x6c4>)
 8007860:	f7f9 ffce 	bl	8001800 <__aeabi_dsub>
 8007864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007868:	f7f8 fdec 	bl	8000444 <__aeabi_dcmplt>
 800786c:	2800      	cmp	r0, #0
 800786e:	d000      	beq.n	8007872 <_dtoa_r+0x55e>
 8007870:	e0c3      	b.n	80079fa <_dtoa_r+0x6e6>
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007876:	1aeb      	subs	r3, r5, r3
 8007878:	429a      	cmp	r2, r3
 800787a:	dc00      	bgt.n	800787e <_dtoa_r+0x56a>
 800787c:	e777      	b.n	800776e <_dtoa_r+0x45a>
 800787e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007880:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007882:	2200      	movs	r2, #0
 8007884:	4b55      	ldr	r3, [pc, #340]	; (80079dc <_dtoa_r+0x6c8>)
 8007886:	f7f9 fd49 	bl	800131c <__aeabi_dmul>
 800788a:	2200      	movs	r2, #0
 800788c:	900e      	str	r0, [sp, #56]	; 0x38
 800788e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007890:	9806      	ldr	r0, [sp, #24]
 8007892:	9907      	ldr	r1, [sp, #28]
 8007894:	4b51      	ldr	r3, [pc, #324]	; (80079dc <_dtoa_r+0x6c8>)
 8007896:	f7f9 fd41 	bl	800131c <__aeabi_dmul>
 800789a:	9515      	str	r5, [sp, #84]	; 0x54
 800789c:	9006      	str	r0, [sp, #24]
 800789e:	9107      	str	r1, [sp, #28]
 80078a0:	e7c1      	b.n	8007826 <_dtoa_r+0x512>
 80078a2:	0020      	movs	r0, r4
 80078a4:	0029      	movs	r1, r5
 80078a6:	f7f9 fd39 	bl	800131c <__aeabi_dmul>
 80078aa:	9c08      	ldr	r4, [sp, #32]
 80078ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078ae:	0023      	movs	r3, r4
 80078b0:	4694      	mov	ip, r2
 80078b2:	900e      	str	r0, [sp, #56]	; 0x38
 80078b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80078b6:	4463      	add	r3, ip
 80078b8:	9315      	str	r3, [sp, #84]	; 0x54
 80078ba:	9806      	ldr	r0, [sp, #24]
 80078bc:	9907      	ldr	r1, [sp, #28]
 80078be:	f7fa fb03 	bl	8001ec8 <__aeabi_d2iz>
 80078c2:	0005      	movs	r5, r0
 80078c4:	f7fa fb36 	bl	8001f34 <__aeabi_i2d>
 80078c8:	000b      	movs	r3, r1
 80078ca:	0002      	movs	r2, r0
 80078cc:	9806      	ldr	r0, [sp, #24]
 80078ce:	9907      	ldr	r1, [sp, #28]
 80078d0:	f7f9 ff96 	bl	8001800 <__aeabi_dsub>
 80078d4:	3530      	adds	r5, #48	; 0x30
 80078d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078d8:	7025      	strb	r5, [r4, #0]
 80078da:	3401      	adds	r4, #1
 80078dc:	9006      	str	r0, [sp, #24]
 80078de:	9107      	str	r1, [sp, #28]
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	d12a      	bne.n	800793a <_dtoa_r+0x626>
 80078e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078e8:	9a08      	ldr	r2, [sp, #32]
 80078ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ec:	4694      	mov	ip, r2
 80078ee:	4463      	add	r3, ip
 80078f0:	2200      	movs	r2, #0
 80078f2:	001d      	movs	r5, r3
 80078f4:	4b3f      	ldr	r3, [pc, #252]	; (80079f4 <_dtoa_r+0x6e0>)
 80078f6:	f7f8 fdeb 	bl	80004d0 <__aeabi_dadd>
 80078fa:	0002      	movs	r2, r0
 80078fc:	000b      	movs	r3, r1
 80078fe:	9806      	ldr	r0, [sp, #24]
 8007900:	9907      	ldr	r1, [sp, #28]
 8007902:	f7f8 fdb3 	bl	800046c <__aeabi_dcmpgt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d000      	beq.n	800790c <_dtoa_r+0x5f8>
 800790a:	e076      	b.n	80079fa <_dtoa_r+0x6e6>
 800790c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800790e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007910:	2000      	movs	r0, #0
 8007912:	4938      	ldr	r1, [pc, #224]	; (80079f4 <_dtoa_r+0x6e0>)
 8007914:	f7f9 ff74 	bl	8001800 <__aeabi_dsub>
 8007918:	0002      	movs	r2, r0
 800791a:	000b      	movs	r3, r1
 800791c:	9806      	ldr	r0, [sp, #24]
 800791e:	9907      	ldr	r1, [sp, #28]
 8007920:	f7f8 fd90 	bl	8000444 <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	d100      	bne.n	800792a <_dtoa_r+0x616>
 8007928:	e721      	b.n	800776e <_dtoa_r+0x45a>
 800792a:	1e6b      	subs	r3, r5, #1
 800792c:	781a      	ldrb	r2, [r3, #0]
 800792e:	2a30      	cmp	r2, #48	; 0x30
 8007930:	d001      	beq.n	8007936 <_dtoa_r+0x622>
 8007932:	0037      	movs	r7, r6
 8007934:	e03f      	b.n	80079b6 <_dtoa_r+0x6a2>
 8007936:	001d      	movs	r5, r3
 8007938:	e7f7      	b.n	800792a <_dtoa_r+0x616>
 800793a:	9806      	ldr	r0, [sp, #24]
 800793c:	9907      	ldr	r1, [sp, #28]
 800793e:	2200      	movs	r2, #0
 8007940:	4b26      	ldr	r3, [pc, #152]	; (80079dc <_dtoa_r+0x6c8>)
 8007942:	f7f9 fceb 	bl	800131c <__aeabi_dmul>
 8007946:	9006      	str	r0, [sp, #24]
 8007948:	9107      	str	r1, [sp, #28]
 800794a:	e7b6      	b.n	80078ba <_dtoa_r+0x5a6>
 800794c:	9e08      	ldr	r6, [sp, #32]
 800794e:	9a04      	ldr	r2, [sp, #16]
 8007950:	9b05      	ldr	r3, [sp, #20]
 8007952:	9806      	ldr	r0, [sp, #24]
 8007954:	9907      	ldr	r1, [sp, #28]
 8007956:	f7f9 f8d7 	bl	8000b08 <__aeabi_ddiv>
 800795a:	f7fa fab5 	bl	8001ec8 <__aeabi_d2iz>
 800795e:	0004      	movs	r4, r0
 8007960:	f7fa fae8 	bl	8001f34 <__aeabi_i2d>
 8007964:	9a04      	ldr	r2, [sp, #16]
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	f7f9 fcd8 	bl	800131c <__aeabi_dmul>
 800796c:	0002      	movs	r2, r0
 800796e:	000b      	movs	r3, r1
 8007970:	9806      	ldr	r0, [sp, #24]
 8007972:	9907      	ldr	r1, [sp, #28]
 8007974:	f7f9 ff44 	bl	8001800 <__aeabi_dsub>
 8007978:	0023      	movs	r3, r4
 800797a:	3330      	adds	r3, #48	; 0x30
 800797c:	7033      	strb	r3, [r6, #0]
 800797e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	1c75      	adds	r5, r6, #1
 8007984:	1aeb      	subs	r3, r5, r3
 8007986:	429a      	cmp	r2, r3
 8007988:	d148      	bne.n	8007a1c <_dtoa_r+0x708>
 800798a:	0002      	movs	r2, r0
 800798c:	000b      	movs	r3, r1
 800798e:	f7f8 fd9f 	bl	80004d0 <__aeabi_dadd>
 8007992:	9a04      	ldr	r2, [sp, #16]
 8007994:	9b05      	ldr	r3, [sp, #20]
 8007996:	9006      	str	r0, [sp, #24]
 8007998:	9107      	str	r1, [sp, #28]
 800799a:	f7f8 fd67 	bl	800046c <__aeabi_dcmpgt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d12a      	bne.n	80079f8 <_dtoa_r+0x6e4>
 80079a2:	9a04      	ldr	r2, [sp, #16]
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	9806      	ldr	r0, [sp, #24]
 80079a8:	9907      	ldr	r1, [sp, #28]
 80079aa:	f7f8 fd45 	bl	8000438 <__aeabi_dcmpeq>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d001      	beq.n	80079b6 <_dtoa_r+0x6a2>
 80079b2:	07e3      	lsls	r3, r4, #31
 80079b4:	d420      	bmi.n	80079f8 <_dtoa_r+0x6e4>
 80079b6:	9903      	ldr	r1, [sp, #12]
 80079b8:	9802      	ldr	r0, [sp, #8]
 80079ba:	f001 f82d 	bl	8008a18 <_Bfree>
 80079be:	2300      	movs	r3, #0
 80079c0:	702b      	strb	r3, [r5, #0]
 80079c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079c4:	3701      	adds	r7, #1
 80079c6:	601f      	str	r7, [r3, #0]
 80079c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d100      	bne.n	80079d0 <_dtoa_r+0x6bc>
 80079ce:	e4e6      	b.n	800739e <_dtoa_r+0x8a>
 80079d0:	601d      	str	r5, [r3, #0]
 80079d2:	e4e4      	b.n	800739e <_dtoa_r+0x8a>
 80079d4:	08009d28 	.word	0x08009d28
 80079d8:	3ff00000 	.word	0x3ff00000
 80079dc:	40240000 	.word	0x40240000
 80079e0:	401c0000 	.word	0x401c0000
 80079e4:	fcc00000 	.word	0xfcc00000
 80079e8:	40140000 	.word	0x40140000
 80079ec:	7cc00000 	.word	0x7cc00000
 80079f0:	08009d00 	.word	0x08009d00
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	003e      	movs	r6, r7
 80079fa:	1e6b      	subs	r3, r5, #1
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	2a39      	cmp	r2, #57	; 0x39
 8007a00:	d106      	bne.n	8007a10 <_dtoa_r+0x6fc>
 8007a02:	9a08      	ldr	r2, [sp, #32]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d107      	bne.n	8007a18 <_dtoa_r+0x704>
 8007a08:	2330      	movs	r3, #48	; 0x30
 8007a0a:	7013      	strb	r3, [r2, #0]
 8007a0c:	0013      	movs	r3, r2
 8007a0e:	3601      	adds	r6, #1
 8007a10:	781a      	ldrb	r2, [r3, #0]
 8007a12:	3201      	adds	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e78c      	b.n	8007932 <_dtoa_r+0x61e>
 8007a18:	001d      	movs	r5, r3
 8007a1a:	e7ee      	b.n	80079fa <_dtoa_r+0x6e6>
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4ba4      	ldr	r3, [pc, #656]	; (8007cb0 <_dtoa_r+0x99c>)
 8007a20:	f7f9 fc7c 	bl	800131c <__aeabi_dmul>
 8007a24:	2200      	movs	r2, #0
 8007a26:	2300      	movs	r3, #0
 8007a28:	9006      	str	r0, [sp, #24]
 8007a2a:	9107      	str	r1, [sp, #28]
 8007a2c:	002e      	movs	r6, r5
 8007a2e:	f7f8 fd03 	bl	8000438 <__aeabi_dcmpeq>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d08b      	beq.n	800794e <_dtoa_r+0x63a>
 8007a36:	e7be      	b.n	80079b6 <_dtoa_r+0x6a2>
 8007a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	d100      	bne.n	8007a40 <_dtoa_r+0x72c>
 8007a3e:	e0da      	b.n	8007bf6 <_dtoa_r+0x8e2>
 8007a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a42:	2a01      	cmp	r2, #1
 8007a44:	dd00      	ble.n	8007a48 <_dtoa_r+0x734>
 8007a46:	e0bd      	b.n	8007bc4 <_dtoa_r+0x8b0>
 8007a48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	d100      	bne.n	8007a50 <_dtoa_r+0x73c>
 8007a4e:	e0b5      	b.n	8007bbc <_dtoa_r+0x8a8>
 8007a50:	4a98      	ldr	r2, [pc, #608]	; (8007cb4 <_dtoa_r+0x9a0>)
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	9d04      	ldr	r5, [sp, #16]
 8007a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	18d2      	adds	r2, r2, r3
 8007a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a62:	9802      	ldr	r0, [sp, #8]
 8007a64:	18d3      	adds	r3, r2, r3
 8007a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a68:	f001 f8b4 	bl	8008bd4 <__i2b>
 8007a6c:	0006      	movs	r6, r0
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	dd0e      	ble.n	8007a90 <_dtoa_r+0x77c>
 8007a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd0b      	ble.n	8007a90 <_dtoa_r+0x77c>
 8007a78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a7a:	0023      	movs	r3, r4
 8007a7c:	4294      	cmp	r4, r2
 8007a7e:	dd00      	ble.n	8007a82 <_dtoa_r+0x76e>
 8007a80:	0013      	movs	r3, r2
 8007a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a84:	1ae4      	subs	r4, r4, r3
 8007a86:	1ad2      	subs	r2, r2, r3
 8007a88:	920a      	str	r2, [sp, #40]	; 0x28
 8007a8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a90:	9b04      	ldr	r3, [sp, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01f      	beq.n	8007ad6 <_dtoa_r+0x7c2>
 8007a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d100      	bne.n	8007a9e <_dtoa_r+0x78a>
 8007a9c:	e0af      	b.n	8007bfe <_dtoa_r+0x8ea>
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	d011      	beq.n	8007ac6 <_dtoa_r+0x7b2>
 8007aa2:	0031      	movs	r1, r6
 8007aa4:	002a      	movs	r2, r5
 8007aa6:	9802      	ldr	r0, [sp, #8]
 8007aa8:	f001 f92c 	bl	8008d04 <__pow5mult>
 8007aac:	9a03      	ldr	r2, [sp, #12]
 8007aae:	0001      	movs	r1, r0
 8007ab0:	0006      	movs	r6, r0
 8007ab2:	9802      	ldr	r0, [sp, #8]
 8007ab4:	f001 f897 	bl	8008be6 <__multiply>
 8007ab8:	9903      	ldr	r1, [sp, #12]
 8007aba:	9010      	str	r0, [sp, #64]	; 0x40
 8007abc:	9802      	ldr	r0, [sp, #8]
 8007abe:	f000 ffab 	bl	8008a18 <_Bfree>
 8007ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac4:	9303      	str	r3, [sp, #12]
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	1b5a      	subs	r2, r3, r5
 8007aca:	d004      	beq.n	8007ad6 <_dtoa_r+0x7c2>
 8007acc:	9903      	ldr	r1, [sp, #12]
 8007ace:	9802      	ldr	r0, [sp, #8]
 8007ad0:	f001 f918 	bl	8008d04 <__pow5mult>
 8007ad4:	9003      	str	r0, [sp, #12]
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	9802      	ldr	r0, [sp, #8]
 8007ada:	f001 f87b 	bl	8008bd4 <__i2b>
 8007ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ae0:	9004      	str	r0, [sp, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d100      	bne.n	8007ae8 <_dtoa_r+0x7d4>
 8007ae6:	e1e3      	b.n	8007eb0 <_dtoa_r+0xb9c>
 8007ae8:	001a      	movs	r2, r3
 8007aea:	0001      	movs	r1, r0
 8007aec:	9802      	ldr	r0, [sp, #8]
 8007aee:	f001 f909 	bl	8008d04 <__pow5mult>
 8007af2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007af4:	9004      	str	r0, [sp, #16]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	dd00      	ble.n	8007afc <_dtoa_r+0x7e8>
 8007afa:	e082      	b.n	8007c02 <_dtoa_r+0x8ee>
 8007afc:	2500      	movs	r5, #0
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	d10e      	bne.n	8007b22 <_dtoa_r+0x80e>
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	031b      	lsls	r3, r3, #12
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	d10a      	bne.n	8007b22 <_dtoa_r+0x80e>
 8007b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b0e:	9a07      	ldr	r2, [sp, #28]
 8007b10:	4213      	tst	r3, r2
 8007b12:	d006      	beq.n	8007b22 <_dtoa_r+0x80e>
 8007b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b16:	3501      	adds	r5, #1
 8007b18:	3301      	adds	r3, #1
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1e:	3301      	adds	r3, #1
 8007b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b24:	2001      	movs	r0, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d16c      	bne.n	8007c04 <_dtoa_r+0x8f0>
 8007b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2c:	1818      	adds	r0, r3, r0
 8007b2e:	231f      	movs	r3, #31
 8007b30:	4018      	ands	r0, r3
 8007b32:	d07e      	beq.n	8007c32 <_dtoa_r+0x91e>
 8007b34:	3301      	adds	r3, #1
 8007b36:	1a1b      	subs	r3, r3, r0
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	dd70      	ble.n	8007c1e <_dtoa_r+0x90a>
 8007b3c:	231c      	movs	r3, #28
 8007b3e:	1a18      	subs	r0, r3, r0
 8007b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b42:	1824      	adds	r4, r4, r0
 8007b44:	181b      	adds	r3, r3, r0
 8007b46:	930a      	str	r3, [sp, #40]	; 0x28
 8007b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4a:	181b      	adds	r3, r3, r0
 8007b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dd05      	ble.n	8007b60 <_dtoa_r+0x84c>
 8007b54:	001a      	movs	r2, r3
 8007b56:	9903      	ldr	r1, [sp, #12]
 8007b58:	9802      	ldr	r0, [sp, #8]
 8007b5a:	f001 f925 	bl	8008da8 <__lshift>
 8007b5e:	9003      	str	r0, [sp, #12]
 8007b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd05      	ble.n	8007b72 <_dtoa_r+0x85e>
 8007b66:	001a      	movs	r2, r3
 8007b68:	9904      	ldr	r1, [sp, #16]
 8007b6a:	9802      	ldr	r0, [sp, #8]
 8007b6c:	f001 f91c 	bl	8008da8 <__lshift>
 8007b70:	9004      	str	r0, [sp, #16]
 8007b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05e      	beq.n	8007c36 <_dtoa_r+0x922>
 8007b78:	9904      	ldr	r1, [sp, #16]
 8007b7a:	9803      	ldr	r0, [sp, #12]
 8007b7c:	f001 f966 	bl	8008e4c <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	da58      	bge.n	8007c36 <_dtoa_r+0x922>
 8007b84:	2300      	movs	r3, #0
 8007b86:	220a      	movs	r2, #10
 8007b88:	9903      	ldr	r1, [sp, #12]
 8007b8a:	9802      	ldr	r0, [sp, #8]
 8007b8c:	f000 ff5d 	bl	8008a4a <__multadd>
 8007b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b92:	3f01      	subs	r7, #1
 8007b94:	9003      	str	r0, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d100      	bne.n	8007b9c <_dtoa_r+0x888>
 8007b9a:	e190      	b.n	8007ebe <_dtoa_r+0xbaa>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	0031      	movs	r1, r6
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	9802      	ldr	r0, [sp, #8]
 8007ba4:	f000 ff51 	bl	8008a4a <__multadd>
 8007ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007baa:	0006      	movs	r6, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd00      	ble.n	8007bb2 <_dtoa_r+0x89e>
 8007bb0:	e088      	b.n	8007cc4 <_dtoa_r+0x9b0>
 8007bb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	dc00      	bgt.n	8007bba <_dtoa_r+0x8a6>
 8007bb8:	e084      	b.n	8007cc4 <_dtoa_r+0x9b0>
 8007bba:	e044      	b.n	8007c46 <_dtoa_r+0x932>
 8007bbc:	2336      	movs	r3, #54	; 0x36
 8007bbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	e747      	b.n	8007a54 <_dtoa_r+0x740>
 8007bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc6:	1e5d      	subs	r5, r3, #1
 8007bc8:	9b04      	ldr	r3, [sp, #16]
 8007bca:	42ab      	cmp	r3, r5
 8007bcc:	db08      	blt.n	8007be0 <_dtoa_r+0x8cc>
 8007bce:	1b5d      	subs	r5, r3, r5
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da0c      	bge.n	8007bf0 <_dtoa_r+0x8dc>
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bda:	1a9c      	subs	r4, r3, r2
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e73b      	b.n	8007a58 <_dtoa_r+0x744>
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	9504      	str	r5, [sp, #16]
 8007be4:	1aea      	subs	r2, r5, r3
 8007be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be8:	2500      	movs	r5, #0
 8007bea:	189b      	adds	r3, r3, r2
 8007bec:	9311      	str	r3, [sp, #68]	; 0x44
 8007bee:	e7ef      	b.n	8007bd0 <_dtoa_r+0x8bc>
 8007bf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf4:	e730      	b.n	8007a58 <_dtoa_r+0x744>
 8007bf6:	9d04      	ldr	r5, [sp, #16]
 8007bf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bfa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007bfc:	e737      	b.n	8007a6e <_dtoa_r+0x75a>
 8007bfe:	9a04      	ldr	r2, [sp, #16]
 8007c00:	e764      	b.n	8007acc <_dtoa_r+0x7b8>
 8007c02:	2500      	movs	r5, #0
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	9a04      	ldr	r2, [sp, #16]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	18d3      	adds	r3, r2, r3
 8007c12:	6858      	ldr	r0, [r3, #4]
 8007c14:	f000 ff95 	bl	8008b42 <__hi0bits>
 8007c18:	2320      	movs	r3, #32
 8007c1a:	1a18      	subs	r0, r3, r0
 8007c1c:	e785      	b.n	8007b2a <_dtoa_r+0x816>
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d095      	beq.n	8007b4e <_dtoa_r+0x83a>
 8007c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c24:	331c      	adds	r3, #28
 8007c26:	18d2      	adds	r2, r2, r3
 8007c28:	920a      	str	r2, [sp, #40]	; 0x28
 8007c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c2c:	18e4      	adds	r4, r4, r3
 8007c2e:	18d3      	adds	r3, r2, r3
 8007c30:	e78c      	b.n	8007b4c <_dtoa_r+0x838>
 8007c32:	0003      	movs	r3, r0
 8007c34:	e7f5      	b.n	8007c22 <_dtoa_r+0x90e>
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dc3d      	bgt.n	8007cb8 <_dtoa_r+0x9a4>
 8007c3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	dd3a      	ble.n	8007cb8 <_dtoa_r+0x9a4>
 8007c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c44:	930c      	str	r3, [sp, #48]	; 0x30
 8007c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10c      	bne.n	8007c66 <_dtoa_r+0x952>
 8007c4c:	9904      	ldr	r1, [sp, #16]
 8007c4e:	2205      	movs	r2, #5
 8007c50:	9802      	ldr	r0, [sp, #8]
 8007c52:	f000 fefa 	bl	8008a4a <__multadd>
 8007c56:	9004      	str	r0, [sp, #16]
 8007c58:	0001      	movs	r1, r0
 8007c5a:	9803      	ldr	r0, [sp, #12]
 8007c5c:	f001 f8f6 	bl	8008e4c <__mcmp>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	dd00      	ble.n	8007c66 <_dtoa_r+0x952>
 8007c64:	e5af      	b.n	80077c6 <_dtoa_r+0x4b2>
 8007c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c68:	9d08      	ldr	r5, [sp, #32]
 8007c6a:	43df      	mvns	r7, r3
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c70:	9904      	ldr	r1, [sp, #16]
 8007c72:	9802      	ldr	r0, [sp, #8]
 8007c74:	f000 fed0 	bl	8008a18 <_Bfree>
 8007c78:	2e00      	cmp	r6, #0
 8007c7a:	d100      	bne.n	8007c7e <_dtoa_r+0x96a>
 8007c7c:	e69b      	b.n	80079b6 <_dtoa_r+0x6a2>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <_dtoa_r+0x97c>
 8007c84:	42b3      	cmp	r3, r6
 8007c86:	d003      	beq.n	8007c90 <_dtoa_r+0x97c>
 8007c88:	0019      	movs	r1, r3
 8007c8a:	9802      	ldr	r0, [sp, #8]
 8007c8c:	f000 fec4 	bl	8008a18 <_Bfree>
 8007c90:	0031      	movs	r1, r6
 8007c92:	9802      	ldr	r0, [sp, #8]
 8007c94:	f000 fec0 	bl	8008a18 <_Bfree>
 8007c98:	e68d      	b.n	80079b6 <_dtoa_r+0x6a2>
 8007c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	001e      	movs	r6, r3
 8007ca0:	e7e1      	b.n	8007c66 <_dtoa_r+0x952>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e7fa      	b.n	8007c9c <_dtoa_r+0x988>
 8007ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ca8:	0037      	movs	r7, r6
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	001e      	movs	r6, r3
 8007cae:	e58a      	b.n	80077c6 <_dtoa_r+0x4b2>
 8007cb0:	40240000 	.word	0x40240000
 8007cb4:	00000433 	.word	0x00000433
 8007cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d100      	bne.n	8007cc0 <_dtoa_r+0x9ac>
 8007cbe:	e0b2      	b.n	8007e26 <_dtoa_r+0xb12>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	dd05      	ble.n	8007cd4 <_dtoa_r+0x9c0>
 8007cc8:	0031      	movs	r1, r6
 8007cca:	0022      	movs	r2, r4
 8007ccc:	9802      	ldr	r0, [sp, #8]
 8007cce:	f001 f86b 	bl	8008da8 <__lshift>
 8007cd2:	0006      	movs	r6, r0
 8007cd4:	0030      	movs	r0, r6
 8007cd6:	2d00      	cmp	r5, #0
 8007cd8:	d011      	beq.n	8007cfe <_dtoa_r+0x9ea>
 8007cda:	6871      	ldr	r1, [r6, #4]
 8007cdc:	9802      	ldr	r0, [sp, #8]
 8007cde:	f000 fe63 	bl	80089a8 <_Balloc>
 8007ce2:	0031      	movs	r1, r6
 8007ce4:	0004      	movs	r4, r0
 8007ce6:	6933      	ldr	r3, [r6, #16]
 8007ce8:	310c      	adds	r1, #12
 8007cea:	1c9a      	adds	r2, r3, #2
 8007cec:	0092      	lsls	r2, r2, #2
 8007cee:	300c      	adds	r0, #12
 8007cf0:	f000 fe51 	bl	8008996 <memcpy>
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	0021      	movs	r1, r4
 8007cf8:	9802      	ldr	r0, [sp, #8]
 8007cfa:	f001 f855 	bl	8008da8 <__lshift>
 8007cfe:	9609      	str	r6, [sp, #36]	; 0x24
 8007d00:	0006      	movs	r6, r0
 8007d02:	9b08      	ldr	r3, [sp, #32]
 8007d04:	930a      	str	r3, [sp, #40]	; 0x28
 8007d06:	9904      	ldr	r1, [sp, #16]
 8007d08:	9803      	ldr	r0, [sp, #12]
 8007d0a:	f7ff fa7d 	bl	8007208 <quorem>
 8007d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d10:	900d      	str	r0, [sp, #52]	; 0x34
 8007d12:	0004      	movs	r4, r0
 8007d14:	9803      	ldr	r0, [sp, #12]
 8007d16:	f001 f899 	bl	8008e4c <__mcmp>
 8007d1a:	0032      	movs	r2, r6
 8007d1c:	9010      	str	r0, [sp, #64]	; 0x40
 8007d1e:	9904      	ldr	r1, [sp, #16]
 8007d20:	9802      	ldr	r0, [sp, #8]
 8007d22:	f001 f8ad 	bl	8008e80 <__mdiff>
 8007d26:	2301      	movs	r3, #1
 8007d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d2a:	68c3      	ldr	r3, [r0, #12]
 8007d2c:	3430      	adds	r4, #48	; 0x30
 8007d2e:	0005      	movs	r5, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <_dtoa_r+0xa2a>
 8007d34:	0001      	movs	r1, r0
 8007d36:	9803      	ldr	r0, [sp, #12]
 8007d38:	f001 f888 	bl	8008e4c <__mcmp>
 8007d3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d3e:	0029      	movs	r1, r5
 8007d40:	9802      	ldr	r0, [sp, #8]
 8007d42:	f000 fe69 	bl	8008a18 <_Bfree>
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d10e      	bne.n	8007d6c <_dtoa_r+0xa58>
 8007d4e:	9a06      	ldr	r2, [sp, #24]
 8007d50:	3301      	adds	r3, #1
 8007d52:	4213      	tst	r3, r2
 8007d54:	d10a      	bne.n	8007d6c <_dtoa_r+0xa58>
 8007d56:	2c39      	cmp	r4, #57	; 0x39
 8007d58:	d026      	beq.n	8007da8 <_dtoa_r+0xa94>
 8007d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dd01      	ble.n	8007d64 <_dtoa_r+0xa50>
 8007d60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007d62:	3431      	adds	r4, #49	; 0x31
 8007d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d66:	1c5d      	adds	r5, r3, #1
 8007d68:	701c      	strb	r4, [r3, #0]
 8007d6a:	e781      	b.n	8007c70 <_dtoa_r+0x95c>
 8007d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	db07      	blt.n	8007d82 <_dtoa_r+0xa6e>
 8007d72:	001d      	movs	r5, r3
 8007d74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d76:	431d      	orrs	r5, r3
 8007d78:	d122      	bne.n	8007dc0 <_dtoa_r+0xaac>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	9a06      	ldr	r2, [sp, #24]
 8007d7e:	4213      	tst	r3, r2
 8007d80:	d11e      	bne.n	8007dc0 <_dtoa_r+0xaac>
 8007d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dded      	ble.n	8007d64 <_dtoa_r+0xa50>
 8007d88:	9903      	ldr	r1, [sp, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	9802      	ldr	r0, [sp, #8]
 8007d8e:	f001 f80b 	bl	8008da8 <__lshift>
 8007d92:	9904      	ldr	r1, [sp, #16]
 8007d94:	9003      	str	r0, [sp, #12]
 8007d96:	f001 f859 	bl	8008e4c <__mcmp>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	dc02      	bgt.n	8007da4 <_dtoa_r+0xa90>
 8007d9e:	d1e1      	bne.n	8007d64 <_dtoa_r+0xa50>
 8007da0:	07e3      	lsls	r3, r4, #31
 8007da2:	d5df      	bpl.n	8007d64 <_dtoa_r+0xa50>
 8007da4:	2c39      	cmp	r4, #57	; 0x39
 8007da6:	d1db      	bne.n	8007d60 <_dtoa_r+0xa4c>
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dac:	1c5d      	adds	r5, r3, #1
 8007dae:	2339      	movs	r3, #57	; 0x39
 8007db0:	7013      	strb	r3, [r2, #0]
 8007db2:	1e6b      	subs	r3, r5, #1
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	2a39      	cmp	r2, #57	; 0x39
 8007db8:	d067      	beq.n	8007e8a <_dtoa_r+0xb76>
 8007dba:	3201      	adds	r2, #1
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e757      	b.n	8007c70 <_dtoa_r+0x95c>
 8007dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc2:	1c5d      	adds	r5, r3, #1
 8007dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dd04      	ble.n	8007dd4 <_dtoa_r+0xac0>
 8007dca:	2c39      	cmp	r4, #57	; 0x39
 8007dcc:	d0ec      	beq.n	8007da8 <_dtoa_r+0xa94>
 8007dce:	3401      	adds	r4, #1
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	e7c9      	b.n	8007d68 <_dtoa_r+0xa54>
 8007dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd8:	701c      	strb	r4, [r3, #0]
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	1aeb      	subs	r3, r5, r3
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d03e      	beq.n	8007e60 <_dtoa_r+0xb4c>
 8007de2:	2300      	movs	r3, #0
 8007de4:	220a      	movs	r2, #10
 8007de6:	9903      	ldr	r1, [sp, #12]
 8007de8:	9802      	ldr	r0, [sp, #8]
 8007dea:	f000 fe2e 	bl	8008a4a <__multadd>
 8007dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df0:	9003      	str	r0, [sp, #12]
 8007df2:	42b3      	cmp	r3, r6
 8007df4:	d109      	bne.n	8007e0a <_dtoa_r+0xaf6>
 8007df6:	2300      	movs	r3, #0
 8007df8:	220a      	movs	r2, #10
 8007dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dfc:	9802      	ldr	r0, [sp, #8]
 8007dfe:	f000 fe24 	bl	8008a4a <__multadd>
 8007e02:	9009      	str	r0, [sp, #36]	; 0x24
 8007e04:	0006      	movs	r6, r0
 8007e06:	950a      	str	r5, [sp, #40]	; 0x28
 8007e08:	e77d      	b.n	8007d06 <_dtoa_r+0x9f2>
 8007e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	220a      	movs	r2, #10
 8007e10:	9802      	ldr	r0, [sp, #8]
 8007e12:	f000 fe1a 	bl	8008a4a <__multadd>
 8007e16:	2300      	movs	r3, #0
 8007e18:	9009      	str	r0, [sp, #36]	; 0x24
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	0031      	movs	r1, r6
 8007e1e:	9802      	ldr	r0, [sp, #8]
 8007e20:	f000 fe13 	bl	8008a4a <__multadd>
 8007e24:	e7ee      	b.n	8007e04 <_dtoa_r+0xaf0>
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	930c      	str	r3, [sp, #48]	; 0x30
 8007e2a:	9b08      	ldr	r3, [sp, #32]
 8007e2c:	9306      	str	r3, [sp, #24]
 8007e2e:	9904      	ldr	r1, [sp, #16]
 8007e30:	9803      	ldr	r0, [sp, #12]
 8007e32:	f7ff f9e9 	bl	8007208 <quorem>
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	3030      	adds	r0, #48	; 0x30
 8007e3a:	1c5d      	adds	r5, r3, #1
 8007e3c:	7018      	strb	r0, [r3, #0]
 8007e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e40:	9b08      	ldr	r3, [sp, #32]
 8007e42:	0004      	movs	r4, r0
 8007e44:	1aeb      	subs	r3, r5, r3
 8007e46:	429a      	cmp	r2, r3
 8007e48:	dd08      	ble.n	8007e5c <_dtoa_r+0xb48>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	220a      	movs	r2, #10
 8007e4e:	9903      	ldr	r1, [sp, #12]
 8007e50:	9802      	ldr	r0, [sp, #8]
 8007e52:	f000 fdfa 	bl	8008a4a <__multadd>
 8007e56:	9506      	str	r5, [sp, #24]
 8007e58:	9003      	str	r0, [sp, #12]
 8007e5a:	e7e8      	b.n	8007e2e <_dtoa_r+0xb1a>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	9903      	ldr	r1, [sp, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	9802      	ldr	r0, [sp, #8]
 8007e66:	f000 ff9f 	bl	8008da8 <__lshift>
 8007e6a:	9904      	ldr	r1, [sp, #16]
 8007e6c:	9003      	str	r0, [sp, #12]
 8007e6e:	f000 ffed 	bl	8008e4c <__mcmp>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	dc9d      	bgt.n	8007db2 <_dtoa_r+0xa9e>
 8007e76:	d101      	bne.n	8007e7c <_dtoa_r+0xb68>
 8007e78:	07e3      	lsls	r3, r4, #31
 8007e7a:	d49a      	bmi.n	8007db2 <_dtoa_r+0xa9e>
 8007e7c:	1e6b      	subs	r3, r5, #1
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	2a30      	cmp	r2, #48	; 0x30
 8007e82:	d000      	beq.n	8007e86 <_dtoa_r+0xb72>
 8007e84:	e6f4      	b.n	8007c70 <_dtoa_r+0x95c>
 8007e86:	001d      	movs	r5, r3
 8007e88:	e7f8      	b.n	8007e7c <_dtoa_r+0xb68>
 8007e8a:	9a08      	ldr	r2, [sp, #32]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d103      	bne.n	8007e98 <_dtoa_r+0xb84>
 8007e90:	2331      	movs	r3, #49	; 0x31
 8007e92:	3701      	adds	r7, #1
 8007e94:	7013      	strb	r3, [r2, #0]
 8007e96:	e6eb      	b.n	8007c70 <_dtoa_r+0x95c>
 8007e98:	001d      	movs	r5, r3
 8007e9a:	e78a      	b.n	8007db2 <_dtoa_r+0xa9e>
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <_dtoa_r+0xbb8>)
 8007e9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ea0:	9308      	str	r3, [sp, #32]
 8007ea2:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <_dtoa_r+0xbbc>)
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d001      	beq.n	8007eac <_dtoa_r+0xb98>
 8007ea8:	f7ff fa77 	bl	800739a <_dtoa_r+0x86>
 8007eac:	f7ff fa77 	bl	800739e <_dtoa_r+0x8a>
 8007eb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	dc00      	bgt.n	8007eb8 <_dtoa_r+0xba4>
 8007eb6:	e621      	b.n	8007afc <_dtoa_r+0x7e8>
 8007eb8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e635      	b.n	8007b2a <_dtoa_r+0x816>
 8007ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dcb2      	bgt.n	8007e2a <_dtoa_r+0xb16>
 8007ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	ddaf      	ble.n	8007e2a <_dtoa_r+0xb16>
 8007eca:	e6bc      	b.n	8007c46 <_dtoa_r+0x932>
 8007ecc:	08009c80 	.word	0x08009c80
 8007ed0:	08009c88 	.word	0x08009c88

08007ed4 <__sflush_r>:
 8007ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed6:	898a      	ldrh	r2, [r1, #12]
 8007ed8:	0005      	movs	r5, r0
 8007eda:	000c      	movs	r4, r1
 8007edc:	0713      	lsls	r3, r2, #28
 8007ede:	d460      	bmi.n	8007fa2 <__sflush_r+0xce>
 8007ee0:	684b      	ldr	r3, [r1, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dc04      	bgt.n	8007ef0 <__sflush_r+0x1c>
 8007ee6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc01      	bgt.n	8007ef0 <__sflush_r+0x1c>
 8007eec:	2000      	movs	r0, #0
 8007eee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ef0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	d0fa      	beq.n	8007eec <__sflush_r+0x18>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	682e      	ldr	r6, [r5, #0]
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	2380      	movs	r3, #128	; 0x80
 8007efe:	015b      	lsls	r3, r3, #5
 8007f00:	6a21      	ldr	r1, [r4, #32]
 8007f02:	401a      	ands	r2, r3
 8007f04:	d034      	beq.n	8007f70 <__sflush_r+0x9c>
 8007f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	075b      	lsls	r3, r3, #29
 8007f0c:	d506      	bpl.n	8007f1c <__sflush_r+0x48>
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	1ac0      	subs	r0, r0, r3
 8007f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <__sflush_r+0x48>
 8007f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1a:	1ac0      	subs	r0, r0, r3
 8007f1c:	0002      	movs	r2, r0
 8007f1e:	6a21      	ldr	r1, [r4, #32]
 8007f20:	2300      	movs	r3, #0
 8007f22:	0028      	movs	r0, r5
 8007f24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007f26:	47b8      	blx	r7
 8007f28:	89a1      	ldrh	r1, [r4, #12]
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	d106      	bne.n	8007f3c <__sflush_r+0x68>
 8007f2e:	682b      	ldr	r3, [r5, #0]
 8007f30:	2b1d      	cmp	r3, #29
 8007f32:	d830      	bhi.n	8007f96 <__sflush_r+0xc2>
 8007f34:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <__sflush_r+0x110>)
 8007f36:	40da      	lsrs	r2, r3
 8007f38:	07d3      	lsls	r3, r2, #31
 8007f3a:	d52c      	bpl.n	8007f96 <__sflush_r+0xc2>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	04cb      	lsls	r3, r1, #19
 8007f46:	d505      	bpl.n	8007f54 <__sflush_r+0x80>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <__sflush_r+0x7e>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d100      	bne.n	8007f54 <__sflush_r+0x80>
 8007f52:	6560      	str	r0, [r4, #84]	; 0x54
 8007f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f56:	602e      	str	r6, [r5, #0]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d0c7      	beq.n	8007eec <__sflush_r+0x18>
 8007f5c:	0023      	movs	r3, r4
 8007f5e:	3344      	adds	r3, #68	; 0x44
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <__sflush_r+0x96>
 8007f64:	0028      	movs	r0, r5
 8007f66:	f001 f923 	bl	80091b0 <_free_r>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f6e:	e7be      	b.n	8007eee <__sflush_r+0x1a>
 8007f70:	2301      	movs	r3, #1
 8007f72:	0028      	movs	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	d1c6      	bne.n	8007f08 <__sflush_r+0x34>
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0c3      	beq.n	8007f08 <__sflush_r+0x34>
 8007f80:	2b1d      	cmp	r3, #29
 8007f82:	d001      	beq.n	8007f88 <__sflush_r+0xb4>
 8007f84:	2b16      	cmp	r3, #22
 8007f86:	d101      	bne.n	8007f8c <__sflush_r+0xb8>
 8007f88:	602e      	str	r6, [r5, #0]
 8007f8a:	e7af      	b.n	8007eec <__sflush_r+0x18>
 8007f8c:	2340      	movs	r3, #64	; 0x40
 8007f8e:	89a2      	ldrh	r2, [r4, #12]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	e7ab      	b.n	8007eee <__sflush_r+0x1a>
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	4240      	negs	r0, r0
 8007fa0:	e7a5      	b.n	8007eee <__sflush_r+0x1a>
 8007fa2:	690f      	ldr	r7, [r1, #16]
 8007fa4:	2f00      	cmp	r7, #0
 8007fa6:	d0a1      	beq.n	8007eec <__sflush_r+0x18>
 8007fa8:	680b      	ldr	r3, [r1, #0]
 8007faa:	600f      	str	r7, [r1, #0]
 8007fac:	1bdb      	subs	r3, r3, r7
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	0792      	lsls	r2, r2, #30
 8007fb4:	d100      	bne.n	8007fb8 <__sflush_r+0xe4>
 8007fb6:	694b      	ldr	r3, [r1, #20]
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	9b01      	ldr	r3, [sp, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc00      	bgt.n	8007fc2 <__sflush_r+0xee>
 8007fc0:	e794      	b.n	8007eec <__sflush_r+0x18>
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	003a      	movs	r2, r7
 8007fc6:	6a21      	ldr	r1, [r4, #32]
 8007fc8:	0028      	movs	r0, r5
 8007fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fcc:	47b0      	blx	r6
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	dc03      	bgt.n	8007fda <__sflush_r+0x106>
 8007fd2:	2340      	movs	r3, #64	; 0x40
 8007fd4:	89a2      	ldrh	r2, [r4, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	e7df      	b.n	8007f9a <__sflush_r+0xc6>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	183f      	adds	r7, r7, r0
 8007fde:	1a1b      	subs	r3, r3, r0
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	e7ea      	b.n	8007fba <__sflush_r+0xe6>
 8007fe4:	20400001 	.word	0x20400001

08007fe8 <_fflush_r>:
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b570      	push	{r4, r5, r6, lr}
 8007fec:	0005      	movs	r5, r0
 8007fee:	000c      	movs	r4, r1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <_fflush_r+0x10>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d004      	beq.n	8008006 <_fflush_r+0x1e>
 8007ffc:	6983      	ldr	r3, [r0, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <_fflush_r+0x1e>
 8008002:	f000 f85f 	bl	80080c4 <__sinit>
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <_fflush_r+0x4c>)
 8008008:	429c      	cmp	r4, r3
 800800a:	d109      	bne.n	8008020 <_fflush_r+0x38>
 800800c:	686c      	ldr	r4, [r5, #4]
 800800e:	220c      	movs	r2, #12
 8008010:	5ea3      	ldrsh	r3, [r4, r2]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0ee      	beq.n	8007ff4 <_fflush_r+0xc>
 8008016:	0021      	movs	r1, r4
 8008018:	0028      	movs	r0, r5
 800801a:	f7ff ff5b 	bl	8007ed4 <__sflush_r>
 800801e:	e7ea      	b.n	8007ff6 <_fflush_r+0xe>
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <_fflush_r+0x50>)
 8008022:	429c      	cmp	r4, r3
 8008024:	d101      	bne.n	800802a <_fflush_r+0x42>
 8008026:	68ac      	ldr	r4, [r5, #8]
 8008028:	e7f1      	b.n	800800e <_fflush_r+0x26>
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <_fflush_r+0x54>)
 800802c:	429c      	cmp	r4, r3
 800802e:	d1ee      	bne.n	800800e <_fflush_r+0x26>
 8008030:	68ec      	ldr	r4, [r5, #12]
 8008032:	e7ec      	b.n	800800e <_fflush_r+0x26>
 8008034:	08009cb0 	.word	0x08009cb0
 8008038:	08009cd0 	.word	0x08009cd0
 800803c:	08009c90 	.word	0x08009c90

08008040 <std>:
 8008040:	2300      	movs	r3, #0
 8008042:	b510      	push	{r4, lr}
 8008044:	0004      	movs	r4, r0
 8008046:	6003      	str	r3, [r0, #0]
 8008048:	6043      	str	r3, [r0, #4]
 800804a:	6083      	str	r3, [r0, #8]
 800804c:	8181      	strh	r1, [r0, #12]
 800804e:	6643      	str	r3, [r0, #100]	; 0x64
 8008050:	81c2      	strh	r2, [r0, #14]
 8008052:	6103      	str	r3, [r0, #16]
 8008054:	6143      	str	r3, [r0, #20]
 8008056:	6183      	str	r3, [r0, #24]
 8008058:	0019      	movs	r1, r3
 800805a:	2208      	movs	r2, #8
 800805c:	305c      	adds	r0, #92	; 0x5c
 800805e:	f7fd f96f 	bl	8005340 <memset>
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <std+0x38>)
 8008064:	6224      	str	r4, [r4, #32]
 8008066:	6263      	str	r3, [r4, #36]	; 0x24
 8008068:	4b04      	ldr	r3, [pc, #16]	; (800807c <std+0x3c>)
 800806a:	62a3      	str	r3, [r4, #40]	; 0x28
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <std+0x40>)
 800806e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008070:	4b04      	ldr	r3, [pc, #16]	; (8008084 <std+0x44>)
 8008072:	6323      	str	r3, [r4, #48]	; 0x30
 8008074:	bd10      	pop	{r4, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	08009861 	.word	0x08009861
 800807c:	08009889 	.word	0x08009889
 8008080:	080098c1 	.word	0x080098c1
 8008084:	080098ed 	.word	0x080098ed

08008088 <_cleanup_r>:
 8008088:	b510      	push	{r4, lr}
 800808a:	4902      	ldr	r1, [pc, #8]	; (8008094 <_cleanup_r+0xc>)
 800808c:	f000 f88c 	bl	80081a8 <_fwalk_reent>
 8008090:	bd10      	pop	{r4, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	08007fe9 	.word	0x08007fe9

08008098 <__sfmoreglue>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	2568      	movs	r5, #104	; 0x68
 800809c:	1e4a      	subs	r2, r1, #1
 800809e:	4355      	muls	r5, r2
 80080a0:	000e      	movs	r6, r1
 80080a2:	0029      	movs	r1, r5
 80080a4:	3174      	adds	r1, #116	; 0x74
 80080a6:	f001 f8cd 	bl	8009244 <_malloc_r>
 80080aa:	1e04      	subs	r4, r0, #0
 80080ac:	d008      	beq.n	80080c0 <__sfmoreglue+0x28>
 80080ae:	2100      	movs	r1, #0
 80080b0:	002a      	movs	r2, r5
 80080b2:	6001      	str	r1, [r0, #0]
 80080b4:	6046      	str	r6, [r0, #4]
 80080b6:	300c      	adds	r0, #12
 80080b8:	60a0      	str	r0, [r4, #8]
 80080ba:	3268      	adds	r2, #104	; 0x68
 80080bc:	f7fd f940 	bl	8005340 <memset>
 80080c0:	0020      	movs	r0, r4
 80080c2:	bd70      	pop	{r4, r5, r6, pc}

080080c4 <__sinit>:
 80080c4:	6983      	ldr	r3, [r0, #24]
 80080c6:	b513      	push	{r0, r1, r4, lr}
 80080c8:	0004      	movs	r4, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d128      	bne.n	8008120 <__sinit+0x5c>
 80080ce:	6483      	str	r3, [r0, #72]	; 0x48
 80080d0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80080d2:	6503      	str	r3, [r0, #80]	; 0x50
 80080d4:	4b13      	ldr	r3, [pc, #76]	; (8008124 <__sinit+0x60>)
 80080d6:	4a14      	ldr	r2, [pc, #80]	; (8008128 <__sinit+0x64>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6282      	str	r2, [r0, #40]	; 0x28
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	4298      	cmp	r0, r3
 80080e0:	d101      	bne.n	80080e6 <__sinit+0x22>
 80080e2:	2301      	movs	r3, #1
 80080e4:	6183      	str	r3, [r0, #24]
 80080e6:	0020      	movs	r0, r4
 80080e8:	f000 f820 	bl	800812c <__sfp>
 80080ec:	6060      	str	r0, [r4, #4]
 80080ee:	0020      	movs	r0, r4
 80080f0:	f000 f81c 	bl	800812c <__sfp>
 80080f4:	60a0      	str	r0, [r4, #8]
 80080f6:	0020      	movs	r0, r4
 80080f8:	f000 f818 	bl	800812c <__sfp>
 80080fc:	2200      	movs	r2, #0
 80080fe:	60e0      	str	r0, [r4, #12]
 8008100:	2104      	movs	r1, #4
 8008102:	6860      	ldr	r0, [r4, #4]
 8008104:	f7ff ff9c 	bl	8008040 <std>
 8008108:	2201      	movs	r2, #1
 800810a:	2109      	movs	r1, #9
 800810c:	68a0      	ldr	r0, [r4, #8]
 800810e:	f7ff ff97 	bl	8008040 <std>
 8008112:	2202      	movs	r2, #2
 8008114:	2112      	movs	r1, #18
 8008116:	68e0      	ldr	r0, [r4, #12]
 8008118:	f7ff ff92 	bl	8008040 <std>
 800811c:	2301      	movs	r3, #1
 800811e:	61a3      	str	r3, [r4, #24]
 8008120:	bd13      	pop	{r0, r1, r4, pc}
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	08009bf0 	.word	0x08009bf0
 8008128:	08008089 	.word	0x08008089

0800812c <__sfp>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <__sfp+0x74>)
 8008130:	0007      	movs	r7, r0
 8008132:	681e      	ldr	r6, [r3, #0]
 8008134:	69b3      	ldr	r3, [r6, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <__sfp+0x14>
 800813a:	0030      	movs	r0, r6
 800813c:	f7ff ffc2 	bl	80080c4 <__sinit>
 8008140:	3648      	adds	r6, #72	; 0x48
 8008142:	68b4      	ldr	r4, [r6, #8]
 8008144:	6873      	ldr	r3, [r6, #4]
 8008146:	3b01      	subs	r3, #1
 8008148:	d504      	bpl.n	8008154 <__sfp+0x28>
 800814a:	6833      	ldr	r3, [r6, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <__sfp+0x34>
 8008150:	6836      	ldr	r6, [r6, #0]
 8008152:	e7f6      	b.n	8008142 <__sfp+0x16>
 8008154:	220c      	movs	r2, #12
 8008156:	5ea5      	ldrsh	r5, [r4, r2]
 8008158:	2d00      	cmp	r5, #0
 800815a:	d00d      	beq.n	8008178 <__sfp+0x4c>
 800815c:	3468      	adds	r4, #104	; 0x68
 800815e:	e7f2      	b.n	8008146 <__sfp+0x1a>
 8008160:	2104      	movs	r1, #4
 8008162:	0038      	movs	r0, r7
 8008164:	f7ff ff98 	bl	8008098 <__sfmoreglue>
 8008168:	6030      	str	r0, [r6, #0]
 800816a:	2800      	cmp	r0, #0
 800816c:	d1f0      	bne.n	8008150 <__sfp+0x24>
 800816e:	230c      	movs	r3, #12
 8008170:	0004      	movs	r4, r0
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	0020      	movs	r0, r4
 8008176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008178:	0020      	movs	r0, r4
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <__sfp+0x78>)
 800817c:	6665      	str	r5, [r4, #100]	; 0x64
 800817e:	6025      	str	r5, [r4, #0]
 8008180:	6065      	str	r5, [r4, #4]
 8008182:	60a5      	str	r5, [r4, #8]
 8008184:	60e3      	str	r3, [r4, #12]
 8008186:	6125      	str	r5, [r4, #16]
 8008188:	6165      	str	r5, [r4, #20]
 800818a:	61a5      	str	r5, [r4, #24]
 800818c:	2208      	movs	r2, #8
 800818e:	0029      	movs	r1, r5
 8008190:	305c      	adds	r0, #92	; 0x5c
 8008192:	f7fd f8d5 	bl	8005340 <memset>
 8008196:	6365      	str	r5, [r4, #52]	; 0x34
 8008198:	63a5      	str	r5, [r4, #56]	; 0x38
 800819a:	64a5      	str	r5, [r4, #72]	; 0x48
 800819c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800819e:	e7e9      	b.n	8008174 <__sfp+0x48>
 80081a0:	08009bf0 	.word	0x08009bf0
 80081a4:	ffff0001 	.word	0xffff0001

080081a8 <_fwalk_reent>:
 80081a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081aa:	0004      	movs	r4, r0
 80081ac:	0007      	movs	r7, r0
 80081ae:	2600      	movs	r6, #0
 80081b0:	9101      	str	r1, [sp, #4]
 80081b2:	3448      	adds	r4, #72	; 0x48
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	d101      	bne.n	80081bc <_fwalk_reent+0x14>
 80081b8:	0030      	movs	r0, r6
 80081ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	68a5      	ldr	r5, [r4, #8]
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	9b00      	ldr	r3, [sp, #0]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	d501      	bpl.n	80081ce <_fwalk_reent+0x26>
 80081ca:	6824      	ldr	r4, [r4, #0]
 80081cc:	e7f2      	b.n	80081b4 <_fwalk_reent+0xc>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d908      	bls.n	80081e6 <_fwalk_reent+0x3e>
 80081d4:	220e      	movs	r2, #14
 80081d6:	5eab      	ldrsh	r3, [r5, r2]
 80081d8:	3301      	adds	r3, #1
 80081da:	d004      	beq.n	80081e6 <_fwalk_reent+0x3e>
 80081dc:	0029      	movs	r1, r5
 80081de:	0038      	movs	r0, r7
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	4798      	blx	r3
 80081e4:	4306      	orrs	r6, r0
 80081e6:	3568      	adds	r5, #104	; 0x68
 80081e8:	e7eb      	b.n	80081c2 <_fwalk_reent+0x1a>

080081ea <rshift>:
 80081ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ec:	0004      	movs	r4, r0
 80081ee:	6905      	ldr	r5, [r0, #16]
 80081f0:	3414      	adds	r4, #20
 80081f2:	114b      	asrs	r3, r1, #5
 80081f4:	0026      	movs	r6, r4
 80081f6:	429d      	cmp	r5, r3
 80081f8:	dd14      	ble.n	8008224 <rshift+0x3a>
 80081fa:	221f      	movs	r2, #31
 80081fc:	00ad      	lsls	r5, r5, #2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4011      	ands	r1, r2
 8008202:	1965      	adds	r5, r4, r5
 8008204:	18e3      	adds	r3, r4, r3
 8008206:	0022      	movs	r2, r4
 8008208:	2900      	cmp	r1, #0
 800820a:	d01e      	beq.n	800824a <rshift+0x60>
 800820c:	cb04      	ldmia	r3!, {r2}
 800820e:	2720      	movs	r7, #32
 8008210:	40ca      	lsrs	r2, r1
 8008212:	46a4      	mov	ip, r4
 8008214:	1a7f      	subs	r7, r7, r1
 8008216:	4666      	mov	r6, ip
 8008218:	429d      	cmp	r5, r3
 800821a:	d80b      	bhi.n	8008234 <rshift+0x4a>
 800821c:	6032      	str	r2, [r6, #0]
 800821e:	2a00      	cmp	r2, #0
 8008220:	d000      	beq.n	8008224 <rshift+0x3a>
 8008222:	3604      	adds	r6, #4
 8008224:	1b33      	subs	r3, r6, r4
 8008226:	109b      	asrs	r3, r3, #2
 8008228:	6103      	str	r3, [r0, #16]
 800822a:	42a6      	cmp	r6, r4
 800822c:	d101      	bne.n	8008232 <rshift+0x48>
 800822e:	2300      	movs	r3, #0
 8008230:	6143      	str	r3, [r0, #20]
 8008232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008234:	681e      	ldr	r6, [r3, #0]
 8008236:	40be      	lsls	r6, r7
 8008238:	4332      	orrs	r2, r6
 800823a:	4666      	mov	r6, ip
 800823c:	c604      	stmia	r6!, {r2}
 800823e:	cb04      	ldmia	r3!, {r2}
 8008240:	46b4      	mov	ip, r6
 8008242:	40ca      	lsrs	r2, r1
 8008244:	e7e7      	b.n	8008216 <rshift+0x2c>
 8008246:	cb02      	ldmia	r3!, {r1}
 8008248:	c202      	stmia	r2!, {r1}
 800824a:	0016      	movs	r6, r2
 800824c:	429d      	cmp	r5, r3
 800824e:	d8fa      	bhi.n	8008246 <rshift+0x5c>
 8008250:	e7e8      	b.n	8008224 <rshift+0x3a>

08008252 <__hexdig_fun>:
 8008252:	0003      	movs	r3, r0
 8008254:	3b30      	subs	r3, #48	; 0x30
 8008256:	2b09      	cmp	r3, #9
 8008258:	d803      	bhi.n	8008262 <__hexdig_fun+0x10>
 800825a:	3820      	subs	r0, #32
 800825c:	b2c3      	uxtb	r3, r0
 800825e:	0018      	movs	r0, r3
 8008260:	4770      	bx	lr
 8008262:	0003      	movs	r3, r0
 8008264:	3b61      	subs	r3, #97	; 0x61
 8008266:	2b05      	cmp	r3, #5
 8008268:	d801      	bhi.n	800826e <__hexdig_fun+0x1c>
 800826a:	3847      	subs	r0, #71	; 0x47
 800826c:	e7f6      	b.n	800825c <__hexdig_fun+0xa>
 800826e:	0002      	movs	r2, r0
 8008270:	3a41      	subs	r2, #65	; 0x41
 8008272:	2300      	movs	r3, #0
 8008274:	2a05      	cmp	r2, #5
 8008276:	d8f2      	bhi.n	800825e <__hexdig_fun+0xc>
 8008278:	3827      	subs	r0, #39	; 0x27
 800827a:	e7ef      	b.n	800825c <__hexdig_fun+0xa>

0800827c <__gethex>:
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	b08d      	sub	sp, #52	; 0x34
 8008280:	9005      	str	r0, [sp, #20]
 8008282:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008284:	9109      	str	r1, [sp, #36]	; 0x24
 8008286:	9202      	str	r2, [sp, #8]
 8008288:	930a      	str	r3, [sp, #40]	; 0x28
 800828a:	f000 fae2 	bl	8008852 <__localeconv_l>
 800828e:	6803      	ldr	r3, [r0, #0]
 8008290:	0018      	movs	r0, r3
 8008292:	9307      	str	r3, [sp, #28]
 8008294:	f7f7 ff38 	bl	8000108 <strlen>
 8008298:	2202      	movs	r2, #2
 800829a:	9b07      	ldr	r3, [sp, #28]
 800829c:	4252      	negs	r2, r2
 800829e:	181b      	adds	r3, r3, r0
 80082a0:	3b01      	subs	r3, #1
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	9004      	str	r0, [sp, #16]
 80082a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082aa:	6819      	ldr	r1, [r3, #0]
 80082ac:	1c8b      	adds	r3, r1, #2
 80082ae:	1a52      	subs	r2, r2, r1
 80082b0:	18d1      	adds	r1, r2, r3
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	9108      	str	r1, [sp, #32]
 80082b6:	9901      	ldr	r1, [sp, #4]
 80082b8:	3301      	adds	r3, #1
 80082ba:	7808      	ldrb	r0, [r1, #0]
 80082bc:	2830      	cmp	r0, #48	; 0x30
 80082be:	d0f7      	beq.n	80082b0 <__gethex+0x34>
 80082c0:	f7ff ffc7 	bl	8008252 <__hexdig_fun>
 80082c4:	1e07      	subs	r7, r0, #0
 80082c6:	d000      	beq.n	80082ca <__gethex+0x4e>
 80082c8:	e06f      	b.n	80083aa <__gethex+0x12e>
 80082ca:	9a04      	ldr	r2, [sp, #16]
 80082cc:	9907      	ldr	r1, [sp, #28]
 80082ce:	9801      	ldr	r0, [sp, #4]
 80082d0:	f001 fb12 	bl	80098f8 <strncmp>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d000      	beq.n	80082da <__gethex+0x5e>
 80082d8:	e06d      	b.n	80083b6 <__gethex+0x13a>
 80082da:	9b01      	ldr	r3, [sp, #4]
 80082dc:	9a04      	ldr	r2, [sp, #16]
 80082de:	189c      	adds	r4, r3, r2
 80082e0:	7820      	ldrb	r0, [r4, #0]
 80082e2:	f7ff ffb6 	bl	8008252 <__hexdig_fun>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d069      	beq.n	80083be <__gethex+0x142>
 80082ea:	9401      	str	r4, [sp, #4]
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	7818      	ldrb	r0, [r3, #0]
 80082f0:	2830      	cmp	r0, #48	; 0x30
 80082f2:	d009      	beq.n	8008308 <__gethex+0x8c>
 80082f4:	f7ff ffad 	bl	8008252 <__hexdig_fun>
 80082f8:	4243      	negs	r3, r0
 80082fa:	4143      	adcs	r3, r0
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	2301      	movs	r3, #1
 8008300:	0026      	movs	r6, r4
 8008302:	9308      	str	r3, [sp, #32]
 8008304:	9c01      	ldr	r4, [sp, #4]
 8008306:	e004      	b.n	8008312 <__gethex+0x96>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	3301      	adds	r3, #1
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	e7ed      	b.n	80082ec <__gethex+0x70>
 8008310:	3401      	adds	r4, #1
 8008312:	7820      	ldrb	r0, [r4, #0]
 8008314:	f7ff ff9d 	bl	8008252 <__hexdig_fun>
 8008318:	2800      	cmp	r0, #0
 800831a:	d1f9      	bne.n	8008310 <__gethex+0x94>
 800831c:	9a04      	ldr	r2, [sp, #16]
 800831e:	9907      	ldr	r1, [sp, #28]
 8008320:	0020      	movs	r0, r4
 8008322:	f001 fae9 	bl	80098f8 <strncmp>
 8008326:	2800      	cmp	r0, #0
 8008328:	d109      	bne.n	800833e <__gethex+0xc2>
 800832a:	2e00      	cmp	r6, #0
 800832c:	d10a      	bne.n	8008344 <__gethex+0xc8>
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	18e4      	adds	r4, r4, r3
 8008332:	0026      	movs	r6, r4
 8008334:	7820      	ldrb	r0, [r4, #0]
 8008336:	f7ff ff8c 	bl	8008252 <__hexdig_fun>
 800833a:	2800      	cmp	r0, #0
 800833c:	d139      	bne.n	80083b2 <__gethex+0x136>
 800833e:	2700      	movs	r7, #0
 8008340:	42be      	cmp	r6, r7
 8008342:	d001      	beq.n	8008348 <__gethex+0xcc>
 8008344:	1b37      	subs	r7, r6, r4
 8008346:	00bf      	lsls	r7, r7, #2
 8008348:	7823      	ldrb	r3, [r4, #0]
 800834a:	2b50      	cmp	r3, #80	; 0x50
 800834c:	d001      	beq.n	8008352 <__gethex+0xd6>
 800834e:	2b70      	cmp	r3, #112	; 0x70
 8008350:	d142      	bne.n	80083d8 <__gethex+0x15c>
 8008352:	7863      	ldrb	r3, [r4, #1]
 8008354:	2b2b      	cmp	r3, #43	; 0x2b
 8008356:	d034      	beq.n	80083c2 <__gethex+0x146>
 8008358:	2b2d      	cmp	r3, #45	; 0x2d
 800835a:	d036      	beq.n	80083ca <__gethex+0x14e>
 800835c:	2300      	movs	r3, #0
 800835e:	1c66      	adds	r6, r4, #1
 8008360:	9306      	str	r3, [sp, #24]
 8008362:	7830      	ldrb	r0, [r6, #0]
 8008364:	f7ff ff75 	bl	8008252 <__hexdig_fun>
 8008368:	1e43      	subs	r3, r0, #1
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b18      	cmp	r3, #24
 800836e:	d833      	bhi.n	80083d8 <__gethex+0x15c>
 8008370:	3810      	subs	r0, #16
 8008372:	0005      	movs	r5, r0
 8008374:	3601      	adds	r6, #1
 8008376:	7830      	ldrb	r0, [r6, #0]
 8008378:	f7ff ff6b 	bl	8008252 <__hexdig_fun>
 800837c:	1e43      	subs	r3, r0, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b18      	cmp	r3, #24
 8008382:	d924      	bls.n	80083ce <__gethex+0x152>
 8008384:	9b06      	ldr	r3, [sp, #24]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d000      	beq.n	800838c <__gethex+0x110>
 800838a:	426d      	negs	r5, r5
 800838c:	197f      	adds	r7, r7, r5
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	601e      	str	r6, [r3, #0]
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d021      	beq.n	80083dc <__gethex+0x160>
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	2606      	movs	r6, #6
 800839c:	425a      	negs	r2, r3
 800839e:	4153      	adcs	r3, r2
 80083a0:	425b      	negs	r3, r3
 80083a2:	401e      	ands	r6, r3
 80083a4:	0030      	movs	r0, r6
 80083a6:	b00d      	add	sp, #52	; 0x34
 80083a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083aa:	2300      	movs	r3, #0
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	001e      	movs	r6, r3
 80083b0:	e7a8      	b.n	8008304 <__gethex+0x88>
 80083b2:	3401      	adds	r4, #1
 80083b4:	e7be      	b.n	8008334 <__gethex+0xb8>
 80083b6:	9c01      	ldr	r4, [sp, #4]
 80083b8:	2301      	movs	r3, #1
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	e7c4      	b.n	8008348 <__gethex+0xcc>
 80083be:	0007      	movs	r7, r0
 80083c0:	e7fa      	b.n	80083b8 <__gethex+0x13c>
 80083c2:	2300      	movs	r3, #0
 80083c4:	9306      	str	r3, [sp, #24]
 80083c6:	1ca6      	adds	r6, r4, #2
 80083c8:	e7cb      	b.n	8008362 <__gethex+0xe6>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e7fa      	b.n	80083c4 <__gethex+0x148>
 80083ce:	230a      	movs	r3, #10
 80083d0:	435d      	muls	r5, r3
 80083d2:	182d      	adds	r5, r5, r0
 80083d4:	3d10      	subs	r5, #16
 80083d6:	e7cd      	b.n	8008374 <__gethex+0xf8>
 80083d8:	0026      	movs	r6, r4
 80083da:	e7d8      	b.n	800838e <__gethex+0x112>
 80083dc:	9b01      	ldr	r3, [sp, #4]
 80083de:	9903      	ldr	r1, [sp, #12]
 80083e0:	1ae3      	subs	r3, r4, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	dc47      	bgt.n	8008478 <__gethex+0x1fc>
 80083e8:	9805      	ldr	r0, [sp, #20]
 80083ea:	f000 fadd 	bl	80089a8 <_Balloc>
 80083ee:	0003      	movs	r3, r0
 80083f0:	3314      	adds	r3, #20
 80083f2:	9303      	str	r3, [sp, #12]
 80083f4:	9308      	str	r3, [sp, #32]
 80083f6:	2300      	movs	r3, #0
 80083f8:	0005      	movs	r5, r0
 80083fa:	001e      	movs	r6, r3
 80083fc:	9306      	str	r3, [sp, #24]
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	42a3      	cmp	r3, r4
 8008402:	d33c      	bcc.n	800847e <__gethex+0x202>
 8008404:	9c08      	ldr	r4, [sp, #32]
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	c440      	stmia	r4!, {r6}
 800840a:	1ae4      	subs	r4, r4, r3
 800840c:	10a4      	asrs	r4, r4, #2
 800840e:	612c      	str	r4, [r5, #16]
 8008410:	0030      	movs	r0, r6
 8008412:	f000 fb96 	bl	8008b42 <__hi0bits>
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	0164      	lsls	r4, r4, #5
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	1a26      	subs	r6, r4, r0
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	429e      	cmp	r6, r3
 8008422:	dd5f      	ble.n	80084e4 <__gethex+0x268>
 8008424:	1af6      	subs	r6, r6, r3
 8008426:	0031      	movs	r1, r6
 8008428:	0028      	movs	r0, r5
 800842a:	f000 fe90 	bl	800914e <__any_on>
 800842e:	1e04      	subs	r4, r0, #0
 8008430:	d00f      	beq.n	8008452 <__gethex+0x1d6>
 8008432:	2401      	movs	r4, #1
 8008434:	211f      	movs	r1, #31
 8008436:	0020      	movs	r0, r4
 8008438:	1e73      	subs	r3, r6, #1
 800843a:	4019      	ands	r1, r3
 800843c:	4088      	lsls	r0, r1
 800843e:	0001      	movs	r1, r0
 8008440:	115a      	asrs	r2, r3, #5
 8008442:	9803      	ldr	r0, [sp, #12]
 8008444:	0092      	lsls	r2, r2, #2
 8008446:	5812      	ldr	r2, [r2, r0]
 8008448:	420a      	tst	r2, r1
 800844a:	d002      	beq.n	8008452 <__gethex+0x1d6>
 800844c:	42a3      	cmp	r3, r4
 800844e:	dc41      	bgt.n	80084d4 <__gethex+0x258>
 8008450:	2402      	movs	r4, #2
 8008452:	0031      	movs	r1, r6
 8008454:	0028      	movs	r0, r5
 8008456:	f7ff fec8 	bl	80081ea <rshift>
 800845a:	19bf      	adds	r7, r7, r6
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	42bb      	cmp	r3, r7
 8008464:	da4e      	bge.n	8008504 <__gethex+0x288>
 8008466:	0029      	movs	r1, r5
 8008468:	9805      	ldr	r0, [sp, #20]
 800846a:	f000 fad5 	bl	8008a18 <_Bfree>
 800846e:	2300      	movs	r3, #0
 8008470:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008472:	26a3      	movs	r6, #163	; 0xa3
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e795      	b.n	80083a4 <__gethex+0x128>
 8008478:	3101      	adds	r1, #1
 800847a:	105b      	asrs	r3, r3, #1
 800847c:	e7b2      	b.n	80083e4 <__gethex+0x168>
 800847e:	1e63      	subs	r3, r4, #1
 8008480:	9309      	str	r3, [sp, #36]	; 0x24
 8008482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	4293      	cmp	r3, r2
 8008488:	d015      	beq.n	80084b6 <__gethex+0x23a>
 800848a:	9b06      	ldr	r3, [sp, #24]
 800848c:	2b20      	cmp	r3, #32
 800848e:	d105      	bne.n	800849c <__gethex+0x220>
 8008490:	9b08      	ldr	r3, [sp, #32]
 8008492:	601e      	str	r6, [r3, #0]
 8008494:	2600      	movs	r6, #0
 8008496:	3304      	adds	r3, #4
 8008498:	9308      	str	r3, [sp, #32]
 800849a:	9606      	str	r6, [sp, #24]
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	7818      	ldrb	r0, [r3, #0]
 80084a0:	f7ff fed7 	bl	8008252 <__hexdig_fun>
 80084a4:	230f      	movs	r3, #15
 80084a6:	4018      	ands	r0, r3
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80084ac:	4098      	lsls	r0, r3
 80084ae:	3304      	adds	r3, #4
 80084b0:	4306      	orrs	r6, r0
 80084b2:	9306      	str	r3, [sp, #24]
 80084b4:	e7a3      	b.n	80083fe <__gethex+0x182>
 80084b6:	2301      	movs	r3, #1
 80084b8:	9a04      	ldr	r2, [sp, #16]
 80084ba:	1a9c      	subs	r4, r3, r2
 80084bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084be:	191c      	adds	r4, r3, r4
 80084c0:	9b01      	ldr	r3, [sp, #4]
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d3e1      	bcc.n	800848a <__gethex+0x20e>
 80084c6:	9907      	ldr	r1, [sp, #28]
 80084c8:	0020      	movs	r0, r4
 80084ca:	f001 fa15 	bl	80098f8 <strncmp>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d1db      	bne.n	800848a <__gethex+0x20e>
 80084d2:	e794      	b.n	80083fe <__gethex+0x182>
 80084d4:	1eb1      	subs	r1, r6, #2
 80084d6:	0028      	movs	r0, r5
 80084d8:	f000 fe39 	bl	800914e <__any_on>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d0b7      	beq.n	8008450 <__gethex+0x1d4>
 80084e0:	2403      	movs	r4, #3
 80084e2:	e7b6      	b.n	8008452 <__gethex+0x1d6>
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	2400      	movs	r4, #0
 80084e8:	429e      	cmp	r6, r3
 80084ea:	dab7      	bge.n	800845c <__gethex+0x1e0>
 80084ec:	1b9e      	subs	r6, r3, r6
 80084ee:	0029      	movs	r1, r5
 80084f0:	0032      	movs	r2, r6
 80084f2:	9805      	ldr	r0, [sp, #20]
 80084f4:	f000 fc58 	bl	8008da8 <__lshift>
 80084f8:	0003      	movs	r3, r0
 80084fa:	3314      	adds	r3, #20
 80084fc:	0005      	movs	r5, r0
 80084fe:	1bbf      	subs	r7, r7, r6
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	e7ab      	b.n	800845c <__gethex+0x1e0>
 8008504:	9b02      	ldr	r3, [sp, #8]
 8008506:	685e      	ldr	r6, [r3, #4]
 8008508:	42be      	cmp	r6, r7
 800850a:	dd6b      	ble.n	80085e4 <__gethex+0x368>
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	1bf6      	subs	r6, r6, r7
 8008510:	42b3      	cmp	r3, r6
 8008512:	dc32      	bgt.n	800857a <__gethex+0x2fe>
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d026      	beq.n	800856a <__gethex+0x2ee>
 800851c:	2b03      	cmp	r3, #3
 800851e:	d028      	beq.n	8008572 <__gethex+0x2f6>
 8008520:	2b01      	cmp	r3, #1
 8008522:	d119      	bne.n	8008558 <__gethex+0x2dc>
 8008524:	9b01      	ldr	r3, [sp, #4]
 8008526:	42b3      	cmp	r3, r6
 8008528:	d116      	bne.n	8008558 <__gethex+0x2dc>
 800852a:	2b01      	cmp	r3, #1
 800852c:	dc0d      	bgt.n	800854a <__gethex+0x2ce>
 800852e:	9b02      	ldr	r3, [sp, #8]
 8008530:	2662      	movs	r6, #98	; 0x62
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	9a01      	ldr	r2, [sp, #4]
 8008538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	2301      	movs	r3, #1
 800853e:	9a03      	ldr	r2, [sp, #12]
 8008540:	612b      	str	r3, [r5, #16]
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008546:	601d      	str	r5, [r3, #0]
 8008548:	e72c      	b.n	80083a4 <__gethex+0x128>
 800854a:	9901      	ldr	r1, [sp, #4]
 800854c:	0028      	movs	r0, r5
 800854e:	3901      	subs	r1, #1
 8008550:	f000 fdfd 	bl	800914e <__any_on>
 8008554:	2800      	cmp	r0, #0
 8008556:	d1ea      	bne.n	800852e <__gethex+0x2b2>
 8008558:	0029      	movs	r1, r5
 800855a:	9805      	ldr	r0, [sp, #20]
 800855c:	f000 fa5c 	bl	8008a18 <_Bfree>
 8008560:	2300      	movs	r3, #0
 8008562:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008564:	2650      	movs	r6, #80	; 0x50
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	e71c      	b.n	80083a4 <__gethex+0x128>
 800856a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0de      	beq.n	800852e <__gethex+0x2b2>
 8008570:	e7f2      	b.n	8008558 <__gethex+0x2dc>
 8008572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1da      	bne.n	800852e <__gethex+0x2b2>
 8008578:	e7ee      	b.n	8008558 <__gethex+0x2dc>
 800857a:	1e77      	subs	r7, r6, #1
 800857c:	2c00      	cmp	r4, #0
 800857e:	d12f      	bne.n	80085e0 <__gethex+0x364>
 8008580:	2f00      	cmp	r7, #0
 8008582:	d004      	beq.n	800858e <__gethex+0x312>
 8008584:	0039      	movs	r1, r7
 8008586:	0028      	movs	r0, r5
 8008588:	f000 fde1 	bl	800914e <__any_on>
 800858c:	0004      	movs	r4, r0
 800858e:	231f      	movs	r3, #31
 8008590:	117a      	asrs	r2, r7, #5
 8008592:	401f      	ands	r7, r3
 8008594:	3b1e      	subs	r3, #30
 8008596:	40bb      	lsls	r3, r7
 8008598:	9903      	ldr	r1, [sp, #12]
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	5852      	ldr	r2, [r2, r1]
 800859e:	421a      	tst	r2, r3
 80085a0:	d001      	beq.n	80085a6 <__gethex+0x32a>
 80085a2:	2302      	movs	r3, #2
 80085a4:	431c      	orrs	r4, r3
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	0031      	movs	r1, r6
 80085aa:	1b9b      	subs	r3, r3, r6
 80085ac:	2602      	movs	r6, #2
 80085ae:	0028      	movs	r0, r5
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	f7ff fe1a 	bl	80081ea <rshift>
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	685f      	ldr	r7, [r3, #4]
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	d040      	beq.n	8008640 <__gethex+0x3c4>
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d010      	beq.n	80085e8 <__gethex+0x36c>
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d012      	beq.n	80085f0 <__gethex+0x374>
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d106      	bne.n	80085dc <__gethex+0x360>
 80085ce:	07a2      	lsls	r2, r4, #30
 80085d0:	d504      	bpl.n	80085dc <__gethex+0x360>
 80085d2:	9a03      	ldr	r2, [sp, #12]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	4314      	orrs	r4, r2
 80085d8:	421c      	tst	r4, r3
 80085da:	d10c      	bne.n	80085f6 <__gethex+0x37a>
 80085dc:	2310      	movs	r3, #16
 80085de:	e02e      	b.n	800863e <__gethex+0x3c2>
 80085e0:	2401      	movs	r4, #1
 80085e2:	e7d4      	b.n	800858e <__gethex+0x312>
 80085e4:	2601      	movs	r6, #1
 80085e6:	e7e8      	b.n	80085ba <__gethex+0x33e>
 80085e8:	2301      	movs	r3, #1
 80085ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80085f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f2      	beq.n	80085dc <__gethex+0x360>
 80085f6:	692c      	ldr	r4, [r5, #16]
 80085f8:	00a3      	lsls	r3, r4, #2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	002b      	movs	r3, r5
 80085fe:	00a2      	lsls	r2, r4, #2
 8008600:	3314      	adds	r3, #20
 8008602:	1899      	adds	r1, r3, r2
 8008604:	2200      	movs	r2, #0
 8008606:	4694      	mov	ip, r2
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	1c50      	adds	r0, r2, #1
 800860c:	d01d      	beq.n	800864a <__gethex+0x3ce>
 800860e:	3201      	adds	r2, #1
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	002b      	movs	r3, r5
 8008614:	3314      	adds	r3, #20
 8008616:	2e02      	cmp	r6, #2
 8008618:	d13a      	bne.n	8008690 <__gethex+0x414>
 800861a:	9a02      	ldr	r2, [sp, #8]
 800861c:	9901      	ldr	r1, [sp, #4]
 800861e:	6812      	ldr	r2, [r2, #0]
 8008620:	3a01      	subs	r2, #1
 8008622:	428a      	cmp	r2, r1
 8008624:	d10a      	bne.n	800863c <__gethex+0x3c0>
 8008626:	114a      	asrs	r2, r1, #5
 8008628:	211f      	movs	r1, #31
 800862a:	9801      	ldr	r0, [sp, #4]
 800862c:	0092      	lsls	r2, r2, #2
 800862e:	4001      	ands	r1, r0
 8008630:	2001      	movs	r0, #1
 8008632:	0004      	movs	r4, r0
 8008634:	408c      	lsls	r4, r1
 8008636:	58d3      	ldr	r3, [r2, r3]
 8008638:	4223      	tst	r3, r4
 800863a:	d148      	bne.n	80086ce <__gethex+0x452>
 800863c:	2320      	movs	r3, #32
 800863e:	431e      	orrs	r6, r3
 8008640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008642:	601d      	str	r5, [r3, #0]
 8008644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008646:	601f      	str	r7, [r3, #0]
 8008648:	e6ac      	b.n	80083a4 <__gethex+0x128>
 800864a:	4662      	mov	r2, ip
 800864c:	c304      	stmia	r3!, {r2}
 800864e:	4299      	cmp	r1, r3
 8008650:	d8da      	bhi.n	8008608 <__gethex+0x38c>
 8008652:	68ab      	ldr	r3, [r5, #8]
 8008654:	429c      	cmp	r4, r3
 8008656:	db12      	blt.n	800867e <__gethex+0x402>
 8008658:	686b      	ldr	r3, [r5, #4]
 800865a:	9805      	ldr	r0, [sp, #20]
 800865c:	1c59      	adds	r1, r3, #1
 800865e:	f000 f9a3 	bl	80089a8 <_Balloc>
 8008662:	0029      	movs	r1, r5
 8008664:	692b      	ldr	r3, [r5, #16]
 8008666:	9003      	str	r0, [sp, #12]
 8008668:	1c9a      	adds	r2, r3, #2
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	310c      	adds	r1, #12
 800866e:	300c      	adds	r0, #12
 8008670:	f000 f991 	bl	8008996 <memcpy>
 8008674:	0029      	movs	r1, r5
 8008676:	9805      	ldr	r0, [sp, #20]
 8008678:	f000 f9ce 	bl	8008a18 <_Bfree>
 800867c:	9d03      	ldr	r5, [sp, #12]
 800867e:	692b      	ldr	r3, [r5, #16]
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	612a      	str	r2, [r5, #16]
 8008684:	2201      	movs	r2, #1
 8008686:	3304      	adds	r3, #4
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	18eb      	adds	r3, r5, r3
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	e7c0      	b.n	8008612 <__gethex+0x396>
 8008690:	692a      	ldr	r2, [r5, #16]
 8008692:	42a2      	cmp	r2, r4
 8008694:	dd0a      	ble.n	80086ac <__gethex+0x430>
 8008696:	2101      	movs	r1, #1
 8008698:	0028      	movs	r0, r5
 800869a:	f7ff fda6 	bl	80081ea <rshift>
 800869e:	9b02      	ldr	r3, [sp, #8]
 80086a0:	3701      	adds	r7, #1
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	2601      	movs	r6, #1
 80086a6:	42bb      	cmp	r3, r7
 80086a8:	dac8      	bge.n	800863c <__gethex+0x3c0>
 80086aa:	e6dc      	b.n	8008466 <__gethex+0x1ea>
 80086ac:	241f      	movs	r4, #31
 80086ae:	9a01      	ldr	r2, [sp, #4]
 80086b0:	2601      	movs	r6, #1
 80086b2:	4022      	ands	r2, r4
 80086b4:	1e14      	subs	r4, r2, #0
 80086b6:	d0c1      	beq.n	800863c <__gethex+0x3c0>
 80086b8:	9a04      	ldr	r2, [sp, #16]
 80086ba:	189b      	adds	r3, r3, r2
 80086bc:	3b04      	subs	r3, #4
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	f000 fa3f 	bl	8008b42 <__hi0bits>
 80086c4:	2120      	movs	r1, #32
 80086c6:	1b0c      	subs	r4, r1, r4
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	dbe4      	blt.n	8008696 <__gethex+0x41a>
 80086cc:	e7b6      	b.n	800863c <__gethex+0x3c0>
 80086ce:	0006      	movs	r6, r0
 80086d0:	e7b4      	b.n	800863c <__gethex+0x3c0>

080086d2 <L_shift>:
 80086d2:	2308      	movs	r3, #8
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	2520      	movs	r5, #32
 80086d8:	1a9a      	subs	r2, r3, r2
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	1aad      	subs	r5, r5, r2
 80086de:	6843      	ldr	r3, [r0, #4]
 80086e0:	6806      	ldr	r6, [r0, #0]
 80086e2:	001c      	movs	r4, r3
 80086e4:	40ac      	lsls	r4, r5
 80086e6:	40d3      	lsrs	r3, r2
 80086e8:	4334      	orrs	r4, r6
 80086ea:	6004      	str	r4, [r0, #0]
 80086ec:	6043      	str	r3, [r0, #4]
 80086ee:	3004      	adds	r0, #4
 80086f0:	4288      	cmp	r0, r1
 80086f2:	d3f4      	bcc.n	80086de <L_shift+0xc>
 80086f4:	bd70      	pop	{r4, r5, r6, pc}

080086f6 <__match>:
 80086f6:	b530      	push	{r4, r5, lr}
 80086f8:	6803      	ldr	r3, [r0, #0]
 80086fa:	780c      	ldrb	r4, [r1, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d102      	bne.n	8008708 <__match+0x12>
 8008702:	6003      	str	r3, [r0, #0]
 8008704:	2001      	movs	r0, #1
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	0015      	movs	r5, r2
 800870c:	3d41      	subs	r5, #65	; 0x41
 800870e:	2d19      	cmp	r5, #25
 8008710:	d800      	bhi.n	8008714 <__match+0x1e>
 8008712:	3220      	adds	r2, #32
 8008714:	3101      	adds	r1, #1
 8008716:	42a2      	cmp	r2, r4
 8008718:	d0ef      	beq.n	80086fa <__match+0x4>
 800871a:	2000      	movs	r0, #0
 800871c:	e7f3      	b.n	8008706 <__match+0x10>

0800871e <__hexnan>:
 800871e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008720:	b08b      	sub	sp, #44	; 0x2c
 8008722:	9201      	str	r2, [sp, #4]
 8008724:	680a      	ldr	r2, [r1, #0]
 8008726:	9901      	ldr	r1, [sp, #4]
 8008728:	1153      	asrs	r3, r2, #5
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	18cb      	adds	r3, r1, r3
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	231f      	movs	r3, #31
 8008732:	401a      	ands	r2, r3
 8008734:	9008      	str	r0, [sp, #32]
 8008736:	9206      	str	r2, [sp, #24]
 8008738:	d002      	beq.n	8008740 <__hexnan+0x22>
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	3304      	adds	r3, #4
 800873e:	9304      	str	r3, [sp, #16]
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	2500      	movs	r5, #0
 8008744:	1f1e      	subs	r6, r3, #4
 8008746:	0037      	movs	r7, r6
 8008748:	0034      	movs	r4, r6
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	6035      	str	r5, [r6, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	9507      	str	r5, [sp, #28]
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	9502      	str	r5, [sp, #8]
 8008756:	9b05      	ldr	r3, [sp, #20]
 8008758:	3301      	adds	r3, #1
 800875a:	9309      	str	r3, [sp, #36]	; 0x24
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	9303      	str	r3, [sp, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d028      	beq.n	80087b8 <__hexnan+0x9a>
 8008766:	9803      	ldr	r0, [sp, #12]
 8008768:	f7ff fd73 	bl	8008252 <__hexdig_fun>
 800876c:	2800      	cmp	r0, #0
 800876e:	d145      	bne.n	80087fc <__hexnan+0xde>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	2b20      	cmp	r3, #32
 8008774:	d819      	bhi.n	80087aa <__hexnan+0x8c>
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	9a07      	ldr	r2, [sp, #28]
 800877a:	4293      	cmp	r3, r2
 800877c:	dd12      	ble.n	80087a4 <__hexnan+0x86>
 800877e:	42bc      	cmp	r4, r7
 8008780:	d206      	bcs.n	8008790 <__hexnan+0x72>
 8008782:	2d07      	cmp	r5, #7
 8008784:	dc04      	bgt.n	8008790 <__hexnan+0x72>
 8008786:	002a      	movs	r2, r5
 8008788:	0039      	movs	r1, r7
 800878a:	0020      	movs	r0, r4
 800878c:	f7ff ffa1 	bl	80086d2 <L_shift>
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	2508      	movs	r5, #8
 8008794:	429c      	cmp	r4, r3
 8008796:	d905      	bls.n	80087a4 <__hexnan+0x86>
 8008798:	1f27      	subs	r7, r4, #4
 800879a:	2500      	movs	r5, #0
 800879c:	003c      	movs	r4, r7
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	603d      	str	r5, [r7, #0]
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	e7d5      	b.n	8008756 <__hexnan+0x38>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	2b29      	cmp	r3, #41	; 0x29
 80087ae:	d14a      	bne.n	8008846 <__hexnan+0x128>
 80087b0:	9b05      	ldr	r3, [sp, #20]
 80087b2:	9a08      	ldr	r2, [sp, #32]
 80087b4:	3302      	adds	r3, #2
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d043      	beq.n	8008846 <__hexnan+0x128>
 80087be:	42bc      	cmp	r4, r7
 80087c0:	d206      	bcs.n	80087d0 <__hexnan+0xb2>
 80087c2:	2d07      	cmp	r5, #7
 80087c4:	dc04      	bgt.n	80087d0 <__hexnan+0xb2>
 80087c6:	002a      	movs	r2, r5
 80087c8:	0039      	movs	r1, r7
 80087ca:	0020      	movs	r0, r4
 80087cc:	f7ff ff81 	bl	80086d2 <L_shift>
 80087d0:	9b01      	ldr	r3, [sp, #4]
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d926      	bls.n	8008824 <__hexnan+0x106>
 80087d6:	cc04      	ldmia	r4!, {r2}
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	3304      	adds	r3, #4
 80087dc:	42a6      	cmp	r6, r4
 80087de:	d2fa      	bcs.n	80087d6 <__hexnan+0xb8>
 80087e0:	2200      	movs	r2, #0
 80087e2:	c304      	stmia	r3!, {r2}
 80087e4:	429e      	cmp	r6, r3
 80087e6:	d2fc      	bcs.n	80087e2 <__hexnan+0xc4>
 80087e8:	6833      	ldr	r3, [r6, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <__hexnan+0xda>
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	429e      	cmp	r6, r3
 80087f2:	d126      	bne.n	8008842 <__hexnan+0x124>
 80087f4:	2301      	movs	r3, #1
 80087f6:	6033      	str	r3, [r6, #0]
 80087f8:	2005      	movs	r0, #5
 80087fa:	e025      	b.n	8008848 <__hexnan+0x12a>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	3501      	adds	r5, #1
 8008800:	3301      	adds	r3, #1
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	2d08      	cmp	r5, #8
 8008806:	dd06      	ble.n	8008816 <__hexnan+0xf8>
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	429c      	cmp	r4, r3
 800880c:	d9ca      	bls.n	80087a4 <__hexnan+0x86>
 800880e:	2300      	movs	r3, #0
 8008810:	2501      	movs	r5, #1
 8008812:	3c04      	subs	r4, #4
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	220f      	movs	r2, #15
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	4010      	ands	r0, r2
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	4318      	orrs	r0, r3
 8008820:	6020      	str	r0, [r4, #0]
 8008822:	e7bf      	b.n	80087a4 <__hexnan+0x86>
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0de      	beq.n	80087e8 <__hexnan+0xca>
 800882a:	2120      	movs	r1, #32
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	1a89      	subs	r1, r1, r2
 8008832:	2201      	movs	r2, #1
 8008834:	4252      	negs	r2, r2
 8008836:	40ca      	lsrs	r2, r1
 8008838:	3b04      	subs	r3, #4
 800883a:	6819      	ldr	r1, [r3, #0]
 800883c:	400a      	ands	r2, r1
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e7d2      	b.n	80087e8 <__hexnan+0xca>
 8008842:	3e04      	subs	r6, #4
 8008844:	e7d0      	b.n	80087e8 <__hexnan+0xca>
 8008846:	2004      	movs	r0, #4
 8008848:	b00b      	add	sp, #44	; 0x2c
 800884a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800884c <__locale_ctype_ptr_l>:
 800884c:	30ec      	adds	r0, #236	; 0xec
 800884e:	6800      	ldr	r0, [r0, #0]
 8008850:	4770      	bx	lr

08008852 <__localeconv_l>:
 8008852:	30f0      	adds	r0, #240	; 0xf0
 8008854:	4770      	bx	lr
	...

08008858 <_localeconv_r>:
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <_localeconv_r+0x10>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a18      	ldr	r0, [r3, #32]
 800885e:	2800      	cmp	r0, #0
 8008860:	d100      	bne.n	8008864 <_localeconv_r+0xc>
 8008862:	4802      	ldr	r0, [pc, #8]	; (800886c <_localeconv_r+0x14>)
 8008864:	30f0      	adds	r0, #240	; 0xf0
 8008866:	4770      	bx	lr
 8008868:	2000000c 	.word	0x2000000c
 800886c:	20000070 	.word	0x20000070

08008870 <__swhatbuf_r>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	000e      	movs	r6, r1
 8008874:	001d      	movs	r5, r3
 8008876:	230e      	movs	r3, #14
 8008878:	5ec9      	ldrsh	r1, [r1, r3]
 800887a:	b096      	sub	sp, #88	; 0x58
 800887c:	0014      	movs	r4, r2
 800887e:	2900      	cmp	r1, #0
 8008880:	da07      	bge.n	8008892 <__swhatbuf_r+0x22>
 8008882:	2300      	movs	r3, #0
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	89b3      	ldrh	r3, [r6, #12]
 8008888:	061b      	lsls	r3, r3, #24
 800888a:	d411      	bmi.n	80088b0 <__swhatbuf_r+0x40>
 800888c:	2380      	movs	r3, #128	; 0x80
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	e00f      	b.n	80088b2 <__swhatbuf_r+0x42>
 8008892:	466a      	mov	r2, sp
 8008894:	f001 f874 	bl	8009980 <_fstat_r>
 8008898:	2800      	cmp	r0, #0
 800889a:	dbf2      	blt.n	8008882 <__swhatbuf_r+0x12>
 800889c:	22f0      	movs	r2, #240	; 0xf0
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	0212      	lsls	r2, r2, #8
 80088a2:	4013      	ands	r3, r2
 80088a4:	4a05      	ldr	r2, [pc, #20]	; (80088bc <__swhatbuf_r+0x4c>)
 80088a6:	189b      	adds	r3, r3, r2
 80088a8:	425a      	negs	r2, r3
 80088aa:	4153      	adcs	r3, r2
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	e7ed      	b.n	800888c <__swhatbuf_r+0x1c>
 80088b0:	2340      	movs	r3, #64	; 0x40
 80088b2:	2000      	movs	r0, #0
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	b016      	add	sp, #88	; 0x58
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	ffffe000 	.word	0xffffe000

080088c0 <__smakebuf_r>:
 80088c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c2:	2602      	movs	r6, #2
 80088c4:	898b      	ldrh	r3, [r1, #12]
 80088c6:	0005      	movs	r5, r0
 80088c8:	000c      	movs	r4, r1
 80088ca:	4233      	tst	r3, r6
 80088cc:	d006      	beq.n	80088dc <__smakebuf_r+0x1c>
 80088ce:	0023      	movs	r3, r4
 80088d0:	3347      	adds	r3, #71	; 0x47
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	2301      	movs	r3, #1
 80088d8:	6163      	str	r3, [r4, #20]
 80088da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80088dc:	ab01      	add	r3, sp, #4
 80088de:	466a      	mov	r2, sp
 80088e0:	f7ff ffc6 	bl	8008870 <__swhatbuf_r>
 80088e4:	9900      	ldr	r1, [sp, #0]
 80088e6:	0007      	movs	r7, r0
 80088e8:	0028      	movs	r0, r5
 80088ea:	f000 fcab 	bl	8009244 <_malloc_r>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d108      	bne.n	8008904 <__smakebuf_r+0x44>
 80088f2:	220c      	movs	r2, #12
 80088f4:	5ea3      	ldrsh	r3, [r4, r2]
 80088f6:	059a      	lsls	r2, r3, #22
 80088f8:	d4ef      	bmi.n	80088da <__smakebuf_r+0x1a>
 80088fa:	2203      	movs	r2, #3
 80088fc:	4393      	bics	r3, r2
 80088fe:	431e      	orrs	r6, r3
 8008900:	81a6      	strh	r6, [r4, #12]
 8008902:	e7e4      	b.n	80088ce <__smakebuf_r+0xe>
 8008904:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <__smakebuf_r+0x84>)
 8008906:	62ab      	str	r3, [r5, #40]	; 0x28
 8008908:	2380      	movs	r3, #128	; 0x80
 800890a:	89a2      	ldrh	r2, [r4, #12]
 800890c:	6020      	str	r0, [r4, #0]
 800890e:	4313      	orrs	r3, r2
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	9b00      	ldr	r3, [sp, #0]
 8008914:	6120      	str	r0, [r4, #16]
 8008916:	6163      	str	r3, [r4, #20]
 8008918:	9b01      	ldr	r3, [sp, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00d      	beq.n	800893a <__smakebuf_r+0x7a>
 800891e:	230e      	movs	r3, #14
 8008920:	5ee1      	ldrsh	r1, [r4, r3]
 8008922:	0028      	movs	r0, r5
 8008924:	f001 f83e 	bl	80099a4 <_isatty_r>
 8008928:	2800      	cmp	r0, #0
 800892a:	d006      	beq.n	800893a <__smakebuf_r+0x7a>
 800892c:	2203      	movs	r2, #3
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	4393      	bics	r3, r2
 8008932:	001a      	movs	r2, r3
 8008934:	2301      	movs	r3, #1
 8008936:	4313      	orrs	r3, r2
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	89a0      	ldrh	r0, [r4, #12]
 800893c:	4338      	orrs	r0, r7
 800893e:	81a0      	strh	r0, [r4, #12]
 8008940:	e7cb      	b.n	80088da <__smakebuf_r+0x1a>
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	08008089 	.word	0x08008089

08008948 <malloc>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4b03      	ldr	r3, [pc, #12]	; (8008958 <malloc+0x10>)
 800894c:	0001      	movs	r1, r0
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	f000 fc78 	bl	8009244 <_malloc_r>
 8008954:	bd10      	pop	{r4, pc}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	2000000c 	.word	0x2000000c

0800895c <__ascii_mbtowc>:
 800895c:	b082      	sub	sp, #8
 800895e:	2900      	cmp	r1, #0
 8008960:	d100      	bne.n	8008964 <__ascii_mbtowc+0x8>
 8008962:	a901      	add	r1, sp, #4
 8008964:	1e10      	subs	r0, r2, #0
 8008966:	d006      	beq.n	8008976 <__ascii_mbtowc+0x1a>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d006      	beq.n	800897a <__ascii_mbtowc+0x1e>
 800896c:	7813      	ldrb	r3, [r2, #0]
 800896e:	600b      	str	r3, [r1, #0]
 8008970:	7810      	ldrb	r0, [r2, #0]
 8008972:	1e43      	subs	r3, r0, #1
 8008974:	4198      	sbcs	r0, r3
 8008976:	b002      	add	sp, #8
 8008978:	4770      	bx	lr
 800897a:	2002      	movs	r0, #2
 800897c:	4240      	negs	r0, r0
 800897e:	e7fa      	b.n	8008976 <__ascii_mbtowc+0x1a>

08008980 <memchr>:
 8008980:	b2c9      	uxtb	r1, r1
 8008982:	1882      	adds	r2, r0, r2
 8008984:	4290      	cmp	r0, r2
 8008986:	d101      	bne.n	800898c <memchr+0xc>
 8008988:	2000      	movs	r0, #0
 800898a:	4770      	bx	lr
 800898c:	7803      	ldrb	r3, [r0, #0]
 800898e:	428b      	cmp	r3, r1
 8008990:	d0fb      	beq.n	800898a <memchr+0xa>
 8008992:	3001      	adds	r0, #1
 8008994:	e7f6      	b.n	8008984 <memchr+0x4>

08008996 <memcpy>:
 8008996:	2300      	movs	r3, #0
 8008998:	b510      	push	{r4, lr}
 800899a:	429a      	cmp	r2, r3
 800899c:	d100      	bne.n	80089a0 <memcpy+0xa>
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	5ccc      	ldrb	r4, [r1, r3]
 80089a2:	54c4      	strb	r4, [r0, r3]
 80089a4:	3301      	adds	r3, #1
 80089a6:	e7f8      	b.n	800899a <memcpy+0x4>

080089a8 <_Balloc>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089ac:	0004      	movs	r4, r0
 80089ae:	000d      	movs	r5, r1
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	d107      	bne.n	80089c4 <_Balloc+0x1c>
 80089b4:	2010      	movs	r0, #16
 80089b6:	f7ff ffc7 	bl	8008948 <malloc>
 80089ba:	6260      	str	r0, [r4, #36]	; 0x24
 80089bc:	6046      	str	r6, [r0, #4]
 80089be:	6086      	str	r6, [r0, #8]
 80089c0:	6006      	str	r6, [r0, #0]
 80089c2:	60c6      	str	r6, [r0, #12]
 80089c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089c6:	68f3      	ldr	r3, [r6, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d013      	beq.n	80089f4 <_Balloc+0x4c>
 80089cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ce:	00aa      	lsls	r2, r5, #2
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	189b      	adds	r3, r3, r2
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d118      	bne.n	8008a0c <_Balloc+0x64>
 80089da:	2101      	movs	r1, #1
 80089dc:	000e      	movs	r6, r1
 80089de:	40ae      	lsls	r6, r5
 80089e0:	1d72      	adds	r2, r6, #5
 80089e2:	0092      	lsls	r2, r2, #2
 80089e4:	0020      	movs	r0, r4
 80089e6:	f000 fbd4 	bl	8009192 <_calloc_r>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d00c      	beq.n	8008a08 <_Balloc+0x60>
 80089ee:	6045      	str	r5, [r0, #4]
 80089f0:	6086      	str	r6, [r0, #8]
 80089f2:	e00d      	b.n	8008a10 <_Balloc+0x68>
 80089f4:	2221      	movs	r2, #33	; 0x21
 80089f6:	2104      	movs	r1, #4
 80089f8:	0020      	movs	r0, r4
 80089fa:	f000 fbca 	bl	8009192 <_calloc_r>
 80089fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a00:	60f0      	str	r0, [r6, #12]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e1      	bne.n	80089cc <_Balloc+0x24>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	6802      	ldr	r2, [r0, #0]
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	6103      	str	r3, [r0, #16]
 8008a14:	60c3      	str	r3, [r0, #12]
 8008a16:	e7f8      	b.n	8008a0a <_Balloc+0x62>

08008a18 <_Bfree>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a1c:	0006      	movs	r6, r0
 8008a1e:	000d      	movs	r5, r1
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d107      	bne.n	8008a34 <_Bfree+0x1c>
 8008a24:	2010      	movs	r0, #16
 8008a26:	f7ff ff8f 	bl	8008948 <malloc>
 8008a2a:	6270      	str	r0, [r6, #36]	; 0x24
 8008a2c:	6044      	str	r4, [r0, #4]
 8008a2e:	6084      	str	r4, [r0, #8]
 8008a30:	6004      	str	r4, [r0, #0]
 8008a32:	60c4      	str	r4, [r0, #12]
 8008a34:	2d00      	cmp	r5, #0
 8008a36:	d007      	beq.n	8008a48 <_Bfree+0x30>
 8008a38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a3a:	686a      	ldr	r2, [r5, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	0092      	lsls	r2, r2, #2
 8008a40:	189b      	adds	r3, r3, r2
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	602a      	str	r2, [r5, #0]
 8008a46:	601d      	str	r5, [r3, #0]
 8008a48:	bd70      	pop	{r4, r5, r6, pc}

08008a4a <__multadd>:
 8008a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a4c:	001e      	movs	r6, r3
 8008a4e:	2314      	movs	r3, #20
 8008a50:	469c      	mov	ip, r3
 8008a52:	0007      	movs	r7, r0
 8008a54:	000c      	movs	r4, r1
 8008a56:	2000      	movs	r0, #0
 8008a58:	690d      	ldr	r5, [r1, #16]
 8008a5a:	448c      	add	ip, r1
 8008a5c:	4663      	mov	r3, ip
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3001      	adds	r0, #1
 8008a62:	b299      	uxth	r1, r3
 8008a64:	4663      	mov	r3, ip
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4351      	muls	r1, r2
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	4353      	muls	r3, r2
 8008a6e:	1989      	adds	r1, r1, r6
 8008a70:	0c0e      	lsrs	r6, r1, #16
 8008a72:	199b      	adds	r3, r3, r6
 8008a74:	b289      	uxth	r1, r1
 8008a76:	0c1e      	lsrs	r6, r3, #16
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	185b      	adds	r3, r3, r1
 8008a7c:	4661      	mov	r1, ip
 8008a7e:	c108      	stmia	r1!, {r3}
 8008a80:	468c      	mov	ip, r1
 8008a82:	4285      	cmp	r5, r0
 8008a84:	dcea      	bgt.n	8008a5c <__multadd+0x12>
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	d01b      	beq.n	8008ac2 <__multadd+0x78>
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	dc12      	bgt.n	8008ab6 <__multadd+0x6c>
 8008a90:	6863      	ldr	r3, [r4, #4]
 8008a92:	0038      	movs	r0, r7
 8008a94:	1c59      	adds	r1, r3, #1
 8008a96:	f7ff ff87 	bl	80089a8 <_Balloc>
 8008a9a:	0021      	movs	r1, r4
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	9001      	str	r0, [sp, #4]
 8008aa0:	1c9a      	adds	r2, r3, #2
 8008aa2:	0092      	lsls	r2, r2, #2
 8008aa4:	310c      	adds	r1, #12
 8008aa6:	300c      	adds	r0, #12
 8008aa8:	f7ff ff75 	bl	8008996 <memcpy>
 8008aac:	0021      	movs	r1, r4
 8008aae:	0038      	movs	r0, r7
 8008ab0:	f7ff ffb2 	bl	8008a18 <_Bfree>
 8008ab4:	9c01      	ldr	r4, [sp, #4]
 8008ab6:	1d2b      	adds	r3, r5, #4
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	18e3      	adds	r3, r4, r3
 8008abc:	3501      	adds	r5, #1
 8008abe:	605e      	str	r6, [r3, #4]
 8008ac0:	6125      	str	r5, [r4, #16]
 8008ac2:	0020      	movs	r0, r4
 8008ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008ac6 <__s2b>:
 8008ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac8:	0006      	movs	r6, r0
 8008aca:	0018      	movs	r0, r3
 8008acc:	000c      	movs	r4, r1
 8008ace:	3008      	adds	r0, #8
 8008ad0:	2109      	movs	r1, #9
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	0015      	movs	r5, r2
 8008ad6:	f7f7 fbb3 	bl	8000240 <__divsi3>
 8008ada:	2301      	movs	r3, #1
 8008adc:	2100      	movs	r1, #0
 8008ade:	4283      	cmp	r3, r0
 8008ae0:	db1f      	blt.n	8008b22 <__s2b+0x5c>
 8008ae2:	0030      	movs	r0, r6
 8008ae4:	f7ff ff60 	bl	80089a8 <_Balloc>
 8008ae8:	9b08      	ldr	r3, [sp, #32]
 8008aea:	6143      	str	r3, [r0, #20]
 8008aec:	2301      	movs	r3, #1
 8008aee:	6103      	str	r3, [r0, #16]
 8008af0:	2d09      	cmp	r5, #9
 8008af2:	dd19      	ble.n	8008b28 <__s2b+0x62>
 8008af4:	0023      	movs	r3, r4
 8008af6:	3309      	adds	r3, #9
 8008af8:	001f      	movs	r7, r3
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	1964      	adds	r4, r4, r5
 8008afe:	783b      	ldrb	r3, [r7, #0]
 8008b00:	0001      	movs	r1, r0
 8008b02:	3b30      	subs	r3, #48	; 0x30
 8008b04:	220a      	movs	r2, #10
 8008b06:	0030      	movs	r0, r6
 8008b08:	3701      	adds	r7, #1
 8008b0a:	f7ff ff9e 	bl	8008a4a <__multadd>
 8008b0e:	42a7      	cmp	r7, r4
 8008b10:	d1f5      	bne.n	8008afe <__s2b+0x38>
 8008b12:	9b00      	ldr	r3, [sp, #0]
 8008b14:	195c      	adds	r4, r3, r5
 8008b16:	3c08      	subs	r4, #8
 8008b18:	002f      	movs	r7, r5
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	429f      	cmp	r7, r3
 8008b1e:	db06      	blt.n	8008b2e <__s2b+0x68>
 8008b20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	3101      	adds	r1, #1
 8008b26:	e7da      	b.n	8008ade <__s2b+0x18>
 8008b28:	340a      	adds	r4, #10
 8008b2a:	2509      	movs	r5, #9
 8008b2c:	e7f4      	b.n	8008b18 <__s2b+0x52>
 8008b2e:	1b63      	subs	r3, r4, r5
 8008b30:	5ddb      	ldrb	r3, [r3, r7]
 8008b32:	0001      	movs	r1, r0
 8008b34:	3b30      	subs	r3, #48	; 0x30
 8008b36:	220a      	movs	r2, #10
 8008b38:	0030      	movs	r0, r6
 8008b3a:	f7ff ff86 	bl	8008a4a <__multadd>
 8008b3e:	3701      	adds	r7, #1
 8008b40:	e7eb      	b.n	8008b1a <__s2b+0x54>

08008b42 <__hi0bits>:
 8008b42:	0003      	movs	r3, r0
 8008b44:	0c02      	lsrs	r2, r0, #16
 8008b46:	2000      	movs	r0, #0
 8008b48:	4282      	cmp	r2, r0
 8008b4a:	d101      	bne.n	8008b50 <__hi0bits+0xe>
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	3010      	adds	r0, #16
 8008b50:	0e1a      	lsrs	r2, r3, #24
 8008b52:	d101      	bne.n	8008b58 <__hi0bits+0x16>
 8008b54:	3008      	adds	r0, #8
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	0f1a      	lsrs	r2, r3, #28
 8008b5a:	d101      	bne.n	8008b60 <__hi0bits+0x1e>
 8008b5c:	3004      	adds	r0, #4
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	0f9a      	lsrs	r2, r3, #30
 8008b62:	d101      	bne.n	8008b68 <__hi0bits+0x26>
 8008b64:	3002      	adds	r0, #2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db03      	blt.n	8008b74 <__hi0bits+0x32>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	d400      	bmi.n	8008b74 <__hi0bits+0x32>
 8008b72:	2020      	movs	r0, #32
 8008b74:	4770      	bx	lr

08008b76 <__lo0bits>:
 8008b76:	2207      	movs	r2, #7
 8008b78:	6803      	ldr	r3, [r0, #0]
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	0001      	movs	r1, r0
 8008b7e:	401a      	ands	r2, r3
 8008b80:	d00d      	beq.n	8008b9e <__lo0bits+0x28>
 8008b82:	2401      	movs	r4, #1
 8008b84:	2000      	movs	r0, #0
 8008b86:	4223      	tst	r3, r4
 8008b88:	d105      	bne.n	8008b96 <__lo0bits+0x20>
 8008b8a:	3002      	adds	r0, #2
 8008b8c:	4203      	tst	r3, r0
 8008b8e:	d003      	beq.n	8008b98 <__lo0bits+0x22>
 8008b90:	40e3      	lsrs	r3, r4
 8008b92:	0020      	movs	r0, r4
 8008b94:	600b      	str	r3, [r1, #0]
 8008b96:	bd10      	pop	{r4, pc}
 8008b98:	089b      	lsrs	r3, r3, #2
 8008b9a:	600b      	str	r3, [r1, #0]
 8008b9c:	e7fb      	b.n	8008b96 <__lo0bits+0x20>
 8008b9e:	b29c      	uxth	r4, r3
 8008ba0:	0010      	movs	r0, r2
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d101      	bne.n	8008baa <__lo0bits+0x34>
 8008ba6:	2010      	movs	r0, #16
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	d101      	bne.n	8008bb4 <__lo0bits+0x3e>
 8008bb0:	3008      	adds	r0, #8
 8008bb2:	0a1b      	lsrs	r3, r3, #8
 8008bb4:	071a      	lsls	r2, r3, #28
 8008bb6:	d101      	bne.n	8008bbc <__lo0bits+0x46>
 8008bb8:	3004      	adds	r0, #4
 8008bba:	091b      	lsrs	r3, r3, #4
 8008bbc:	079a      	lsls	r2, r3, #30
 8008bbe:	d101      	bne.n	8008bc4 <__lo0bits+0x4e>
 8008bc0:	3002      	adds	r0, #2
 8008bc2:	089b      	lsrs	r3, r3, #2
 8008bc4:	07da      	lsls	r2, r3, #31
 8008bc6:	d4e8      	bmi.n	8008b9a <__lo0bits+0x24>
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	d001      	beq.n	8008bd0 <__lo0bits+0x5a>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	e7e4      	b.n	8008b9a <__lo0bits+0x24>
 8008bd0:	2020      	movs	r0, #32
 8008bd2:	e7e0      	b.n	8008b96 <__lo0bits+0x20>

08008bd4 <__i2b>:
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	000c      	movs	r4, r1
 8008bd8:	2101      	movs	r1, #1
 8008bda:	f7ff fee5 	bl	80089a8 <_Balloc>
 8008bde:	2301      	movs	r3, #1
 8008be0:	6144      	str	r4, [r0, #20]
 8008be2:	6103      	str	r3, [r0, #16]
 8008be4:	bd10      	pop	{r4, pc}

08008be6 <__multiply>:
 8008be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be8:	690b      	ldr	r3, [r1, #16]
 8008bea:	0014      	movs	r4, r2
 8008bec:	6912      	ldr	r2, [r2, #16]
 8008bee:	b089      	sub	sp, #36	; 0x24
 8008bf0:	000d      	movs	r5, r1
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	da01      	bge.n	8008bfa <__multiply+0x14>
 8008bf6:	0025      	movs	r5, r4
 8008bf8:	000c      	movs	r4, r1
 8008bfa:	692f      	ldr	r7, [r5, #16]
 8008bfc:	6926      	ldr	r6, [r4, #16]
 8008bfe:	6869      	ldr	r1, [r5, #4]
 8008c00:	19bb      	adds	r3, r7, r6
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	68ab      	ldr	r3, [r5, #8]
 8008c06:	19ba      	adds	r2, r7, r6
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	da00      	bge.n	8008c0e <__multiply+0x28>
 8008c0c:	3101      	adds	r1, #1
 8008c0e:	f7ff fecb 	bl	80089a8 <_Balloc>
 8008c12:	0002      	movs	r2, r0
 8008c14:	19bb      	adds	r3, r7, r6
 8008c16:	3214      	adds	r2, #20
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	18d3      	adds	r3, r2, r3
 8008c1c:	469c      	mov	ip, r3
 8008c1e:	2100      	movs	r1, #0
 8008c20:	0013      	movs	r3, r2
 8008c22:	9004      	str	r0, [sp, #16]
 8008c24:	4563      	cmp	r3, ip
 8008c26:	d31d      	bcc.n	8008c64 <__multiply+0x7e>
 8008c28:	3514      	adds	r5, #20
 8008c2a:	00bf      	lsls	r7, r7, #2
 8008c2c:	19eb      	adds	r3, r5, r7
 8008c2e:	3414      	adds	r4, #20
 8008c30:	00b6      	lsls	r6, r6, #2
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	19a3      	adds	r3, r4, r6
 8008c36:	9503      	str	r5, [sp, #12]
 8008c38:	9401      	str	r4, [sp, #4]
 8008c3a:	9307      	str	r3, [sp, #28]
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	9901      	ldr	r1, [sp, #4]
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d311      	bcc.n	8008c68 <__multiply+0x82>
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dd06      	ble.n	8008c58 <__multiply+0x72>
 8008c4a:	2304      	movs	r3, #4
 8008c4c:	425b      	negs	r3, r3
 8008c4e:	449c      	add	ip, r3
 8008c50:	4663      	mov	r3, ip
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d051      	beq.n	8008cfc <__multiply+0x116>
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	9a02      	ldr	r2, [sp, #8]
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	611a      	str	r2, [r3, #16]
 8008c60:	b009      	add	sp, #36	; 0x24
 8008c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c64:	c302      	stmia	r3!, {r1}
 8008c66:	e7dd      	b.n	8008c24 <__multiply+0x3e>
 8008c68:	9b01      	ldr	r3, [sp, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	b298      	uxth	r0, r3
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d01c      	beq.n	8008cac <__multiply+0xc6>
 8008c72:	0015      	movs	r5, r2
 8008c74:	2600      	movs	r6, #0
 8008c76:	9f03      	ldr	r7, [sp, #12]
 8008c78:	cf02      	ldmia	r7!, {r1}
 8008c7a:	682c      	ldr	r4, [r5, #0]
 8008c7c:	b28b      	uxth	r3, r1
 8008c7e:	4343      	muls	r3, r0
 8008c80:	0c09      	lsrs	r1, r1, #16
 8008c82:	4341      	muls	r1, r0
 8008c84:	b2a4      	uxth	r4, r4
 8008c86:	191b      	adds	r3, r3, r4
 8008c88:	199b      	adds	r3, r3, r6
 8008c8a:	000e      	movs	r6, r1
 8008c8c:	6829      	ldr	r1, [r5, #0]
 8008c8e:	9506      	str	r5, [sp, #24]
 8008c90:	0c09      	lsrs	r1, r1, #16
 8008c92:	1871      	adds	r1, r6, r1
 8008c94:	0c1e      	lsrs	r6, r3, #16
 8008c96:	1989      	adds	r1, r1, r6
 8008c98:	0c0e      	lsrs	r6, r1, #16
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	0409      	lsls	r1, r1, #16
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	c508      	stmia	r5!, {r3}
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	42bb      	cmp	r3, r7
 8008ca6:	d8e7      	bhi.n	8008c78 <__multiply+0x92>
 8008ca8:	9b06      	ldr	r3, [sp, #24]
 8008caa:	605e      	str	r6, [r3, #4]
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	0c1d      	lsrs	r5, r3, #16
 8008cb2:	d01e      	beq.n	8008cf2 <__multiply+0x10c>
 8008cb4:	0010      	movs	r0, r2
 8008cb6:	2700      	movs	r7, #0
 8008cb8:	6813      	ldr	r3, [r2, #0]
 8008cba:	9e03      	ldr	r6, [sp, #12]
 8008cbc:	6831      	ldr	r1, [r6, #0]
 8008cbe:	6804      	ldr	r4, [r0, #0]
 8008cc0:	b289      	uxth	r1, r1
 8008cc2:	4369      	muls	r1, r5
 8008cc4:	0c24      	lsrs	r4, r4, #16
 8008cc6:	1909      	adds	r1, r1, r4
 8008cc8:	19c9      	adds	r1, r1, r7
 8008cca:	040f      	lsls	r7, r1, #16
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	433b      	orrs	r3, r7
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	ce80      	ldmia	r6!, {r7}
 8008cd4:	6843      	ldr	r3, [r0, #4]
 8008cd6:	0c3f      	lsrs	r7, r7, #16
 8008cd8:	436f      	muls	r7, r5
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	0c09      	lsrs	r1, r1, #16
 8008ce0:	185b      	adds	r3, r3, r1
 8008ce2:	9905      	ldr	r1, [sp, #20]
 8008ce4:	9006      	str	r0, [sp, #24]
 8008ce6:	0c1f      	lsrs	r7, r3, #16
 8008ce8:	3004      	adds	r0, #4
 8008cea:	42b1      	cmp	r1, r6
 8008cec:	d8e6      	bhi.n	8008cbc <__multiply+0xd6>
 8008cee:	9906      	ldr	r1, [sp, #24]
 8008cf0:	604b      	str	r3, [r1, #4]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	3204      	adds	r2, #4
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	e79f      	b.n	8008c3c <__multiply+0x56>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	9302      	str	r3, [sp, #8]
 8008d02:	e79f      	b.n	8008c44 <__multiply+0x5e>

08008d04 <__pow5mult>:
 8008d04:	2303      	movs	r3, #3
 8008d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d08:	4013      	ands	r3, r2
 8008d0a:	0005      	movs	r5, r0
 8008d0c:	000e      	movs	r6, r1
 8008d0e:	0014      	movs	r4, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <__pow5mult+0x22>
 8008d14:	4922      	ldr	r1, [pc, #136]	; (8008da0 <__pow5mult+0x9c>)
 8008d16:	3b01      	subs	r3, #1
 8008d18:	009a      	lsls	r2, r3, #2
 8008d1a:	5852      	ldr	r2, [r2, r1]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	0031      	movs	r1, r6
 8008d20:	f7ff fe93 	bl	8008a4a <__multadd>
 8008d24:	0006      	movs	r6, r0
 8008d26:	10a3      	asrs	r3, r4, #2
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	d036      	beq.n	8008d9a <__pow5mult+0x96>
 8008d2c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d107      	bne.n	8008d42 <__pow5mult+0x3e>
 8008d32:	2010      	movs	r0, #16
 8008d34:	f7ff fe08 	bl	8008948 <malloc>
 8008d38:	6268      	str	r0, [r5, #36]	; 0x24
 8008d3a:	6044      	str	r4, [r0, #4]
 8008d3c:	6084      	str	r4, [r0, #8]
 8008d3e:	6004      	str	r4, [r0, #0]
 8008d40:	60c4      	str	r4, [r0, #12]
 8008d42:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008d44:	68bc      	ldr	r4, [r7, #8]
 8008d46:	2c00      	cmp	r4, #0
 8008d48:	d107      	bne.n	8008d5a <__pow5mult+0x56>
 8008d4a:	4916      	ldr	r1, [pc, #88]	; (8008da4 <__pow5mult+0xa0>)
 8008d4c:	0028      	movs	r0, r5
 8008d4e:	f7ff ff41 	bl	8008bd4 <__i2b>
 8008d52:	2300      	movs	r3, #0
 8008d54:	0004      	movs	r4, r0
 8008d56:	60b8      	str	r0, [r7, #8]
 8008d58:	6003      	str	r3, [r0, #0]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	4213      	tst	r3, r2
 8008d60:	d00a      	beq.n	8008d78 <__pow5mult+0x74>
 8008d62:	0031      	movs	r1, r6
 8008d64:	0022      	movs	r2, r4
 8008d66:	0028      	movs	r0, r5
 8008d68:	f7ff ff3d 	bl	8008be6 <__multiply>
 8008d6c:	0007      	movs	r7, r0
 8008d6e:	0031      	movs	r1, r6
 8008d70:	0028      	movs	r0, r5
 8008d72:	f7ff fe51 	bl	8008a18 <_Bfree>
 8008d76:	003e      	movs	r6, r7
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	105b      	asrs	r3, r3, #1
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	d00c      	beq.n	8008d9a <__pow5mult+0x96>
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d107      	bne.n	8008d96 <__pow5mult+0x92>
 8008d86:	0022      	movs	r2, r4
 8008d88:	0021      	movs	r1, r4
 8008d8a:	0028      	movs	r0, r5
 8008d8c:	f7ff ff2b 	bl	8008be6 <__multiply>
 8008d90:	2300      	movs	r3, #0
 8008d92:	6020      	str	r0, [r4, #0]
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	0004      	movs	r4, r0
 8008d98:	e7df      	b.n	8008d5a <__pow5mult+0x56>
 8008d9a:	0030      	movs	r0, r6
 8008d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	08009df0 	.word	0x08009df0
 8008da4:	00000271 	.word	0x00000271

08008da8 <__lshift>:
 8008da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008daa:	000d      	movs	r5, r1
 8008dac:	0017      	movs	r7, r2
 8008dae:	692b      	ldr	r3, [r5, #16]
 8008db0:	1154      	asrs	r4, r2, #5
 8008db2:	b085      	sub	sp, #20
 8008db4:	18e3      	adds	r3, r4, r3
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	3301      	adds	r3, #1
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	6849      	ldr	r1, [r1, #4]
 8008dbe:	68ab      	ldr	r3, [r5, #8]
 8008dc0:	9002      	str	r0, [sp, #8]
 8008dc2:	9a00      	ldr	r2, [sp, #0]
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	db35      	blt.n	8008e34 <__lshift+0x8c>
 8008dc8:	9802      	ldr	r0, [sp, #8]
 8008dca:	f7ff fded 	bl	80089a8 <_Balloc>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	0002      	movs	r2, r0
 8008dd2:	0006      	movs	r6, r0
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	3214      	adds	r2, #20
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	db2e      	blt.n	8008e3a <__lshift+0x92>
 8008ddc:	43e3      	mvns	r3, r4
 8008dde:	17db      	asrs	r3, r3, #31
 8008de0:	401c      	ands	r4, r3
 8008de2:	002b      	movs	r3, r5
 8008de4:	00a4      	lsls	r4, r4, #2
 8008de6:	1914      	adds	r4, r2, r4
 8008de8:	692a      	ldr	r2, [r5, #16]
 8008dea:	3314      	adds	r3, #20
 8008dec:	0092      	lsls	r2, r2, #2
 8008dee:	189a      	adds	r2, r3, r2
 8008df0:	4694      	mov	ip, r2
 8008df2:	221f      	movs	r2, #31
 8008df4:	4017      	ands	r7, r2
 8008df6:	d024      	beq.n	8008e42 <__lshift+0x9a>
 8008df8:	3201      	adds	r2, #1
 8008dfa:	1bd2      	subs	r2, r2, r7
 8008dfc:	9203      	str	r2, [sp, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6819      	ldr	r1, [r3, #0]
 8008e02:	0020      	movs	r0, r4
 8008e04:	40b9      	lsls	r1, r7
 8008e06:	430a      	orrs	r2, r1
 8008e08:	c404      	stmia	r4!, {r2}
 8008e0a:	cb04      	ldmia	r3!, {r2}
 8008e0c:	9903      	ldr	r1, [sp, #12]
 8008e0e:	40ca      	lsrs	r2, r1
 8008e10:	459c      	cmp	ip, r3
 8008e12:	d8f5      	bhi.n	8008e00 <__lshift+0x58>
 8008e14:	6042      	str	r2, [r0, #4]
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	d002      	beq.n	8008e20 <__lshift+0x78>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	9b00      	ldr	r3, [sp, #0]
 8008e22:	9802      	ldr	r0, [sp, #8]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	6133      	str	r3, [r6, #16]
 8008e28:	0029      	movs	r1, r5
 8008e2a:	f7ff fdf5 	bl	8008a18 <_Bfree>
 8008e2e:	0030      	movs	r0, r6
 8008e30:	b005      	add	sp, #20
 8008e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e34:	3101      	adds	r1, #1
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	e7c3      	b.n	8008dc2 <__lshift+0x1a>
 8008e3a:	0098      	lsls	r0, r3, #2
 8008e3c:	5011      	str	r1, [r2, r0]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	e7ca      	b.n	8008dd8 <__lshift+0x30>
 8008e42:	cb04      	ldmia	r3!, {r2}
 8008e44:	c404      	stmia	r4!, {r2}
 8008e46:	459c      	cmp	ip, r3
 8008e48:	d8fb      	bhi.n	8008e42 <__lshift+0x9a>
 8008e4a:	e7e9      	b.n	8008e20 <__lshift+0x78>

08008e4c <__mcmp>:
 8008e4c:	690a      	ldr	r2, [r1, #16]
 8008e4e:	6903      	ldr	r3, [r0, #16]
 8008e50:	b530      	push	{r4, r5, lr}
 8008e52:	1a9b      	subs	r3, r3, r2
 8008e54:	d10d      	bne.n	8008e72 <__mcmp+0x26>
 8008e56:	0092      	lsls	r2, r2, #2
 8008e58:	3014      	adds	r0, #20
 8008e5a:	3114      	adds	r1, #20
 8008e5c:	1884      	adds	r4, r0, r2
 8008e5e:	1889      	adds	r1, r1, r2
 8008e60:	3c04      	subs	r4, #4
 8008e62:	3904      	subs	r1, #4
 8008e64:	6825      	ldr	r5, [r4, #0]
 8008e66:	680a      	ldr	r2, [r1, #0]
 8008e68:	4295      	cmp	r5, r2
 8008e6a:	d004      	beq.n	8008e76 <__mcmp+0x2a>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4295      	cmp	r5, r2
 8008e70:	d304      	bcc.n	8008e7c <__mcmp+0x30>
 8008e72:	0018      	movs	r0, r3
 8008e74:	bd30      	pop	{r4, r5, pc}
 8008e76:	42a0      	cmp	r0, r4
 8008e78:	d3f2      	bcc.n	8008e60 <__mcmp+0x14>
 8008e7a:	e7fa      	b.n	8008e72 <__mcmp+0x26>
 8008e7c:	425b      	negs	r3, r3
 8008e7e:	e7f8      	b.n	8008e72 <__mcmp+0x26>

08008e80 <__mdiff>:
 8008e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e82:	000d      	movs	r5, r1
 8008e84:	b085      	sub	sp, #20
 8008e86:	0007      	movs	r7, r0
 8008e88:	0011      	movs	r1, r2
 8008e8a:	0028      	movs	r0, r5
 8008e8c:	0014      	movs	r4, r2
 8008e8e:	f7ff ffdd 	bl	8008e4c <__mcmp>
 8008e92:	1e06      	subs	r6, r0, #0
 8008e94:	d108      	bne.n	8008ea8 <__mdiff+0x28>
 8008e96:	0001      	movs	r1, r0
 8008e98:	0038      	movs	r0, r7
 8008e9a:	f7ff fd85 	bl	80089a8 <_Balloc>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	6146      	str	r6, [r0, #20]
 8008ea2:	6103      	str	r3, [r0, #16]
 8008ea4:	b005      	add	sp, #20
 8008ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	9301      	str	r3, [sp, #4]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	db04      	blt.n	8008eba <__mdiff+0x3a>
 8008eb0:	0023      	movs	r3, r4
 8008eb2:	002c      	movs	r4, r5
 8008eb4:	001d      	movs	r5, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	6861      	ldr	r1, [r4, #4]
 8008ebc:	0038      	movs	r0, r7
 8008ebe:	f7ff fd73 	bl	80089a8 <_Balloc>
 8008ec2:	002f      	movs	r7, r5
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	6926      	ldr	r6, [r4, #16]
 8008eca:	60c3      	str	r3, [r0, #12]
 8008ecc:	3414      	adds	r4, #20
 8008ece:	00b3      	lsls	r3, r6, #2
 8008ed0:	18e3      	adds	r3, r4, r3
 8008ed2:	9302      	str	r3, [sp, #8]
 8008ed4:	692b      	ldr	r3, [r5, #16]
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	18fb      	adds	r3, r7, r3
 8008edc:	9303      	str	r3, [sp, #12]
 8008ede:	0003      	movs	r3, r0
 8008ee0:	4694      	mov	ip, r2
 8008ee2:	3314      	adds	r3, #20
 8008ee4:	cc20      	ldmia	r4!, {r5}
 8008ee6:	cf04      	ldmia	r7!, {r2}
 8008ee8:	9201      	str	r2, [sp, #4]
 8008eea:	b2aa      	uxth	r2, r5
 8008eec:	4494      	add	ip, r2
 8008eee:	466a      	mov	r2, sp
 8008ef0:	4661      	mov	r1, ip
 8008ef2:	8892      	ldrh	r2, [r2, #4]
 8008ef4:	0c2d      	lsrs	r5, r5, #16
 8008ef6:	1a8a      	subs	r2, r1, r2
 8008ef8:	9901      	ldr	r1, [sp, #4]
 8008efa:	0c09      	lsrs	r1, r1, #16
 8008efc:	1a69      	subs	r1, r5, r1
 8008efe:	1415      	asrs	r5, r2, #16
 8008f00:	1949      	adds	r1, r1, r5
 8008f02:	140d      	asrs	r5, r1, #16
 8008f04:	b292      	uxth	r2, r2
 8008f06:	0409      	lsls	r1, r1, #16
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	9a03      	ldr	r2, [sp, #12]
 8008f0e:	46ac      	mov	ip, r5
 8008f10:	3304      	adds	r3, #4
 8008f12:	42ba      	cmp	r2, r7
 8008f14:	d8e6      	bhi.n	8008ee4 <__mdiff+0x64>
 8008f16:	9902      	ldr	r1, [sp, #8]
 8008f18:	001a      	movs	r2, r3
 8008f1a:	428c      	cmp	r4, r1
 8008f1c:	d305      	bcc.n	8008f2a <__mdiff+0xaa>
 8008f1e:	3a04      	subs	r2, #4
 8008f20:	6813      	ldr	r3, [r2, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00e      	beq.n	8008f44 <__mdiff+0xc4>
 8008f26:	6106      	str	r6, [r0, #16]
 8008f28:	e7bc      	b.n	8008ea4 <__mdiff+0x24>
 8008f2a:	cc04      	ldmia	r4!, {r2}
 8008f2c:	b291      	uxth	r1, r2
 8008f2e:	4461      	add	r1, ip
 8008f30:	140d      	asrs	r5, r1, #16
 8008f32:	0c12      	lsrs	r2, r2, #16
 8008f34:	1952      	adds	r2, r2, r5
 8008f36:	1415      	asrs	r5, r2, #16
 8008f38:	b289      	uxth	r1, r1
 8008f3a:	0412      	lsls	r2, r2, #16
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	46ac      	mov	ip, r5
 8008f40:	c304      	stmia	r3!, {r2}
 8008f42:	e7e8      	b.n	8008f16 <__mdiff+0x96>
 8008f44:	3e01      	subs	r6, #1
 8008f46:	e7ea      	b.n	8008f1e <__mdiff+0x9e>

08008f48 <__ulp>:
 8008f48:	000b      	movs	r3, r1
 8008f4a:	4910      	ldr	r1, [pc, #64]	; (8008f8c <__ulp+0x44>)
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	4019      	ands	r1, r3
 8008f50:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <__ulp+0x48>)
 8008f52:	18c9      	adds	r1, r1, r3
 8008f54:	2900      	cmp	r1, #0
 8008f56:	dd04      	ble.n	8008f62 <__ulp+0x1a>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	000b      	movs	r3, r1
 8008f5c:	0010      	movs	r0, r2
 8008f5e:	0019      	movs	r1, r3
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	4249      	negs	r1, r1
 8008f64:	1509      	asrs	r1, r1, #20
 8008f66:	2200      	movs	r2, #0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2913      	cmp	r1, #19
 8008f6c:	dc04      	bgt.n	8008f78 <__ulp+0x30>
 8008f6e:	2080      	movs	r0, #128	; 0x80
 8008f70:	0300      	lsls	r0, r0, #12
 8008f72:	4108      	asrs	r0, r1
 8008f74:	0003      	movs	r3, r0
 8008f76:	e7f1      	b.n	8008f5c <__ulp+0x14>
 8008f78:	3914      	subs	r1, #20
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	291e      	cmp	r1, #30
 8008f7e:	dc02      	bgt.n	8008f86 <__ulp+0x3e>
 8008f80:	241f      	movs	r4, #31
 8008f82:	1a61      	subs	r1, r4, r1
 8008f84:	4088      	lsls	r0, r1
 8008f86:	0002      	movs	r2, r0
 8008f88:	e7e8      	b.n	8008f5c <__ulp+0x14>
 8008f8a:	46c0      	nop			; (mov r8, r8)
 8008f8c:	7ff00000 	.word	0x7ff00000
 8008f90:	fcc00000 	.word	0xfcc00000

08008f94 <__b2d>:
 8008f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f96:	0006      	movs	r6, r0
 8008f98:	6903      	ldr	r3, [r0, #16]
 8008f9a:	3614      	adds	r6, #20
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	18f3      	adds	r3, r6, r3
 8008fa0:	1f1d      	subs	r5, r3, #4
 8008fa2:	682c      	ldr	r4, [r5, #0]
 8008fa4:	000f      	movs	r7, r1
 8008fa6:	0020      	movs	r0, r4
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	f7ff fdca 	bl	8008b42 <__hi0bits>
 8008fae:	2320      	movs	r3, #32
 8008fb0:	1a1b      	subs	r3, r3, r0
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	491c      	ldr	r1, [pc, #112]	; (8009028 <__b2d+0x94>)
 8008fb6:	280a      	cmp	r0, #10
 8008fb8:	dc16      	bgt.n	8008fe8 <__b2d+0x54>
 8008fba:	230b      	movs	r3, #11
 8008fbc:	0027      	movs	r7, r4
 8008fbe:	1a1b      	subs	r3, r3, r0
 8008fc0:	40df      	lsrs	r7, r3
 8008fc2:	4339      	orrs	r1, r7
 8008fc4:	469c      	mov	ip, r3
 8008fc6:	000b      	movs	r3, r1
 8008fc8:	2100      	movs	r1, #0
 8008fca:	42ae      	cmp	r6, r5
 8008fcc:	d202      	bcs.n	8008fd4 <__b2d+0x40>
 8008fce:	9901      	ldr	r1, [sp, #4]
 8008fd0:	3908      	subs	r1, #8
 8008fd2:	6809      	ldr	r1, [r1, #0]
 8008fd4:	3015      	adds	r0, #21
 8008fd6:	4084      	lsls	r4, r0
 8008fd8:	4660      	mov	r0, ip
 8008fda:	40c1      	lsrs	r1, r0
 8008fdc:	430c      	orrs	r4, r1
 8008fde:	0022      	movs	r2, r4
 8008fe0:	0010      	movs	r0, r2
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	b003      	add	sp, #12
 8008fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe8:	2700      	movs	r7, #0
 8008fea:	42ae      	cmp	r6, r5
 8008fec:	d202      	bcs.n	8008ff4 <__b2d+0x60>
 8008fee:	9d01      	ldr	r5, [sp, #4]
 8008ff0:	3d08      	subs	r5, #8
 8008ff2:	682f      	ldr	r7, [r5, #0]
 8008ff4:	380b      	subs	r0, #11
 8008ff6:	4684      	mov	ip, r0
 8008ff8:	1e03      	subs	r3, r0, #0
 8008ffa:	d012      	beq.n	8009022 <__b2d+0x8e>
 8008ffc:	409c      	lsls	r4, r3
 8008ffe:	2020      	movs	r0, #32
 8009000:	4321      	orrs	r1, r4
 8009002:	003c      	movs	r4, r7
 8009004:	1ac0      	subs	r0, r0, r3
 8009006:	40c4      	lsrs	r4, r0
 8009008:	4321      	orrs	r1, r4
 800900a:	000b      	movs	r3, r1
 800900c:	2100      	movs	r1, #0
 800900e:	42b5      	cmp	r5, r6
 8009010:	d901      	bls.n	8009016 <__b2d+0x82>
 8009012:	3d04      	subs	r5, #4
 8009014:	6829      	ldr	r1, [r5, #0]
 8009016:	4664      	mov	r4, ip
 8009018:	40c1      	lsrs	r1, r0
 800901a:	40a7      	lsls	r7, r4
 800901c:	430f      	orrs	r7, r1
 800901e:	003a      	movs	r2, r7
 8009020:	e7de      	b.n	8008fe0 <__b2d+0x4c>
 8009022:	4321      	orrs	r1, r4
 8009024:	000b      	movs	r3, r1
 8009026:	e7fa      	b.n	800901e <__b2d+0x8a>
 8009028:	3ff00000 	.word	0x3ff00000

0800902c <__d2b>:
 800902c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800902e:	001d      	movs	r5, r3
 8009030:	2101      	movs	r1, #1
 8009032:	0014      	movs	r4, r2
 8009034:	9f08      	ldr	r7, [sp, #32]
 8009036:	f7ff fcb7 	bl	80089a8 <_Balloc>
 800903a:	032b      	lsls	r3, r5, #12
 800903c:	006d      	lsls	r5, r5, #1
 800903e:	0006      	movs	r6, r0
 8009040:	0b1b      	lsrs	r3, r3, #12
 8009042:	0d6d      	lsrs	r5, r5, #21
 8009044:	d124      	bne.n	8009090 <__d2b+0x64>
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	2c00      	cmp	r4, #0
 800904a:	d027      	beq.n	800909c <__d2b+0x70>
 800904c:	4668      	mov	r0, sp
 800904e:	9400      	str	r4, [sp, #0]
 8009050:	f7ff fd91 	bl	8008b76 <__lo0bits>
 8009054:	9c00      	ldr	r4, [sp, #0]
 8009056:	2800      	cmp	r0, #0
 8009058:	d01e      	beq.n	8009098 <__d2b+0x6c>
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	2120      	movs	r1, #32
 800905e:	001a      	movs	r2, r3
 8009060:	1a09      	subs	r1, r1, r0
 8009062:	408a      	lsls	r2, r1
 8009064:	40c3      	lsrs	r3, r0
 8009066:	4322      	orrs	r2, r4
 8009068:	6172      	str	r2, [r6, #20]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	9c01      	ldr	r4, [sp, #4]
 800906e:	61b4      	str	r4, [r6, #24]
 8009070:	1e63      	subs	r3, r4, #1
 8009072:	419c      	sbcs	r4, r3
 8009074:	3401      	adds	r4, #1
 8009076:	6134      	str	r4, [r6, #16]
 8009078:	2d00      	cmp	r5, #0
 800907a:	d018      	beq.n	80090ae <__d2b+0x82>
 800907c:	4b12      	ldr	r3, [pc, #72]	; (80090c8 <__d2b+0x9c>)
 800907e:	18ed      	adds	r5, r5, r3
 8009080:	2335      	movs	r3, #53	; 0x35
 8009082:	182d      	adds	r5, r5, r0
 8009084:	603d      	str	r5, [r7, #0]
 8009086:	1a18      	subs	r0, r3, r0
 8009088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908a:	6018      	str	r0, [r3, #0]
 800908c:	0030      	movs	r0, r6
 800908e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009090:	2280      	movs	r2, #128	; 0x80
 8009092:	0352      	lsls	r2, r2, #13
 8009094:	4313      	orrs	r3, r2
 8009096:	e7d6      	b.n	8009046 <__d2b+0x1a>
 8009098:	6174      	str	r4, [r6, #20]
 800909a:	e7e7      	b.n	800906c <__d2b+0x40>
 800909c:	a801      	add	r0, sp, #4
 800909e:	f7ff fd6a 	bl	8008b76 <__lo0bits>
 80090a2:	2401      	movs	r4, #1
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	6134      	str	r4, [r6, #16]
 80090a8:	6173      	str	r3, [r6, #20]
 80090aa:	3020      	adds	r0, #32
 80090ac:	e7e4      	b.n	8009078 <__d2b+0x4c>
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <__d2b+0xa0>)
 80090b0:	18c0      	adds	r0, r0, r3
 80090b2:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <__d2b+0xa4>)
 80090b4:	6038      	str	r0, [r7, #0]
 80090b6:	18e3      	adds	r3, r4, r3
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	18f3      	adds	r3, r6, r3
 80090bc:	6958      	ldr	r0, [r3, #20]
 80090be:	f7ff fd40 	bl	8008b42 <__hi0bits>
 80090c2:	0164      	lsls	r4, r4, #5
 80090c4:	1a20      	subs	r0, r4, r0
 80090c6:	e7df      	b.n	8009088 <__d2b+0x5c>
 80090c8:	fffffbcd 	.word	0xfffffbcd
 80090cc:	fffffbce 	.word	0xfffffbce
 80090d0:	3fffffff 	.word	0x3fffffff

080090d4 <__ratio>:
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	b085      	sub	sp, #20
 80090d8:	000f      	movs	r7, r1
 80090da:	a902      	add	r1, sp, #8
 80090dc:	0006      	movs	r6, r0
 80090de:	f7ff ff59 	bl	8008f94 <__b2d>
 80090e2:	0004      	movs	r4, r0
 80090e4:	000d      	movs	r5, r1
 80090e6:	0038      	movs	r0, r7
 80090e8:	a903      	add	r1, sp, #12
 80090ea:	9400      	str	r4, [sp, #0]
 80090ec:	9501      	str	r5, [sp, #4]
 80090ee:	f7ff ff51 	bl	8008f94 <__b2d>
 80090f2:	6936      	ldr	r6, [r6, #16]
 80090f4:	693f      	ldr	r7, [r7, #16]
 80090f6:	0002      	movs	r2, r0
 80090f8:	1bf7      	subs	r7, r6, r7
 80090fa:	017e      	lsls	r6, r7, #5
 80090fc:	46b4      	mov	ip, r6
 80090fe:	9f03      	ldr	r7, [sp, #12]
 8009100:	9e02      	ldr	r6, [sp, #8]
 8009102:	000b      	movs	r3, r1
 8009104:	1bf6      	subs	r6, r6, r7
 8009106:	4466      	add	r6, ip
 8009108:	0537      	lsls	r7, r6, #20
 800910a:	2e00      	cmp	r6, #0
 800910c:	dd07      	ble.n	800911e <__ratio+0x4a>
 800910e:	1979      	adds	r1, r7, r5
 8009110:	9101      	str	r1, [sp, #4]
 8009112:	9800      	ldr	r0, [sp, #0]
 8009114:	9901      	ldr	r1, [sp, #4]
 8009116:	f7f7 fcf7 	bl	8000b08 <__aeabi_ddiv>
 800911a:	b005      	add	sp, #20
 800911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911e:	1bcb      	subs	r3, r1, r7
 8009120:	e7f7      	b.n	8009112 <__ratio+0x3e>

08009122 <__copybits>:
 8009122:	0013      	movs	r3, r2
 8009124:	3901      	subs	r1, #1
 8009126:	b510      	push	{r4, lr}
 8009128:	1149      	asrs	r1, r1, #5
 800912a:	6912      	ldr	r2, [r2, #16]
 800912c:	3101      	adds	r1, #1
 800912e:	0089      	lsls	r1, r1, #2
 8009130:	3314      	adds	r3, #20
 8009132:	0092      	lsls	r2, r2, #2
 8009134:	1841      	adds	r1, r0, r1
 8009136:	189a      	adds	r2, r3, r2
 8009138:	429a      	cmp	r2, r3
 800913a:	d803      	bhi.n	8009144 <__copybits+0x22>
 800913c:	2300      	movs	r3, #0
 800913e:	4281      	cmp	r1, r0
 8009140:	d803      	bhi.n	800914a <__copybits+0x28>
 8009142:	bd10      	pop	{r4, pc}
 8009144:	cb10      	ldmia	r3!, {r4}
 8009146:	c010      	stmia	r0!, {r4}
 8009148:	e7f6      	b.n	8009138 <__copybits+0x16>
 800914a:	c008      	stmia	r0!, {r3}
 800914c:	e7f7      	b.n	800913e <__copybits+0x1c>

0800914e <__any_on>:
 800914e:	0002      	movs	r2, r0
 8009150:	6900      	ldr	r0, [r0, #16]
 8009152:	b510      	push	{r4, lr}
 8009154:	3214      	adds	r2, #20
 8009156:	114b      	asrs	r3, r1, #5
 8009158:	4298      	cmp	r0, r3
 800915a:	db12      	blt.n	8009182 <__any_on+0x34>
 800915c:	dd0b      	ble.n	8009176 <__any_on+0x28>
 800915e:	201f      	movs	r0, #31
 8009160:	4001      	ands	r1, r0
 8009162:	d008      	beq.n	8009176 <__any_on+0x28>
 8009164:	0098      	lsls	r0, r3, #2
 8009166:	5884      	ldr	r4, [r0, r2]
 8009168:	0020      	movs	r0, r4
 800916a:	40c8      	lsrs	r0, r1
 800916c:	4088      	lsls	r0, r1
 800916e:	0001      	movs	r1, r0
 8009170:	2001      	movs	r0, #1
 8009172:	428c      	cmp	r4, r1
 8009174:	d104      	bne.n	8009180 <__any_on+0x32>
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	18d3      	adds	r3, r2, r3
 800917a:	4293      	cmp	r3, r2
 800917c:	d803      	bhi.n	8009186 <__any_on+0x38>
 800917e:	2000      	movs	r0, #0
 8009180:	bd10      	pop	{r4, pc}
 8009182:	0003      	movs	r3, r0
 8009184:	e7f7      	b.n	8009176 <__any_on+0x28>
 8009186:	3b04      	subs	r3, #4
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	2900      	cmp	r1, #0
 800918c:	d0f5      	beq.n	800917a <__any_on+0x2c>
 800918e:	2001      	movs	r0, #1
 8009190:	e7f6      	b.n	8009180 <__any_on+0x32>

08009192 <_calloc_r>:
 8009192:	434a      	muls	r2, r1
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	0011      	movs	r1, r2
 8009198:	0014      	movs	r4, r2
 800919a:	f000 f853 	bl	8009244 <_malloc_r>
 800919e:	1e05      	subs	r5, r0, #0
 80091a0:	d003      	beq.n	80091aa <_calloc_r+0x18>
 80091a2:	0022      	movs	r2, r4
 80091a4:	2100      	movs	r1, #0
 80091a6:	f7fc f8cb 	bl	8005340 <memset>
 80091aa:	0028      	movs	r0, r5
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080091b0 <_free_r>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	0005      	movs	r5, r0
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d010      	beq.n	80091da <_free_r+0x2a>
 80091b8:	1f0c      	subs	r4, r1, #4
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da00      	bge.n	80091c2 <_free_r+0x12>
 80091c0:	18e4      	adds	r4, r4, r3
 80091c2:	0028      	movs	r0, r5
 80091c4:	f000 fc27 	bl	8009a16 <__malloc_lock>
 80091c8:	4a1d      	ldr	r2, [pc, #116]	; (8009240 <_free_r+0x90>)
 80091ca:	6813      	ldr	r3, [r2, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d105      	bne.n	80091dc <_free_r+0x2c>
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	6014      	str	r4, [r2, #0]
 80091d4:	0028      	movs	r0, r5
 80091d6:	f000 fc1f 	bl	8009a18 <__malloc_unlock>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	42a3      	cmp	r3, r4
 80091de:	d909      	bls.n	80091f4 <_free_r+0x44>
 80091e0:	6821      	ldr	r1, [r4, #0]
 80091e2:	1860      	adds	r0, r4, r1
 80091e4:	4283      	cmp	r3, r0
 80091e6:	d1f3      	bne.n	80091d0 <_free_r+0x20>
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	1841      	adds	r1, r0, r1
 80091ee:	6021      	str	r1, [r4, #0]
 80091f0:	e7ee      	b.n	80091d0 <_free_r+0x20>
 80091f2:	0013      	movs	r3, r2
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	d001      	beq.n	80091fe <_free_r+0x4e>
 80091fa:	42a2      	cmp	r2, r4
 80091fc:	d9f9      	bls.n	80091f2 <_free_r+0x42>
 80091fe:	6819      	ldr	r1, [r3, #0]
 8009200:	1858      	adds	r0, r3, r1
 8009202:	42a0      	cmp	r0, r4
 8009204:	d10b      	bne.n	800921e <_free_r+0x6e>
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	1809      	adds	r1, r1, r0
 800920a:	1858      	adds	r0, r3, r1
 800920c:	6019      	str	r1, [r3, #0]
 800920e:	4282      	cmp	r2, r0
 8009210:	d1e0      	bne.n	80091d4 <_free_r+0x24>
 8009212:	6810      	ldr	r0, [r2, #0]
 8009214:	6852      	ldr	r2, [r2, #4]
 8009216:	1841      	adds	r1, r0, r1
 8009218:	6019      	str	r1, [r3, #0]
 800921a:	605a      	str	r2, [r3, #4]
 800921c:	e7da      	b.n	80091d4 <_free_r+0x24>
 800921e:	42a0      	cmp	r0, r4
 8009220:	d902      	bls.n	8009228 <_free_r+0x78>
 8009222:	230c      	movs	r3, #12
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	e7d5      	b.n	80091d4 <_free_r+0x24>
 8009228:	6821      	ldr	r1, [r4, #0]
 800922a:	1860      	adds	r0, r4, r1
 800922c:	4282      	cmp	r2, r0
 800922e:	d103      	bne.n	8009238 <_free_r+0x88>
 8009230:	6810      	ldr	r0, [r2, #0]
 8009232:	6852      	ldr	r2, [r2, #4]
 8009234:	1841      	adds	r1, r0, r1
 8009236:	6021      	str	r1, [r4, #0]
 8009238:	6062      	str	r2, [r4, #4]
 800923a:	605c      	str	r4, [r3, #4]
 800923c:	e7ca      	b.n	80091d4 <_free_r+0x24>
 800923e:	46c0      	nop			; (mov r8, r8)
 8009240:	20000204 	.word	0x20000204

08009244 <_malloc_r>:
 8009244:	2303      	movs	r3, #3
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	1ccd      	adds	r5, r1, #3
 800924a:	439d      	bics	r5, r3
 800924c:	3508      	adds	r5, #8
 800924e:	0006      	movs	r6, r0
 8009250:	2d0c      	cmp	r5, #12
 8009252:	d21e      	bcs.n	8009292 <_malloc_r+0x4e>
 8009254:	250c      	movs	r5, #12
 8009256:	42a9      	cmp	r1, r5
 8009258:	d81d      	bhi.n	8009296 <_malloc_r+0x52>
 800925a:	0030      	movs	r0, r6
 800925c:	f000 fbdb 	bl	8009a16 <__malloc_lock>
 8009260:	4a25      	ldr	r2, [pc, #148]	; (80092f8 <_malloc_r+0xb4>)
 8009262:	6814      	ldr	r4, [r2, #0]
 8009264:	0021      	movs	r1, r4
 8009266:	2900      	cmp	r1, #0
 8009268:	d119      	bne.n	800929e <_malloc_r+0x5a>
 800926a:	4c24      	ldr	r4, [pc, #144]	; (80092fc <_malloc_r+0xb8>)
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <_malloc_r+0x36>
 8009272:	0030      	movs	r0, r6
 8009274:	f000 fae2 	bl	800983c <_sbrk_r>
 8009278:	6020      	str	r0, [r4, #0]
 800927a:	0029      	movs	r1, r5
 800927c:	0030      	movs	r0, r6
 800927e:	f000 fadd 	bl	800983c <_sbrk_r>
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	d12b      	bne.n	80092de <_malloc_r+0x9a>
 8009286:	230c      	movs	r3, #12
 8009288:	0030      	movs	r0, r6
 800928a:	6033      	str	r3, [r6, #0]
 800928c:	f000 fbc4 	bl	8009a18 <__malloc_unlock>
 8009290:	e003      	b.n	800929a <_malloc_r+0x56>
 8009292:	2d00      	cmp	r5, #0
 8009294:	dadf      	bge.n	8009256 <_malloc_r+0x12>
 8009296:	230c      	movs	r3, #12
 8009298:	6033      	str	r3, [r6, #0]
 800929a:	2000      	movs	r0, #0
 800929c:	bd70      	pop	{r4, r5, r6, pc}
 800929e:	680b      	ldr	r3, [r1, #0]
 80092a0:	1b5b      	subs	r3, r3, r5
 80092a2:	d419      	bmi.n	80092d8 <_malloc_r+0x94>
 80092a4:	2b0b      	cmp	r3, #11
 80092a6:	d903      	bls.n	80092b0 <_malloc_r+0x6c>
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	18cc      	adds	r4, r1, r3
 80092ac:	6025      	str	r5, [r4, #0]
 80092ae:	e003      	b.n	80092b8 <_malloc_r+0x74>
 80092b0:	684b      	ldr	r3, [r1, #4]
 80092b2:	428c      	cmp	r4, r1
 80092b4:	d10d      	bne.n	80092d2 <_malloc_r+0x8e>
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	0030      	movs	r0, r6
 80092ba:	f000 fbad 	bl	8009a18 <__malloc_unlock>
 80092be:	0020      	movs	r0, r4
 80092c0:	2207      	movs	r2, #7
 80092c2:	300b      	adds	r0, #11
 80092c4:	1d23      	adds	r3, r4, #4
 80092c6:	4390      	bics	r0, r2
 80092c8:	1ac3      	subs	r3, r0, r3
 80092ca:	d0e7      	beq.n	800929c <_malloc_r+0x58>
 80092cc:	425a      	negs	r2, r3
 80092ce:	50e2      	str	r2, [r4, r3]
 80092d0:	e7e4      	b.n	800929c <_malloc_r+0x58>
 80092d2:	6063      	str	r3, [r4, #4]
 80092d4:	000c      	movs	r4, r1
 80092d6:	e7ef      	b.n	80092b8 <_malloc_r+0x74>
 80092d8:	000c      	movs	r4, r1
 80092da:	6849      	ldr	r1, [r1, #4]
 80092dc:	e7c3      	b.n	8009266 <_malloc_r+0x22>
 80092de:	2303      	movs	r3, #3
 80092e0:	1cc4      	adds	r4, r0, #3
 80092e2:	439c      	bics	r4, r3
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d0e1      	beq.n	80092ac <_malloc_r+0x68>
 80092e8:	1a21      	subs	r1, r4, r0
 80092ea:	0030      	movs	r0, r6
 80092ec:	f000 faa6 	bl	800983c <_sbrk_r>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d1db      	bne.n	80092ac <_malloc_r+0x68>
 80092f4:	e7c7      	b.n	8009286 <_malloc_r+0x42>
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	20000204 	.word	0x20000204
 80092fc:	20000208 	.word	0x20000208

08009300 <__ssputs_r>:
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	688e      	ldr	r6, [r1, #8]
 8009304:	b085      	sub	sp, #20
 8009306:	0007      	movs	r7, r0
 8009308:	000c      	movs	r4, r1
 800930a:	9203      	str	r2, [sp, #12]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	429e      	cmp	r6, r3
 8009310:	d83c      	bhi.n	800938c <__ssputs_r+0x8c>
 8009312:	2390      	movs	r3, #144	; 0x90
 8009314:	898a      	ldrh	r2, [r1, #12]
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	421a      	tst	r2, r3
 800931a:	d034      	beq.n	8009386 <__ssputs_r+0x86>
 800931c:	2503      	movs	r5, #3
 800931e:	6909      	ldr	r1, [r1, #16]
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	1a5b      	subs	r3, r3, r1
 8009324:	9302      	str	r3, [sp, #8]
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	9802      	ldr	r0, [sp, #8]
 800932a:	435d      	muls	r5, r3
 800932c:	0feb      	lsrs	r3, r5, #31
 800932e:	195d      	adds	r5, r3, r5
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	106d      	asrs	r5, r5, #1
 8009334:	3301      	adds	r3, #1
 8009336:	181b      	adds	r3, r3, r0
 8009338:	42ab      	cmp	r3, r5
 800933a:	d900      	bls.n	800933e <__ssputs_r+0x3e>
 800933c:	001d      	movs	r5, r3
 800933e:	0553      	lsls	r3, r2, #21
 8009340:	d532      	bpl.n	80093a8 <__ssputs_r+0xa8>
 8009342:	0029      	movs	r1, r5
 8009344:	0038      	movs	r0, r7
 8009346:	f7ff ff7d 	bl	8009244 <_malloc_r>
 800934a:	1e06      	subs	r6, r0, #0
 800934c:	d109      	bne.n	8009362 <__ssputs_r+0x62>
 800934e:	230c      	movs	r3, #12
 8009350:	603b      	str	r3, [r7, #0]
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	2001      	movs	r0, #1
 8009356:	89a2      	ldrh	r2, [r4, #12]
 8009358:	4240      	negs	r0, r0
 800935a:	4313      	orrs	r3, r2
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	b005      	add	sp, #20
 8009360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009362:	9a02      	ldr	r2, [sp, #8]
 8009364:	6921      	ldr	r1, [r4, #16]
 8009366:	f7ff fb16 	bl	8008996 <memcpy>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <__ssputs_r+0xc0>)
 800936e:	401a      	ands	r2, r3
 8009370:	2380      	movs	r3, #128	; 0x80
 8009372:	4313      	orrs	r3, r2
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	9b02      	ldr	r3, [sp, #8]
 8009378:	6126      	str	r6, [r4, #16]
 800937a:	18f6      	adds	r6, r6, r3
 800937c:	6026      	str	r6, [r4, #0]
 800937e:	6165      	str	r5, [r4, #20]
 8009380:	9e01      	ldr	r6, [sp, #4]
 8009382:	1aed      	subs	r5, r5, r3
 8009384:	60a5      	str	r5, [r4, #8]
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	429e      	cmp	r6, r3
 800938a:	d900      	bls.n	800938e <__ssputs_r+0x8e>
 800938c:	9e01      	ldr	r6, [sp, #4]
 800938e:	0032      	movs	r2, r6
 8009390:	9903      	ldr	r1, [sp, #12]
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	f000 fb2c 	bl	80099f0 <memmove>
 8009398:	68a3      	ldr	r3, [r4, #8]
 800939a:	2000      	movs	r0, #0
 800939c:	1b9b      	subs	r3, r3, r6
 800939e:	60a3      	str	r3, [r4, #8]
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	199e      	adds	r6, r3, r6
 80093a4:	6026      	str	r6, [r4, #0]
 80093a6:	e7da      	b.n	800935e <__ssputs_r+0x5e>
 80093a8:	002a      	movs	r2, r5
 80093aa:	0038      	movs	r0, r7
 80093ac:	f000 fb35 	bl	8009a1a <_realloc_r>
 80093b0:	1e06      	subs	r6, r0, #0
 80093b2:	d1e0      	bne.n	8009376 <__ssputs_r+0x76>
 80093b4:	6921      	ldr	r1, [r4, #16]
 80093b6:	0038      	movs	r0, r7
 80093b8:	f7ff fefa 	bl	80091b0 <_free_r>
 80093bc:	e7c7      	b.n	800934e <__ssputs_r+0x4e>
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	fffffb7f 	.word	0xfffffb7f

080093c4 <_svfiprintf_r>:
 80093c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c6:	b0a1      	sub	sp, #132	; 0x84
 80093c8:	9003      	str	r0, [sp, #12]
 80093ca:	001d      	movs	r5, r3
 80093cc:	898b      	ldrh	r3, [r1, #12]
 80093ce:	000f      	movs	r7, r1
 80093d0:	0016      	movs	r6, r2
 80093d2:	061b      	lsls	r3, r3, #24
 80093d4:	d511      	bpl.n	80093fa <_svfiprintf_r+0x36>
 80093d6:	690b      	ldr	r3, [r1, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10e      	bne.n	80093fa <_svfiprintf_r+0x36>
 80093dc:	2140      	movs	r1, #64	; 0x40
 80093de:	f7ff ff31 	bl	8009244 <_malloc_r>
 80093e2:	6038      	str	r0, [r7, #0]
 80093e4:	6138      	str	r0, [r7, #16]
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d105      	bne.n	80093f6 <_svfiprintf_r+0x32>
 80093ea:	230c      	movs	r3, #12
 80093ec:	9a03      	ldr	r2, [sp, #12]
 80093ee:	3801      	subs	r0, #1
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	b021      	add	sp, #132	; 0x84
 80093f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	2300      	movs	r3, #0
 80093fc:	ac08      	add	r4, sp, #32
 80093fe:	6163      	str	r3, [r4, #20]
 8009400:	3320      	adds	r3, #32
 8009402:	7663      	strb	r3, [r4, #25]
 8009404:	3310      	adds	r3, #16
 8009406:	76a3      	strb	r3, [r4, #26]
 8009408:	9507      	str	r5, [sp, #28]
 800940a:	0035      	movs	r5, r6
 800940c:	782b      	ldrb	r3, [r5, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <_svfiprintf_r+0x52>
 8009412:	2b25      	cmp	r3, #37	; 0x25
 8009414:	d146      	bne.n	80094a4 <_svfiprintf_r+0xe0>
 8009416:	1bab      	subs	r3, r5, r6
 8009418:	9305      	str	r3, [sp, #20]
 800941a:	d00c      	beq.n	8009436 <_svfiprintf_r+0x72>
 800941c:	0032      	movs	r2, r6
 800941e:	0039      	movs	r1, r7
 8009420:	9803      	ldr	r0, [sp, #12]
 8009422:	f7ff ff6d 	bl	8009300 <__ssputs_r>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	d100      	bne.n	800942c <_svfiprintf_r+0x68>
 800942a:	e0ae      	b.n	800958a <_svfiprintf_r+0x1c6>
 800942c:	6962      	ldr	r2, [r4, #20]
 800942e:	9b05      	ldr	r3, [sp, #20]
 8009430:	4694      	mov	ip, r2
 8009432:	4463      	add	r3, ip
 8009434:	6163      	str	r3, [r4, #20]
 8009436:	782b      	ldrb	r3, [r5, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d100      	bne.n	800943e <_svfiprintf_r+0x7a>
 800943c:	e0a5      	b.n	800958a <_svfiprintf_r+0x1c6>
 800943e:	2201      	movs	r2, #1
 8009440:	2300      	movs	r3, #0
 8009442:	4252      	negs	r2, r2
 8009444:	6062      	str	r2, [r4, #4]
 8009446:	a904      	add	r1, sp, #16
 8009448:	3254      	adds	r2, #84	; 0x54
 800944a:	1852      	adds	r2, r2, r1
 800944c:	1c6e      	adds	r6, r5, #1
 800944e:	6023      	str	r3, [r4, #0]
 8009450:	60e3      	str	r3, [r4, #12]
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	7013      	strb	r3, [r2, #0]
 8009456:	65a3      	str	r3, [r4, #88]	; 0x58
 8009458:	7831      	ldrb	r1, [r6, #0]
 800945a:	2205      	movs	r2, #5
 800945c:	4853      	ldr	r0, [pc, #332]	; (80095ac <_svfiprintf_r+0x1e8>)
 800945e:	f7ff fa8f 	bl	8008980 <memchr>
 8009462:	1c75      	adds	r5, r6, #1
 8009464:	2800      	cmp	r0, #0
 8009466:	d11f      	bne.n	80094a8 <_svfiprintf_r+0xe4>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	06d3      	lsls	r3, r2, #27
 800946c:	d504      	bpl.n	8009478 <_svfiprintf_r+0xb4>
 800946e:	2353      	movs	r3, #83	; 0x53
 8009470:	a904      	add	r1, sp, #16
 8009472:	185b      	adds	r3, r3, r1
 8009474:	2120      	movs	r1, #32
 8009476:	7019      	strb	r1, [r3, #0]
 8009478:	0713      	lsls	r3, r2, #28
 800947a:	d504      	bpl.n	8009486 <_svfiprintf_r+0xc2>
 800947c:	2353      	movs	r3, #83	; 0x53
 800947e:	a904      	add	r1, sp, #16
 8009480:	185b      	adds	r3, r3, r1
 8009482:	212b      	movs	r1, #43	; 0x2b
 8009484:	7019      	strb	r1, [r3, #0]
 8009486:	7833      	ldrb	r3, [r6, #0]
 8009488:	2b2a      	cmp	r3, #42	; 0x2a
 800948a:	d016      	beq.n	80094ba <_svfiprintf_r+0xf6>
 800948c:	0035      	movs	r5, r6
 800948e:	2100      	movs	r1, #0
 8009490:	200a      	movs	r0, #10
 8009492:	68e3      	ldr	r3, [r4, #12]
 8009494:	782a      	ldrb	r2, [r5, #0]
 8009496:	1c6e      	adds	r6, r5, #1
 8009498:	3a30      	subs	r2, #48	; 0x30
 800949a:	2a09      	cmp	r2, #9
 800949c:	d94e      	bls.n	800953c <_svfiprintf_r+0x178>
 800949e:	2900      	cmp	r1, #0
 80094a0:	d018      	beq.n	80094d4 <_svfiprintf_r+0x110>
 80094a2:	e010      	b.n	80094c6 <_svfiprintf_r+0x102>
 80094a4:	3501      	adds	r5, #1
 80094a6:	e7b1      	b.n	800940c <_svfiprintf_r+0x48>
 80094a8:	4b40      	ldr	r3, [pc, #256]	; (80095ac <_svfiprintf_r+0x1e8>)
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	1ac0      	subs	r0, r0, r3
 80094ae:	2301      	movs	r3, #1
 80094b0:	4083      	lsls	r3, r0
 80094b2:	4313      	orrs	r3, r2
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	002e      	movs	r6, r5
 80094b8:	e7ce      	b.n	8009458 <_svfiprintf_r+0x94>
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	1d19      	adds	r1, r3, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9107      	str	r1, [sp, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	db01      	blt.n	80094ca <_svfiprintf_r+0x106>
 80094c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c8:	e004      	b.n	80094d4 <_svfiprintf_r+0x110>
 80094ca:	425b      	negs	r3, r3
 80094cc:	60e3      	str	r3, [r4, #12]
 80094ce:	2302      	movs	r3, #2
 80094d0:	4313      	orrs	r3, r2
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	782b      	ldrb	r3, [r5, #0]
 80094d6:	2b2e      	cmp	r3, #46	; 0x2e
 80094d8:	d10a      	bne.n	80094f0 <_svfiprintf_r+0x12c>
 80094da:	786b      	ldrb	r3, [r5, #1]
 80094dc:	2b2a      	cmp	r3, #42	; 0x2a
 80094de:	d135      	bne.n	800954c <_svfiprintf_r+0x188>
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	3502      	adds	r5, #2
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	9207      	str	r2, [sp, #28]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db2b      	blt.n	8009546 <_svfiprintf_r+0x182>
 80094ee:	9309      	str	r3, [sp, #36]	; 0x24
 80094f0:	4e2f      	ldr	r6, [pc, #188]	; (80095b0 <_svfiprintf_r+0x1ec>)
 80094f2:	7829      	ldrb	r1, [r5, #0]
 80094f4:	2203      	movs	r2, #3
 80094f6:	0030      	movs	r0, r6
 80094f8:	f7ff fa42 	bl	8008980 <memchr>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d006      	beq.n	800950e <_svfiprintf_r+0x14a>
 8009500:	2340      	movs	r3, #64	; 0x40
 8009502:	1b80      	subs	r0, r0, r6
 8009504:	4083      	lsls	r3, r0
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	3501      	adds	r5, #1
 800950a:	4313      	orrs	r3, r2
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	7829      	ldrb	r1, [r5, #0]
 8009510:	2206      	movs	r2, #6
 8009512:	4828      	ldr	r0, [pc, #160]	; (80095b4 <_svfiprintf_r+0x1f0>)
 8009514:	1c6e      	adds	r6, r5, #1
 8009516:	7621      	strb	r1, [r4, #24]
 8009518:	f7ff fa32 	bl	8008980 <memchr>
 800951c:	2800      	cmp	r0, #0
 800951e:	d03c      	beq.n	800959a <_svfiprintf_r+0x1d6>
 8009520:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <_svfiprintf_r+0x1f4>)
 8009522:	2b00      	cmp	r3, #0
 8009524:	d125      	bne.n	8009572 <_svfiprintf_r+0x1ae>
 8009526:	2207      	movs	r2, #7
 8009528:	9b07      	ldr	r3, [sp, #28]
 800952a:	3307      	adds	r3, #7
 800952c:	4393      	bics	r3, r2
 800952e:	3308      	adds	r3, #8
 8009530:	9307      	str	r3, [sp, #28]
 8009532:	6963      	ldr	r3, [r4, #20]
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	189b      	adds	r3, r3, r2
 8009538:	6163      	str	r3, [r4, #20]
 800953a:	e766      	b.n	800940a <_svfiprintf_r+0x46>
 800953c:	4343      	muls	r3, r0
 800953e:	2101      	movs	r1, #1
 8009540:	189b      	adds	r3, r3, r2
 8009542:	0035      	movs	r5, r6
 8009544:	e7a6      	b.n	8009494 <_svfiprintf_r+0xd0>
 8009546:	2301      	movs	r3, #1
 8009548:	425b      	negs	r3, r3
 800954a:	e7d0      	b.n	80094ee <_svfiprintf_r+0x12a>
 800954c:	2300      	movs	r3, #0
 800954e:	200a      	movs	r0, #10
 8009550:	001a      	movs	r2, r3
 8009552:	3501      	adds	r5, #1
 8009554:	6063      	str	r3, [r4, #4]
 8009556:	7829      	ldrb	r1, [r5, #0]
 8009558:	1c6e      	adds	r6, r5, #1
 800955a:	3930      	subs	r1, #48	; 0x30
 800955c:	2909      	cmp	r1, #9
 800955e:	d903      	bls.n	8009568 <_svfiprintf_r+0x1a4>
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0c5      	beq.n	80094f0 <_svfiprintf_r+0x12c>
 8009564:	9209      	str	r2, [sp, #36]	; 0x24
 8009566:	e7c3      	b.n	80094f0 <_svfiprintf_r+0x12c>
 8009568:	4342      	muls	r2, r0
 800956a:	2301      	movs	r3, #1
 800956c:	1852      	adds	r2, r2, r1
 800956e:	0035      	movs	r5, r6
 8009570:	e7f1      	b.n	8009556 <_svfiprintf_r+0x192>
 8009572:	ab07      	add	r3, sp, #28
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	003a      	movs	r2, r7
 8009578:	4b10      	ldr	r3, [pc, #64]	; (80095bc <_svfiprintf_r+0x1f8>)
 800957a:	0021      	movs	r1, r4
 800957c:	9803      	ldr	r0, [sp, #12]
 800957e:	f7fb ff83 	bl	8005488 <_printf_float>
 8009582:	9004      	str	r0, [sp, #16]
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	3301      	adds	r3, #1
 8009588:	d1d3      	bne.n	8009532 <_svfiprintf_r+0x16e>
 800958a:	89bb      	ldrh	r3, [r7, #12]
 800958c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800958e:	065b      	lsls	r3, r3, #25
 8009590:	d400      	bmi.n	8009594 <_svfiprintf_r+0x1d0>
 8009592:	e72e      	b.n	80093f2 <_svfiprintf_r+0x2e>
 8009594:	2001      	movs	r0, #1
 8009596:	4240      	negs	r0, r0
 8009598:	e72b      	b.n	80093f2 <_svfiprintf_r+0x2e>
 800959a:	ab07      	add	r3, sp, #28
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	003a      	movs	r2, r7
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <_svfiprintf_r+0x1f8>)
 80095a2:	0021      	movs	r1, r4
 80095a4:	9803      	ldr	r0, [sp, #12]
 80095a6:	f7fc fa29 	bl	80059fc <_printf_i>
 80095aa:	e7ea      	b.n	8009582 <_svfiprintf_r+0x1be>
 80095ac:	08009dfc 	.word	0x08009dfc
 80095b0:	08009e02 	.word	0x08009e02
 80095b4:	08009e06 	.word	0x08009e06
 80095b8:	08005489 	.word	0x08005489
 80095bc:	08009301 	.word	0x08009301

080095c0 <__sfputc_r>:
 80095c0:	6893      	ldr	r3, [r2, #8]
 80095c2:	b510      	push	{r4, lr}
 80095c4:	3b01      	subs	r3, #1
 80095c6:	6093      	str	r3, [r2, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da04      	bge.n	80095d6 <__sfputc_r+0x16>
 80095cc:	6994      	ldr	r4, [r2, #24]
 80095ce:	42a3      	cmp	r3, r4
 80095d0:	db07      	blt.n	80095e2 <__sfputc_r+0x22>
 80095d2:	290a      	cmp	r1, #10
 80095d4:	d005      	beq.n	80095e2 <__sfputc_r+0x22>
 80095d6:	6813      	ldr	r3, [r2, #0]
 80095d8:	1c58      	adds	r0, r3, #1
 80095da:	6010      	str	r0, [r2, #0]
 80095dc:	7019      	strb	r1, [r3, #0]
 80095de:	0008      	movs	r0, r1
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	f7fd fd45 	bl	8007070 <__swbuf_r>
 80095e6:	0001      	movs	r1, r0
 80095e8:	e7f9      	b.n	80095de <__sfputc_r+0x1e>

080095ea <__sfputs_r>:
 80095ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ec:	0006      	movs	r6, r0
 80095ee:	000f      	movs	r7, r1
 80095f0:	0014      	movs	r4, r2
 80095f2:	18d5      	adds	r5, r2, r3
 80095f4:	42ac      	cmp	r4, r5
 80095f6:	d101      	bne.n	80095fc <__sfputs_r+0x12>
 80095f8:	2000      	movs	r0, #0
 80095fa:	e007      	b.n	800960c <__sfputs_r+0x22>
 80095fc:	7821      	ldrb	r1, [r4, #0]
 80095fe:	003a      	movs	r2, r7
 8009600:	0030      	movs	r0, r6
 8009602:	f7ff ffdd 	bl	80095c0 <__sfputc_r>
 8009606:	3401      	adds	r4, #1
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d1f3      	bne.n	80095f4 <__sfputs_r+0xa>
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009610 <_vfiprintf_r>:
 8009610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009612:	b0a1      	sub	sp, #132	; 0x84
 8009614:	9003      	str	r0, [sp, #12]
 8009616:	000f      	movs	r7, r1
 8009618:	0016      	movs	r6, r2
 800961a:	001d      	movs	r5, r3
 800961c:	2800      	cmp	r0, #0
 800961e:	d005      	beq.n	800962c <_vfiprintf_r+0x1c>
 8009620:	6983      	ldr	r3, [r0, #24]
 8009622:	9305      	str	r3, [sp, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <_vfiprintf_r+0x1c>
 8009628:	f7fe fd4c 	bl	80080c4 <__sinit>
 800962c:	4b7b      	ldr	r3, [pc, #492]	; (800981c <_vfiprintf_r+0x20c>)
 800962e:	429f      	cmp	r7, r3
 8009630:	d15c      	bne.n	80096ec <_vfiprintf_r+0xdc>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	685f      	ldr	r7, [r3, #4]
 8009636:	89bb      	ldrh	r3, [r7, #12]
 8009638:	071b      	lsls	r3, r3, #28
 800963a:	d563      	bpl.n	8009704 <_vfiprintf_r+0xf4>
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d060      	beq.n	8009704 <_vfiprintf_r+0xf4>
 8009642:	2300      	movs	r3, #0
 8009644:	ac08      	add	r4, sp, #32
 8009646:	6163      	str	r3, [r4, #20]
 8009648:	3320      	adds	r3, #32
 800964a:	7663      	strb	r3, [r4, #25]
 800964c:	3310      	adds	r3, #16
 800964e:	76a3      	strb	r3, [r4, #26]
 8009650:	9507      	str	r5, [sp, #28]
 8009652:	0035      	movs	r5, r6
 8009654:	782b      	ldrb	r3, [r5, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <_vfiprintf_r+0x4e>
 800965a:	2b25      	cmp	r3, #37	; 0x25
 800965c:	d15c      	bne.n	8009718 <_vfiprintf_r+0x108>
 800965e:	1bab      	subs	r3, r5, r6
 8009660:	9305      	str	r3, [sp, #20]
 8009662:	d00c      	beq.n	800967e <_vfiprintf_r+0x6e>
 8009664:	0032      	movs	r2, r6
 8009666:	0039      	movs	r1, r7
 8009668:	9803      	ldr	r0, [sp, #12]
 800966a:	f7ff ffbe 	bl	80095ea <__sfputs_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d100      	bne.n	8009674 <_vfiprintf_r+0x64>
 8009672:	e0c4      	b.n	80097fe <_vfiprintf_r+0x1ee>
 8009674:	6962      	ldr	r2, [r4, #20]
 8009676:	9b05      	ldr	r3, [sp, #20]
 8009678:	4694      	mov	ip, r2
 800967a:	4463      	add	r3, ip
 800967c:	6163      	str	r3, [r4, #20]
 800967e:	782b      	ldrb	r3, [r5, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d100      	bne.n	8009686 <_vfiprintf_r+0x76>
 8009684:	e0bb      	b.n	80097fe <_vfiprintf_r+0x1ee>
 8009686:	2201      	movs	r2, #1
 8009688:	2300      	movs	r3, #0
 800968a:	4252      	negs	r2, r2
 800968c:	6062      	str	r2, [r4, #4]
 800968e:	a904      	add	r1, sp, #16
 8009690:	3254      	adds	r2, #84	; 0x54
 8009692:	1852      	adds	r2, r2, r1
 8009694:	1c6e      	adds	r6, r5, #1
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	60e3      	str	r3, [r4, #12]
 800969a:	60a3      	str	r3, [r4, #8]
 800969c:	7013      	strb	r3, [r2, #0]
 800969e:	65a3      	str	r3, [r4, #88]	; 0x58
 80096a0:	7831      	ldrb	r1, [r6, #0]
 80096a2:	2205      	movs	r2, #5
 80096a4:	485e      	ldr	r0, [pc, #376]	; (8009820 <_vfiprintf_r+0x210>)
 80096a6:	f7ff f96b 	bl	8008980 <memchr>
 80096aa:	1c75      	adds	r5, r6, #1
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d135      	bne.n	800971c <_vfiprintf_r+0x10c>
 80096b0:	6822      	ldr	r2, [r4, #0]
 80096b2:	06d3      	lsls	r3, r2, #27
 80096b4:	d504      	bpl.n	80096c0 <_vfiprintf_r+0xb0>
 80096b6:	2353      	movs	r3, #83	; 0x53
 80096b8:	a904      	add	r1, sp, #16
 80096ba:	185b      	adds	r3, r3, r1
 80096bc:	2120      	movs	r1, #32
 80096be:	7019      	strb	r1, [r3, #0]
 80096c0:	0713      	lsls	r3, r2, #28
 80096c2:	d504      	bpl.n	80096ce <_vfiprintf_r+0xbe>
 80096c4:	2353      	movs	r3, #83	; 0x53
 80096c6:	a904      	add	r1, sp, #16
 80096c8:	185b      	adds	r3, r3, r1
 80096ca:	212b      	movs	r1, #43	; 0x2b
 80096cc:	7019      	strb	r1, [r3, #0]
 80096ce:	7833      	ldrb	r3, [r6, #0]
 80096d0:	2b2a      	cmp	r3, #42	; 0x2a
 80096d2:	d02c      	beq.n	800972e <_vfiprintf_r+0x11e>
 80096d4:	0035      	movs	r5, r6
 80096d6:	2100      	movs	r1, #0
 80096d8:	200a      	movs	r0, #10
 80096da:	68e3      	ldr	r3, [r4, #12]
 80096dc:	782a      	ldrb	r2, [r5, #0]
 80096de:	1c6e      	adds	r6, r5, #1
 80096e0:	3a30      	subs	r2, #48	; 0x30
 80096e2:	2a09      	cmp	r2, #9
 80096e4:	d964      	bls.n	80097b0 <_vfiprintf_r+0x1a0>
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d02e      	beq.n	8009748 <_vfiprintf_r+0x138>
 80096ea:	e026      	b.n	800973a <_vfiprintf_r+0x12a>
 80096ec:	4b4d      	ldr	r3, [pc, #308]	; (8009824 <_vfiprintf_r+0x214>)
 80096ee:	429f      	cmp	r7, r3
 80096f0:	d102      	bne.n	80096f8 <_vfiprintf_r+0xe8>
 80096f2:	9b03      	ldr	r3, [sp, #12]
 80096f4:	689f      	ldr	r7, [r3, #8]
 80096f6:	e79e      	b.n	8009636 <_vfiprintf_r+0x26>
 80096f8:	4b4b      	ldr	r3, [pc, #300]	; (8009828 <_vfiprintf_r+0x218>)
 80096fa:	429f      	cmp	r7, r3
 80096fc:	d19b      	bne.n	8009636 <_vfiprintf_r+0x26>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	68df      	ldr	r7, [r3, #12]
 8009702:	e798      	b.n	8009636 <_vfiprintf_r+0x26>
 8009704:	0039      	movs	r1, r7
 8009706:	9803      	ldr	r0, [sp, #12]
 8009708:	f7fd fd08 	bl	800711c <__swsetup_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	d098      	beq.n	8009642 <_vfiprintf_r+0x32>
 8009710:	2001      	movs	r0, #1
 8009712:	4240      	negs	r0, r0
 8009714:	b021      	add	sp, #132	; 0x84
 8009716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009718:	3501      	adds	r5, #1
 800971a:	e79b      	b.n	8009654 <_vfiprintf_r+0x44>
 800971c:	4b40      	ldr	r3, [pc, #256]	; (8009820 <_vfiprintf_r+0x210>)
 800971e:	6822      	ldr	r2, [r4, #0]
 8009720:	1ac0      	subs	r0, r0, r3
 8009722:	2301      	movs	r3, #1
 8009724:	4083      	lsls	r3, r0
 8009726:	4313      	orrs	r3, r2
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	002e      	movs	r6, r5
 800972c:	e7b8      	b.n	80096a0 <_vfiprintf_r+0x90>
 800972e:	9b07      	ldr	r3, [sp, #28]
 8009730:	1d19      	adds	r1, r3, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9107      	str	r1, [sp, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	db01      	blt.n	800973e <_vfiprintf_r+0x12e>
 800973a:	930b      	str	r3, [sp, #44]	; 0x2c
 800973c:	e004      	b.n	8009748 <_vfiprintf_r+0x138>
 800973e:	425b      	negs	r3, r3
 8009740:	60e3      	str	r3, [r4, #12]
 8009742:	2302      	movs	r3, #2
 8009744:	4313      	orrs	r3, r2
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	782b      	ldrb	r3, [r5, #0]
 800974a:	2b2e      	cmp	r3, #46	; 0x2e
 800974c:	d10a      	bne.n	8009764 <_vfiprintf_r+0x154>
 800974e:	786b      	ldrb	r3, [r5, #1]
 8009750:	2b2a      	cmp	r3, #42	; 0x2a
 8009752:	d135      	bne.n	80097c0 <_vfiprintf_r+0x1b0>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	3502      	adds	r5, #2
 8009758:	1d1a      	adds	r2, r3, #4
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	9207      	str	r2, [sp, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	db2b      	blt.n	80097ba <_vfiprintf_r+0x1aa>
 8009762:	9309      	str	r3, [sp, #36]	; 0x24
 8009764:	4e31      	ldr	r6, [pc, #196]	; (800982c <_vfiprintf_r+0x21c>)
 8009766:	7829      	ldrb	r1, [r5, #0]
 8009768:	2203      	movs	r2, #3
 800976a:	0030      	movs	r0, r6
 800976c:	f7ff f908 	bl	8008980 <memchr>
 8009770:	2800      	cmp	r0, #0
 8009772:	d006      	beq.n	8009782 <_vfiprintf_r+0x172>
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	1b80      	subs	r0, r0, r6
 8009778:	4083      	lsls	r3, r0
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	3501      	adds	r5, #1
 800977e:	4313      	orrs	r3, r2
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	7829      	ldrb	r1, [r5, #0]
 8009784:	2206      	movs	r2, #6
 8009786:	482a      	ldr	r0, [pc, #168]	; (8009830 <_vfiprintf_r+0x220>)
 8009788:	1c6e      	adds	r6, r5, #1
 800978a:	7621      	strb	r1, [r4, #24]
 800978c:	f7ff f8f8 	bl	8008980 <memchr>
 8009790:	2800      	cmp	r0, #0
 8009792:	d03a      	beq.n	800980a <_vfiprintf_r+0x1fa>
 8009794:	4b27      	ldr	r3, [pc, #156]	; (8009834 <_vfiprintf_r+0x224>)
 8009796:	2b00      	cmp	r3, #0
 8009798:	d125      	bne.n	80097e6 <_vfiprintf_r+0x1d6>
 800979a:	2207      	movs	r2, #7
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	3307      	adds	r3, #7
 80097a0:	4393      	bics	r3, r2
 80097a2:	3308      	adds	r3, #8
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	9a04      	ldr	r2, [sp, #16]
 80097aa:	189b      	adds	r3, r3, r2
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	e750      	b.n	8009652 <_vfiprintf_r+0x42>
 80097b0:	4343      	muls	r3, r0
 80097b2:	2101      	movs	r1, #1
 80097b4:	189b      	adds	r3, r3, r2
 80097b6:	0035      	movs	r5, r6
 80097b8:	e790      	b.n	80096dc <_vfiprintf_r+0xcc>
 80097ba:	2301      	movs	r3, #1
 80097bc:	425b      	negs	r3, r3
 80097be:	e7d0      	b.n	8009762 <_vfiprintf_r+0x152>
 80097c0:	2300      	movs	r3, #0
 80097c2:	200a      	movs	r0, #10
 80097c4:	001a      	movs	r2, r3
 80097c6:	3501      	adds	r5, #1
 80097c8:	6063      	str	r3, [r4, #4]
 80097ca:	7829      	ldrb	r1, [r5, #0]
 80097cc:	1c6e      	adds	r6, r5, #1
 80097ce:	3930      	subs	r1, #48	; 0x30
 80097d0:	2909      	cmp	r1, #9
 80097d2:	d903      	bls.n	80097dc <_vfiprintf_r+0x1cc>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0c5      	beq.n	8009764 <_vfiprintf_r+0x154>
 80097d8:	9209      	str	r2, [sp, #36]	; 0x24
 80097da:	e7c3      	b.n	8009764 <_vfiprintf_r+0x154>
 80097dc:	4342      	muls	r2, r0
 80097de:	2301      	movs	r3, #1
 80097e0:	1852      	adds	r2, r2, r1
 80097e2:	0035      	movs	r5, r6
 80097e4:	e7f1      	b.n	80097ca <_vfiprintf_r+0x1ba>
 80097e6:	ab07      	add	r3, sp, #28
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	003a      	movs	r2, r7
 80097ec:	4b12      	ldr	r3, [pc, #72]	; (8009838 <_vfiprintf_r+0x228>)
 80097ee:	0021      	movs	r1, r4
 80097f0:	9803      	ldr	r0, [sp, #12]
 80097f2:	f7fb fe49 	bl	8005488 <_printf_float>
 80097f6:	9004      	str	r0, [sp, #16]
 80097f8:	9b04      	ldr	r3, [sp, #16]
 80097fa:	3301      	adds	r3, #1
 80097fc:	d1d3      	bne.n	80097a6 <_vfiprintf_r+0x196>
 80097fe:	89bb      	ldrh	r3, [r7, #12]
 8009800:	065b      	lsls	r3, r3, #25
 8009802:	d500      	bpl.n	8009806 <_vfiprintf_r+0x1f6>
 8009804:	e784      	b.n	8009710 <_vfiprintf_r+0x100>
 8009806:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009808:	e784      	b.n	8009714 <_vfiprintf_r+0x104>
 800980a:	ab07      	add	r3, sp, #28
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	003a      	movs	r2, r7
 8009810:	4b09      	ldr	r3, [pc, #36]	; (8009838 <_vfiprintf_r+0x228>)
 8009812:	0021      	movs	r1, r4
 8009814:	9803      	ldr	r0, [sp, #12]
 8009816:	f7fc f8f1 	bl	80059fc <_printf_i>
 800981a:	e7ec      	b.n	80097f6 <_vfiprintf_r+0x1e6>
 800981c:	08009cb0 	.word	0x08009cb0
 8009820:	08009dfc 	.word	0x08009dfc
 8009824:	08009cd0 	.word	0x08009cd0
 8009828:	08009c90 	.word	0x08009c90
 800982c:	08009e02 	.word	0x08009e02
 8009830:	08009e06 	.word	0x08009e06
 8009834:	08005489 	.word	0x08005489
 8009838:	080095eb 	.word	0x080095eb

0800983c <_sbrk_r>:
 800983c:	2300      	movs	r3, #0
 800983e:	b570      	push	{r4, r5, r6, lr}
 8009840:	4c06      	ldr	r4, [pc, #24]	; (800985c <_sbrk_r+0x20>)
 8009842:	0005      	movs	r5, r0
 8009844:	0008      	movs	r0, r1
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	f7f9 f810 	bl	800286c <_sbrk>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d103      	bne.n	8009858 <_sbrk_r+0x1c>
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d000      	beq.n	8009858 <_sbrk_r+0x1c>
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	bd70      	pop	{r4, r5, r6, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	20000368 	.word	0x20000368

08009860 <__sread>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	000c      	movs	r4, r1
 8009864:	250e      	movs	r5, #14
 8009866:	5f49      	ldrsh	r1, [r1, r5]
 8009868:	f000 f8fe 	bl	8009a68 <_read_r>
 800986c:	2800      	cmp	r0, #0
 800986e:	db03      	blt.n	8009878 <__sread+0x18>
 8009870:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009872:	181b      	adds	r3, r3, r0
 8009874:	6563      	str	r3, [r4, #84]	; 0x54
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	4a02      	ldr	r2, [pc, #8]	; (8009884 <__sread+0x24>)
 800987c:	4013      	ands	r3, r2
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	e7f9      	b.n	8009876 <__sread+0x16>
 8009882:	46c0      	nop			; (mov r8, r8)
 8009884:	ffffefff 	.word	0xffffefff

08009888 <__swrite>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	001f      	movs	r7, r3
 800988c:	898b      	ldrh	r3, [r1, #12]
 800988e:	0005      	movs	r5, r0
 8009890:	000c      	movs	r4, r1
 8009892:	0016      	movs	r6, r2
 8009894:	05db      	lsls	r3, r3, #23
 8009896:	d505      	bpl.n	80098a4 <__swrite+0x1c>
 8009898:	230e      	movs	r3, #14
 800989a:	5ec9      	ldrsh	r1, [r1, r3]
 800989c:	2200      	movs	r2, #0
 800989e:	2302      	movs	r3, #2
 80098a0:	f000 f892 	bl	80099c8 <_lseek_r>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	4a05      	ldr	r2, [pc, #20]	; (80098bc <__swrite+0x34>)
 80098a8:	0028      	movs	r0, r5
 80098aa:	4013      	ands	r3, r2
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	0032      	movs	r2, r6
 80098b0:	230e      	movs	r3, #14
 80098b2:	5ee1      	ldrsh	r1, [r4, r3]
 80098b4:	003b      	movs	r3, r7
 80098b6:	f000 f83d 	bl	8009934 <_write_r>
 80098ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098bc:	ffffefff 	.word	0xffffefff

080098c0 <__sseek>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	000c      	movs	r4, r1
 80098c4:	250e      	movs	r5, #14
 80098c6:	5f49      	ldrsh	r1, [r1, r5]
 80098c8:	f000 f87e 	bl	80099c8 <_lseek_r>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	1c42      	adds	r2, r0, #1
 80098d0:	d103      	bne.n	80098da <__sseek+0x1a>
 80098d2:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <__sseek+0x28>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	2280      	movs	r2, #128	; 0x80
 80098dc:	0152      	lsls	r2, r2, #5
 80098de:	4313      	orrs	r3, r2
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	6560      	str	r0, [r4, #84]	; 0x54
 80098e4:	e7f8      	b.n	80098d8 <__sseek+0x18>
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	ffffefff 	.word	0xffffefff

080098ec <__sclose>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	230e      	movs	r3, #14
 80098f0:	5ec9      	ldrsh	r1, [r1, r3]
 80098f2:	f000 f833 	bl	800995c <_close_r>
 80098f6:	bd10      	pop	{r4, pc}

080098f8 <strncmp>:
 80098f8:	2300      	movs	r3, #0
 80098fa:	b530      	push	{r4, r5, lr}
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d00a      	beq.n	8009916 <strncmp+0x1e>
 8009900:	3a01      	subs	r2, #1
 8009902:	5cc4      	ldrb	r4, [r0, r3]
 8009904:	5ccd      	ldrb	r5, [r1, r3]
 8009906:	42ac      	cmp	r4, r5
 8009908:	d104      	bne.n	8009914 <strncmp+0x1c>
 800990a:	4293      	cmp	r3, r2
 800990c:	d002      	beq.n	8009914 <strncmp+0x1c>
 800990e:	3301      	adds	r3, #1
 8009910:	2c00      	cmp	r4, #0
 8009912:	d1f6      	bne.n	8009902 <strncmp+0xa>
 8009914:	1b63      	subs	r3, r4, r5
 8009916:	0018      	movs	r0, r3
 8009918:	bd30      	pop	{r4, r5, pc}

0800991a <__ascii_wctomb>:
 800991a:	1e0b      	subs	r3, r1, #0
 800991c:	d004      	beq.n	8009928 <__ascii_wctomb+0xe>
 800991e:	2aff      	cmp	r2, #255	; 0xff
 8009920:	d904      	bls.n	800992c <__ascii_wctomb+0x12>
 8009922:	238a      	movs	r3, #138	; 0x8a
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	3b8b      	subs	r3, #139	; 0x8b
 8009928:	0018      	movs	r0, r3
 800992a:	4770      	bx	lr
 800992c:	700a      	strb	r2, [r1, #0]
 800992e:	2301      	movs	r3, #1
 8009930:	e7fa      	b.n	8009928 <__ascii_wctomb+0xe>
	...

08009934 <_write_r>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	0005      	movs	r5, r0
 8009938:	0008      	movs	r0, r1
 800993a:	0011      	movs	r1, r2
 800993c:	2200      	movs	r2, #0
 800993e:	4c06      	ldr	r4, [pc, #24]	; (8009958 <_write_r+0x24>)
 8009940:	6022      	str	r2, [r4, #0]
 8009942:	001a      	movs	r2, r3
 8009944:	f7f8 feae 	bl	80026a4 <_write>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d103      	bne.n	8009954 <_write_r+0x20>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d000      	beq.n	8009954 <_write_r+0x20>
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	20000368 	.word	0x20000368

0800995c <_close_r>:
 800995c:	2300      	movs	r3, #0
 800995e:	b570      	push	{r4, r5, r6, lr}
 8009960:	4c06      	ldr	r4, [pc, #24]	; (800997c <_close_r+0x20>)
 8009962:	0005      	movs	r5, r0
 8009964:	0008      	movs	r0, r1
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	f7f8 feca 	bl	8002700 <_close>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d103      	bne.n	8009978 <_close_r+0x1c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d000      	beq.n	8009978 <_close_r+0x1c>
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	bd70      	pop	{r4, r5, r6, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	20000368 	.word	0x20000368

08009980 <_fstat_r>:
 8009980:	2300      	movs	r3, #0
 8009982:	b570      	push	{r4, r5, r6, lr}
 8009984:	4c06      	ldr	r4, [pc, #24]	; (80099a0 <_fstat_r+0x20>)
 8009986:	0005      	movs	r5, r0
 8009988:	0008      	movs	r0, r1
 800998a:	0011      	movs	r1, r2
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	f7f8 ff09 	bl	80027a4 <_fstat>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	d103      	bne.n	800999e <_fstat_r+0x1e>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d000      	beq.n	800999e <_fstat_r+0x1e>
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	20000368 	.word	0x20000368

080099a4 <_isatty_r>:
 80099a4:	2300      	movs	r3, #0
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	4c06      	ldr	r4, [pc, #24]	; (80099c4 <_isatty_r+0x20>)
 80099aa:	0005      	movs	r5, r0
 80099ac:	0008      	movs	r0, r1
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	f7f8 fe62 	bl	8002678 <_isatty>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d103      	bne.n	80099c0 <_isatty_r+0x1c>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d000      	beq.n	80099c0 <_isatty_r+0x1c>
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	bd70      	pop	{r4, r5, r6, pc}
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	20000368 	.word	0x20000368

080099c8 <_lseek_r>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	0005      	movs	r5, r0
 80099cc:	0008      	movs	r0, r1
 80099ce:	0011      	movs	r1, r2
 80099d0:	2200      	movs	r2, #0
 80099d2:	4c06      	ldr	r4, [pc, #24]	; (80099ec <_lseek_r+0x24>)
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	001a      	movs	r2, r3
 80099d8:	f7f8 fea9 	bl	800272e <_lseek>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d103      	bne.n	80099e8 <_lseek_r+0x20>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d000      	beq.n	80099e8 <_lseek_r+0x20>
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	bd70      	pop	{r4, r5, r6, pc}
 80099ea:	46c0      	nop			; (mov r8, r8)
 80099ec:	20000368 	.word	0x20000368

080099f0 <memmove>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	4288      	cmp	r0, r1
 80099f4:	d902      	bls.n	80099fc <memmove+0xc>
 80099f6:	188b      	adds	r3, r1, r2
 80099f8:	4298      	cmp	r0, r3
 80099fa:	d303      	bcc.n	8009a04 <memmove+0x14>
 80099fc:	2300      	movs	r3, #0
 80099fe:	e007      	b.n	8009a10 <memmove+0x20>
 8009a00:	5c8b      	ldrb	r3, [r1, r2]
 8009a02:	5483      	strb	r3, [r0, r2]
 8009a04:	3a01      	subs	r2, #1
 8009a06:	d2fb      	bcs.n	8009a00 <memmove+0x10>
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	5ccc      	ldrb	r4, [r1, r3]
 8009a0c:	54c4      	strb	r4, [r0, r3]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d1fa      	bne.n	8009a0a <memmove+0x1a>
 8009a14:	e7f8      	b.n	8009a08 <memmove+0x18>

08009a16 <__malloc_lock>:
 8009a16:	4770      	bx	lr

08009a18 <__malloc_unlock>:
 8009a18:	4770      	bx	lr

08009a1a <_realloc_r>:
 8009a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1c:	0007      	movs	r7, r0
 8009a1e:	000d      	movs	r5, r1
 8009a20:	0016      	movs	r6, r2
 8009a22:	2900      	cmp	r1, #0
 8009a24:	d105      	bne.n	8009a32 <_realloc_r+0x18>
 8009a26:	0011      	movs	r1, r2
 8009a28:	f7ff fc0c 	bl	8009244 <_malloc_r>
 8009a2c:	0004      	movs	r4, r0
 8009a2e:	0020      	movs	r0, r4
 8009a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	d103      	bne.n	8009a3e <_realloc_r+0x24>
 8009a36:	f7ff fbbb 	bl	80091b0 <_free_r>
 8009a3a:	0034      	movs	r4, r6
 8009a3c:	e7f7      	b.n	8009a2e <_realloc_r+0x14>
 8009a3e:	f000 f827 	bl	8009a90 <_malloc_usable_size_r>
 8009a42:	002c      	movs	r4, r5
 8009a44:	42b0      	cmp	r0, r6
 8009a46:	d2f2      	bcs.n	8009a2e <_realloc_r+0x14>
 8009a48:	0031      	movs	r1, r6
 8009a4a:	0038      	movs	r0, r7
 8009a4c:	f7ff fbfa 	bl	8009244 <_malloc_r>
 8009a50:	1e04      	subs	r4, r0, #0
 8009a52:	d0ec      	beq.n	8009a2e <_realloc_r+0x14>
 8009a54:	0029      	movs	r1, r5
 8009a56:	0032      	movs	r2, r6
 8009a58:	f7fe ff9d 	bl	8008996 <memcpy>
 8009a5c:	0029      	movs	r1, r5
 8009a5e:	0038      	movs	r0, r7
 8009a60:	f7ff fba6 	bl	80091b0 <_free_r>
 8009a64:	e7e3      	b.n	8009a2e <_realloc_r+0x14>
	...

08009a68 <_read_r>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	0005      	movs	r5, r0
 8009a6c:	0008      	movs	r0, r1
 8009a6e:	0011      	movs	r1, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	4c06      	ldr	r4, [pc, #24]	; (8009a8c <_read_r+0x24>)
 8009a74:	6022      	str	r2, [r4, #0]
 8009a76:	001a      	movs	r2, r3
 8009a78:	f7f8 fe6a 	bl	8002750 <_read>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d103      	bne.n	8009a88 <_read_r+0x20>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d000      	beq.n	8009a88 <_read_r+0x20>
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	bd70      	pop	{r4, r5, r6, pc}
 8009a8a:	46c0      	nop			; (mov r8, r8)
 8009a8c:	20000368 	.word	0x20000368

08009a90 <_malloc_usable_size_r>:
 8009a90:	1f0b      	subs	r3, r1, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	1f18      	subs	r0, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da01      	bge.n	8009a9e <_malloc_usable_size_r+0xe>
 8009a9a:	580b      	ldr	r3, [r1, r0]
 8009a9c:	18c0      	adds	r0, r0, r3
 8009a9e:	4770      	bx	lr

08009aa0 <_init>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr

08009aac <_fini>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr
